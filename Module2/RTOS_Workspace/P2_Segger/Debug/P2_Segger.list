
P2_Segger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e68  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08006038  08006038  00016038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006170  08006170  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006170  08006170  00016170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006178  08006178  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006178  08006178  00016178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800617c  0800617c  0001617c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014464  20000078  080061f8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200144dc  080061f8  000244dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167da  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e2b  00000000  00000000  00036882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  000396b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  0003aa80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246d5  00000000  00000000  0003bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001622a  00000000  00000000  000603cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ded52  00000000  00000000  000765f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00155349  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056d8  00000000  00000000  0015539c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006020 	.word	0x08006020

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08006020 	.word	0x08006020

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012ef8 	.word	0x20012ef8
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000364:	f000 b974 	b.w	8000650 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	4604      	mov	r4, r0
 8000388:	468e      	mov	lr, r1
 800038a:	2b00      	cmp	r3, #0
 800038c:	d14d      	bne.n	800042a <__udivmoddi4+0xaa>
 800038e:	428a      	cmp	r2, r1
 8000390:	4694      	mov	ip, r2
 8000392:	d969      	bls.n	8000468 <__udivmoddi4+0xe8>
 8000394:	fab2 f282 	clz	r2, r2
 8000398:	b152      	cbz	r2, 80003b0 <__udivmoddi4+0x30>
 800039a:	fa01 f302 	lsl.w	r3, r1, r2
 800039e:	f1c2 0120 	rsb	r1, r2, #32
 80003a2:	fa20 f101 	lsr.w	r1, r0, r1
 80003a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003aa:	ea41 0e03 	orr.w	lr, r1, r3
 80003ae:	4094      	lsls	r4, r2
 80003b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003b4:	0c21      	lsrs	r1, r4, #16
 80003b6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ba:	fa1f f78c 	uxth.w	r7, ip
 80003be:	fb08 e316 	mls	r3, r8, r6, lr
 80003c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003c6:	fb06 f107 	mul.w	r1, r6, r7
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003d6:	f080 811f 	bcs.w	8000618 <__udivmoddi4+0x298>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 811c 	bls.w	8000618 <__udivmoddi4+0x298>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f4:	fb00 f707 	mul.w	r7, r0, r7
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x92>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	f080 810a 	bcs.w	800061c <__udivmoddi4+0x29c>
 8000408:	42a7      	cmp	r7, r4
 800040a:	f240 8107 	bls.w	800061c <__udivmoddi4+0x29c>
 800040e:	4464      	add	r4, ip
 8000410:	3802      	subs	r0, #2
 8000412:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000416:	1be4      	subs	r4, r4, r7
 8000418:	2600      	movs	r6, #0
 800041a:	b11d      	cbz	r5, 8000424 <__udivmoddi4+0xa4>
 800041c:	40d4      	lsrs	r4, r2
 800041e:	2300      	movs	r3, #0
 8000420:	e9c5 4300 	strd	r4, r3, [r5]
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0xc2>
 800042e:	2d00      	cmp	r5, #0
 8000430:	f000 80ef 	beq.w	8000612 <__udivmoddi4+0x292>
 8000434:	2600      	movs	r6, #0
 8000436:	e9c5 0100 	strd	r0, r1, [r5]
 800043a:	4630      	mov	r0, r6
 800043c:	4631      	mov	r1, r6
 800043e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000442:	fab3 f683 	clz	r6, r3
 8000446:	2e00      	cmp	r6, #0
 8000448:	d14a      	bne.n	80004e0 <__udivmoddi4+0x160>
 800044a:	428b      	cmp	r3, r1
 800044c:	d302      	bcc.n	8000454 <__udivmoddi4+0xd4>
 800044e:	4282      	cmp	r2, r0
 8000450:	f200 80f9 	bhi.w	8000646 <__udivmoddi4+0x2c6>
 8000454:	1a84      	subs	r4, r0, r2
 8000456:	eb61 0303 	sbc.w	r3, r1, r3
 800045a:	2001      	movs	r0, #1
 800045c:	469e      	mov	lr, r3
 800045e:	2d00      	cmp	r5, #0
 8000460:	d0e0      	beq.n	8000424 <__udivmoddi4+0xa4>
 8000462:	e9c5 4e00 	strd	r4, lr, [r5]
 8000466:	e7dd      	b.n	8000424 <__udivmoddi4+0xa4>
 8000468:	b902      	cbnz	r2, 800046c <__udivmoddi4+0xec>
 800046a:	deff      	udf	#255	; 0xff
 800046c:	fab2 f282 	clz	r2, r2
 8000470:	2a00      	cmp	r2, #0
 8000472:	f040 8092 	bne.w	800059a <__udivmoddi4+0x21a>
 8000476:	eba1 010c 	sub.w	r1, r1, ip
 800047a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047e:	fa1f fe8c 	uxth.w	lr, ip
 8000482:	2601      	movs	r6, #1
 8000484:	0c20      	lsrs	r0, r4, #16
 8000486:	fbb1 f3f7 	udiv	r3, r1, r7
 800048a:	fb07 1113 	mls	r1, r7, r3, r1
 800048e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000492:	fb0e f003 	mul.w	r0, lr, r3
 8000496:	4288      	cmp	r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x12c>
 800049a:	eb1c 0101 	adds.w	r1, ip, r1
 800049e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x12a>
 80004a4:	4288      	cmp	r0, r1
 80004a6:	f200 80cb 	bhi.w	8000640 <__udivmoddi4+0x2c0>
 80004aa:	4643      	mov	r3, r8
 80004ac:	1a09      	subs	r1, r1, r0
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b4:	fb07 1110 	mls	r1, r7, r0, r1
 80004b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004bc:	fb0e fe00 	mul.w	lr, lr, r0
 80004c0:	45a6      	cmp	lr, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x156>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004cc:	d202      	bcs.n	80004d4 <__udivmoddi4+0x154>
 80004ce:	45a6      	cmp	lr, r4
 80004d0:	f200 80bb 	bhi.w	800064a <__udivmoddi4+0x2ca>
 80004d4:	4608      	mov	r0, r1
 80004d6:	eba4 040e 	sub.w	r4, r4, lr
 80004da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x9a>
 80004e0:	f1c6 0720 	rsb	r7, r6, #32
 80004e4:	40b3      	lsls	r3, r6
 80004e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ee:	fa20 f407 	lsr.w	r4, r0, r7
 80004f2:	fa01 f306 	lsl.w	r3, r1, r6
 80004f6:	431c      	orrs	r4, r3
 80004f8:	40f9      	lsrs	r1, r7
 80004fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000502:	fbb1 f8f9 	udiv	r8, r1, r9
 8000506:	0c20      	lsrs	r0, r4, #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fb09 1118 	mls	r1, r9, r8, r1
 8000510:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000514:	fb08 f00e 	mul.w	r0, r8, lr
 8000518:	4288      	cmp	r0, r1
 800051a:	fa02 f206 	lsl.w	r2, r2, r6
 800051e:	d90b      	bls.n	8000538 <__udivmoddi4+0x1b8>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000528:	f080 8088 	bcs.w	800063c <__udivmoddi4+0x2bc>
 800052c:	4288      	cmp	r0, r1
 800052e:	f240 8085 	bls.w	800063c <__udivmoddi4+0x2bc>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	1a09      	subs	r1, r1, r0
 800053a:	b2a4      	uxth	r4, r4
 800053c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000540:	fb09 1110 	mls	r1, r9, r0, r1
 8000544:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000548:	fb00 fe0e 	mul.w	lr, r0, lr
 800054c:	458e      	cmp	lr, r1
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x1e2>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000558:	d26c      	bcs.n	8000634 <__udivmoddi4+0x2b4>
 800055a:	458e      	cmp	lr, r1
 800055c:	d96a      	bls.n	8000634 <__udivmoddi4+0x2b4>
 800055e:	3802      	subs	r0, #2
 8000560:	4461      	add	r1, ip
 8000562:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000566:	fba0 9402 	umull	r9, r4, r0, r2
 800056a:	eba1 010e 	sub.w	r1, r1, lr
 800056e:	42a1      	cmp	r1, r4
 8000570:	46c8      	mov	r8, r9
 8000572:	46a6      	mov	lr, r4
 8000574:	d356      	bcc.n	8000624 <__udivmoddi4+0x2a4>
 8000576:	d053      	beq.n	8000620 <__udivmoddi4+0x2a0>
 8000578:	b15d      	cbz	r5, 8000592 <__udivmoddi4+0x212>
 800057a:	ebb3 0208 	subs.w	r2, r3, r8
 800057e:	eb61 010e 	sbc.w	r1, r1, lr
 8000582:	fa01 f707 	lsl.w	r7, r1, r7
 8000586:	fa22 f306 	lsr.w	r3, r2, r6
 800058a:	40f1      	lsrs	r1, r6
 800058c:	431f      	orrs	r7, r3
 800058e:	e9c5 7100 	strd	r7, r1, [r5]
 8000592:	2600      	movs	r6, #0
 8000594:	4631      	mov	r1, r6
 8000596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	40d8      	lsrs	r0, r3
 80005a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005a4:	fa21 f303 	lsr.w	r3, r1, r3
 80005a8:	4091      	lsls	r1, r2
 80005aa:	4301      	orrs	r1, r0
 80005ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b0:	fa1f fe8c 	uxth.w	lr, ip
 80005b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005b8:	fb07 3610 	mls	r6, r7, r0, r3
 80005bc:	0c0b      	lsrs	r3, r1, #16
 80005be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005c2:	fb00 f60e 	mul.w	r6, r0, lr
 80005c6:	429e      	cmp	r6, r3
 80005c8:	fa04 f402 	lsl.w	r4, r4, r2
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x260>
 80005ce:	eb1c 0303 	adds.w	r3, ip, r3
 80005d2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005d6:	d22f      	bcs.n	8000638 <__udivmoddi4+0x2b8>
 80005d8:	429e      	cmp	r6, r3
 80005da:	d92d      	bls.n	8000638 <__udivmoddi4+0x2b8>
 80005dc:	3802      	subs	r0, #2
 80005de:	4463      	add	r3, ip
 80005e0:	1b9b      	subs	r3, r3, r6
 80005e2:	b289      	uxth	r1, r1
 80005e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005e8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f0:	fb06 f30e 	mul.w	r3, r6, lr
 80005f4:	428b      	cmp	r3, r1
 80005f6:	d908      	bls.n	800060a <__udivmoddi4+0x28a>
 80005f8:	eb1c 0101 	adds.w	r1, ip, r1
 80005fc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000600:	d216      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 8000602:	428b      	cmp	r3, r1
 8000604:	d914      	bls.n	8000630 <__udivmoddi4+0x2b0>
 8000606:	3e02      	subs	r6, #2
 8000608:	4461      	add	r1, ip
 800060a:	1ac9      	subs	r1, r1, r3
 800060c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000610:	e738      	b.n	8000484 <__udivmoddi4+0x104>
 8000612:	462e      	mov	r6, r5
 8000614:	4628      	mov	r0, r5
 8000616:	e705      	b.n	8000424 <__udivmoddi4+0xa4>
 8000618:	4606      	mov	r6, r0
 800061a:	e6e3      	b.n	80003e4 <__udivmoddi4+0x64>
 800061c:	4618      	mov	r0, r3
 800061e:	e6f8      	b.n	8000412 <__udivmoddi4+0x92>
 8000620:	454b      	cmp	r3, r9
 8000622:	d2a9      	bcs.n	8000578 <__udivmoddi4+0x1f8>
 8000624:	ebb9 0802 	subs.w	r8, r9, r2
 8000628:	eb64 0e0c 	sbc.w	lr, r4, ip
 800062c:	3801      	subs	r0, #1
 800062e:	e7a3      	b.n	8000578 <__udivmoddi4+0x1f8>
 8000630:	4646      	mov	r6, r8
 8000632:	e7ea      	b.n	800060a <__udivmoddi4+0x28a>
 8000634:	4620      	mov	r0, r4
 8000636:	e794      	b.n	8000562 <__udivmoddi4+0x1e2>
 8000638:	4640      	mov	r0, r8
 800063a:	e7d1      	b.n	80005e0 <__udivmoddi4+0x260>
 800063c:	46d0      	mov	r8, sl
 800063e:	e77b      	b.n	8000538 <__udivmoddi4+0x1b8>
 8000640:	3b02      	subs	r3, #2
 8000642:	4461      	add	r1, ip
 8000644:	e732      	b.n	80004ac <__udivmoddi4+0x12c>
 8000646:	4630      	mov	r0, r6
 8000648:	e709      	b.n	800045e <__udivmoddi4+0xde>
 800064a:	4464      	add	r4, ip
 800064c:	3802      	subs	r0, #2
 800064e:	e742      	b.n	80004d6 <__udivmoddi4+0x156>

08000650 <__aeabi_idiv0>:
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fb1f 	bl	8000c9c <HAL_Init>

  BaseType_t status;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f859 	bl	8000714 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  TaskHandle_t xTaskHanle1 =NULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
    TaskHandle_t xTaskHanle2 =NULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61bb      	str	r3, [r7, #24]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066a:	f000 f8eb 	bl	8000844 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800066e:	f000 f8bf 	bl	80007f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //  Enable CYCCNT counter
    	  	  DWT_CTRL |= (1<<0);
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <main+0xa4>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <main+0xa4>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6013      	str	r3, [r2, #0]

    	  	  SEGGER_SYSVIEW_Conf();
 800067e:	f003 fa91 	bl	8003ba4 <SEGGER_SYSVIEW_Conf>
    	  	  SEGGER_SYSVIEW_Start();
 8000682:	f004 fc57 	bl	8004f34 <SEGGER_SYSVIEW_Start>

    	  	  status=xTaskCreate(task1_handler,"Task-1", 200,"Hello world from Task-1" , 2, &task1_handle);
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	2302      	movs	r3, #2
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <main+0xa8>)
 8000692:	22c8      	movs	r2, #200	; 0xc8
 8000694:	491a      	ldr	r1, [pc, #104]	; (8000700 <main+0xac>)
 8000696:	481b      	ldr	r0, [pc, #108]	; (8000704 <main+0xb0>)
 8000698:	f002 f9d7 	bl	8002a4a <xTaskCreate>
 800069c:	6178      	str	r0, [r7, #20]
      	  configASSERT(status== pdPASS);
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d00a      	beq.n	80006ba <main+0x66>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a8:	f383 8811 	msr	BASEPRI, r3
 80006ac:	f3bf 8f6f 	isb	sy
 80006b0:	f3bf 8f4f 	dsb	sy
 80006b4:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006b6:	bf00      	nop
 80006b8:	e7fe      	b.n	80006b8 <main+0x64>

      	  status=xTaskCreate(task2_handler,"Task-2", 200,"Hello world from Task-2" , 2, &task2_handle);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	2302      	movs	r3, #2
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <main+0xb4>)
 80006c4:	22c8      	movs	r2, #200	; 0xc8
 80006c6:	4911      	ldr	r1, [pc, #68]	; (800070c <main+0xb8>)
 80006c8:	4811      	ldr	r0, [pc, #68]	; (8000710 <main+0xbc>)
 80006ca:	f002 f9be 	bl	8002a4a <xTaskCreate>
 80006ce:	6178      	str	r0, [r7, #20]
      	  configASSERT(status== pdPASS);
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d00a      	beq.n	80006ec <main+0x98>
        __asm volatile
 80006d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006da:	f383 8811 	msr	BASEPRI, r3
 80006de:	f3bf 8f6f 	isb	sy
 80006e2:	f3bf 8f4f 	dsb	sy
 80006e6:	60fb      	str	r3, [r7, #12]
    }
 80006e8:	bf00      	nop
 80006ea:	e7fe      	b.n	80006ea <main+0x96>


      	  vTaskStartScheduler();
 80006ec:	f002 fae4 	bl	8002cb8 <vTaskStartScheduler>
  vTaskStartScheduler();
 80006f0:	f002 fae2 	bl	8002cb8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <main+0xa0>
 80006f6:	bf00      	nop
 80006f8:	e0001000 	.word	0xe0001000
 80006fc:	08006038 	.word	0x08006038
 8000700:	08006050 	.word	0x08006050
 8000704:	08000921 	.word	0x08000921
 8000708:	08006058 	.word	0x08006058
 800070c:	08006070 	.word	0x08006070
 8000710:	08000949 	.word	0x08000949

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2234      	movs	r2, #52	; 0x34
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f005 f800 	bl	8005728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <SystemClock_Config+0xd4>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a29      	ldr	r2, [pc, #164]	; (80007e8 <SystemClock_Config+0xd4>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <SystemClock_Config+0xd4>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000754:	2300      	movs	r3, #0
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	4b24      	ldr	r3, [pc, #144]	; (80007ec <SystemClock_Config+0xd8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000760:	4a22      	ldr	r2, [pc, #136]	; (80007ec <SystemClock_Config+0xd8>)
 8000762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b20      	ldr	r3, [pc, #128]	; (80007ec <SystemClock_Config+0xd8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	2310      	movs	r3, #16
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000780:	2302      	movs	r3, #2
 8000782:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000784:	2300      	movs	r3, #0
 8000786:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000788:	2310      	movs	r3, #16
 800078a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800078c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000790:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000792:	2304      	movs	r3, #4
 8000794:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000796:	2302      	movs	r3, #2
 8000798:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079a:	2302      	movs	r3, #2
 800079c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 f8c8 	bl	8001938 <HAL_RCC_OscConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ae:	f000 f8f1 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	230f      	movs	r3, #15
 80007b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	2302      	movs	r3, #2
 80007b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	2102      	movs	r1, #2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 fd36 	bl	8001240 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007da:	f000 f8db 	bl	8000994 <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3750      	adds	r7, #80	; 0x50
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_USART2_UART_Init+0x4c>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	; (8000840 <MX_USART2_UART_Init+0x50>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_USART2_UART_Init+0x4c>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_USART2_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000828:	f001 fdd2 	bl	80023d0 <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000832:	f000 f8af 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000094 	.word	0x20000094
 8000840:	40004400 	.word	0x40004400

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a2c      	ldr	r2, [pc, #176]	; (8000914 <MX_GPIO_Init+0xd0>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b2a      	ldr	r3, [pc, #168]	; (8000914 <MX_GPIO_Init+0xd0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <MX_GPIO_Init+0xd0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a25      	ldr	r2, [pc, #148]	; (8000914 <MX_GPIO_Init+0xd0>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b23      	ldr	r3, [pc, #140]	; (8000914 <MX_GPIO_Init+0xd0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a1e      	ldr	r2, [pc, #120]	; (8000914 <MX_GPIO_Init+0xd0>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_GPIO_Init+0xd0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_GPIO_Init+0xd0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <MX_GPIO_Init+0xd0>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_GPIO_Init+0xd0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2120      	movs	r1, #32
 80008ce:	4812      	ldr	r0, [pc, #72]	; (8000918 <MX_GPIO_Init+0xd4>)
 80008d0:	f000 fc9c 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	480c      	ldr	r0, [pc, #48]	; (800091c <MX_GPIO_Init+0xd8>)
 80008ec:	f000 fafa 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008f0:	2320      	movs	r3, #32
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_GPIO_Init+0xd4>)
 8000908:	f000 faec 	bl	8000ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	; 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40020000 	.word	0x40020000
 800091c:	40020800 	.word	0x40020800

08000920 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void * parameters)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b09c      	sub	sp, #112	; 0x70
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	char  msg[100];
	while(1)
	{
		//printf("%s\n",(char*)parameters);
		snprintf(msg,100,"%s\n",(char*)parameters);
 8000928:	f107 000c 	add.w	r0, r7, #12
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a05      	ldr	r2, [pc, #20]	; (8000944 <task1_handler+0x24>)
 8000930:	2164      	movs	r1, #100	; 0x64
 8000932:	f004 ff01 	bl	8005738 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	4618      	mov	r0, r3
 800093c:	f004 fea8 	bl	8005690 <SEGGER_SYSVIEW_PrintfTarget>
	{
 8000940:	e7f2      	b.n	8000928 <task1_handler+0x8>
 8000942:	bf00      	nop
 8000944:	08006078 	.word	0x08006078

08000948 <task2_handler>:
	}
}


static void task2_handler(void * parameters)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b09c      	sub	sp, #112	; 0x70
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	char  msg[100];
	while(1)
		{
		//printf("%s\n",(char*)parameters);
		snprintf(msg,100,"%s\n",(char*)parameters);
 8000950:	f107 000c 	add.w	r0, r7, #12
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a05      	ldr	r2, [pc, #20]	; (800096c <task2_handler+0x24>)
 8000958:	2164      	movs	r1, #100	; 0x64
 800095a:	f004 feed 	bl	8005738 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	4618      	mov	r0, r3
 8000964:	f004 fe94 	bl	8005690 <SEGGER_SYSVIEW_PrintfTarget>
		{
 8000968:	e7f2      	b.n	8000950 <task2_handler+0x8>
 800096a:	bf00      	nop
 800096c:	08006078 	.word	0x08006078

08000970 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d101      	bne.n	8000986 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000982:	f000 f9ad 	bl	8000ce0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40000c00 	.word	0x40000c00

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	e7fe      	b.n	800099c <Error_Handler+0x8>
	...

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <HAL_MspInit+0x4c>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	; 0x44
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a08      	ldr	r2, [pc, #32]	; (80009ec <HAL_MspInit+0x4c>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
vInitPrioGroupValue();
 80009de:	f002 fd33 	bl	8003448 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800

080009f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <HAL_UART_MspInit+0x84>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d12b      	bne.n	8000a6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a4a:	230c      	movs	r3, #12
 8000a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a5a:	2307      	movs	r3, #7
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <HAL_UART_MspInit+0x8c>)
 8000a66:	f000 fa3d 	bl	8000ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40004400 	.word	0x40004400
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020000 	.word	0x40020000

08000a80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08e      	sub	sp, #56	; 0x38
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	4b33      	ldr	r3, [pc, #204]	; (8000b64 <HAL_InitTick+0xe4>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	4a32      	ldr	r2, [pc, #200]	; (8000b64 <HAL_InitTick+0xe4>)
 8000a9a:	f043 0308 	orr.w	r3, r3, #8
 8000a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa0:	4b30      	ldr	r3, [pc, #192]	; (8000b64 <HAL_InitTick+0xe4>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	f003 0308 	and.w	r3, r3, #8
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aac:	f107 0210 	add.w	r2, r7, #16
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fcdc 	bl	8001474 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000abc:	6a3b      	ldr	r3, [r7, #32]
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d103      	bne.n	8000ace <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ac6:	f000 fcad 	bl	8001424 <HAL_RCC_GetPCLK1Freq>
 8000aca:	6378      	str	r0, [r7, #52]	; 0x34
 8000acc:	e004      	b.n	8000ad8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ace:	f000 fca9 	bl	8001424 <HAL_RCC_GetPCLK1Freq>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ada:	4a23      	ldr	r2, [pc, #140]	; (8000b68 <HAL_InitTick+0xe8>)
 8000adc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae0:	0c9b      	lsrs	r3, r3, #18
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <HAL_InitTick+0xec>)
 8000ae8:	4a21      	ldr	r2, [pc, #132]	; (8000b70 <HAL_InitTick+0xf0>)
 8000aea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000aec:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <HAL_InitTick+0xec>)
 8000aee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000af2:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000af4:	4a1d      	ldr	r2, [pc, #116]	; (8000b6c <HAL_InitTick+0xec>)
 8000af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af8:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <HAL_InitTick+0xec>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <HAL_InitTick+0xec>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <HAL_InitTick+0xec>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000b0c:	4817      	ldr	r0, [pc, #92]	; (8000b6c <HAL_InitTick+0xec>)
 8000b0e:	f001 f9b1 	bl	8001e74 <HAL_TIM_Base_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d11b      	bne.n	8000b58 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000b20:	4812      	ldr	r0, [pc, #72]	; (8000b6c <HAL_InitTick+0xec>)
 8000b22:	f001 fa01 	bl	8001f28 <HAL_TIM_Base_Start_IT>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d111      	bne.n	8000b58 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b34:	2032      	movs	r0, #50	; 0x32
 8000b36:	f000 f9c7 	bl	8000ec8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d808      	bhi.n	8000b52 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	2032      	movs	r0, #50	; 0x32
 8000b46:	f000 f9a3 	bl	8000e90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <HAL_InitTick+0xf4>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6013      	str	r3, [r2, #0]
 8000b50:	e002      	b.n	8000b58 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3738      	adds	r7, #56	; 0x38
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	431bde83 	.word	0x431bde83
 8000b6c:	200000d8 	.word	0x200000d8
 8000b70:	40000c00 	.word	0x40000c00
 8000b74:	20000004 	.word	0x20000004

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler+0x4>

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <TIM5_IRQHandler+0x10>)
 8000baa:	f001 fa2d 	bl	8002008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000d8 	.word	0x200000d8

08000bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc0:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <_sbrk+0x5c>)
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <_sbrk+0x60>)
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <_sbrk+0x64>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <_sbrk+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d207      	bcs.n	8000bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be8:	f004 fd66 	bl	80056b8 <__errno>
 8000bec:	4603      	mov	r3, r0
 8000bee:	220c      	movs	r2, #12
 8000bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bf6:	e009      	b.n	8000c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <_sbrk+0x64>)
 8000c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20020000 	.word	0x20020000
 8000c18:	00000400 	.word	0x00000400
 8000c1c:	20000120 	.word	0x20000120
 8000c20:	200144e0 	.word	0x200144e0

08000c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <SystemInit+0x20>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <SystemInit+0x20>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c4e:	490e      	ldr	r1, [pc, #56]	; (8000c88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c50:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c64:	4c0b      	ldr	r4, [pc, #44]	; (8000c94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c72:	f7ff ffd7 	bl	8000c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c76:	f004 fd25 	bl	80056c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7a:	f7ff fceb 	bl	8000654 <main>
  bx  lr    
 8000c7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c8c:	08006180 	.word	0x08006180
  ldr r2, =_sbss
 8000c90:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c94:	200144dc 	.word	0x200144dc

08000c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC_IRQHandler>
	...

08000c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <HAL_Init+0x40>)
 8000ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <HAL_Init+0x40>)
 8000cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_Init+0x40>)
 8000cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 f8d8 	bl	8000e7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fed8 	bl	8000a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd0:	f7ff fe66 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023c00 	.word	0x40023c00

08000ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x20>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_IncTick+0x24>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <HAL_IncTick+0x24>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000124 	.word	0x20000124

08000d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_GetTick+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000124 	.word	0x20000124

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4907      	ldr	r1, [pc, #28]	; (8000dbc <__NVIC_EnableIRQ+0x38>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	; (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ff4c 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea2:	f7ff ff61 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000ea6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	68b9      	ldr	r1, [r7, #8]
 8000eac:	6978      	ldr	r0, [r7, #20]
 8000eae:	f7ff ffb1 	bl	8000e14 <NVIC_EncodePriority>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff80 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000ec0:	bf00      	nop
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff54 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	e165      	b.n	80011cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f00:	2201      	movs	r2, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	f040 8154 	bne.w	80011c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d005      	beq.n	8000f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d130      	bne.n	8000f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	091b      	lsrs	r3, r3, #4
 8000f82:	f003 0201 	and.w	r2, r3, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d017      	beq.n	8000fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d123      	bne.n	8001028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	691a      	ldr	r2, [r3, #16]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	69b9      	ldr	r1, [r7, #24]
 8001024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0203 	and.w	r2, r3, #3
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 80ae 	beq.w	80011c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b5d      	ldr	r3, [pc, #372]	; (80011e4 <HAL_GPIO_Init+0x300>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a5c      	ldr	r2, [pc, #368]	; (80011e4 <HAL_GPIO_Init+0x300>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b5a      	ldr	r3, [pc, #360]	; (80011e4 <HAL_GPIO_Init+0x300>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001086:	4a58      	ldr	r2, [pc, #352]	; (80011e8 <HAL_GPIO_Init+0x304>)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3302      	adds	r3, #2
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4f      	ldr	r2, [pc, #316]	; (80011ec <HAL_GPIO_Init+0x308>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d025      	beq.n	80010fe <HAL_GPIO_Init+0x21a>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4e      	ldr	r2, [pc, #312]	; (80011f0 <HAL_GPIO_Init+0x30c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d01f      	beq.n	80010fa <HAL_GPIO_Init+0x216>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4d      	ldr	r2, [pc, #308]	; (80011f4 <HAL_GPIO_Init+0x310>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d019      	beq.n	80010f6 <HAL_GPIO_Init+0x212>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4c      	ldr	r2, [pc, #304]	; (80011f8 <HAL_GPIO_Init+0x314>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d013      	beq.n	80010f2 <HAL_GPIO_Init+0x20e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4b      	ldr	r2, [pc, #300]	; (80011fc <HAL_GPIO_Init+0x318>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d00d      	beq.n	80010ee <HAL_GPIO_Init+0x20a>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4a      	ldr	r2, [pc, #296]	; (8001200 <HAL_GPIO_Init+0x31c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d007      	beq.n	80010ea <HAL_GPIO_Init+0x206>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a49      	ldr	r2, [pc, #292]	; (8001204 <HAL_GPIO_Init+0x320>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d101      	bne.n	80010e6 <HAL_GPIO_Init+0x202>
 80010e2:	2306      	movs	r3, #6
 80010e4:	e00c      	b.n	8001100 <HAL_GPIO_Init+0x21c>
 80010e6:	2307      	movs	r3, #7
 80010e8:	e00a      	b.n	8001100 <HAL_GPIO_Init+0x21c>
 80010ea:	2305      	movs	r3, #5
 80010ec:	e008      	b.n	8001100 <HAL_GPIO_Init+0x21c>
 80010ee:	2304      	movs	r3, #4
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x21c>
 80010f2:	2303      	movs	r3, #3
 80010f4:	e004      	b.n	8001100 <HAL_GPIO_Init+0x21c>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_Init+0x21c>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <HAL_GPIO_Init+0x21c>
 80010fe:	2300      	movs	r3, #0
 8001100:	69fa      	ldr	r2, [r7, #28]
 8001102:	f002 0203 	and.w	r2, r2, #3
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	4093      	lsls	r3, r2
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001110:	4935      	ldr	r1, [pc, #212]	; (80011e8 <HAL_GPIO_Init+0x304>)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800111e:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <HAL_GPIO_Init+0x324>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001142:	4a31      	ldr	r2, [pc, #196]	; (8001208 <HAL_GPIO_Init+0x324>)
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001148:	4b2f      	ldr	r3, [pc, #188]	; (8001208 <HAL_GPIO_Init+0x324>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800116c:	4a26      	ldr	r2, [pc, #152]	; (8001208 <HAL_GPIO_Init+0x324>)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <HAL_GPIO_Init+0x324>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001196:	4a1c      	ldr	r2, [pc, #112]	; (8001208 <HAL_GPIO_Init+0x324>)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <HAL_GPIO_Init+0x324>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c0:	4a11      	ldr	r2, [pc, #68]	; (8001208 <HAL_GPIO_Init+0x324>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3301      	adds	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	2b0f      	cmp	r3, #15
 80011d0:	f67f ae96 	bls.w	8000f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40013800 	.word	0x40013800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40020800 	.word	0x40020800
 80011f8:	40020c00 	.word	0x40020c00
 80011fc:	40021000 	.word	0x40021000
 8001200:	40021400 	.word	0x40021400
 8001204:	40021800 	.word	0x40021800
 8001208:	40013c00 	.word	0x40013c00

0800120c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
 8001218:	4613      	mov	r3, r2
 800121a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800121c:	787b      	ldrb	r3, [r7, #1]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001222:	887a      	ldrh	r2, [r7, #2]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001228:	e003      	b.n	8001232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	041a      	lsls	r2, r3, #16
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	619a      	str	r2, [r3, #24]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d101      	bne.n	8001254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e0cc      	b.n	80013ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001254:	4b68      	ldr	r3, [pc, #416]	; (80013f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 030f 	and.w	r3, r3, #15
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d90c      	bls.n	800127c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001262:	4b65      	ldr	r3, [pc, #404]	; (80013f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800126a:	4b63      	ldr	r3, [pc, #396]	; (80013f8 <HAL_RCC_ClockConfig+0x1b8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d001      	beq.n	800127c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e0b8      	b.n	80013ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d020      	beq.n	80012ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d005      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001294:	4b59      	ldr	r3, [pc, #356]	; (80013fc <HAL_RCC_ClockConfig+0x1bc>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	4a58      	ldr	r2, [pc, #352]	; (80013fc <HAL_RCC_ClockConfig+0x1bc>)
 800129a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800129e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d005      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012ac:	4b53      	ldr	r3, [pc, #332]	; (80013fc <HAL_RCC_ClockConfig+0x1bc>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	4a52      	ldr	r2, [pc, #328]	; (80013fc <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012b8:	4b50      	ldr	r3, [pc, #320]	; (80013fc <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	494d      	ldr	r1, [pc, #308]	; (80013fc <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d044      	beq.n	8001360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d107      	bne.n	80012ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012de:	4b47      	ldr	r3, [pc, #284]	; (80013fc <HAL_RCC_ClockConfig+0x1bc>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d119      	bne.n	800131e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e07f      	b.n	80013ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d003      	beq.n	80012fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d107      	bne.n	800130e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012fe:	4b3f      	ldr	r3, [pc, #252]	; (80013fc <HAL_RCC_ClockConfig+0x1bc>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d109      	bne.n	800131e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e06f      	b.n	80013ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130e:	4b3b      	ldr	r3, [pc, #236]	; (80013fc <HAL_RCC_ClockConfig+0x1bc>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e067      	b.n	80013ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800131e:	4b37      	ldr	r3, [pc, #220]	; (80013fc <HAL_RCC_ClockConfig+0x1bc>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f023 0203 	bic.w	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	4934      	ldr	r1, [pc, #208]	; (80013fc <HAL_RCC_ClockConfig+0x1bc>)
 800132c:	4313      	orrs	r3, r2
 800132e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001330:	f7ff fcea 	bl	8000d08 <HAL_GetTick>
 8001334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001336:	e00a      	b.n	800134e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001338:	f7ff fce6 	bl	8000d08 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	f241 3288 	movw	r2, #5000	; 0x1388
 8001346:	4293      	cmp	r3, r2
 8001348:	d901      	bls.n	800134e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e04f      	b.n	80013ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134e:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <HAL_RCC_ClockConfig+0x1bc>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 020c 	and.w	r2, r3, #12
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	429a      	cmp	r2, r3
 800135e:	d1eb      	bne.n	8001338 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001360:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 030f 	and.w	r3, r3, #15
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d20c      	bcs.n	8001388 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800136e:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	d001      	beq.n	8001388 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e032      	b.n	80013ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b00      	cmp	r3, #0
 8001392:	d008      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HAL_RCC_ClockConfig+0x1bc>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	4916      	ldr	r1, [pc, #88]	; (80013fc <HAL_RCC_ClockConfig+0x1bc>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d009      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_RCC_ClockConfig+0x1bc>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	490e      	ldr	r1, [pc, #56]	; (80013fc <HAL_RCC_ClockConfig+0x1bc>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013c6:	f000 f887 	bl	80014d8 <HAL_RCC_GetSysClockFreq>
 80013ca:	4602      	mov	r2, r0
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_RCC_ClockConfig+0x1bc>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	091b      	lsrs	r3, r3, #4
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	490a      	ldr	r1, [pc, #40]	; (8001400 <HAL_RCC_ClockConfig+0x1c0>)
 80013d8:	5ccb      	ldrb	r3, [r1, r3]
 80013da:	fa22 f303 	lsr.w	r3, r2, r3
 80013de:	4a09      	ldr	r2, [pc, #36]	; (8001404 <HAL_RCC_ClockConfig+0x1c4>)
 80013e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_RCC_ClockConfig+0x1c8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fb4a 	bl	8000a80 <HAL_InitTick>

  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023c00 	.word	0x40023c00
 80013fc:	40023800 	.word	0x40023800
 8001400:	080060ec 	.word	0x080060ec
 8001404:	20000000 	.word	0x20000000
 8001408:	20000004 	.word	0x20000004

0800140c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <HAL_RCC_GetHCLKFreq+0x14>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000000 	.word	0x20000000

08001424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001428:	f7ff fff0 	bl	800140c <HAL_RCC_GetHCLKFreq>
 800142c:	4602      	mov	r2, r0
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	0a9b      	lsrs	r3, r3, #10
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	4903      	ldr	r1, [pc, #12]	; (8001448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800143a:	5ccb      	ldrb	r3, [r1, r3]
 800143c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001440:	4618      	mov	r0, r3
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40023800 	.word	0x40023800
 8001448:	080060fc 	.word	0x080060fc

0800144c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001450:	f7ff ffdc 	bl	800140c <HAL_RCC_GetHCLKFreq>
 8001454:	4602      	mov	r2, r0
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	0b5b      	lsrs	r3, r3, #13
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	4903      	ldr	r1, [pc, #12]	; (8001470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001462:	5ccb      	ldrb	r3, [r1, r3]
 8001464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001468:	4618      	mov	r0, r3
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800
 8001470:	080060fc 	.word	0x080060fc

08001474 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	220f      	movs	r2, #15
 8001482:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_RCC_GetClockConfig+0x5c>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 0203 	and.w	r2, r3, #3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <HAL_RCC_GetClockConfig+0x5c>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <HAL_RCC_GetClockConfig+0x5c>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <HAL_RCC_GetClockConfig+0x5c>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	08db      	lsrs	r3, r3, #3
 80014ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <HAL_RCC_GetClockConfig+0x60>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 020f 	and.w	r2, r3, #15
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	601a      	str	r2, [r3, #0]
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40023c00 	.word	0x40023c00

080014d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014dc:	b0ae      	sub	sp, #184	; 0xb8
 80014de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014fe:	4bcb      	ldr	r3, [pc, #812]	; (800182c <HAL_RCC_GetSysClockFreq+0x354>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 030c 	and.w	r3, r3, #12
 8001506:	2b0c      	cmp	r3, #12
 8001508:	f200 8206 	bhi.w	8001918 <HAL_RCC_GetSysClockFreq+0x440>
 800150c:	a201      	add	r2, pc, #4	; (adr r2, 8001514 <HAL_RCC_GetSysClockFreq+0x3c>)
 800150e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001512:	bf00      	nop
 8001514:	08001549 	.word	0x08001549
 8001518:	08001919 	.word	0x08001919
 800151c:	08001919 	.word	0x08001919
 8001520:	08001919 	.word	0x08001919
 8001524:	08001551 	.word	0x08001551
 8001528:	08001919 	.word	0x08001919
 800152c:	08001919 	.word	0x08001919
 8001530:	08001919 	.word	0x08001919
 8001534:	08001559 	.word	0x08001559
 8001538:	08001919 	.word	0x08001919
 800153c:	08001919 	.word	0x08001919
 8001540:	08001919 	.word	0x08001919
 8001544:	08001749 	.word	0x08001749
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001548:	4bb9      	ldr	r3, [pc, #740]	; (8001830 <HAL_RCC_GetSysClockFreq+0x358>)
 800154a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800154e:	e1e7      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001550:	4bb8      	ldr	r3, [pc, #736]	; (8001834 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001552:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001556:	e1e3      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001558:	4bb4      	ldr	r3, [pc, #720]	; (800182c <HAL_RCC_GetSysClockFreq+0x354>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001560:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001564:	4bb1      	ldr	r3, [pc, #708]	; (800182c <HAL_RCC_GetSysClockFreq+0x354>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d071      	beq.n	8001654 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001570:	4bae      	ldr	r3, [pc, #696]	; (800182c <HAL_RCC_GetSysClockFreq+0x354>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	099b      	lsrs	r3, r3, #6
 8001576:	2200      	movs	r2, #0
 8001578:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800157c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001580:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001588:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001592:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001596:	4622      	mov	r2, r4
 8001598:	462b      	mov	r3, r5
 800159a:	f04f 0000 	mov.w	r0, #0
 800159e:	f04f 0100 	mov.w	r1, #0
 80015a2:	0159      	lsls	r1, r3, #5
 80015a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015a8:	0150      	lsls	r0, r2, #5
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4621      	mov	r1, r4
 80015b0:	1a51      	subs	r1, r2, r1
 80015b2:	6439      	str	r1, [r7, #64]	; 0x40
 80015b4:	4629      	mov	r1, r5
 80015b6:	eb63 0301 	sbc.w	r3, r3, r1
 80015ba:	647b      	str	r3, [r7, #68]	; 0x44
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80015c8:	4649      	mov	r1, r9
 80015ca:	018b      	lsls	r3, r1, #6
 80015cc:	4641      	mov	r1, r8
 80015ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015d2:	4641      	mov	r1, r8
 80015d4:	018a      	lsls	r2, r1, #6
 80015d6:	4641      	mov	r1, r8
 80015d8:	1a51      	subs	r1, r2, r1
 80015da:	63b9      	str	r1, [r7, #56]	; 0x38
 80015dc:	4649      	mov	r1, r9
 80015de:	eb63 0301 	sbc.w	r3, r3, r1
 80015e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80015f0:	4649      	mov	r1, r9
 80015f2:	00cb      	lsls	r3, r1, #3
 80015f4:	4641      	mov	r1, r8
 80015f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015fa:	4641      	mov	r1, r8
 80015fc:	00ca      	lsls	r2, r1, #3
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	4603      	mov	r3, r0
 8001604:	4622      	mov	r2, r4
 8001606:	189b      	adds	r3, r3, r2
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
 800160a:	462b      	mov	r3, r5
 800160c:	460a      	mov	r2, r1
 800160e:	eb42 0303 	adc.w	r3, r2, r3
 8001612:	637b      	str	r3, [r7, #52]	; 0x34
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001620:	4629      	mov	r1, r5
 8001622:	024b      	lsls	r3, r1, #9
 8001624:	4621      	mov	r1, r4
 8001626:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800162a:	4621      	mov	r1, r4
 800162c:	024a      	lsls	r2, r1, #9
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001636:	2200      	movs	r2, #0
 8001638:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800163c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001640:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001644:	f7fe fe84 	bl	8000350 <__aeabi_uldivmod>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4613      	mov	r3, r2
 800164e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001652:	e067      	b.n	8001724 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001654:	4b75      	ldr	r3, [pc, #468]	; (800182c <HAL_RCC_GetSysClockFreq+0x354>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	099b      	lsrs	r3, r3, #6
 800165a:	2200      	movs	r2, #0
 800165c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001660:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001664:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800166c:	67bb      	str	r3, [r7, #120]	; 0x78
 800166e:	2300      	movs	r3, #0
 8001670:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001672:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001676:	4622      	mov	r2, r4
 8001678:	462b      	mov	r3, r5
 800167a:	f04f 0000 	mov.w	r0, #0
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	0159      	lsls	r1, r3, #5
 8001684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001688:	0150      	lsls	r0, r2, #5
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4621      	mov	r1, r4
 8001690:	1a51      	subs	r1, r2, r1
 8001692:	62b9      	str	r1, [r7, #40]	; 0x28
 8001694:	4629      	mov	r1, r5
 8001696:	eb63 0301 	sbc.w	r3, r3, r1
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80016a8:	4649      	mov	r1, r9
 80016aa:	018b      	lsls	r3, r1, #6
 80016ac:	4641      	mov	r1, r8
 80016ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016b2:	4641      	mov	r1, r8
 80016b4:	018a      	lsls	r2, r1, #6
 80016b6:	4641      	mov	r1, r8
 80016b8:	ebb2 0a01 	subs.w	sl, r2, r1
 80016bc:	4649      	mov	r1, r9
 80016be:	eb63 0b01 	sbc.w	fp, r3, r1
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016ce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80016d6:	4692      	mov	sl, r2
 80016d8:	469b      	mov	fp, r3
 80016da:	4623      	mov	r3, r4
 80016dc:	eb1a 0303 	adds.w	r3, sl, r3
 80016e0:	623b      	str	r3, [r7, #32]
 80016e2:	462b      	mov	r3, r5
 80016e4:	eb4b 0303 	adc.w	r3, fp, r3
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80016f6:	4629      	mov	r1, r5
 80016f8:	028b      	lsls	r3, r1, #10
 80016fa:	4621      	mov	r1, r4
 80016fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001700:	4621      	mov	r1, r4
 8001702:	028a      	lsls	r2, r1, #10
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800170c:	2200      	movs	r2, #0
 800170e:	673b      	str	r3, [r7, #112]	; 0x70
 8001710:	677a      	str	r2, [r7, #116]	; 0x74
 8001712:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001716:	f7fe fe1b 	bl	8000350 <__aeabi_uldivmod>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4613      	mov	r3, r2
 8001720:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001724:	4b41      	ldr	r3, [pc, #260]	; (800182c <HAL_RCC_GetSysClockFreq+0x354>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	0c1b      	lsrs	r3, r3, #16
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	3301      	adds	r3, #1
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001736:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800173a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001746:	e0eb      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001748:	4b38      	ldr	r3, [pc, #224]	; (800182c <HAL_RCC_GetSysClockFreq+0x354>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001750:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001754:	4b35      	ldr	r3, [pc, #212]	; (800182c <HAL_RCC_GetSysClockFreq+0x354>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d06b      	beq.n	8001838 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001760:	4b32      	ldr	r3, [pc, #200]	; (800182c <HAL_RCC_GetSysClockFreq+0x354>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	099b      	lsrs	r3, r3, #6
 8001766:	2200      	movs	r2, #0
 8001768:	66bb      	str	r3, [r7, #104]	; 0x68
 800176a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800176c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800176e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001772:	663b      	str	r3, [r7, #96]	; 0x60
 8001774:	2300      	movs	r3, #0
 8001776:	667b      	str	r3, [r7, #100]	; 0x64
 8001778:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800177c:	4622      	mov	r2, r4
 800177e:	462b      	mov	r3, r5
 8001780:	f04f 0000 	mov.w	r0, #0
 8001784:	f04f 0100 	mov.w	r1, #0
 8001788:	0159      	lsls	r1, r3, #5
 800178a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800178e:	0150      	lsls	r0, r2, #5
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4621      	mov	r1, r4
 8001796:	1a51      	subs	r1, r2, r1
 8001798:	61b9      	str	r1, [r7, #24]
 800179a:	4629      	mov	r1, r5
 800179c:	eb63 0301 	sbc.w	r3, r3, r1
 80017a0:	61fb      	str	r3, [r7, #28]
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80017ae:	4659      	mov	r1, fp
 80017b0:	018b      	lsls	r3, r1, #6
 80017b2:	4651      	mov	r1, sl
 80017b4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017b8:	4651      	mov	r1, sl
 80017ba:	018a      	lsls	r2, r1, #6
 80017bc:	4651      	mov	r1, sl
 80017be:	ebb2 0801 	subs.w	r8, r2, r1
 80017c2:	4659      	mov	r1, fp
 80017c4:	eb63 0901 	sbc.w	r9, r3, r1
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017dc:	4690      	mov	r8, r2
 80017de:	4699      	mov	r9, r3
 80017e0:	4623      	mov	r3, r4
 80017e2:	eb18 0303 	adds.w	r3, r8, r3
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	462b      	mov	r3, r5
 80017ea:	eb49 0303 	adc.w	r3, r9, r3
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80017fc:	4629      	mov	r1, r5
 80017fe:	024b      	lsls	r3, r1, #9
 8001800:	4621      	mov	r1, r4
 8001802:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001806:	4621      	mov	r1, r4
 8001808:	024a      	lsls	r2, r1, #9
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001812:	2200      	movs	r2, #0
 8001814:	65bb      	str	r3, [r7, #88]	; 0x58
 8001816:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001818:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800181c:	f7fe fd98 	bl	8000350 <__aeabi_uldivmod>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4613      	mov	r3, r2
 8001826:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800182a:	e065      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0x420>
 800182c:	40023800 	.word	0x40023800
 8001830:	00f42400 	.word	0x00f42400
 8001834:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001838:	4b3d      	ldr	r3, [pc, #244]	; (8001930 <HAL_RCC_GetSysClockFreq+0x458>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	099b      	lsrs	r3, r3, #6
 800183e:	2200      	movs	r2, #0
 8001840:	4618      	mov	r0, r3
 8001842:	4611      	mov	r1, r2
 8001844:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001848:	653b      	str	r3, [r7, #80]	; 0x50
 800184a:	2300      	movs	r3, #0
 800184c:	657b      	str	r3, [r7, #84]	; 0x54
 800184e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001852:	4642      	mov	r2, r8
 8001854:	464b      	mov	r3, r9
 8001856:	f04f 0000 	mov.w	r0, #0
 800185a:	f04f 0100 	mov.w	r1, #0
 800185e:	0159      	lsls	r1, r3, #5
 8001860:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001864:	0150      	lsls	r0, r2, #5
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4641      	mov	r1, r8
 800186c:	1a51      	subs	r1, r2, r1
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	4649      	mov	r1, r9
 8001872:	eb63 0301 	sbc.w	r3, r3, r1
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001884:	4659      	mov	r1, fp
 8001886:	018b      	lsls	r3, r1, #6
 8001888:	4651      	mov	r1, sl
 800188a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800188e:	4651      	mov	r1, sl
 8001890:	018a      	lsls	r2, r1, #6
 8001892:	4651      	mov	r1, sl
 8001894:	1a54      	subs	r4, r2, r1
 8001896:	4659      	mov	r1, fp
 8001898:	eb63 0501 	sbc.w	r5, r3, r1
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	00eb      	lsls	r3, r5, #3
 80018a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018aa:	00e2      	lsls	r2, r4, #3
 80018ac:	4614      	mov	r4, r2
 80018ae:	461d      	mov	r5, r3
 80018b0:	4643      	mov	r3, r8
 80018b2:	18e3      	adds	r3, r4, r3
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	464b      	mov	r3, r9
 80018b8:	eb45 0303 	adc.w	r3, r5, r3
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018ca:	4629      	mov	r1, r5
 80018cc:	028b      	lsls	r3, r1, #10
 80018ce:	4621      	mov	r1, r4
 80018d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018d4:	4621      	mov	r1, r4
 80018d6:	028a      	lsls	r2, r1, #10
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018e0:	2200      	movs	r2, #0
 80018e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80018e4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80018e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80018ea:	f7fe fd31 	bl	8000350 <__aeabi_uldivmod>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4613      	mov	r3, r2
 80018f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018f8:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <HAL_RCC_GetSysClockFreq+0x458>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	0f1b      	lsrs	r3, r3, #28
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001906:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800190a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800190e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001912:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001916:	e003      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_RCC_GetSysClockFreq+0x45c>)
 800191a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800191e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001920:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001924:	4618      	mov	r0, r3
 8001926:	37b8      	adds	r7, #184	; 0xb8
 8001928:	46bd      	mov	sp, r7
 800192a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	00f42400 	.word	0x00f42400

08001938 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e28d      	b.n	8001e66 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 8083 	beq.w	8001a5e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001958:	4b94      	ldr	r3, [pc, #592]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	2b04      	cmp	r3, #4
 8001962:	d019      	beq.n	8001998 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001964:	4b91      	ldr	r3, [pc, #580]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800196c:	2b08      	cmp	r3, #8
 800196e:	d106      	bne.n	800197e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001970:	4b8e      	ldr	r3, [pc, #568]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001978:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800197c:	d00c      	beq.n	8001998 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800197e:	4b8b      	ldr	r3, [pc, #556]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001986:	2b0c      	cmp	r3, #12
 8001988:	d112      	bne.n	80019b0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800198a:	4b88      	ldr	r3, [pc, #544]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001996:	d10b      	bne.n	80019b0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001998:	4b84      	ldr	r3, [pc, #528]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d05b      	beq.n	8001a5c <HAL_RCC_OscConfig+0x124>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d157      	bne.n	8001a5c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e25a      	b.n	8001e66 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b8:	d106      	bne.n	80019c8 <HAL_RCC_OscConfig+0x90>
 80019ba:	4b7c      	ldr	r3, [pc, #496]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a7b      	ldr	r2, [pc, #492]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 80019c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e01d      	b.n	8001a04 <HAL_RCC_OscConfig+0xcc>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0xb4>
 80019d2:	4b76      	ldr	r3, [pc, #472]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a75      	ldr	r2, [pc, #468]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 80019d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	4b73      	ldr	r3, [pc, #460]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a72      	ldr	r2, [pc, #456]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 80019e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e00b      	b.n	8001a04 <HAL_RCC_OscConfig+0xcc>
 80019ec:	4b6f      	ldr	r3, [pc, #444]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a6e      	ldr	r2, [pc, #440]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 80019f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b6c      	ldr	r3, [pc, #432]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a6b      	ldr	r2, [pc, #428]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 80019fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d013      	beq.n	8001a34 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff f97c 	bl	8000d08 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a14:	f7ff f978 	bl	8000d08 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	; 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e21f      	b.n	8001e66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	4b61      	ldr	r3, [pc, #388]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0xdc>
 8001a32:	e014      	b.n	8001a5e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff f968 	bl	8000d08 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff f964 	bl	8000d08 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	; 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e20b      	b.n	8001e66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	4b57      	ldr	r3, [pc, #348]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x104>
 8001a5a:	e000      	b.n	8001a5e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d06f      	beq.n	8001b4a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a6a:	4b50      	ldr	r3, [pc, #320]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d017      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a76:	4b4d      	ldr	r3, [pc, #308]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d105      	bne.n	8001a8e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a82:	4b4a      	ldr	r3, [pc, #296]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00b      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a8e:	4b47      	ldr	r3, [pc, #284]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a96:	2b0c      	cmp	r3, #12
 8001a98:	d11c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a9a:	4b44      	ldr	r3, [pc, #272]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d116      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa6:	4b41      	ldr	r3, [pc, #260]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <HAL_RCC_OscConfig+0x186>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d001      	beq.n	8001abe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e1d3      	b.n	8001e66 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abe:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4937      	ldr	r1, [pc, #220]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad2:	e03a      	b.n	8001b4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d020      	beq.n	8001b1e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001adc:	4b34      	ldr	r3, [pc, #208]	; (8001bb0 <HAL_RCC_OscConfig+0x278>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae2:	f7ff f911 	bl	8000d08 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aea:	f7ff f90d 	bl	8000d08 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e1b4      	b.n	8001e66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afc:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b08:	4b28      	ldr	r3, [pc, #160]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4925      	ldr	r1, [pc, #148]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
 8001b1c:	e015      	b.n	8001b4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1e:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <HAL_RCC_OscConfig+0x278>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff f8f0 	bl	8000d08 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff f8ec 	bl	8000d08 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e193      	b.n	8001e66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d036      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d016      	beq.n	8001b8c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_RCC_OscConfig+0x27c>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff f8d0 	bl	8000d08 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b6c:	f7ff f8cc 	bl	8000d08 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e173      	b.n	8001e66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x234>
 8001b8a:	e01b      	b.n	8001bc4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <HAL_RCC_OscConfig+0x27c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b92:	f7ff f8b9 	bl	8000d08 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b98:	e00e      	b.n	8001bb8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b9a:	f7ff f8b5 	bl	8000d08 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d907      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e15c      	b.n	8001e66 <HAL_RCC_OscConfig+0x52e>
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	42470000 	.word	0x42470000
 8001bb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb8:	4b8a      	ldr	r3, [pc, #552]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1ea      	bne.n	8001b9a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 8097 	beq.w	8001d00 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd6:	4b83      	ldr	r3, [pc, #524]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10f      	bne.n	8001c02 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	4b7f      	ldr	r3, [pc, #508]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a7e      	ldr	r2, [pc, #504]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf2:	4b7c      	ldr	r3, [pc, #496]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c02:	4b79      	ldr	r3, [pc, #484]	; (8001de8 <HAL_RCC_OscConfig+0x4b0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d118      	bne.n	8001c40 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0e:	4b76      	ldr	r3, [pc, #472]	; (8001de8 <HAL_RCC_OscConfig+0x4b0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a75      	ldr	r2, [pc, #468]	; (8001de8 <HAL_RCC_OscConfig+0x4b0>)
 8001c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c1a:	f7ff f875 	bl	8000d08 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c22:	f7ff f871 	bl	8000d08 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e118      	b.n	8001e66 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	4b6c      	ldr	r3, [pc, #432]	; (8001de8 <HAL_RCC_OscConfig+0x4b0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x31e>
 8001c48:	4b66      	ldr	r3, [pc, #408]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4c:	4a65      	ldr	r2, [pc, #404]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6713      	str	r3, [r2, #112]	; 0x70
 8001c54:	e01c      	b.n	8001c90 <HAL_RCC_OscConfig+0x358>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b05      	cmp	r3, #5
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x340>
 8001c5e:	4b61      	ldr	r3, [pc, #388]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c62:	4a60      	ldr	r2, [pc, #384]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6a:	4b5e      	ldr	r3, [pc, #376]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6e:	4a5d      	ldr	r2, [pc, #372]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6713      	str	r3, [r2, #112]	; 0x70
 8001c76:	e00b      	b.n	8001c90 <HAL_RCC_OscConfig+0x358>
 8001c78:	4b5a      	ldr	r3, [pc, #360]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7c:	4a59      	ldr	r2, [pc, #356]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001c7e:	f023 0301 	bic.w	r3, r3, #1
 8001c82:	6713      	str	r3, [r2, #112]	; 0x70
 8001c84:	4b57      	ldr	r3, [pc, #348]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c88:	4a56      	ldr	r2, [pc, #344]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001c8a:	f023 0304 	bic.w	r3, r3, #4
 8001c8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d015      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c98:	f7ff f836 	bl	8000d08 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9e:	e00a      	b.n	8001cb6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca0:	f7ff f832 	bl	8000d08 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e0d7      	b.n	8001e66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb6:	4b4b      	ldr	r3, [pc, #300]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0ee      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x368>
 8001cc2:	e014      	b.n	8001cee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc4:	f7ff f820 	bl	8000d08 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cca:	e00a      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ccc:	f7ff f81c 	bl	8000d08 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e0c1      	b.n	8001e66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce2:	4b40      	ldr	r3, [pc, #256]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1ee      	bne.n	8001ccc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d105      	bne.n	8001d00 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf4:	4b3b      	ldr	r3, [pc, #236]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	4a3a      	ldr	r2, [pc, #232]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80ad 	beq.w	8001e64 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d0a:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d060      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d145      	bne.n	8001daa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1e:	4b33      	ldr	r3, [pc, #204]	; (8001dec <HAL_RCC_OscConfig+0x4b4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7fe fff0 	bl	8000d08 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2c:	f7fe ffec 	bl	8000d08 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e093      	b.n	8001e66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3e:	4b29      	ldr	r3, [pc, #164]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69da      	ldr	r2, [r3, #28]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	019b      	lsls	r3, r3, #6
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d60:	085b      	lsrs	r3, r3, #1
 8001d62:	3b01      	subs	r3, #1
 8001d64:	041b      	lsls	r3, r3, #16
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6c:	061b      	lsls	r3, r3, #24
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	071b      	lsls	r3, r3, #28
 8001d76:	491b      	ldr	r1, [pc, #108]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <HAL_RCC_OscConfig+0x4b4>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d82:	f7fe ffc1 	bl	8000d08 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8a:	f7fe ffbd 	bl	8000d08 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e064      	b.n	8001e66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9c:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x452>
 8001da8:	e05c      	b.n	8001e64 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <HAL_RCC_OscConfig+0x4b4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7fe ffaa 	bl	8000d08 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db8:	f7fe ffa6 	bl	8000d08 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e04d      	b.n	8001e66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_RCC_OscConfig+0x4ac>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x480>
 8001dd6:	e045      	b.n	8001e64 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d107      	bne.n	8001df0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e040      	b.n	8001e66 <HAL_RCC_OscConfig+0x52e>
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40007000 	.word	0x40007000
 8001dec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001df0:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <HAL_RCC_OscConfig+0x538>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d030      	beq.n	8001e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d129      	bne.n	8001e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d122      	bne.n	8001e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e20:	4013      	ands	r3, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d119      	bne.n	8001e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e36:	085b      	lsrs	r3, r3, #1
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d10f      	bne.n	8001e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d107      	bne.n	8001e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d001      	beq.n	8001e64 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800

08001e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e041      	b.n	8001f0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d106      	bne.n	8001ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f839 	bl	8001f12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3304      	adds	r3, #4
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	f000 f9d8 	bl	8002268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d001      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e04e      	b.n	8001fde <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a23      	ldr	r2, [pc, #140]	; (8001fec <HAL_TIM_Base_Start_IT+0xc4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d022      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f6a:	d01d      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a1f      	ldr	r2, [pc, #124]	; (8001ff0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d018      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a1e      	ldr	r2, [pc, #120]	; (8001ff4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d013      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1c      	ldr	r2, [pc, #112]	; (8001ff8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00e      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1b      	ldr	r2, [pc, #108]	; (8001ffc <HAL_TIM_Base_Start_IT+0xd4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d009      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a19      	ldr	r2, [pc, #100]	; (8002000 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d004      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a18      	ldr	r2, [pc, #96]	; (8002004 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d111      	bne.n	8001fcc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b06      	cmp	r3, #6
 8001fb8:	d010      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0201 	orr.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fca:	e007      	b.n	8001fdc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40010000 	.word	0x40010000
 8001ff0:	40000400 	.word	0x40000400
 8001ff4:	40000800 	.word	0x40000800
 8001ff8:	40000c00 	.word	0x40000c00
 8001ffc:	40010400 	.word	0x40010400
 8002000:	40014000 	.word	0x40014000
 8002004:	40001800 	.word	0x40001800

08002008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b02      	cmp	r3, #2
 800201c:	d122      	bne.n	8002064 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b02      	cmp	r3, #2
 800202a:	d11b      	bne.n	8002064 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0202 	mvn.w	r2, #2
 8002034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8ee 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 8002050:	e005      	b.n	800205e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f8e0 	bl	8002218 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f8f1 	bl	8002240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b04      	cmp	r3, #4
 8002070:	d122      	bne.n	80020b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b04      	cmp	r3, #4
 800207e:	d11b      	bne.n	80020b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0204 	mvn.w	r2, #4
 8002088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2202      	movs	r2, #2
 800208e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f8c4 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 80020a4:	e005      	b.n	80020b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f8b6 	bl	8002218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f8c7 	bl	8002240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d122      	bne.n	800210c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d11b      	bne.n	800210c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0208 	mvn.w	r2, #8
 80020dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2204      	movs	r2, #4
 80020e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f89a 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 80020f8:	e005      	b.n	8002106 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f88c 	bl	8002218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f89d 	bl	8002240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	2b10      	cmp	r3, #16
 8002118:	d122      	bne.n	8002160 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b10      	cmp	r3, #16
 8002126:	d11b      	bne.n	8002160 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0210 	mvn.w	r2, #16
 8002130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2208      	movs	r2, #8
 8002136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f870 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 800214c:	e005      	b.n	800215a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f862 	bl	8002218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f873 	bl	8002240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b01      	cmp	r3, #1
 800216c:	d10e      	bne.n	800218c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b01      	cmp	r3, #1
 800217a:	d107      	bne.n	800218c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0201 	mvn.w	r2, #1
 8002184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe fbf2 	bl	8000970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	2b80      	cmp	r3, #128	; 0x80
 8002198:	d10e      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a4:	2b80      	cmp	r3, #128	; 0x80
 80021a6:	d107      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f902 	bl	80023bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c2:	2b40      	cmp	r3, #64	; 0x40
 80021c4:	d10e      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d0:	2b40      	cmp	r3, #64	; 0x40
 80021d2:	d107      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f838 	bl	8002254 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	d10e      	bne.n	8002210 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b20      	cmp	r3, #32
 80021fe:	d107      	bne.n	8002210 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0220 	mvn.w	r2, #32
 8002208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f8cc 	bl	80023a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a40      	ldr	r2, [pc, #256]	; (800237c <TIM_Base_SetConfig+0x114>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d013      	beq.n	80022a8 <TIM_Base_SetConfig+0x40>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002286:	d00f      	beq.n	80022a8 <TIM_Base_SetConfig+0x40>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a3d      	ldr	r2, [pc, #244]	; (8002380 <TIM_Base_SetConfig+0x118>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d00b      	beq.n	80022a8 <TIM_Base_SetConfig+0x40>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a3c      	ldr	r2, [pc, #240]	; (8002384 <TIM_Base_SetConfig+0x11c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d007      	beq.n	80022a8 <TIM_Base_SetConfig+0x40>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a3b      	ldr	r2, [pc, #236]	; (8002388 <TIM_Base_SetConfig+0x120>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d003      	beq.n	80022a8 <TIM_Base_SetConfig+0x40>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a3a      	ldr	r2, [pc, #232]	; (800238c <TIM_Base_SetConfig+0x124>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d108      	bne.n	80022ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a2f      	ldr	r2, [pc, #188]	; (800237c <TIM_Base_SetConfig+0x114>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d02b      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c8:	d027      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a2c      	ldr	r2, [pc, #176]	; (8002380 <TIM_Base_SetConfig+0x118>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d023      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a2b      	ldr	r2, [pc, #172]	; (8002384 <TIM_Base_SetConfig+0x11c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01f      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a2a      	ldr	r2, [pc, #168]	; (8002388 <TIM_Base_SetConfig+0x120>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d01b      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a29      	ldr	r2, [pc, #164]	; (800238c <TIM_Base_SetConfig+0x124>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d017      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a28      	ldr	r2, [pc, #160]	; (8002390 <TIM_Base_SetConfig+0x128>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d013      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a27      	ldr	r2, [pc, #156]	; (8002394 <TIM_Base_SetConfig+0x12c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00f      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a26      	ldr	r2, [pc, #152]	; (8002398 <TIM_Base_SetConfig+0x130>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00b      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a25      	ldr	r2, [pc, #148]	; (800239c <TIM_Base_SetConfig+0x134>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d007      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a24      	ldr	r2, [pc, #144]	; (80023a0 <TIM_Base_SetConfig+0x138>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d003      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a23      	ldr	r2, [pc, #140]	; (80023a4 <TIM_Base_SetConfig+0x13c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d108      	bne.n	800232c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4313      	orrs	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	4313      	orrs	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <TIM_Base_SetConfig+0x114>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d003      	beq.n	8002360 <TIM_Base_SetConfig+0xf8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a0c      	ldr	r2, [pc, #48]	; (800238c <TIM_Base_SetConfig+0x124>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d103      	bne.n	8002368 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	615a      	str	r2, [r3, #20]
}
 800236e:	bf00      	nop
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40010000 	.word	0x40010000
 8002380:	40000400 	.word	0x40000400
 8002384:	40000800 	.word	0x40000800
 8002388:	40000c00 	.word	0x40000c00
 800238c:	40010400 	.word	0x40010400
 8002390:	40014000 	.word	0x40014000
 8002394:	40014400 	.word	0x40014400
 8002398:	40014800 	.word	0x40014800
 800239c:	40001800 	.word	0x40001800
 80023a0:	40001c00 	.word	0x40001c00
 80023a4:	40002000 	.word	0x40002000

080023a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e03f      	b.n	8002462 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d106      	bne.n	80023fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7fe fafa 	bl	80009f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2224      	movs	r2, #36	; 0x24
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002412:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f829 	bl	800246c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695a      	ldr	r2, [r3, #20]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002438:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002448:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800246c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002470:	b0c0      	sub	sp, #256	; 0x100
 8002472:	af00      	add	r7, sp, #0
 8002474:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002488:	68d9      	ldr	r1, [r3, #12]
 800248a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	ea40 0301 	orr.w	r3, r0, r1
 8002494:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80024c4:	f021 010c 	bic.w	r1, r1, #12
 80024c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80024d2:	430b      	orrs	r3, r1
 80024d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80024e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e6:	6999      	ldr	r1, [r3, #24]
 80024e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	ea40 0301 	orr.w	r3, r0, r1
 80024f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	4b8f      	ldr	r3, [pc, #572]	; (8002738 <UART_SetConfig+0x2cc>)
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d005      	beq.n	800250c <UART_SetConfig+0xa0>
 8002500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4b8d      	ldr	r3, [pc, #564]	; (800273c <UART_SetConfig+0x2d0>)
 8002508:	429a      	cmp	r2, r3
 800250a:	d104      	bne.n	8002516 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800250c:	f7fe ff9e 	bl	800144c <HAL_RCC_GetPCLK2Freq>
 8002510:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002514:	e003      	b.n	800251e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002516:	f7fe ff85 	bl	8001424 <HAL_RCC_GetPCLK1Freq>
 800251a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800251e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002528:	f040 810c 	bne.w	8002744 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800252c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002530:	2200      	movs	r2, #0
 8002532:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002536:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800253a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800253e:	4622      	mov	r2, r4
 8002540:	462b      	mov	r3, r5
 8002542:	1891      	adds	r1, r2, r2
 8002544:	65b9      	str	r1, [r7, #88]	; 0x58
 8002546:	415b      	adcs	r3, r3
 8002548:	65fb      	str	r3, [r7, #92]	; 0x5c
 800254a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800254e:	4621      	mov	r1, r4
 8002550:	eb12 0801 	adds.w	r8, r2, r1
 8002554:	4629      	mov	r1, r5
 8002556:	eb43 0901 	adc.w	r9, r3, r1
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800256a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800256e:	4690      	mov	r8, r2
 8002570:	4699      	mov	r9, r3
 8002572:	4623      	mov	r3, r4
 8002574:	eb18 0303 	adds.w	r3, r8, r3
 8002578:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800257c:	462b      	mov	r3, r5
 800257e:	eb49 0303 	adc.w	r3, r9, r3
 8002582:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002592:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002596:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800259a:	460b      	mov	r3, r1
 800259c:	18db      	adds	r3, r3, r3
 800259e:	653b      	str	r3, [r7, #80]	; 0x50
 80025a0:	4613      	mov	r3, r2
 80025a2:	eb42 0303 	adc.w	r3, r2, r3
 80025a6:	657b      	str	r3, [r7, #84]	; 0x54
 80025a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80025ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80025b0:	f7fd fece 	bl	8000350 <__aeabi_uldivmod>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4b61      	ldr	r3, [pc, #388]	; (8002740 <UART_SetConfig+0x2d4>)
 80025ba:	fba3 2302 	umull	r2, r3, r3, r2
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	011c      	lsls	r4, r3, #4
 80025c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025c6:	2200      	movs	r2, #0
 80025c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80025d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80025d4:	4642      	mov	r2, r8
 80025d6:	464b      	mov	r3, r9
 80025d8:	1891      	adds	r1, r2, r2
 80025da:	64b9      	str	r1, [r7, #72]	; 0x48
 80025dc:	415b      	adcs	r3, r3
 80025de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025e4:	4641      	mov	r1, r8
 80025e6:	eb12 0a01 	adds.w	sl, r2, r1
 80025ea:	4649      	mov	r1, r9
 80025ec:	eb43 0b01 	adc.w	fp, r3, r1
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002600:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002604:	4692      	mov	sl, r2
 8002606:	469b      	mov	fp, r3
 8002608:	4643      	mov	r3, r8
 800260a:	eb1a 0303 	adds.w	r3, sl, r3
 800260e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002612:	464b      	mov	r3, r9
 8002614:	eb4b 0303 	adc.w	r3, fp, r3
 8002618:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002628:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800262c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002630:	460b      	mov	r3, r1
 8002632:	18db      	adds	r3, r3, r3
 8002634:	643b      	str	r3, [r7, #64]	; 0x40
 8002636:	4613      	mov	r3, r2
 8002638:	eb42 0303 	adc.w	r3, r2, r3
 800263c:	647b      	str	r3, [r7, #68]	; 0x44
 800263e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002642:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002646:	f7fd fe83 	bl	8000350 <__aeabi_uldivmod>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4611      	mov	r1, r2
 8002650:	4b3b      	ldr	r3, [pc, #236]	; (8002740 <UART_SetConfig+0x2d4>)
 8002652:	fba3 2301 	umull	r2, r3, r3, r1
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	2264      	movs	r2, #100	; 0x64
 800265a:	fb02 f303 	mul.w	r3, r2, r3
 800265e:	1acb      	subs	r3, r1, r3
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002666:	4b36      	ldr	r3, [pc, #216]	; (8002740 <UART_SetConfig+0x2d4>)
 8002668:	fba3 2302 	umull	r2, r3, r3, r2
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002674:	441c      	add	r4, r3
 8002676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800267a:	2200      	movs	r2, #0
 800267c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002680:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002684:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002688:	4642      	mov	r2, r8
 800268a:	464b      	mov	r3, r9
 800268c:	1891      	adds	r1, r2, r2
 800268e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002690:	415b      	adcs	r3, r3
 8002692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002694:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002698:	4641      	mov	r1, r8
 800269a:	1851      	adds	r1, r2, r1
 800269c:	6339      	str	r1, [r7, #48]	; 0x30
 800269e:	4649      	mov	r1, r9
 80026a0:	414b      	adcs	r3, r1
 80026a2:	637b      	str	r3, [r7, #52]	; 0x34
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80026b0:	4659      	mov	r1, fp
 80026b2:	00cb      	lsls	r3, r1, #3
 80026b4:	4651      	mov	r1, sl
 80026b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026ba:	4651      	mov	r1, sl
 80026bc:	00ca      	lsls	r2, r1, #3
 80026be:	4610      	mov	r0, r2
 80026c0:	4619      	mov	r1, r3
 80026c2:	4603      	mov	r3, r0
 80026c4:	4642      	mov	r2, r8
 80026c6:	189b      	adds	r3, r3, r2
 80026c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026cc:	464b      	mov	r3, r9
 80026ce:	460a      	mov	r2, r1
 80026d0:	eb42 0303 	adc.w	r3, r2, r3
 80026d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80026e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80026e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80026ec:	460b      	mov	r3, r1
 80026ee:	18db      	adds	r3, r3, r3
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f2:	4613      	mov	r3, r2
 80026f4:	eb42 0303 	adc.w	r3, r2, r3
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002702:	f7fd fe25 	bl	8000350 <__aeabi_uldivmod>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <UART_SetConfig+0x2d4>)
 800270c:	fba3 1302 	umull	r1, r3, r3, r2
 8002710:	095b      	lsrs	r3, r3, #5
 8002712:	2164      	movs	r1, #100	; 0x64
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	3332      	adds	r3, #50	; 0x32
 800271e:	4a08      	ldr	r2, [pc, #32]	; (8002740 <UART_SetConfig+0x2d4>)
 8002720:	fba2 2303 	umull	r2, r3, r2, r3
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	f003 0207 	and.w	r2, r3, #7
 800272a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4422      	add	r2, r4
 8002732:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002734:	e105      	b.n	8002942 <UART_SetConfig+0x4d6>
 8002736:	bf00      	nop
 8002738:	40011000 	.word	0x40011000
 800273c:	40011400 	.word	0x40011400
 8002740:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002748:	2200      	movs	r2, #0
 800274a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800274e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002752:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002756:	4642      	mov	r2, r8
 8002758:	464b      	mov	r3, r9
 800275a:	1891      	adds	r1, r2, r2
 800275c:	6239      	str	r1, [r7, #32]
 800275e:	415b      	adcs	r3, r3
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
 8002762:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002766:	4641      	mov	r1, r8
 8002768:	1854      	adds	r4, r2, r1
 800276a:	4649      	mov	r1, r9
 800276c:	eb43 0501 	adc.w	r5, r3, r1
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	00eb      	lsls	r3, r5, #3
 800277a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800277e:	00e2      	lsls	r2, r4, #3
 8002780:	4614      	mov	r4, r2
 8002782:	461d      	mov	r5, r3
 8002784:	4643      	mov	r3, r8
 8002786:	18e3      	adds	r3, r4, r3
 8002788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800278c:	464b      	mov	r3, r9
 800278e:	eb45 0303 	adc.w	r3, r5, r3
 8002792:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80027b2:	4629      	mov	r1, r5
 80027b4:	008b      	lsls	r3, r1, #2
 80027b6:	4621      	mov	r1, r4
 80027b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027bc:	4621      	mov	r1, r4
 80027be:	008a      	lsls	r2, r1, #2
 80027c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80027c4:	f7fd fdc4 	bl	8000350 <__aeabi_uldivmod>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4b60      	ldr	r3, [pc, #384]	; (8002950 <UART_SetConfig+0x4e4>)
 80027ce:	fba3 2302 	umull	r2, r3, r3, r2
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	011c      	lsls	r4, r3, #4
 80027d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027da:	2200      	movs	r2, #0
 80027dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80027e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80027e8:	4642      	mov	r2, r8
 80027ea:	464b      	mov	r3, r9
 80027ec:	1891      	adds	r1, r2, r2
 80027ee:	61b9      	str	r1, [r7, #24]
 80027f0:	415b      	adcs	r3, r3
 80027f2:	61fb      	str	r3, [r7, #28]
 80027f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027f8:	4641      	mov	r1, r8
 80027fa:	1851      	adds	r1, r2, r1
 80027fc:	6139      	str	r1, [r7, #16]
 80027fe:	4649      	mov	r1, r9
 8002800:	414b      	adcs	r3, r1
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002810:	4659      	mov	r1, fp
 8002812:	00cb      	lsls	r3, r1, #3
 8002814:	4651      	mov	r1, sl
 8002816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800281a:	4651      	mov	r1, sl
 800281c:	00ca      	lsls	r2, r1, #3
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	4603      	mov	r3, r0
 8002824:	4642      	mov	r2, r8
 8002826:	189b      	adds	r3, r3, r2
 8002828:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800282c:	464b      	mov	r3, r9
 800282e:	460a      	mov	r2, r1
 8002830:	eb42 0303 	adc.w	r3, r2, r3
 8002834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	67bb      	str	r3, [r7, #120]	; 0x78
 8002842:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002850:	4649      	mov	r1, r9
 8002852:	008b      	lsls	r3, r1, #2
 8002854:	4641      	mov	r1, r8
 8002856:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800285a:	4641      	mov	r1, r8
 800285c:	008a      	lsls	r2, r1, #2
 800285e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002862:	f7fd fd75 	bl	8000350 <__aeabi_uldivmod>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4b39      	ldr	r3, [pc, #228]	; (8002950 <UART_SetConfig+0x4e4>)
 800286c:	fba3 1302 	umull	r1, r3, r3, r2
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	2164      	movs	r1, #100	; 0x64
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	3332      	adds	r3, #50	; 0x32
 800287e:	4a34      	ldr	r2, [pc, #208]	; (8002950 <UART_SetConfig+0x4e4>)
 8002880:	fba2 2303 	umull	r2, r3, r2, r3
 8002884:	095b      	lsrs	r3, r3, #5
 8002886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800288a:	441c      	add	r4, r3
 800288c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002890:	2200      	movs	r2, #0
 8002892:	673b      	str	r3, [r7, #112]	; 0x70
 8002894:	677a      	str	r2, [r7, #116]	; 0x74
 8002896:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800289a:	4642      	mov	r2, r8
 800289c:	464b      	mov	r3, r9
 800289e:	1891      	adds	r1, r2, r2
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	415b      	adcs	r3, r3
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028aa:	4641      	mov	r1, r8
 80028ac:	1851      	adds	r1, r2, r1
 80028ae:	6039      	str	r1, [r7, #0]
 80028b0:	4649      	mov	r1, r9
 80028b2:	414b      	adcs	r3, r1
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028c2:	4659      	mov	r1, fp
 80028c4:	00cb      	lsls	r3, r1, #3
 80028c6:	4651      	mov	r1, sl
 80028c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028cc:	4651      	mov	r1, sl
 80028ce:	00ca      	lsls	r2, r1, #3
 80028d0:	4610      	mov	r0, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	4603      	mov	r3, r0
 80028d6:	4642      	mov	r2, r8
 80028d8:	189b      	adds	r3, r3, r2
 80028da:	66bb      	str	r3, [r7, #104]	; 0x68
 80028dc:	464b      	mov	r3, r9
 80028de:	460a      	mov	r2, r1
 80028e0:	eb42 0303 	adc.w	r3, r2, r3
 80028e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	663b      	str	r3, [r7, #96]	; 0x60
 80028f0:	667a      	str	r2, [r7, #100]	; 0x64
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80028fe:	4649      	mov	r1, r9
 8002900:	008b      	lsls	r3, r1, #2
 8002902:	4641      	mov	r1, r8
 8002904:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002908:	4641      	mov	r1, r8
 800290a:	008a      	lsls	r2, r1, #2
 800290c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002910:	f7fd fd1e 	bl	8000350 <__aeabi_uldivmod>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <UART_SetConfig+0x4e4>)
 800291a:	fba3 1302 	umull	r1, r3, r3, r2
 800291e:	095b      	lsrs	r3, r3, #5
 8002920:	2164      	movs	r1, #100	; 0x64
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	3332      	adds	r3, #50	; 0x32
 800292c:	4a08      	ldr	r2, [pc, #32]	; (8002950 <UART_SetConfig+0x4e4>)
 800292e:	fba2 2303 	umull	r2, r3, r2, r3
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	f003 020f 	and.w	r2, r3, #15
 8002938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4422      	add	r2, r4
 8002940:	609a      	str	r2, [r3, #8]
}
 8002942:	bf00      	nop
 8002944:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002948:	46bd      	mov	sp, r7
 800294a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800294e:	bf00      	nop
 8002950:	51eb851f 	.word	0x51eb851f

08002954 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f103 0208 	add.w	r2, r3, #8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800296c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f103 0208 	add.w	r2, r3, #8
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f103 0208 	add.w	r2, r3, #8
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80029ae:	b480      	push	{r7}
 80029b0:	b085      	sub	sp, #20
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	601a      	str	r2, [r3, #0]
}
 80029ea:	bf00      	nop
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029f6:	b480      	push	{r7}
 80029f8:	b085      	sub	sp, #20
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6892      	ldr	r2, [r2, #8]
 8002a0c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6852      	ldr	r2, [r2, #4]
 8002a16:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d103      	bne.n	8002a2a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	1e5a      	subs	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b08c      	sub	sp, #48	; 0x30
 8002a4e:	af04      	add	r7, sp, #16
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	4613      	mov	r3, r2
 8002a58:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 fe94 	bl	800378c <pvPortMalloc>
 8002a64:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00e      	beq.n	8002a8a <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a6c:	2058      	movs	r0, #88	; 0x58
 8002a6e:	f000 fe8d 	bl	800378c <pvPortMalloc>
 8002a72:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a80:	e005      	b.n	8002a8e <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002a82:	6978      	ldr	r0, [r7, #20]
 8002a84:	f000 ff62 	bl	800394c <vPortFree>
 8002a88:	e001      	b.n	8002a8e <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d013      	beq.n	8002abc <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a94:	88fa      	ldrh	r2, [r7, #6]
 8002a96:	2300      	movs	r3, #0
 8002a98:	9303      	str	r3, [sp, #12]
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	9302      	str	r3, [sp, #8]
 8002a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f80e 	bl	8002acc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002ab0:	69f8      	ldr	r0, [r7, #28]
 8002ab2:	f000 f8a1 	bl	8002bf8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	e002      	b.n	8002ac2 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ac0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002ac2:	69bb      	ldr	r3, [r7, #24]
    }
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3720      	adds	r7, #32
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002adc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	21a5      	movs	r1, #165	; 0xa5
 8002ae6:	f002 fe1f 	bl	8005728 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002af4:	3b01      	subs	r3, #1
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	f023 0307 	bic.w	r3, r3, #7
 8002b02:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	617b      	str	r3, [r7, #20]
    }
 8002b20:	bf00      	nop
 8002b22:	e7fe      	b.n	8002b22 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d01f      	beq.n	8002b6a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
 8002b2e:	e012      	b.n	8002b56 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	4413      	add	r3, r2
 8002b36:	7819      	ldrb	r1, [r3, #0]
 8002b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3334      	adds	r3, #52	; 0x34
 8002b40:	460a      	mov	r2, r1
 8002b42:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	4413      	add	r3, r2
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d006      	beq.n	8002b5e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	3301      	adds	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	2b09      	cmp	r3, #9
 8002b5a:	d9e9      	bls.n	8002b30 <prvInitialiseNewTask+0x64>
 8002b5c:	e000      	b.n	8002b60 <prvInitialiseNewTask+0x94>
            {
                break;
 8002b5e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b68:	e003      	b.n	8002b72 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d901      	bls.n	8002b7c <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b78:	2304      	movs	r3, #4
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b80:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b86:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b90:	3304      	adds	r3, #4
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fefe 	bl	8002994 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	3318      	adds	r3, #24
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fef9 	bl	8002994 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ba6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002baa:	f1c3 0205 	rsb	r2, r3, #5
 8002bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bb6:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	3350      	adds	r3, #80	; 0x50
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f002 fdb1 	bl	8005728 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	3354      	adds	r3, #84	; 0x54
 8002bca:	2201      	movs	r2, #1
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f002 fdaa 	bl	8005728 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	68f9      	ldr	r1, [r7, #12]
 8002bd8:	69b8      	ldr	r0, [r7, #24]
 8002bda:	f000 fb05 	bl	80031e8 <pxPortInitialiseStack>
 8002bde:	4602      	mov	r2, r0
 8002be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be2:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bee:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002bf0:	bf00      	nop
 8002bf2:	3720      	adds	r7, #32
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002c00:	f000 fca0 	bl	8003544 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002c04:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <prvAddNewTaskToReadyList+0xa8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	4a25      	ldr	r2, [pc, #148]	; (8002ca0 <prvAddNewTaskToReadyList+0xa8>)
 8002c0c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002c0e:	4b25      	ldr	r3, [pc, #148]	; (8002ca4 <prvAddNewTaskToReadyList+0xac>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002c16:	4a23      	ldr	r2, [pc, #140]	; (8002ca4 <prvAddNewTaskToReadyList+0xac>)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c1c:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <prvAddNewTaskToReadyList+0xa8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d110      	bne.n	8002c46 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c24:	f000 fa46 	bl	80030b4 <prvInitialiseTaskLists>
 8002c28:	e00d      	b.n	8002c46 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ca8 <prvAddNewTaskToReadyList+0xb0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d109      	bne.n	8002c46 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c32:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <prvAddNewTaskToReadyList+0xac>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d802      	bhi.n	8002c46 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002c40:	4a18      	ldr	r2, [pc, #96]	; (8002ca4 <prvAddNewTaskToReadyList+0xac>)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002c46:	4b19      	ldr	r3, [pc, #100]	; (8002cac <prvAddNewTaskToReadyList+0xb4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	4a17      	ldr	r2, [pc, #92]	; (8002cac <prvAddNewTaskToReadyList+0xb4>)
 8002c4e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c50:	4b16      	ldr	r3, [pc, #88]	; (8002cac <prvAddNewTaskToReadyList+0xb4>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <prvAddNewTaskToReadyList+0xb8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <prvAddNewTaskToReadyList+0xb8>)
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4a0f      	ldr	r2, [pc, #60]	; (8002cb4 <prvAddNewTaskToReadyList+0xbc>)
 8002c78:	441a      	add	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4610      	mov	r0, r2
 8002c82:	f7ff fe94 	bl	80029ae <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002c86:	f000 fc8d 	bl	80035a4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002c8a:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <prvAddNewTaskToReadyList+0xb0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <prvAddNewTaskToReadyList+0x9e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c92:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <prvAddNewTaskToReadyList+0xac>)
 8002c94:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000200 	.word	0x20000200
 8002ca4:	20000128 	.word	0x20000128
 8002ca8:	2000020c 	.word	0x2000020c
 8002cac:	2000021c 	.word	0x2000021c
 8002cb0:	20000208 	.word	0x20000208
 8002cb4:	2000012c 	.word	0x2000012c

08002cb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <vTaskStartScheduler+0x7c>)
 8002cc0:	9301      	str	r3, [sp, #4]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	2282      	movs	r2, #130	; 0x82
 8002cca:	491b      	ldr	r1, [pc, #108]	; (8002d38 <vTaskStartScheduler+0x80>)
 8002ccc:	481b      	ldr	r0, [pc, #108]	; (8002d3c <vTaskStartScheduler+0x84>)
 8002cce:	f7ff febc 	bl	8002a4a <xTaskCreate>
 8002cd2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d116      	bne.n	8002d08 <vTaskStartScheduler+0x50>
        __asm volatile
 8002cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cde:	f383 8811 	msr	BASEPRI, r3
 8002ce2:	f3bf 8f6f 	isb	sy
 8002ce6:	f3bf 8f4f 	dsb	sy
 8002cea:	60bb      	str	r3, [r7, #8]
    }
 8002cec:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002cee:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <vTaskStartScheduler+0x88>)
 8002cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cf4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002cf6:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <vTaskStartScheduler+0x8c>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002cfc:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <vTaskStartScheduler+0x90>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002d02:	f000 faff 	bl	8003304 <xPortStartScheduler>
 8002d06:	e00e      	b.n	8002d26 <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d0e:	d10a      	bne.n	8002d26 <vTaskStartScheduler+0x6e>
        __asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	607b      	str	r3, [r7, #4]
    }
 8002d22:	bf00      	nop
 8002d24:	e7fe      	b.n	8002d24 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d26:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <vTaskStartScheduler+0x94>)
 8002d28:	681b      	ldr	r3, [r3, #0]
}
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000224 	.word	0x20000224
 8002d38:	0800607c 	.word	0x0800607c
 8002d3c:	08003091 	.word	0x08003091
 8002d40:	20000220 	.word	0x20000220
 8002d44:	2000020c 	.word	0x2000020c
 8002d48:	20000204 	.word	0x20000204
 8002d4c:	2000000c 	.word	0x2000000c

08002d50 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002d54:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <vTaskSuspendAll+0x18>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	4a03      	ldr	r2, [pc, #12]	; (8002d68 <vTaskSuspendAll+0x18>)
 8002d5c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002d5e:	bf00      	nop
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	20000228 	.word	0x20000228

08002d6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002d7a:	4b3b      	ldr	r3, [pc, #236]	; (8002e68 <xTaskResumeAll+0xfc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10a      	bne.n	8002d98 <xTaskResumeAll+0x2c>
        __asm volatile
 8002d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	603b      	str	r3, [r7, #0]
    }
 8002d94:	bf00      	nop
 8002d96:	e7fe      	b.n	8002d96 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002d98:	f000 fbd4 	bl	8003544 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002d9c:	4b32      	ldr	r3, [pc, #200]	; (8002e68 <xTaskResumeAll+0xfc>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3b01      	subs	r3, #1
 8002da2:	4a31      	ldr	r2, [pc, #196]	; (8002e68 <xTaskResumeAll+0xfc>)
 8002da4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002da6:	4b30      	ldr	r3, [pc, #192]	; (8002e68 <xTaskResumeAll+0xfc>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d155      	bne.n	8002e5a <xTaskResumeAll+0xee>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002dae:	4b2f      	ldr	r3, [pc, #188]	; (8002e6c <xTaskResumeAll+0x100>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d051      	beq.n	8002e5a <xTaskResumeAll+0xee>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002db6:	e02e      	b.n	8002e16 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002db8:	4b2d      	ldr	r3, [pc, #180]	; (8002e70 <xTaskResumeAll+0x104>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	3318      	adds	r3, #24
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fe16 	bl	80029f6 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fe11 	bl	80029f6 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	2201      	movs	r2, #1
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	4b25      	ldr	r3, [pc, #148]	; (8002e74 <xTaskResumeAll+0x108>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	4a24      	ldr	r2, [pc, #144]	; (8002e74 <xTaskResumeAll+0x108>)
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4a21      	ldr	r2, [pc, #132]	; (8002e78 <xTaskResumeAll+0x10c>)
 8002df4:	441a      	add	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	f7ff fdd6 	bl	80029ae <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <xTaskResumeAll+0x110>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d302      	bcc.n	8002e16 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <xTaskResumeAll+0x114>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e16:	4b16      	ldr	r3, [pc, #88]	; (8002e70 <xTaskResumeAll+0x104>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1cc      	bne.n	8002db8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002e24:	f000 f9c4 	bl	80031b0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e28:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <xTaskResumeAll+0x118>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d010      	beq.n	8002e56 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002e34:	f000 f83a 	bl	8002eac <xTaskIncrementTick>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <xTaskResumeAll+0x114>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f1      	bne.n	8002e34 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <xTaskResumeAll+0x118>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <xTaskResumeAll+0x114>)
 8002e58:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002e5a:	f000 fba3 	bl	80035a4 <vPortExitCritical>

    return xAlreadyYielded;
 8002e5e:	687b      	ldr	r3, [r7, #4]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20000228 	.word	0x20000228
 8002e6c:	20000200 	.word	0x20000200
 8002e70:	200001c0 	.word	0x200001c0
 8002e74:	20000208 	.word	0x20000208
 8002e78:	2000012c 	.word	0x2000012c
 8002e7c:	20000128 	.word	0x20000128
 8002e80:	20000214 	.word	0x20000214
 8002e84:	20000210 	.word	0x20000210

08002e88 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e8e:	f000 fc3d 	bl	800370c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002e92:	2300      	movs	r3, #0
 8002e94:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002e96:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <xTaskGetTickCountFromISR+0x20>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002e9c:	683b      	ldr	r3, [r7, #0]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000204 	.word	0x20000204

08002eac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eb6:	4b3f      	ldr	r3, [pc, #252]	; (8002fb4 <xTaskIncrementTick+0x108>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d16f      	bne.n	8002f9e <xTaskIncrementTick+0xf2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ebe:	4b3e      	ldr	r3, [pc, #248]	; (8002fb8 <xTaskIncrementTick+0x10c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ec6:	4a3c      	ldr	r2, [pc, #240]	; (8002fb8 <xTaskIncrementTick+0x10c>)
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d120      	bne.n	8002f14 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ed2:	4b3a      	ldr	r3, [pc, #232]	; (8002fbc <xTaskIncrementTick+0x110>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <xTaskIncrementTick+0x46>
        __asm volatile
 8002edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	603b      	str	r3, [r7, #0]
    }
 8002eee:	bf00      	nop
 8002ef0:	e7fe      	b.n	8002ef0 <xTaskIncrementTick+0x44>
 8002ef2:	4b32      	ldr	r3, [pc, #200]	; (8002fbc <xTaskIncrementTick+0x110>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	4b31      	ldr	r3, [pc, #196]	; (8002fc0 <xTaskIncrementTick+0x114>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a2f      	ldr	r2, [pc, #188]	; (8002fbc <xTaskIncrementTick+0x110>)
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4a2f      	ldr	r2, [pc, #188]	; (8002fc0 <xTaskIncrementTick+0x114>)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b2f      	ldr	r3, [pc, #188]	; (8002fc4 <xTaskIncrementTick+0x118>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	4a2d      	ldr	r2, [pc, #180]	; (8002fc4 <xTaskIncrementTick+0x118>)
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	f000 f94e 	bl	80031b0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002f14:	4b2c      	ldr	r3, [pc, #176]	; (8002fc8 <xTaskIncrementTick+0x11c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d344      	bcc.n	8002fa8 <xTaskIncrementTick+0xfc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f1e:	4b27      	ldr	r3, [pc, #156]	; (8002fbc <xTaskIncrementTick+0x110>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d104      	bne.n	8002f32 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f28:	4b27      	ldr	r3, [pc, #156]	; (8002fc8 <xTaskIncrementTick+0x11c>)
 8002f2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f2e:	601a      	str	r2, [r3, #0]
                    break;
 8002f30:	e03a      	b.n	8002fa8 <xTaskIncrementTick+0xfc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f32:	4b22      	ldr	r3, [pc, #136]	; (8002fbc <xTaskIncrementTick+0x110>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d203      	bcs.n	8002f52 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002f4a:	4a1f      	ldr	r2, [pc, #124]	; (8002fc8 <xTaskIncrementTick+0x11c>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f50:	e02a      	b.n	8002fa8 <xTaskIncrementTick+0xfc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	3304      	adds	r3, #4
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fd4d 	bl	80029f6 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d004      	beq.n	8002f6e <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	3318      	adds	r3, #24
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fd44 	bl	80029f6 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	2201      	movs	r2, #1
 8002f74:	409a      	lsls	r2, r3
 8002f76:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <xTaskIncrementTick+0x120>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	4a13      	ldr	r2, [pc, #76]	; (8002fcc <xTaskIncrementTick+0x120>)
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4a10      	ldr	r2, [pc, #64]	; (8002fd0 <xTaskIncrementTick+0x124>)
 8002f8e:	441a      	add	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	3304      	adds	r3, #4
 8002f94:	4619      	mov	r1, r3
 8002f96:	4610      	mov	r0, r2
 8002f98:	f7ff fd09 	bl	80029ae <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f9c:	e7bf      	b.n	8002f1e <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <xTaskIncrementTick+0x128>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	4a0b      	ldr	r2, [pc, #44]	; (8002fd4 <xTaskIncrementTick+0x128>)
 8002fa6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002fa8:	697b      	ldr	r3, [r7, #20]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000228 	.word	0x20000228
 8002fb8:	20000204 	.word	0x20000204
 8002fbc:	200001b8 	.word	0x200001b8
 8002fc0:	200001bc 	.word	0x200001bc
 8002fc4:	20000218 	.word	0x20000218
 8002fc8:	20000220 	.word	0x20000220
 8002fcc:	20000208 	.word	0x20000208
 8002fd0:	2000012c 	.word	0x2000012c
 8002fd4:	20000210 	.word	0x20000210

08002fd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fde:	4b27      	ldr	r3, [pc, #156]	; (800307c <vTaskSwitchContext+0xa4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002fe6:	4b26      	ldr	r3, [pc, #152]	; (8003080 <vTaskSwitchContext+0xa8>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002fec:	e03f      	b.n	800306e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002fee:	4b24      	ldr	r3, [pc, #144]	; (8003080 <vTaskSwitchContext+0xa8>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ff4:	4b23      	ldr	r3, [pc, #140]	; (8003084 <vTaskSwitchContext+0xac>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	fab3 f383 	clz	r3, r3
 8003000:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003002:	7afb      	ldrb	r3, [r7, #11]
 8003004:	f1c3 031f 	rsb	r3, r3, #31
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	491f      	ldr	r1, [pc, #124]	; (8003088 <vTaskSwitchContext+0xb0>)
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10a      	bne.n	8003034 <vTaskSwitchContext+0x5c>
        __asm volatile
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	607b      	str	r3, [r7, #4]
    }
 8003030:	bf00      	nop
 8003032:	e7fe      	b.n	8003032 <vTaskSwitchContext+0x5a>
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4a12      	ldr	r2, [pc, #72]	; (8003088 <vTaskSwitchContext+0xb0>)
 8003040:	4413      	add	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	3308      	adds	r3, #8
 8003056:	429a      	cmp	r2, r3
 8003058:	d104      	bne.n	8003064 <vTaskSwitchContext+0x8c>
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	4a08      	ldr	r2, [pc, #32]	; (800308c <vTaskSwitchContext+0xb4>)
 800306c:	6013      	str	r3, [r2, #0]
}
 800306e:	bf00      	nop
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20000228 	.word	0x20000228
 8003080:	20000214 	.word	0x20000214
 8003084:	20000208 	.word	0x20000208
 8003088:	2000012c 	.word	0x2000012c
 800308c:	20000128 	.word	0x20000128

08003090 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003098:	f000 f84c 	bl	8003134 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <prvIdleTask+0x20>)
 800309e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80030ac:	e7f4      	b.n	8003098 <prvIdleTask+0x8>
 80030ae:	bf00      	nop
 80030b0:	e000ed04 	.word	0xe000ed04

080030b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030ba:	2300      	movs	r3, #0
 80030bc:	607b      	str	r3, [r7, #4]
 80030be:	e00c      	b.n	80030da <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4a12      	ldr	r2, [pc, #72]	; (8003114 <prvInitialiseTaskLists+0x60>)
 80030cc:	4413      	add	r3, r2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fc40 	bl	8002954 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3301      	adds	r3, #1
 80030d8:	607b      	str	r3, [r7, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d9ef      	bls.n	80030c0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80030e0:	480d      	ldr	r0, [pc, #52]	; (8003118 <prvInitialiseTaskLists+0x64>)
 80030e2:	f7ff fc37 	bl	8002954 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80030e6:	480d      	ldr	r0, [pc, #52]	; (800311c <prvInitialiseTaskLists+0x68>)
 80030e8:	f7ff fc34 	bl	8002954 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80030ec:	480c      	ldr	r0, [pc, #48]	; (8003120 <prvInitialiseTaskLists+0x6c>)
 80030ee:	f7ff fc31 	bl	8002954 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80030f2:	480c      	ldr	r0, [pc, #48]	; (8003124 <prvInitialiseTaskLists+0x70>)
 80030f4:	f7ff fc2e 	bl	8002954 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80030f8:	480b      	ldr	r0, [pc, #44]	; (8003128 <prvInitialiseTaskLists+0x74>)
 80030fa:	f7ff fc2b 	bl	8002954 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80030fe:	4b0b      	ldr	r3, [pc, #44]	; (800312c <prvInitialiseTaskLists+0x78>)
 8003100:	4a05      	ldr	r2, [pc, #20]	; (8003118 <prvInitialiseTaskLists+0x64>)
 8003102:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003104:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <prvInitialiseTaskLists+0x7c>)
 8003106:	4a05      	ldr	r2, [pc, #20]	; (800311c <prvInitialiseTaskLists+0x68>)
 8003108:	601a      	str	r2, [r3, #0]
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	2000012c 	.word	0x2000012c
 8003118:	20000190 	.word	0x20000190
 800311c:	200001a4 	.word	0x200001a4
 8003120:	200001c0 	.word	0x200001c0
 8003124:	200001d4 	.word	0x200001d4
 8003128:	200001ec 	.word	0x200001ec
 800312c:	200001b8 	.word	0x200001b8
 8003130:	200001bc 	.word	0x200001bc

08003134 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800313a:	e019      	b.n	8003170 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800313c:	f000 fa02 	bl	8003544 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003140:	4b10      	ldr	r3, [pc, #64]	; (8003184 <prvCheckTasksWaitingTermination+0x50>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3304      	adds	r3, #4
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fc52 	bl	80029f6 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003152:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <prvCheckTasksWaitingTermination+0x54>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3b01      	subs	r3, #1
 8003158:	4a0b      	ldr	r2, [pc, #44]	; (8003188 <prvCheckTasksWaitingTermination+0x54>)
 800315a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <prvCheckTasksWaitingTermination+0x58>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3b01      	subs	r3, #1
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <prvCheckTasksWaitingTermination+0x58>)
 8003164:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003166:	f000 fa1d 	bl	80035a4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f810 	bl	8003190 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <prvCheckTasksWaitingTermination+0x58>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1e1      	bne.n	800313c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003178:	bf00      	nop
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	200001d4 	.word	0x200001d4
 8003188:	20000200 	.word	0x20000200
 800318c:	200001e8 	.word	0x200001e8

08003190 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	4618      	mov	r0, r3
 800319e:	f000 fbd5 	bl	800394c <vPortFree>
                vPortFree( pxTCB );
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fbd2 	bl	800394c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031b4:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <prvResetNextTaskUnblockTime+0x30>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d104      	bne.n	80031c8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <prvResetNextTaskUnblockTime+0x34>)
 80031c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031c4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80031c6:	e005      	b.n	80031d4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <prvResetNextTaskUnblockTime+0x30>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <prvResetNextTaskUnblockTime+0x34>)
 80031d2:	6013      	str	r3, [r2, #0]
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	200001b8 	.word	0x200001b8
 80031e4:	20000220 	.word	0x20000220

080031e8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3b04      	subs	r3, #4
 80031f8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003200:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	3b04      	subs	r3, #4
 8003206:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f023 0201 	bic.w	r2, r3, #1
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3b04      	subs	r3, #4
 8003216:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003218:	4a0c      	ldr	r2, [pc, #48]	; (800324c <pxPortInitialiseStack+0x64>)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3b14      	subs	r3, #20
 8003222:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3b04      	subs	r3, #4
 800322e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f06f 0202 	mvn.w	r2, #2
 8003236:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3b20      	subs	r3, #32
 800323c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800323e:	68fb      	ldr	r3, [r7, #12]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	08003251 	.word	0x08003251

08003250 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003256:	2300      	movs	r3, #0
 8003258:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800325a:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <prvTaskExitError+0x54>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003262:	d00a      	beq.n	800327a <prvTaskExitError+0x2a>
        __asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	60fb      	str	r3, [r7, #12]
    }
 8003276:	bf00      	nop
 8003278:	e7fe      	b.n	8003278 <prvTaskExitError+0x28>
        __asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	60bb      	str	r3, [r7, #8]
    }
 800328c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800328e:	bf00      	nop
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0fc      	beq.n	8003290 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003296:	bf00      	nop
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	20000010 	.word	0x20000010
	...

080032b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <pxCurrentTCBConst2>)
 80032b2:	6819      	ldr	r1, [r3, #0]
 80032b4:	6808      	ldr	r0, [r1, #0]
 80032b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ba:	f380 8809 	msr	PSP, r0
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f04f 0000 	mov.w	r0, #0
 80032c6:	f380 8811 	msr	BASEPRI, r0
 80032ca:	4770      	bx	lr
 80032cc:	f3af 8000 	nop.w

080032d0 <pxCurrentTCBConst2>:
 80032d0:	20000128 	.word	0x20000128
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop

080032d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80032d8:	4808      	ldr	r0, [pc, #32]	; (80032fc <prvPortStartFirstTask+0x24>)
 80032da:	6800      	ldr	r0, [r0, #0]
 80032dc:	6800      	ldr	r0, [r0, #0]
 80032de:	f380 8808 	msr	MSP, r0
 80032e2:	f04f 0000 	mov.w	r0, #0
 80032e6:	f380 8814 	msr	CONTROL, r0
 80032ea:	b662      	cpsie	i
 80032ec:	b661      	cpsie	f
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	df00      	svc	0
 80032f8:	bf00      	nop
 80032fa:	0000      	.short	0x0000
 80032fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop

08003304 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800330a:	4b46      	ldr	r3, [pc, #280]	; (8003424 <xPortStartScheduler+0x120>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a46      	ldr	r2, [pc, #280]	; (8003428 <xPortStartScheduler+0x124>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d10a      	bne.n	800332a <xPortStartScheduler+0x26>
        __asm volatile
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	613b      	str	r3, [r7, #16]
    }
 8003326:	bf00      	nop
 8003328:	e7fe      	b.n	8003328 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800332a:	4b3e      	ldr	r3, [pc, #248]	; (8003424 <xPortStartScheduler+0x120>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a3f      	ldr	r2, [pc, #252]	; (800342c <xPortStartScheduler+0x128>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d10a      	bne.n	800334a <xPortStartScheduler+0x46>
        __asm volatile
 8003334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003338:	f383 8811 	msr	BASEPRI, r3
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	60fb      	str	r3, [r7, #12]
    }
 8003346:	bf00      	nop
 8003348:	e7fe      	b.n	8003348 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800334a:	4b39      	ldr	r3, [pc, #228]	; (8003430 <xPortStartScheduler+0x12c>)
 800334c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	b2db      	uxtb	r3, r3
 8003354:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	22ff      	movs	r2, #255	; 0xff
 800335a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800336c:	b2da      	uxtb	r2, r3
 800336e:	4b31      	ldr	r3, [pc, #196]	; (8003434 <xPortStartScheduler+0x130>)
 8003370:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003372:	4b31      	ldr	r3, [pc, #196]	; (8003438 <xPortStartScheduler+0x134>)
 8003374:	2207      	movs	r2, #7
 8003376:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003378:	e009      	b.n	800338e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800337a:	4b2f      	ldr	r3, [pc, #188]	; (8003438 <xPortStartScheduler+0x134>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3b01      	subs	r3, #1
 8003380:	4a2d      	ldr	r2, [pc, #180]	; (8003438 <xPortStartScheduler+0x134>)
 8003382:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	b2db      	uxtb	r3, r3
 800338c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800338e:	78fb      	ldrb	r3, [r7, #3]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003396:	2b80      	cmp	r3, #128	; 0x80
 8003398:	d0ef      	beq.n	800337a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800339a:	4b27      	ldr	r3, [pc, #156]	; (8003438 <xPortStartScheduler+0x134>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f1c3 0307 	rsb	r3, r3, #7
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d00a      	beq.n	80033bc <xPortStartScheduler+0xb8>
        __asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	60bb      	str	r3, [r7, #8]
    }
 80033b8:	bf00      	nop
 80033ba:	e7fe      	b.n	80033ba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80033bc:	4b1e      	ldr	r3, [pc, #120]	; (8003438 <xPortStartScheduler+0x134>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	021b      	lsls	r3, r3, #8
 80033c2:	4a1d      	ldr	r2, [pc, #116]	; (8003438 <xPortStartScheduler+0x134>)
 80033c4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80033c6:	4b1c      	ldr	r3, [pc, #112]	; (8003438 <xPortStartScheduler+0x134>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033ce:	4a1a      	ldr	r2, [pc, #104]	; (8003438 <xPortStartScheduler+0x134>)
 80033d0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80033da:	4b18      	ldr	r3, [pc, #96]	; (800343c <xPortStartScheduler+0x138>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a17      	ldr	r2, [pc, #92]	; (800343c <xPortStartScheduler+0x138>)
 80033e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80033e6:	4b15      	ldr	r3, [pc, #84]	; (800343c <xPortStartScheduler+0x138>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a14      	ldr	r2, [pc, #80]	; (800343c <xPortStartScheduler+0x138>)
 80033ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80033f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80033f2:	f000 f95b 	bl	80036ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80033f6:	4b12      	ldr	r3, [pc, #72]	; (8003440 <xPortStartScheduler+0x13c>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80033fc:	f000 f97a 	bl	80036f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003400:	4b10      	ldr	r3, [pc, #64]	; (8003444 <xPortStartScheduler+0x140>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a0f      	ldr	r2, [pc, #60]	; (8003444 <xPortStartScheduler+0x140>)
 8003406:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800340a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800340c:	f7ff ff64 	bl	80032d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003410:	f7ff fde2 	bl	8002fd8 <vTaskSwitchContext>
    prvTaskExitError();
 8003414:	f7ff ff1c 	bl	8003250 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	e000ed00 	.word	0xe000ed00
 8003428:	410fc271 	.word	0x410fc271
 800342c:	410fc270 	.word	0x410fc270
 8003430:	e000e400 	.word	0xe000e400
 8003434:	2000022c 	.word	0x2000022c
 8003438:	20000230 	.word	0x20000230
 800343c:	e000ed20 	.word	0xe000ed20
 8003440:	20000010 	.word	0x20000010
 8003444:	e000ef34 	.word	0xe000ef34

08003448 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800344e:	4b37      	ldr	r3, [pc, #220]	; (800352c <vInitPrioGroupValue+0xe4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a37      	ldr	r2, [pc, #220]	; (8003530 <vInitPrioGroupValue+0xe8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d10a      	bne.n	800346e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345c:	f383 8811 	msr	BASEPRI, r3
 8003460:	f3bf 8f6f 	isb	sy
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	613b      	str	r3, [r7, #16]
    }
 800346a:	bf00      	nop
 800346c:	e7fe      	b.n	800346c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800346e:	4b2f      	ldr	r3, [pc, #188]	; (800352c <vInitPrioGroupValue+0xe4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a30      	ldr	r2, [pc, #192]	; (8003534 <vInitPrioGroupValue+0xec>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d10a      	bne.n	800348e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347c:	f383 8811 	msr	BASEPRI, r3
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	60fb      	str	r3, [r7, #12]
    }
 800348a:	bf00      	nop
 800348c:	e7fe      	b.n	800348c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800348e:	4b2a      	ldr	r3, [pc, #168]	; (8003538 <vInitPrioGroupValue+0xf0>)
 8003490:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	22ff      	movs	r2, #255	; 0xff
 800349e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	4b22      	ldr	r3, [pc, #136]	; (800353c <vInitPrioGroupValue+0xf4>)
 80034b4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80034b6:	4b22      	ldr	r3, [pc, #136]	; (8003540 <vInitPrioGroupValue+0xf8>)
 80034b8:	2207      	movs	r2, #7
 80034ba:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034bc:	e009      	b.n	80034d2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <vInitPrioGroupValue+0xf8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	4a1e      	ldr	r2, [pc, #120]	; (8003540 <vInitPrioGroupValue+0xf8>)
 80034c6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80034c8:	78fb      	ldrb	r3, [r7, #3]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034da:	2b80      	cmp	r3, #128	; 0x80
 80034dc:	d0ef      	beq.n	80034be <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80034de:	4b18      	ldr	r3, [pc, #96]	; (8003540 <vInitPrioGroupValue+0xf8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f1c3 0307 	rsb	r3, r3, #7
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d00a      	beq.n	8003500 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	60bb      	str	r3, [r7, #8]
    }
 80034fc:	bf00      	nop
 80034fe:	e7fe      	b.n	80034fe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003500:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <vInitPrioGroupValue+0xf8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	021b      	lsls	r3, r3, #8
 8003506:	4a0e      	ldr	r2, [pc, #56]	; (8003540 <vInitPrioGroupValue+0xf8>)
 8003508:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <vInitPrioGroupValue+0xf8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003512:	4a0b      	ldr	r2, [pc, #44]	; (8003540 <vInitPrioGroupValue+0xf8>)
 8003514:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	b2da      	uxtb	r2, r3
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	e000ed00 	.word	0xe000ed00
 8003530:	410fc271 	.word	0x410fc271
 8003534:	410fc270 	.word	0x410fc270
 8003538:	e000e400 	.word	0xe000e400
 800353c:	2000022c 	.word	0x2000022c
 8003540:	20000230 	.word	0x20000230

08003544 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
        __asm volatile
 800354a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	607b      	str	r3, [r7, #4]
    }
 800355c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800355e:	4b0f      	ldr	r3, [pc, #60]	; (800359c <vPortEnterCritical+0x58>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3301      	adds	r3, #1
 8003564:	4a0d      	ldr	r2, [pc, #52]	; (800359c <vPortEnterCritical+0x58>)
 8003566:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <vPortEnterCritical+0x58>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d10f      	bne.n	8003590 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003570:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <vPortEnterCritical+0x5c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <vPortEnterCritical+0x4c>
        __asm volatile
 800357a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	603b      	str	r3, [r7, #0]
    }
 800358c:	bf00      	nop
 800358e:	e7fe      	b.n	800358e <vPortEnterCritical+0x4a>
    }
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	20000010 	.word	0x20000010
 80035a0:	e000ed04 	.word	0xe000ed04

080035a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80035aa:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <vPortExitCritical+0x50>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <vPortExitCritical+0x24>
        __asm volatile
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	607b      	str	r3, [r7, #4]
    }
 80035c4:	bf00      	nop
 80035c6:	e7fe      	b.n	80035c6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80035c8:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <vPortExitCritical+0x50>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	4a09      	ldr	r2, [pc, #36]	; (80035f4 <vPortExitCritical+0x50>)
 80035d0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80035d2:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <vPortExitCritical+0x50>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d105      	bne.n	80035e6 <vPortExitCritical+0x42>
 80035da:	2300      	movs	r3, #0
 80035dc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80035e4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	20000010 	.word	0x20000010
	...

08003600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003600:	f3ef 8009 	mrs	r0, PSP
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	4b15      	ldr	r3, [pc, #84]	; (8003660 <pxCurrentTCBConst>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	f01e 0f10 	tst.w	lr, #16
 8003610:	bf08      	it	eq
 8003612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800361a:	6010      	str	r0, [r2, #0]
 800361c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003620:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003624:	f380 8811 	msr	BASEPRI, r0
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f7ff fcd2 	bl	8002fd8 <vTaskSwitchContext>
 8003634:	f04f 0000 	mov.w	r0, #0
 8003638:	f380 8811 	msr	BASEPRI, r0
 800363c:	bc09      	pop	{r0, r3}
 800363e:	6819      	ldr	r1, [r3, #0]
 8003640:	6808      	ldr	r0, [r1, #0]
 8003642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003646:	f01e 0f10 	tst.w	lr, #16
 800364a:	bf08      	it	eq
 800364c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003650:	f380 8809 	msr	PSP, r0
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	f3af 8000 	nop.w

08003660 <pxCurrentTCBConst>:
 8003660:	20000128 	.word	0x20000128
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop

08003668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
        __asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	607b      	str	r3, [r7, #4]
    }
 8003680:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003682:	f7ff fc13 	bl	8002eac <xTaskIncrementTick>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800368c:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <SysTick_Handler+0x40>)
 800368e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	2300      	movs	r3, #0
 8003696:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	f383 8811 	msr	BASEPRI, r3
    }
 800369e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80036a0:	bf00      	nop
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	e000ed04 	.word	0xe000ed04

080036ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <vPortSetupTimerInterrupt+0x34>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80036b6:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <vPortSetupTimerInterrupt+0x38>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80036bc:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <vPortSetupTimerInterrupt+0x3c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <vPortSetupTimerInterrupt+0x40>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	099b      	lsrs	r3, r3, #6
 80036c8:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <vPortSetupTimerInterrupt+0x44>)
 80036ca:	3b01      	subs	r3, #1
 80036cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80036ce:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <vPortSetupTimerInterrupt+0x34>)
 80036d0:	2207      	movs	r2, #7
 80036d2:	601a      	str	r2, [r3, #0]
}
 80036d4:	bf00      	nop
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	e000e010 	.word	0xe000e010
 80036e4:	e000e018 	.word	0xe000e018
 80036e8:	20000000 	.word	0x20000000
 80036ec:	10624dd3 	.word	0x10624dd3
 80036f0:	e000e014 	.word	0xe000e014

080036f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80036f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003704 <vPortEnableVFP+0x10>
 80036f8:	6801      	ldr	r1, [r0, #0]
 80036fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80036fe:	6001      	str	r1, [r0, #0]
 8003700:	4770      	bx	lr
 8003702:	0000      	.short	0x0000
 8003704:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003708:	bf00      	nop
 800370a:	bf00      	nop

0800370c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003712:	f3ef 8305 	mrs	r3, IPSR
 8003716:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b0f      	cmp	r3, #15
 800371c:	d914      	bls.n	8003748 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800371e:	4a17      	ldr	r2, [pc, #92]	; (800377c <vPortValidateInterruptPriority+0x70>)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4413      	add	r3, r2
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003728:	4b15      	ldr	r3, [pc, #84]	; (8003780 <vPortValidateInterruptPriority+0x74>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	7afa      	ldrb	r2, [r7, #11]
 800372e:	429a      	cmp	r2, r3
 8003730:	d20a      	bcs.n	8003748 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	607b      	str	r3, [r7, #4]
    }
 8003744:	bf00      	nop
 8003746:	e7fe      	b.n	8003746 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003748:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <vPortValidateInterruptPriority+0x78>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003750:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <vPortValidateInterruptPriority+0x7c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d90a      	bls.n	800376e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	603b      	str	r3, [r7, #0]
    }
 800376a:	bf00      	nop
 800376c:	e7fe      	b.n	800376c <vPortValidateInterruptPriority+0x60>
    }
 800376e:	bf00      	nop
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	e000e3f0 	.word	0xe000e3f0
 8003780:	2000022c 	.word	0x2000022c
 8003784:	e000ed0c 	.word	0xe000ed0c
 8003788:	20000230 	.word	0x20000230

0800378c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08a      	sub	sp, #40	; 0x28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003798:	f7ff fada 	bl	8002d50 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800379c:	4b65      	ldr	r3, [pc, #404]	; (8003934 <pvPortMalloc+0x1a8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80037a4:	f000 f934 	bl	8003a10 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80037a8:	4b63      	ldr	r3, [pc, #396]	; (8003938 <pvPortMalloc+0x1ac>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f040 80a7 	bne.w	8003904 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d02d      	beq.n	8003818 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80037bc:	2208      	movs	r2, #8
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d227      	bcs.n	8003818 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80037c8:	2208      	movs	r2, #8
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4413      	add	r3, r2
 80037ce:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d021      	beq.n	800381e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f023 0307 	bic.w	r3, r3, #7
 80037e0:	3308      	adds	r3, #8
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d214      	bcs.n	8003812 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f023 0307 	bic.w	r3, r3, #7
 80037ee:	3308      	adds	r3, #8
 80037f0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d010      	beq.n	800381e <pvPortMalloc+0x92>
        __asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	617b      	str	r3, [r7, #20]
    }
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003816:	e002      	b.n	800381e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003818:	2300      	movs	r3, #0
 800381a:	607b      	str	r3, [r7, #4]
 800381c:	e000      	b.n	8003820 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800381e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d06e      	beq.n	8003904 <pvPortMalloc+0x178>
 8003826:	4b45      	ldr	r3, [pc, #276]	; (800393c <pvPortMalloc+0x1b0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	429a      	cmp	r2, r3
 800382e:	d869      	bhi.n	8003904 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003830:	4b43      	ldr	r3, [pc, #268]	; (8003940 <pvPortMalloc+0x1b4>)
 8003832:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003834:	4b42      	ldr	r3, [pc, #264]	; (8003940 <pvPortMalloc+0x1b4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800383a:	e004      	b.n	8003846 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	429a      	cmp	r2, r3
 800384e:	d903      	bls.n	8003858 <pvPortMalloc+0xcc>
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1f1      	bne.n	800383c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003858:	4b36      	ldr	r3, [pc, #216]	; (8003934 <pvPortMalloc+0x1a8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385e:	429a      	cmp	r2, r3
 8003860:	d050      	beq.n	8003904 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2208      	movs	r2, #8
 8003868:	4413      	add	r3, r2
 800386a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	1ad2      	subs	r2, r2, r3
 800387c:	2308      	movs	r3, #8
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	429a      	cmp	r2, r3
 8003882:	d91f      	bls.n	80038c4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4413      	add	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <pvPortMalloc+0x120>
        __asm volatile
 8003896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	613b      	str	r3, [r7, #16]
    }
 80038a8:	bf00      	nop
 80038aa:	e7fe      	b.n	80038aa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	1ad2      	subs	r2, r2, r3
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80038be:	69b8      	ldr	r0, [r7, #24]
 80038c0:	f000 f908 	bl	8003ad4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038c4:	4b1d      	ldr	r3, [pc, #116]	; (800393c <pvPortMalloc+0x1b0>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	4a1b      	ldr	r2, [pc, #108]	; (800393c <pvPortMalloc+0x1b0>)
 80038d0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038d2:	4b1a      	ldr	r3, [pc, #104]	; (800393c <pvPortMalloc+0x1b0>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <pvPortMalloc+0x1b8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d203      	bcs.n	80038e6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80038de:	4b17      	ldr	r3, [pc, #92]	; (800393c <pvPortMalloc+0x1b0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a18      	ldr	r2, [pc, #96]	; (8003944 <pvPortMalloc+0x1b8>)
 80038e4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	4b13      	ldr	r3, [pc, #76]	; (8003938 <pvPortMalloc+0x1ac>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80038fa:	4b13      	ldr	r3, [pc, #76]	; (8003948 <pvPortMalloc+0x1bc>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3301      	adds	r3, #1
 8003900:	4a11      	ldr	r2, [pc, #68]	; (8003948 <pvPortMalloc+0x1bc>)
 8003902:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003904:	f7ff fa32 	bl	8002d6c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <pvPortMalloc+0x19c>
        __asm volatile
 8003912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	60fb      	str	r3, [r7, #12]
    }
 8003924:	bf00      	nop
 8003926:	e7fe      	b.n	8003926 <pvPortMalloc+0x19a>
    return pvReturn;
 8003928:	69fb      	ldr	r3, [r7, #28]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3728      	adds	r7, #40	; 0x28
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20012e3c 	.word	0x20012e3c
 8003938:	20012e50 	.word	0x20012e50
 800393c:	20012e40 	.word	0x20012e40
 8003940:	20012e34 	.word	0x20012e34
 8003944:	20012e44 	.word	0x20012e44
 8003948:	20012e48 	.word	0x20012e48

0800394c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d04d      	beq.n	80039fa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800395e:	2308      	movs	r3, #8
 8003960:	425b      	negs	r3, r3
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4413      	add	r3, r2
 8003966:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <vPortFree+0xb8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10a      	bne.n	8003990 <vPortFree+0x44>
        __asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	60fb      	str	r3, [r7, #12]
    }
 800398c:	bf00      	nop
 800398e:	e7fe      	b.n	800398e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <vPortFree+0x62>
        __asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	60bb      	str	r3, [r7, #8]
    }
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <vPortFree+0xb8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d01e      	beq.n	80039fa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d11a      	bne.n	80039fa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <vPortFree+0xb8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	43db      	mvns	r3, r3
 80039ce:	401a      	ands	r2, r3
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80039d4:	f7ff f9bc 	bl	8002d50 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <vPortFree+0xbc>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4413      	add	r3, r2
 80039e2:	4a09      	ldr	r2, [pc, #36]	; (8003a08 <vPortFree+0xbc>)
 80039e4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039e6:	6938      	ldr	r0, [r7, #16]
 80039e8:	f000 f874 	bl	8003ad4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80039ec:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <vPortFree+0xc0>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3301      	adds	r3, #1
 80039f2:	4a06      	ldr	r2, [pc, #24]	; (8003a0c <vPortFree+0xc0>)
 80039f4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80039f6:	f7ff f9b9 	bl	8002d6c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80039fa:	bf00      	nop
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20012e50 	.word	0x20012e50
 8003a08:	20012e40 	.word	0x20012e40
 8003a0c:	20012e4c 	.word	0x20012e4c

08003a10 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a16:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003a1a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003a1c:	4b27      	ldr	r3, [pc, #156]	; (8003abc <prvHeapInit+0xac>)
 8003a1e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00c      	beq.n	8003a44 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3307      	adds	r3, #7
 8003a2e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0307 	bic.w	r3, r3, #7
 8003a36:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	4a1f      	ldr	r2, [pc, #124]	; (8003abc <prvHeapInit+0xac>)
 8003a40:	4413      	add	r3, r2
 8003a42:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a48:	4a1d      	ldr	r2, [pc, #116]	; (8003ac0 <prvHeapInit+0xb0>)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003a4e:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <prvHeapInit+0xb0>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	4413      	add	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003a5c:	2208      	movs	r2, #8
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0307 	bic.w	r3, r3, #7
 8003a6a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4a15      	ldr	r2, [pc, #84]	; (8003ac4 <prvHeapInit+0xb4>)
 8003a70:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003a72:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <prvHeapInit+0xb4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2200      	movs	r2, #0
 8003a78:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003a7a:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <prvHeapInit+0xb4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	1ad2      	subs	r2, r2, r3
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <prvHeapInit+0xb4>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4a0a      	ldr	r2, [pc, #40]	; (8003ac8 <prvHeapInit+0xb8>)
 8003a9e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	4a09      	ldr	r2, [pc, #36]	; (8003acc <prvHeapInit+0xbc>)
 8003aa6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003aa8:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <prvHeapInit+0xc0>)
 8003aaa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003aae:	601a      	str	r2, [r3, #0]
}
 8003ab0:	bf00      	nop
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	20000234 	.word	0x20000234
 8003ac0:	20012e34 	.word	0x20012e34
 8003ac4:	20012e3c 	.word	0x20012e3c
 8003ac8:	20012e44 	.word	0x20012e44
 8003acc:	20012e40 	.word	0x20012e40
 8003ad0:	20012e50 	.word	0x20012e50

08003ad4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003adc:	4b28      	ldr	r3, [pc, #160]	; (8003b80 <prvInsertBlockIntoFreeList+0xac>)
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	e002      	b.n	8003ae8 <prvInsertBlockIntoFreeList+0x14>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d8f7      	bhi.n	8003ae2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	4413      	add	r3, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d108      	bne.n	8003b16 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	441a      	add	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	441a      	add	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d118      	bne.n	8003b5c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	4b15      	ldr	r3, [pc, #84]	; (8003b84 <prvInsertBlockIntoFreeList+0xb0>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d00d      	beq.n	8003b52 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	441a      	add	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	e008      	b.n	8003b64 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b52:	4b0c      	ldr	r3, [pc, #48]	; (8003b84 <prvInsertBlockIntoFreeList+0xb0>)
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	e003      	b.n	8003b64 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d002      	beq.n	8003b72 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b72:	bf00      	nop
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20012e34 	.word	0x20012e34
 8003b84:	20012e3c 	.word	0x20012e3c

08003b88 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003b8c:	4803      	ldr	r0, [pc, #12]	; (8003b9c <_cbSendSystemDesc+0x14>)
 8003b8e:	f001 fc43 	bl	8005418 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003b92:	4803      	ldr	r0, [pc, #12]	; (8003ba0 <_cbSendSystemDesc+0x18>)
 8003b94:	f001 fc40 	bl	8005418 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003b98:	bf00      	nop
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	08006084 	.word	0x08006084
 8003ba0:	080060c0 	.word	0x080060c0

08003ba4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003ba8:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <SEGGER_SYSVIEW_Conf+0x20>)
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <SEGGER_SYSVIEW_Conf+0x20>)
 8003bae:	6819      	ldr	r1, [r3, #0]
 8003bb0:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <SEGGER_SYSVIEW_Conf+0x24>)
 8003bb2:	4a06      	ldr	r2, [pc, #24]	; (8003bcc <SEGGER_SYSVIEW_Conf+0x28>)
 8003bb4:	f001 f8b6 	bl	8004d24 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003bb8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003bbc:	f001 f8f6 	bl	8004dac <SEGGER_SYSVIEW_SetRAMBase>
}
 8003bc0:	bf00      	nop
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	20000000 	.word	0x20000000
 8003bc8:	08003b89 	.word	0x08003b89
 8003bcc:	08006104 	.word	0x08006104

08003bd0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	e033      	b.n	8003c44 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003bdc:	491e      	ldr	r1, [pc, #120]	; (8003c58 <_cbSendTaskList+0x88>)
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	491a      	ldr	r1, [pc, #104]	; (8003c58 <_cbSendTaskList+0x88>)
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	6819      	ldr	r1, [r3, #0]
 8003bfe:	4c16      	ldr	r4, [pc, #88]	; (8003c58 <_cbSendTaskList+0x88>)
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4423      	add	r3, r4
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	681c      	ldr	r4, [r3, #0]
 8003c10:	4d11      	ldr	r5, [pc, #68]	; (8003c58 <_cbSendTaskList+0x88>)
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	442b      	add	r3, r5
 8003c1e:	330c      	adds	r3, #12
 8003c20:	681d      	ldr	r5, [r3, #0]
 8003c22:	4e0d      	ldr	r6, [pc, #52]	; (8003c58 <_cbSendTaskList+0x88>)
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4433      	add	r3, r6
 8003c30:	3310      	adds	r3, #16
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	462b      	mov	r3, r5
 8003c38:	4622      	mov	r2, r4
 8003c3a:	f000 f854 	bl	8003ce6 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3301      	adds	r3, #1
 8003c42:	607b      	str	r3, [r7, #4]
 8003c44:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <_cbSendTaskList+0x8c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d3c6      	bcc.n	8003bdc <_cbSendTaskList+0xc>
  }
}
 8003c4e:	bf00      	nop
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c58:	20012e54 	.word	0x20012e54
 8003c5c:	20012ef4 	.word	0x20012ef4

08003c60 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c64:	b082      	sub	sp, #8
 8003c66:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003c68:	f7ff f90e 	bl	8002e88 <xTaskGetTickCountFromISR>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2200      	movs	r2, #0
 8003c70:	469a      	mov	sl, r3
 8003c72:	4693      	mov	fp, r2
 8003c74:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003c78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	f04f 0a00 	mov.w	sl, #0
 8003c84:	f04f 0b00 	mov.w	fp, #0
 8003c88:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003c8c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003c90:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003c94:	4652      	mov	r2, sl
 8003c96:	465b      	mov	r3, fp
 8003c98:	1a14      	subs	r4, r2, r0
 8003c9a:	eb63 0501 	sbc.w	r5, r3, r1
 8003c9e:	f04f 0200 	mov.w	r2, #0
 8003ca2:	f04f 0300 	mov.w	r3, #0
 8003ca6:	00ab      	lsls	r3, r5, #2
 8003ca8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003cac:	00a2      	lsls	r2, r4, #2
 8003cae:	4614      	mov	r4, r2
 8003cb0:	461d      	mov	r5, r3
 8003cb2:	eb14 0800 	adds.w	r8, r4, r0
 8003cb6:	eb45 0901 	adc.w	r9, r5, r1
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cce:	4690      	mov	r8, r2
 8003cd0:	4699      	mov	r9, r3
 8003cd2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003cd6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003cda:	4610      	mov	r0, r2
 8003cdc:	4619      	mov	r1, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003ce6 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b08a      	sub	sp, #40	; 0x28
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	607a      	str	r2, [r7, #4]
 8003cf2:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003cf4:	f107 0314 	add.w	r3, r7, #20
 8003cf8:	2214      	movs	r2, #20
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f001 fd13 	bl	8005728 <memset>
  TaskInfo.TaskID     = TaskID;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003d16:	f107 0314 	add.w	r3, r7, #20
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f001 fa84 	bl	8005228 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003d20:	bf00      	nop
 8003d22:	3728      	adds	r7, #40	; 0x28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003d2e:	4b26      	ldr	r3, [pc, #152]	; (8003dc8 <_DoInit+0xa0>)
 8003d30:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003d32:	22a8      	movs	r2, #168	; 0xa8
 8003d34:	2100      	movs	r1, #0
 8003d36:	6838      	ldr	r0, [r7, #0]
 8003d38:	f001 fcf6 	bl	8005728 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2203      	movs	r2, #3
 8003d40:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2203      	movs	r2, #3
 8003d46:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	4a20      	ldr	r2, [pc, #128]	; (8003dcc <_DoInit+0xa4>)
 8003d4c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	4a1f      	ldr	r2, [pc, #124]	; (8003dd0 <_DoInit+0xa8>)
 8003d52:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d5a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2200      	movs	r2, #0
 8003d66:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	4a16      	ldr	r2, [pc, #88]	; (8003dcc <_DoInit+0xa4>)
 8003d72:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	4a17      	ldr	r2, [pc, #92]	; (8003dd4 <_DoInit+0xac>)
 8003d78:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2210      	movs	r2, #16
 8003d7e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2200      	movs	r2, #0
 8003d84:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003d92:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003d96:	2300      	movs	r3, #0
 8003d98:	607b      	str	r3, [r7, #4]
 8003d9a:	e00c      	b.n	8003db6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f1c3 030f 	rsb	r3, r3, #15
 8003da2:	4a0d      	ldr	r2, [pc, #52]	; (8003dd8 <_DoInit+0xb0>)
 8003da4:	5cd1      	ldrb	r1, [r2, r3]
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4413      	add	r3, r2
 8003dac:	460a      	mov	r2, r1
 8003dae:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3301      	adds	r3, #1
 8003db4:	607b      	str	r3, [r7, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b0f      	cmp	r3, #15
 8003dba:	d9ef      	bls.n	8003d9c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003dbc:	f3bf 8f5f 	dmb	sy
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20012ef8 	.word	0x20012ef8
 8003dcc:	080060d0 	.word	0x080060d0
 8003dd0:	20012fa0 	.word	0x20012fa0
 8003dd4:	200133a0 	.word	0x200133a0
 8003dd8:	0800610c 	.word	0x0800610c

08003ddc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08c      	sub	sp, #48	; 0x30
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003de8:	4b3e      	ldr	r3, [pc, #248]	; (8003ee4 <SEGGER_RTT_ReadNoLock+0x108>)
 8003dea:	623b      	str	r3, [r7, #32]
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <SEGGER_RTT_ReadNoLock+0x1e>
 8003df6:	f7ff ff97 	bl	8003d28 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	4413      	add	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	3360      	adds	r3, #96	; 0x60
 8003e06:	4a37      	ldr	r2, [pc, #220]	; (8003ee4 <SEGGER_RTT_ReadNoLock+0x108>)
 8003e08:	4413      	add	r3, r2
 8003e0a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d92b      	bls.n	8003e80 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4293      	cmp	r3, r2
 8003e38:	bf28      	it	cs
 8003e3a:	4613      	movcs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e44:	4413      	add	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	6939      	ldr	r1, [r7, #16]
 8003e4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e4e:	f001 fc5d 	bl	800570c <memcpy>
    NumBytesRead += NumBytesRem;
 8003e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	4413      	add	r3, r2
 8003e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	4413      	add	r3, r2
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	4413      	add	r3, r2
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d101      	bne.n	8003e80 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	bf28      	it	cs
 8003e90:	4613      	movcs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d019      	beq.n	8003ece <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea0:	4413      	add	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	6939      	ldr	r1, [r7, #16]
 8003ea8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eaa:	f001 fc2f 	bl	800570c <memcpy>
    NumBytesRead += NumBytesRem;
 8003eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	4413      	add	r3, r2
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	4413      	add	r3, r2
 8003ecc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ed8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3730      	adds	r7, #48	; 0x30
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20012ef8 	.word	0x20012ef8

08003ee8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003ef6:	4b3d      	ldr	r3, [pc, #244]	; (8003fec <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003f04:	f7ff ff10 	bl	8003d28 <_DoInit>
  SEGGER_RTT_LOCK();
 8003f08:	f3ef 8311 	mrs	r3, BASEPRI
 8003f0c:	f04f 0120 	mov.w	r1, #32
 8003f10:	f381 8811 	msr	BASEPRI, r1
 8003f14:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f16:	4b35      	ldr	r3, [pc, #212]	; (8003fec <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003f18:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003f1e:	6939      	ldr	r1, [r7, #16]
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	4613      	mov	r3, r2
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	4413      	add	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	440b      	add	r3, r1
 8003f2e:	3304      	adds	r3, #4
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d008      	beq.n	8003f48 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	dbeb      	blt.n	8003f1e <SEGGER_RTT_AllocUpBuffer+0x36>
 8003f46:	e000      	b.n	8003f4a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003f48:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	da3f      	bge.n	8003fd4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003f54:	6939      	ldr	r1, [r7, #16]
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	4413      	add	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	440b      	add	r3, r1
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003f68:	6939      	ldr	r1, [r7, #16]
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	4613      	mov	r3, r2
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	4413      	add	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	440b      	add	r3, r1
 8003f78:	3304      	adds	r3, #4
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003f7e:	6939      	ldr	r1, [r7, #16]
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	4613      	mov	r3, r2
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	4413      	add	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	440b      	add	r3, r1
 8003f8c:	3320      	adds	r3, #32
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003f92:	6939      	ldr	r1, [r7, #16]
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	4613      	mov	r3, r2
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	4413      	add	r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	440b      	add	r3, r1
 8003fa0:	3328      	adds	r3, #40	; 0x28
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003fa6:	6939      	ldr	r1, [r7, #16]
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	4613      	mov	r3, r2
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	4413      	add	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	440b      	add	r3, r1
 8003fb4:	3324      	adds	r3, #36	; 0x24
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003fba:	6939      	ldr	r1, [r7, #16]
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	4413      	add	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	440b      	add	r3, r1
 8003fc8:	332c      	adds	r3, #44	; 0x2c
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003fce:	f3bf 8f5f 	dmb	sy
 8003fd2:	e002      	b.n	8003fda <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fd8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003fe0:	69fb      	ldr	r3, [r7, #28]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3720      	adds	r7, #32
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	20012ef8 	.word	0x20012ef8

08003ff0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08a      	sub	sp, #40	; 0x28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003ffe:	4b21      	ldr	r3, [pc, #132]	; (8004084 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004000:	623b      	str	r3, [r7, #32]
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800400c:	f7ff fe8c 	bl	8003d28 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004010:	4b1c      	ldr	r3, [pc, #112]	; (8004084 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004012:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b02      	cmp	r3, #2
 8004018:	d82c      	bhi.n	8004074 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800401a:	f3ef 8311 	mrs	r3, BASEPRI
 800401e:	f04f 0120 	mov.w	r1, #32
 8004022:	f381 8811 	msr	BASEPRI, r1
 8004026:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4613      	mov	r3, r2
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	4413      	add	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	3360      	adds	r3, #96	; 0x60
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	4413      	add	r3, r2
 8004038:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00e      	beq.n	800405e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2200      	movs	r2, #0
 8004056:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2200      	movs	r2, #0
 800405c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004062:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004064:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800406e:	2300      	movs	r3, #0
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
 8004072:	e002      	b.n	800407a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800407c:	4618      	mov	r0, r3
 800407e:	3728      	adds	r7, #40	; 0x28
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20012ef8 	.word	0x20012ef8

08004088 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	60fa      	str	r2, [r7, #12]
 800409e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b80      	cmp	r3, #128	; 0x80
 80040a4:	d90a      	bls.n	80040bc <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80040a6:	2380      	movs	r3, #128	; 0x80
 80040a8:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80040aa:	e007      	b.n	80040bc <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	1c53      	adds	r3, r2, #1
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1c59      	adds	r1, r3, #1
 80040b6:	60f9      	str	r1, [r7, #12]
 80040b8:	7812      	ldrb	r2, [r2, #0]
 80040ba:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	1e5a      	subs	r2, r3, #1
 80040c0:	607a      	str	r2, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <_EncodeStr+0x46>
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1ee      	bne.n	80040ac <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80040da:	68fb      	ldr	r3, [r7, #12]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3307      	adds	r3, #7
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004106:	4b35      	ldr	r3, [pc, #212]	; (80041dc <_HandleIncomingPacket+0xdc>)
 8004108:	7e1b      	ldrb	r3, [r3, #24]
 800410a:	4618      	mov	r0, r3
 800410c:	1cfb      	adds	r3, r7, #3
 800410e:	2201      	movs	r2, #1
 8004110:	4619      	mov	r1, r3
 8004112:	f7ff fe63 	bl	8003ddc <SEGGER_RTT_ReadNoLock>
 8004116:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d052      	beq.n	80041c4 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800411e:	78fb      	ldrb	r3, [r7, #3]
 8004120:	2b80      	cmp	r3, #128	; 0x80
 8004122:	d031      	beq.n	8004188 <_HandleIncomingPacket+0x88>
 8004124:	2b80      	cmp	r3, #128	; 0x80
 8004126:	dc40      	bgt.n	80041aa <_HandleIncomingPacket+0xaa>
 8004128:	2b07      	cmp	r3, #7
 800412a:	dc15      	bgt.n	8004158 <_HandleIncomingPacket+0x58>
 800412c:	2b00      	cmp	r3, #0
 800412e:	dd3c      	ble.n	80041aa <_HandleIncomingPacket+0xaa>
 8004130:	3b01      	subs	r3, #1
 8004132:	2b06      	cmp	r3, #6
 8004134:	d839      	bhi.n	80041aa <_HandleIncomingPacket+0xaa>
 8004136:	a201      	add	r2, pc, #4	; (adr r2, 800413c <_HandleIncomingPacket+0x3c>)
 8004138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413c:	0800415f 	.word	0x0800415f
 8004140:	08004165 	.word	0x08004165
 8004144:	0800416b 	.word	0x0800416b
 8004148:	08004171 	.word	0x08004171
 800414c:	08004177 	.word	0x08004177
 8004150:	0800417d 	.word	0x0800417d
 8004154:	08004183 	.word	0x08004183
 8004158:	2b7f      	cmp	r3, #127	; 0x7f
 800415a:	d035      	beq.n	80041c8 <_HandleIncomingPacket+0xc8>
 800415c:	e025      	b.n	80041aa <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800415e:	f000 fee9 	bl	8004f34 <SEGGER_SYSVIEW_Start>
      break;
 8004162:	e036      	b.n	80041d2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004164:	f000 ffa0 	bl	80050a8 <SEGGER_SYSVIEW_Stop>
      break;
 8004168:	e033      	b.n	80041d2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800416a:	f001 f979 	bl	8005460 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800416e:	e030      	b.n	80041d2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004170:	f001 f93e 	bl	80053f0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004174:	e02d      	b.n	80041d2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004176:	f000 ffbd 	bl	80050f4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800417a:	e02a      	b.n	80041d2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800417c:	f001 fa4a 	bl	8005614 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004180:	e027      	b.n	80041d2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004182:	f001 fa29 	bl	80055d8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004186:	e024      	b.n	80041d2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004188:	4b14      	ldr	r3, [pc, #80]	; (80041dc <_HandleIncomingPacket+0xdc>)
 800418a:	7e1b      	ldrb	r3, [r3, #24]
 800418c:	4618      	mov	r0, r3
 800418e:	1cfb      	adds	r3, r7, #3
 8004190:	2201      	movs	r2, #1
 8004192:	4619      	mov	r1, r3
 8004194:	f7ff fe22 	bl	8003ddc <SEGGER_RTT_ReadNoLock>
 8004198:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d015      	beq.n	80041cc <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f001 f98e 	bl	80054c4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80041a8:	e010      	b.n	80041cc <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	b25b      	sxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	da0e      	bge.n	80041d0 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80041b2:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <_HandleIncomingPacket+0xdc>)
 80041b4:	7e1b      	ldrb	r3, [r3, #24]
 80041b6:	4618      	mov	r0, r3
 80041b8:	1cfb      	adds	r3, r7, #3
 80041ba:	2201      	movs	r2, #1
 80041bc:	4619      	mov	r1, r3
 80041be:	f7ff fe0d 	bl	8003ddc <SEGGER_RTT_ReadNoLock>
      }
      break;
 80041c2:	e005      	b.n	80041d0 <_HandleIncomingPacket+0xd0>
    }
  }
 80041c4:	bf00      	nop
 80041c6:	e004      	b.n	80041d2 <_HandleIncomingPacket+0xd2>
      break;
 80041c8:	bf00      	nop
 80041ca:	e002      	b.n	80041d2 <_HandleIncomingPacket+0xd2>
      break;
 80041cc:	bf00      	nop
 80041ce:	e000      	b.n	80041d2 <_HandleIncomingPacket+0xd2>
      break;
 80041d0:	bf00      	nop
}
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	200143b8 	.word	0x200143b8

080041e0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08c      	sub	sp, #48	; 0x30
 80041e4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80041e6:	2301      	movs	r3, #1
 80041e8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80041ea:	1d3b      	adds	r3, r7, #4
 80041ec:	3301      	adds	r3, #1
 80041ee:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041f4:	4b31      	ldr	r3, [pc, #196]	; (80042bc <_TrySendOverflowPacket+0xdc>)
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041fa:	e00b      	b.n	8004214 <_TrySendOverflowPacket+0x34>
 80041fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004202:	1c59      	adds	r1, r3, #1
 8004204:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004206:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	701a      	strb	r2, [r3, #0]
 800420e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004210:	09db      	lsrs	r3, r3, #7
 8004212:	62bb      	str	r3, [r7, #40]	; 0x28
 8004214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004216:	2b7f      	cmp	r3, #127	; 0x7f
 8004218:	d8f0      	bhi.n	80041fc <_TrySendOverflowPacket+0x1c>
 800421a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]
 8004226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004228:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800422a:	4b25      	ldr	r3, [pc, #148]	; (80042c0 <_TrySendOverflowPacket+0xe0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004230:	4b22      	ldr	r3, [pc, #136]	; (80042bc <_TrySendOverflowPacket+0xdc>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	623b      	str	r3, [r7, #32]
 8004242:	e00b      	b.n	800425c <_TrySendOverflowPacket+0x7c>
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	b2da      	uxtb	r2, r3
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	1c59      	adds	r1, r3, #1
 800424c:	6279      	str	r1, [r7, #36]	; 0x24
 800424e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	09db      	lsrs	r3, r3, #7
 800425a:	623b      	str	r3, [r7, #32]
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	2b7f      	cmp	r3, #127	; 0x7f
 8004260:	d8f0      	bhi.n	8004244 <_TrySendOverflowPacket+0x64>
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	627a      	str	r2, [r7, #36]	; 0x24
 8004268:	6a3a      	ldr	r2, [r7, #32]
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004272:	4b12      	ldr	r3, [pc, #72]	; (80042bc <_TrySendOverflowPacket+0xdc>)
 8004274:	785b      	ldrb	r3, [r3, #1]
 8004276:	4618      	mov	r0, r3
 8004278:	1d3b      	adds	r3, r7, #4
 800427a:	69fa      	ldr	r2, [r7, #28]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	461a      	mov	r2, r3
 8004280:	1d3b      	adds	r3, r7, #4
 8004282:	4619      	mov	r1, r3
 8004284:	f7fb ffc4 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004288:	4603      	mov	r3, r0
 800428a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004292:	4a0a      	ldr	r2, [pc, #40]	; (80042bc <_TrySendOverflowPacket+0xdc>)
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004298:	4b08      	ldr	r3, [pc, #32]	; (80042bc <_TrySendOverflowPacket+0xdc>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	3b01      	subs	r3, #1
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <_TrySendOverflowPacket+0xdc>)
 80042a2:	701a      	strb	r2, [r3, #0]
 80042a4:	e004      	b.n	80042b0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <_TrySendOverflowPacket+0xdc>)
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	3301      	adds	r3, #1
 80042ac:	4a03      	ldr	r2, [pc, #12]	; (80042bc <_TrySendOverflowPacket+0xdc>)
 80042ae:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80042b0:	693b      	ldr	r3, [r7, #16]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3730      	adds	r7, #48	; 0x30
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	200143b8 	.word	0x200143b8
 80042c0:	e0001004 	.word	0xe0001004

080042c4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08a      	sub	sp, #40	; 0x28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80042d0:	4b98      	ldr	r3, [pc, #608]	; (8004534 <_SendPacket+0x270>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d010      	beq.n	80042fa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80042d8:	4b96      	ldr	r3, [pc, #600]	; (8004534 <_SendPacket+0x270>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 812d 	beq.w	800453c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80042e2:	4b94      	ldr	r3, [pc, #592]	; (8004534 <_SendPacket+0x270>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d109      	bne.n	80042fe <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80042ea:	f7ff ff79 	bl	80041e0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80042ee:	4b91      	ldr	r3, [pc, #580]	; (8004534 <_SendPacket+0x270>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	f040 8124 	bne.w	8004540 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80042f8:	e001      	b.n	80042fe <_SendPacket+0x3a>
    goto Send;
 80042fa:	bf00      	nop
 80042fc:	e000      	b.n	8004300 <_SendPacket+0x3c>
Send:
 80042fe:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b1f      	cmp	r3, #31
 8004304:	d809      	bhi.n	800431a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004306:	4b8b      	ldr	r3, [pc, #556]	; (8004534 <_SendPacket+0x270>)
 8004308:	69da      	ldr	r2, [r3, #28]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	f040 8115 	bne.w	8004544 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b17      	cmp	r3, #23
 800431e:	d807      	bhi.n	8004330 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	3b01      	subs	r3, #1
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	b2da      	uxtb	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	701a      	strb	r2, [r3, #0]
 800432e:	e0c4      	b.n	80044ba <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	2b7f      	cmp	r3, #127	; 0x7f
 800433c:	d912      	bls.n	8004364 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	09da      	lsrs	r2, r3, #7
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	3b01      	subs	r3, #1
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	3a01      	subs	r2, #1
 8004356:	60fa      	str	r2, [r7, #12]
 8004358:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800435c:	b2da      	uxtb	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	701a      	strb	r2, [r3, #0]
 8004362:	e006      	b.n	8004372 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3b01      	subs	r3, #1
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	b2da      	uxtb	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b7e      	cmp	r3, #126	; 0x7e
 8004376:	d807      	bhi.n	8004388 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3b01      	subs	r3, #1
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	b2da      	uxtb	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	e098      	b.n	80044ba <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800438e:	d212      	bcs.n	80043b6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	09da      	lsrs	r2, r3, #7
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3b01      	subs	r3, #1
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	3a01      	subs	r2, #1
 80043a8:	60fa      	str	r2, [r7, #12]
 80043aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	701a      	strb	r2, [r3, #0]
 80043b4:	e081      	b.n	80044ba <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043bc:	d21d      	bcs.n	80043fa <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	0b9a      	lsrs	r2, r3, #14
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	09db      	lsrs	r3, r3, #7
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	3a01      	subs	r2, #1
 80043d8:	60fa      	str	r2, [r7, #12]
 80043da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	3a01      	subs	r2, #1
 80043ec:	60fa      	str	r2, [r7, #12]
 80043ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	701a      	strb	r2, [r3, #0]
 80043f8:	e05f      	b.n	80044ba <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004400:	d228      	bcs.n	8004454 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	0d5a      	lsrs	r2, r3, #21
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3b01      	subs	r3, #1
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	0b9b      	lsrs	r3, r3, #14
 8004416:	b2db      	uxtb	r3, r3
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	3a01      	subs	r2, #1
 800441c:	60fa      	str	r2, [r7, #12]
 800441e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004422:	b2da      	uxtb	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	09db      	lsrs	r3, r3, #7
 800442c:	b2db      	uxtb	r3, r3
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	3a01      	subs	r2, #1
 8004432:	60fa      	str	r2, [r7, #12]
 8004434:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004438:	b2da      	uxtb	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	3a01      	subs	r2, #1
 8004446:	60fa      	str	r2, [r7, #12]
 8004448:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800444c:	b2da      	uxtb	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	e032      	b.n	80044ba <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	0f1a      	lsrs	r2, r3, #28
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3b01      	subs	r3, #1
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	b2d2      	uxtb	r2, r2
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	0d5b      	lsrs	r3, r3, #21
 8004468:	b2db      	uxtb	r3, r3
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	3a01      	subs	r2, #1
 800446e:	60fa      	str	r2, [r7, #12]
 8004470:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004474:	b2da      	uxtb	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	0b9b      	lsrs	r3, r3, #14
 800447e:	b2db      	uxtb	r3, r3
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	3a01      	subs	r2, #1
 8004484:	60fa      	str	r2, [r7, #12]
 8004486:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800448a:	b2da      	uxtb	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	09db      	lsrs	r3, r3, #7
 8004494:	b2db      	uxtb	r3, r3
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	3a01      	subs	r2, #1
 800449a:	60fa      	str	r2, [r7, #12]
 800449c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	3a01      	subs	r2, #1
 80044ae:	60fa      	str	r2, [r7, #12]
 80044b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80044ba:	4b1f      	ldr	r3, [pc, #124]	; (8004538 <_SendPacket+0x274>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80044c0:	4b1c      	ldr	r3, [pc, #112]	; (8004534 <_SendPacket+0x270>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	623b      	str	r3, [r7, #32]
 80044d2:	e00b      	b.n	80044ec <_SendPacket+0x228>
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	1c59      	adds	r1, r3, #1
 80044dc:	6279      	str	r1, [r7, #36]	; 0x24
 80044de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	09db      	lsrs	r3, r3, #7
 80044ea:	623b      	str	r3, [r7, #32]
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	2b7f      	cmp	r3, #127	; 0x7f
 80044f0:	d8f0      	bhi.n	80044d4 <_SendPacket+0x210>
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	627a      	str	r2, [r7, #36]	; 0x24
 80044f8:	6a3a      	ldr	r2, [r7, #32]
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004502:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <_SendPacket+0x270>)
 8004504:	785b      	ldrb	r3, [r3, #1]
 8004506:	4618      	mov	r0, r3
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	461a      	mov	r2, r3
 8004510:	68f9      	ldr	r1, [r7, #12]
 8004512:	f7fb fe7d 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004516:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800451e:	4a05      	ldr	r2, [pc, #20]	; (8004534 <_SendPacket+0x270>)
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	60d3      	str	r3, [r2, #12]
 8004524:	e00f      	b.n	8004546 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004526:	4b03      	ldr	r3, [pc, #12]	; (8004534 <_SendPacket+0x270>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	3301      	adds	r3, #1
 800452c:	b2da      	uxtb	r2, r3
 800452e:	4b01      	ldr	r3, [pc, #4]	; (8004534 <_SendPacket+0x270>)
 8004530:	701a      	strb	r2, [r3, #0]
 8004532:	e008      	b.n	8004546 <_SendPacket+0x282>
 8004534:	200143b8 	.word	0x200143b8
 8004538:	e0001004 	.word	0xe0001004
    goto SendDone;
 800453c:	bf00      	nop
 800453e:	e002      	b.n	8004546 <_SendPacket+0x282>
      goto SendDone;
 8004540:	bf00      	nop
 8004542:	e000      	b.n	8004546 <_SendPacket+0x282>
      goto SendDone;
 8004544:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004546:	4b14      	ldr	r3, [pc, #80]	; (8004598 <_SendPacket+0x2d4>)
 8004548:	7e1b      	ldrb	r3, [r3, #24]
 800454a:	4619      	mov	r1, r3
 800454c:	4a13      	ldr	r2, [pc, #76]	; (800459c <_SendPacket+0x2d8>)
 800454e:	460b      	mov	r3, r1
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	440b      	add	r3, r1
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	4413      	add	r3, r2
 8004558:	336c      	adds	r3, #108	; 0x6c
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	4b0e      	ldr	r3, [pc, #56]	; (8004598 <_SendPacket+0x2d4>)
 800455e:	7e1b      	ldrb	r3, [r3, #24]
 8004560:	4618      	mov	r0, r3
 8004562:	490e      	ldr	r1, [pc, #56]	; (800459c <_SendPacket+0x2d8>)
 8004564:	4603      	mov	r3, r0
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	4403      	add	r3, r0
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	440b      	add	r3, r1
 800456e:	3370      	adds	r3, #112	; 0x70
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d00b      	beq.n	800458e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004576:	4b08      	ldr	r3, [pc, #32]	; (8004598 <_SendPacket+0x2d4>)
 8004578:	789b      	ldrb	r3, [r3, #2]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d107      	bne.n	800458e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800457e:	4b06      	ldr	r3, [pc, #24]	; (8004598 <_SendPacket+0x2d4>)
 8004580:	2201      	movs	r2, #1
 8004582:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004584:	f7ff fdbc 	bl	8004100 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004588:	4b03      	ldr	r3, [pc, #12]	; (8004598 <_SendPacket+0x2d4>)
 800458a:	2200      	movs	r2, #0
 800458c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800458e:	bf00      	nop
 8004590:	3728      	adds	r7, #40	; 0x28
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	200143b8 	.word	0x200143b8
 800459c:	20012ef8 	.word	0x20012ef8

080045a0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	; 0x28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	3301      	adds	r3, #1
 80045b6:	2b80      	cmp	r3, #128	; 0x80
 80045b8:	d80a      	bhi.n	80045d0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	1c59      	adds	r1, r3, #1
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6051      	str	r1, [r2, #4]
 80045c4:	78fa      	ldrb	r2, [r7, #3]
 80045c6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	2b80      	cmp	r3, #128	; 0x80
 80045d6:	d15a      	bne.n	800468e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	623b      	str	r3, [r7, #32]
 80045f8:	e00b      	b.n	8004612 <_StoreChar+0x72>
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	1c59      	adds	r1, r3, #1
 8004602:	6279      	str	r1, [r7, #36]	; 0x24
 8004604:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	701a      	strb	r2, [r3, #0]
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	09db      	lsrs	r3, r3, #7
 8004610:	623b      	str	r3, [r7, #32]
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	2b7f      	cmp	r3, #127	; 0x7f
 8004616:	d8f0      	bhi.n	80045fa <_StoreChar+0x5a>
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	627a      	str	r2, [r7, #36]	; 0x24
 800461e:	6a3a      	ldr	r2, [r7, #32]
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	61fb      	str	r3, [r7, #28]
 800462c:	2300      	movs	r3, #0
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	e00b      	b.n	800464a <_StoreChar+0xaa>
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	b2da      	uxtb	r2, r3
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	1c59      	adds	r1, r3, #1
 800463a:	61f9      	str	r1, [r7, #28]
 800463c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	701a      	strb	r2, [r3, #0]
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	09db      	lsrs	r3, r3, #7
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	2b7f      	cmp	r3, #127	; 0x7f
 800464e:	d8f0      	bhi.n	8004632 <_StoreChar+0x92>
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	61fa      	str	r2, [r7, #28]
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	221a      	movs	r2, #26
 8004666:	6939      	ldr	r1, [r7, #16]
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff fe2b 	bl	80042c4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff fd38 	bl	80040e8 <_PreparePacket>
 8004678:	4602      	mov	r2, r0
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	611a      	str	r2, [r3, #16]
  }
}
 800468e:	bf00      	nop
 8004690:	3728      	adds	r7, #40	; 0x28
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004698:	b580      	push	{r7, lr}
 800469a:	b08a      	sub	sp, #40	; 0x28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80046aa:	2301      	movs	r3, #1
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80046ae:	2301      	movs	r3, #1
 80046b0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80046b2:	e007      	b.n	80046c4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80046b4:	6a3a      	ldr	r2, [r7, #32]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046bc:	623b      	str	r3, [r7, #32]
    Width++;
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	3301      	adds	r3, #1
 80046c2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80046c4:	6a3a      	ldr	r2, [r7, #32]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d2f3      	bcs.n	80046b4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d901      	bls.n	80046d8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80046d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d11f      	bne.n	8004722 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80046e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01c      	beq.n	8004722 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80046e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d005      	beq.n	80046fe <_PrintUnsigned+0x66>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d102      	bne.n	80046fe <_PrintUnsigned+0x66>
        c = '0';
 80046f8:	2330      	movs	r3, #48	; 0x30
 80046fa:	76fb      	strb	r3, [r7, #27]
 80046fc:	e001      	b.n	8004702 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80046fe:	2320      	movs	r3, #32
 8004700:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004702:	e007      	b.n	8004714 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004706:	3b01      	subs	r3, #1
 8004708:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800470a:	7efb      	ldrb	r3, [r7, #27]
 800470c:	4619      	mov	r1, r3
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f7ff ff46 	bl	80045a0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <_PrintUnsigned+0x8a>
 800471a:	69fa      	ldr	r2, [r7, #28]
 800471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471e:	429a      	cmp	r2, r3
 8004720:	d3f0      	bcc.n	8004704 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d903      	bls.n	8004730 <_PrintUnsigned+0x98>
      NumDigits--;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	3b01      	subs	r3, #1
 800472c:	603b      	str	r3, [r7, #0]
 800472e:	e009      	b.n	8004744 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	fbb2 f3f3 	udiv	r3, r2, r3
 8004738:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	429a      	cmp	r2, r3
 8004740:	d200      	bcs.n	8004744 <_PrintUnsigned+0xac>
        break;
 8004742:	e005      	b.n	8004750 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	fb02 f303 	mul.w	r3, r2, r3
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800474e:	e7e8      	b.n	8004722 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	fbb2 f3f3 	udiv	r3, r2, r3
 8004758:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800475e:	fb02 f303 	mul.w	r3, r2, r3
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004768:	4a15      	ldr	r2, [pc, #84]	; (80047c0 <_PrintUnsigned+0x128>)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	4413      	add	r3, r2
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	4619      	mov	r1, r3
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f7ff ff14 	bl	80045a0 <_StoreChar>
    Digit /= Base;
 8004778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1e3      	bne.n	8004750 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d011      	beq.n	80047b6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00e      	beq.n	80047b6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004798:	e006      	b.n	80047a8 <_PrintUnsigned+0x110>
        FieldWidth--;
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	3b01      	subs	r3, #1
 800479e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80047a0:	2120      	movs	r1, #32
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f7ff fefc 	bl	80045a0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <_PrintUnsigned+0x11e>
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d3f1      	bcc.n	800479a <_PrintUnsigned+0x102>
      }
    }
  }
}
 80047b6:	bf00      	nop
 80047b8:	3728      	adds	r7, #40	; 0x28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	0800612c 	.word	0x0800612c

080047c4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af02      	add	r7, sp, #8
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bfb8      	it	lt
 80047d8:	425b      	neglt	r3, r3
 80047da:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80047dc:	2301      	movs	r3, #1
 80047de:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80047e0:	e007      	b.n	80047f2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80047ea:	613b      	str	r3, [r7, #16]
    Width++;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	3301      	adds	r3, #1
 80047f0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	daf3      	bge.n	80047e2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d901      	bls.n	8004806 <_PrintInt+0x42>
    Width = NumDigits;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <_PrintInt+0x5e>
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	db04      	blt.n	800481c <_PrintInt+0x58>
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <_PrintInt+0x5e>
    FieldWidth--;
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	3b01      	subs	r3, #1
 8004820:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <_PrintInt+0x6e>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d016      	beq.n	8004860 <_PrintInt+0x9c>
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d111      	bne.n	8004860 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00e      	beq.n	8004860 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004842:	e006      	b.n	8004852 <_PrintInt+0x8e>
        FieldWidth--;
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	3b01      	subs	r3, #1
 8004848:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800484a:	2120      	movs	r1, #32
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f7ff fea7 	bl	80045a0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <_PrintInt+0x9c>
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	429a      	cmp	r2, r3
 800485e:	d3f1      	bcc.n	8004844 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	da07      	bge.n	8004876 <_PrintInt+0xb2>
    v = -v;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	425b      	negs	r3, r3
 800486a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800486c:	212d      	movs	r1, #45	; 0x2d
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f7ff fe96 	bl	80045a0 <_StoreChar>
 8004874:	e008      	b.n	8004888 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004880:	212b      	movs	r1, #43	; 0x2b
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f7ff fe8c 	bl	80045a0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d019      	beq.n	80048c6 <_PrintInt+0x102>
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d114      	bne.n	80048c6 <_PrintInt+0x102>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d111      	bne.n	80048c6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00e      	beq.n	80048c6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80048a8:	e006      	b.n	80048b8 <_PrintInt+0xf4>
        FieldWidth--;
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	3b01      	subs	r3, #1
 80048ae:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80048b0:	2130      	movs	r1, #48	; 0x30
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f7ff fe74 	bl	80045a0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <_PrintInt+0x102>
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d3f1      	bcc.n	80048aa <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	9301      	str	r3, [sp, #4]
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f7ff fedf 	bl	8004698 <_PrintUnsigned>
}
 80048da:	bf00      	nop
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b098      	sub	sp, #96	; 0x60
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80048f0:	f3ef 8311 	mrs	r3, BASEPRI
 80048f4:	f04f 0120 	mov.w	r1, #32
 80048f8:	f381 8811 	msr	BASEPRI, r1
 80048fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048fe:	48b7      	ldr	r0, [pc, #732]	; (8004bdc <_VPrintTarget+0x2f8>)
 8004900:	f7ff fbf2 	bl	80040e8 <_PreparePacket>
 8004904:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004906:	4bb5      	ldr	r3, [pc, #724]	; (8004bdc <_VPrintTarget+0x2f8>)
 8004908:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 800490a:	2300      	movs	r3, #0
 800490c:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	3301      	adds	r3, #1
 8004916:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3301      	adds	r3, #1
 8004928:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800492a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 81a8 	beq.w	8004c84 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8004934:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004938:	2b25      	cmp	r3, #37	; 0x25
 800493a:	f040 8195 	bne.w	8004c68 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800493e:	2300      	movs	r3, #0
 8004940:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004942:	2301      	movs	r3, #1
 8004944:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800494e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004952:	3b23      	subs	r3, #35	; 0x23
 8004954:	2b0d      	cmp	r3, #13
 8004956:	d83f      	bhi.n	80049d8 <_VPrintTarget+0xf4>
 8004958:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <_VPrintTarget+0x7c>)
 800495a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495e:	bf00      	nop
 8004960:	080049c9 	.word	0x080049c9
 8004964:	080049d9 	.word	0x080049d9
 8004968:	080049d9 	.word	0x080049d9
 800496c:	080049d9 	.word	0x080049d9
 8004970:	080049d9 	.word	0x080049d9
 8004974:	080049d9 	.word	0x080049d9
 8004978:	080049d9 	.word	0x080049d9
 800497c:	080049d9 	.word	0x080049d9
 8004980:	080049b9 	.word	0x080049b9
 8004984:	080049d9 	.word	0x080049d9
 8004988:	08004999 	.word	0x08004999
 800498c:	080049d9 	.word	0x080049d9
 8004990:	080049d9 	.word	0x080049d9
 8004994:	080049a9 	.word	0x080049a9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800499a:	f043 0301 	orr.w	r3, r3, #1
 800499e:	64bb      	str	r3, [r7, #72]	; 0x48
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3301      	adds	r3, #1
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	e01a      	b.n	80049de <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80049a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049aa:	f043 0302 	orr.w	r3, r3, #2
 80049ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3301      	adds	r3, #1
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	e012      	b.n	80049de <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80049b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ba:	f043 0304 	orr.w	r3, r3, #4
 80049be:	64bb      	str	r3, [r7, #72]	; 0x48
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	3301      	adds	r3, #1
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	e00a      	b.n	80049de <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80049c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ca:	f043 0308 	orr.w	r3, r3, #8
 80049ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	3301      	adds	r3, #1
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	e002      	b.n	80049de <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80049d8:	2300      	movs	r3, #0
 80049da:	653b      	str	r3, [r7, #80]	; 0x50
 80049dc:	bf00      	nop
        }
      } while (v);
 80049de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1b0      	bne.n	8004946 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80049e4:	2300      	movs	r3, #0
 80049e6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80049f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049f4:	2b2f      	cmp	r3, #47	; 0x2f
 80049f6:	d912      	bls.n	8004a1e <_VPrintTarget+0x13a>
 80049f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049fc:	2b39      	cmp	r3, #57	; 0x39
 80049fe:	d80e      	bhi.n	8004a1e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3301      	adds	r3, #1
 8004a04:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004a06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	461a      	mov	r2, r3
 8004a12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a16:	4413      	add	r3, r2
 8004a18:	3b30      	subs	r3, #48	; 0x30
 8004a1a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004a1c:	e7e4      	b.n	80049e8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004a2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8004a30:	d11d      	bne.n	8004a6e <_VPrintTarget+0x18a>
        sFormat++;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	3301      	adds	r3, #1
 8004a36:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004a40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a44:	2b2f      	cmp	r3, #47	; 0x2f
 8004a46:	d912      	bls.n	8004a6e <_VPrintTarget+0x18a>
 8004a48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a4c:	2b39      	cmp	r3, #57	; 0x39
 8004a4e:	d80e      	bhi.n	8004a6e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	3301      	adds	r3, #1
 8004a54:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004a56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	461a      	mov	r2, r3
 8004a62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a66:	4413      	add	r3, r2
 8004a68:	3b30      	subs	r3, #48	; 0x30
 8004a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004a6c:	e7e4      	b.n	8004a38 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004a76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a7a:	2b6c      	cmp	r3, #108	; 0x6c
 8004a7c:	d003      	beq.n	8004a86 <_VPrintTarget+0x1a2>
 8004a7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a82:	2b68      	cmp	r3, #104	; 0x68
 8004a84:	d107      	bne.n	8004a96 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3301      	adds	r3, #1
 8004a92:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004a94:	e7ef      	b.n	8004a76 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004a96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a9a:	2b25      	cmp	r3, #37	; 0x25
 8004a9c:	f000 80d8 	beq.w	8004c50 <_VPrintTarget+0x36c>
 8004aa0:	2b25      	cmp	r3, #37	; 0x25
 8004aa2:	f2c0 80dc 	blt.w	8004c5e <_VPrintTarget+0x37a>
 8004aa6:	2b78      	cmp	r3, #120	; 0x78
 8004aa8:	f300 80d9 	bgt.w	8004c5e <_VPrintTarget+0x37a>
 8004aac:	2b58      	cmp	r3, #88	; 0x58
 8004aae:	f2c0 80d6 	blt.w	8004c5e <_VPrintTarget+0x37a>
 8004ab2:	3b58      	subs	r3, #88	; 0x58
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	f200 80d2 	bhi.w	8004c5e <_VPrintTarget+0x37a>
 8004aba:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <_VPrintTarget+0x1dc>)
 8004abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac0:	08004bb7 	.word	0x08004bb7
 8004ac4:	08004c5f 	.word	0x08004c5f
 8004ac8:	08004c5f 	.word	0x08004c5f
 8004acc:	08004c5f 	.word	0x08004c5f
 8004ad0:	08004c5f 	.word	0x08004c5f
 8004ad4:	08004c5f 	.word	0x08004c5f
 8004ad8:	08004c5f 	.word	0x08004c5f
 8004adc:	08004c5f 	.word	0x08004c5f
 8004ae0:	08004c5f 	.word	0x08004c5f
 8004ae4:	08004c5f 	.word	0x08004c5f
 8004ae8:	08004c5f 	.word	0x08004c5f
 8004aec:	08004b45 	.word	0x08004b45
 8004af0:	08004b6b 	.word	0x08004b6b
 8004af4:	08004c5f 	.word	0x08004c5f
 8004af8:	08004c5f 	.word	0x08004c5f
 8004afc:	08004c5f 	.word	0x08004c5f
 8004b00:	08004c5f 	.word	0x08004c5f
 8004b04:	08004c5f 	.word	0x08004c5f
 8004b08:	08004c5f 	.word	0x08004c5f
 8004b0c:	08004c5f 	.word	0x08004c5f
 8004b10:	08004c5f 	.word	0x08004c5f
 8004b14:	08004c5f 	.word	0x08004c5f
 8004b18:	08004c5f 	.word	0x08004c5f
 8004b1c:	08004c5f 	.word	0x08004c5f
 8004b20:	08004c2b 	.word	0x08004c2b
 8004b24:	08004c5f 	.word	0x08004c5f
 8004b28:	08004c5f 	.word	0x08004c5f
 8004b2c:	08004be1 	.word	0x08004be1
 8004b30:	08004c5f 	.word	0x08004c5f
 8004b34:	08004b91 	.word	0x08004b91
 8004b38:	08004c5f 	.word	0x08004c5f
 8004b3c:	08004c5f 	.word	0x08004c5f
 8004b40:	08004bb7 	.word	0x08004bb7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	1d19      	adds	r1, r3, #4
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6011      	str	r1, [r2, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8004b58:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004b5c:	f107 0310 	add.w	r3, r7, #16
 8004b60:	4611      	mov	r1, r2
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff fd1c 	bl	80045a0 <_StoreChar>
        break;
 8004b68:	e07a      	b.n	8004c60 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	1d19      	adds	r1, r3, #4
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6011      	str	r1, [r2, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004b78:	f107 0010 	add.w	r0, r7, #16
 8004b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b7e:	9301      	str	r3, [sp, #4]
 8004b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b86:	220a      	movs	r2, #10
 8004b88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b8a:	f7ff fe1b 	bl	80047c4 <_PrintInt>
        break;
 8004b8e:	e067      	b.n	8004c60 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	1d19      	adds	r1, r3, #4
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6011      	str	r1, [r2, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004b9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ba0:	f107 0010 	add.w	r0, r7, #16
 8004ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ba6:	9301      	str	r3, [sp, #4]
 8004ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bae:	220a      	movs	r2, #10
 8004bb0:	f7ff fd72 	bl	8004698 <_PrintUnsigned>
        break;
 8004bb4:	e054      	b.n	8004c60 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	1d19      	adds	r1, r3, #4
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6011      	str	r1, [r2, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004bc4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004bc6:	f107 0010 	add.w	r0, r7, #16
 8004bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bcc:	9301      	str	r3, [sp, #4]
 8004bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd4:	2210      	movs	r2, #16
 8004bd6:	f7ff fd5f 	bl	8004698 <_PrintUnsigned>
        break;
 8004bda:	e041      	b.n	8004c60 <_VPrintTarget+0x37c>
 8004bdc:	200143e8 	.word	0x200143e8
      case 's':
        s = va_arg(*pParamList, const char*);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	1d19      	adds	r1, r3, #4
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6011      	str	r1, [r2, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8004bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <_VPrintTarget+0x314>
          s = "(null)";
 8004bf4:	4b4a      	ldr	r3, [pc, #296]	; (8004d20 <_VPrintTarget+0x43c>)
 8004bf6:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8004bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8004c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c02:	3301      	adds	r3, #1
 8004c04:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8004c06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00b      	beq.n	8004c26 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8004c0e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004c12:	f107 0310 	add.w	r3, r7, #16
 8004c16:	4611      	mov	r1, r2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff fcc1 	bl	80045a0 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	2b7f      	cmp	r3, #127	; 0x7f
 8004c22:	d9e9      	bls.n	8004bf8 <_VPrintTarget+0x314>
        break;
 8004c24:	e01c      	b.n	8004c60 <_VPrintTarget+0x37c>
            break;
 8004c26:	bf00      	nop
        break;
 8004c28:	e01a      	b.n	8004c60 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	1d19      	adds	r1, r3, #4
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6011      	str	r1, [r2, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004c38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c3a:	f107 0010 	add.w	r0, r7, #16
 8004c3e:	2300      	movs	r3, #0
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	2308      	movs	r3, #8
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	2308      	movs	r3, #8
 8004c48:	2210      	movs	r2, #16
 8004c4a:	f7ff fd25 	bl	8004698 <_PrintUnsigned>
        break;
 8004c4e:	e007      	b.n	8004c60 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004c50:	f107 0310 	add.w	r3, r7, #16
 8004c54:	2125      	movs	r1, #37	; 0x25
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff fca2 	bl	80045a0 <_StoreChar>
        break;
 8004c5c:	e000      	b.n	8004c60 <_VPrintTarget+0x37c>
      default:
        break;
 8004c5e:	bf00      	nop
      }
      sFormat++;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3301      	adds	r3, #1
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	e007      	b.n	8004c78 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8004c68:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004c6c:	f107 0310 	add.w	r3, r7, #16
 8004c70:	4611      	mov	r1, r2
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff fc94 	bl	80045a0 <_StoreChar>
    }
  } while (*sFormat);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f47f ae4d 	bne.w	800491c <_VPrintTarget+0x38>
 8004c82:	e000      	b.n	8004c86 <_VPrintTarget+0x3a2>
      break;
 8004c84:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d041      	beq.n	8004d10 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004c8c:	6a3a      	ldr	r2, [r7, #32]
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c9c:	e00b      	b.n	8004cb6 <_VPrintTarget+0x3d2>
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca4:	1c59      	adds	r1, r3, #1
 8004ca6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004ca8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	701a      	strb	r2, [r3, #0]
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	09db      	lsrs	r3, r3, #7
 8004cb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb8:	2b7f      	cmp	r3, #127	; 0x7f
 8004cba:	d8f0      	bhi.n	8004c9e <_VPrintTarget+0x3ba>
 8004cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004cc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	701a      	strb	r2, [r3, #0]
 8004cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cca:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	633b      	str	r3, [r7, #48]	; 0x30
 8004cd4:	e00b      	b.n	8004cee <_VPrintTarget+0x40a>
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cdc:	1c59      	adds	r1, r3, #1
 8004cde:	6379      	str	r1, [r7, #52]	; 0x34
 8004ce0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	701a      	strb	r2, [r3, #0]
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	09db      	lsrs	r3, r3, #7
 8004cec:	633b      	str	r3, [r7, #48]	; 0x30
 8004cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf0:	2b7f      	cmp	r3, #127	; 0x7f
 8004cf2:	d8f0      	bhi.n	8004cd6 <_VPrintTarget+0x3f2>
 8004cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	637a      	str	r2, [r7, #52]	; 0x34
 8004cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cfc:	b2d2      	uxtb	r2, r2
 8004cfe:	701a      	strb	r2, [r3, #0]
 8004d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d02:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	6979      	ldr	r1, [r7, #20]
 8004d08:	221a      	movs	r2, #26
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fada 	bl	80042c4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d12:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004d16:	bf00      	nop
 8004d18:	3758      	adds	r7, #88	; 0x58
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	080060dc 	.word	0x080060dc

08004d24 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af02      	add	r7, sp, #8
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004d32:	2300      	movs	r3, #0
 8004d34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d38:	4917      	ldr	r1, [pc, #92]	; (8004d98 <SEGGER_SYSVIEW_Init+0x74>)
 8004d3a:	4818      	ldr	r0, [pc, #96]	; (8004d9c <SEGGER_SYSVIEW_Init+0x78>)
 8004d3c:	f7ff f8d4 	bl	8003ee8 <SEGGER_RTT_AllocUpBuffer>
 8004d40:	4603      	mov	r3, r0
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	4b16      	ldr	r3, [pc, #88]	; (8004da0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d46:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004d48:	4b15      	ldr	r3, [pc, #84]	; (8004da0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d4a:	785a      	ldrb	r2, [r3, #1]
 8004d4c:	4b14      	ldr	r3, [pc, #80]	; (8004da0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d4e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004d50:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d52:	7e1b      	ldrb	r3, [r3, #24]
 8004d54:	4618      	mov	r0, r3
 8004d56:	2300      	movs	r3, #0
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	2308      	movs	r3, #8
 8004d5c:	4a11      	ldr	r2, [pc, #68]	; (8004da4 <SEGGER_SYSVIEW_Init+0x80>)
 8004d5e:	490f      	ldr	r1, [pc, #60]	; (8004d9c <SEGGER_SYSVIEW_Init+0x78>)
 8004d60:	f7ff f946 	bl	8003ff0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004d64:	4b0e      	ldr	r3, [pc, #56]	; (8004da0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004d6a:	4b0f      	ldr	r3, [pc, #60]	; (8004da8 <SEGGER_SYSVIEW_Init+0x84>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a0c      	ldr	r2, [pc, #48]	; (8004da0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d70:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004d72:	4a0b      	ldr	r2, [pc, #44]	; (8004da0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004d78:	4a09      	ldr	r2, [pc, #36]	; (8004da0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004d7e:	4a08      	ldr	r2, [pc, #32]	; (8004da0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004d84:	4a06      	ldr	r2, [pc, #24]	; (8004da0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004d8a:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004d90:	bf00      	nop
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	200133b0 	.word	0x200133b0
 8004d9c:	080060e4 	.word	0x080060e4
 8004da0:	200143b8 	.word	0x200143b8
 8004da4:	200143b0 	.word	0x200143b0
 8004da8:	e0001004 	.word	0xe0001004

08004dac <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004db4:	4a04      	ldr	r2, [pc, #16]	; (8004dc8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6113      	str	r3, [r2, #16]
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	200143b8 	.word	0x200143b8

08004dcc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004dd4:	f3ef 8311 	mrs	r3, BASEPRI
 8004dd8:	f04f 0120 	mov.w	r1, #32
 8004ddc:	f381 8811 	msr	BASEPRI, r1
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	4808      	ldr	r0, [pc, #32]	; (8004e04 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004de4:	f7ff f980 	bl	80040e8 <_PreparePacket>
 8004de8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	68b9      	ldr	r1, [r7, #8]
 8004dee:	68b8      	ldr	r0, [r7, #8]
 8004df0:	f7ff fa68 	bl	80042c4 <_SendPacket>
  RECORD_END();
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f383 8811 	msr	BASEPRI, r3
}
 8004dfa:	bf00      	nop
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	200143e8 	.word	0x200143e8

08004e08 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e12:	f3ef 8311 	mrs	r3, BASEPRI
 8004e16:	f04f 0120 	mov.w	r1, #32
 8004e1a:	f381 8811 	msr	BASEPRI, r1
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	4816      	ldr	r0, [pc, #88]	; (8004e7c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004e22:	f7ff f961 	bl	80040e8 <_PreparePacket>
 8004e26:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	61fb      	str	r3, [r7, #28]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	61bb      	str	r3, [r7, #24]
 8004e34:	e00b      	b.n	8004e4e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	1c59      	adds	r1, r3, #1
 8004e3e:	61f9      	str	r1, [r7, #28]
 8004e40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	701a      	strb	r2, [r3, #0]
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	09db      	lsrs	r3, r3, #7
 8004e4c:	61bb      	str	r3, [r7, #24]
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b7f      	cmp	r3, #127	; 0x7f
 8004e52:	d8f0      	bhi.n	8004e36 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	61fa      	str	r2, [r7, #28]
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	701a      	strb	r2, [r3, #0]
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	6938      	ldr	r0, [r7, #16]
 8004e6a:	f7ff fa2b 	bl	80042c4 <_SendPacket>
  RECORD_END();
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f383 8811 	msr	BASEPRI, r3
}
 8004e74:	bf00      	nop
 8004e76:	3720      	adds	r7, #32
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	200143e8 	.word	0x200143e8

08004e80 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08c      	sub	sp, #48	; 0x30
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e8c:	f3ef 8311 	mrs	r3, BASEPRI
 8004e90:	f04f 0120 	mov.w	r1, #32
 8004e94:	f381 8811 	msr	BASEPRI, r1
 8004e98:	61fb      	str	r3, [r7, #28]
 8004e9a:	4825      	ldr	r0, [pc, #148]	; (8004f30 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004e9c:	f7ff f924 	bl	80040e8 <_PreparePacket>
 8004ea0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eae:	e00b      	b.n	8004ec8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb6:	1c59      	adds	r1, r3, #1
 8004eb8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004eba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec4:	09db      	lsrs	r3, r3, #7
 8004ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eca:	2b7f      	cmp	r3, #127	; 0x7f
 8004ecc:	d8f0      	bhi.n	8004eb0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004edc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	623b      	str	r3, [r7, #32]
 8004ee6:	e00b      	b.n	8004f00 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	1c59      	adds	r1, r3, #1
 8004ef0:	6279      	str	r1, [r7, #36]	; 0x24
 8004ef2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	701a      	strb	r2, [r3, #0]
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	09db      	lsrs	r3, r3, #7
 8004efe:	623b      	str	r3, [r7, #32]
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	2b7f      	cmp	r3, #127	; 0x7f
 8004f04:	d8f0      	bhi.n	8004ee8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	627a      	str	r2, [r7, #36]	; 0x24
 8004f0c:	6a3a      	ldr	r2, [r7, #32]
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	6979      	ldr	r1, [r7, #20]
 8004f1a:	69b8      	ldr	r0, [r7, #24]
 8004f1c:	f7ff f9d2 	bl	80042c4 <_SendPacket>
  RECORD_END();
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	f383 8811 	msr	BASEPRI, r3
}
 8004f26:	bf00      	nop
 8004f28:	3730      	adds	r7, #48	; 0x30
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	200143e8 	.word	0x200143e8

08004f34 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08c      	sub	sp, #48	; 0x30
 8004f38:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004f3a:	4b58      	ldr	r3, [pc, #352]	; (800509c <SEGGER_SYSVIEW_Start+0x168>)
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004f40:	f3ef 8311 	mrs	r3, BASEPRI
 8004f44:	f04f 0120 	mov.w	r1, #32
 8004f48:	f381 8811 	msr	BASEPRI, r1
 8004f4c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004f4e:	4b53      	ldr	r3, [pc, #332]	; (800509c <SEGGER_SYSVIEW_Start+0x168>)
 8004f50:	785b      	ldrb	r3, [r3, #1]
 8004f52:	220a      	movs	r2, #10
 8004f54:	4952      	ldr	r1, [pc, #328]	; (80050a0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fb f95a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004f62:	200a      	movs	r0, #10
 8004f64:	f7ff ff32 	bl	8004dcc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f68:	f3ef 8311 	mrs	r3, BASEPRI
 8004f6c:	f04f 0120 	mov.w	r1, #32
 8004f70:	f381 8811 	msr	BASEPRI, r1
 8004f74:	60bb      	str	r3, [r7, #8]
 8004f76:	484b      	ldr	r0, [pc, #300]	; (80050a4 <SEGGER_SYSVIEW_Start+0x170>)
 8004f78:	f7ff f8b6 	bl	80040e8 <_PreparePacket>
 8004f7c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f86:	4b45      	ldr	r3, [pc, #276]	; (800509c <SEGGER_SYSVIEW_Start+0x168>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f8c:	e00b      	b.n	8004fa6 <SEGGER_SYSVIEW_Start+0x72>
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f94:	1c59      	adds	r1, r3, #1
 8004f96:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]
 8004fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa2:	09db      	lsrs	r3, r3, #7
 8004fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa8:	2b7f      	cmp	r3, #127	; 0x7f
 8004faa:	d8f0      	bhi.n	8004f8e <SEGGER_SYSVIEW_Start+0x5a>
 8004fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	701a      	strb	r2, [r3, #0]
 8004fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc0:	4b36      	ldr	r3, [pc, #216]	; (800509c <SEGGER_SYSVIEW_Start+0x168>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	623b      	str	r3, [r7, #32]
 8004fc6:	e00b      	b.n	8004fe0 <SEGGER_SYSVIEW_Start+0xac>
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	1c59      	adds	r1, r3, #1
 8004fd0:	6279      	str	r1, [r7, #36]	; 0x24
 8004fd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	701a      	strb	r2, [r3, #0]
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	09db      	lsrs	r3, r3, #7
 8004fde:	623b      	str	r3, [r7, #32]
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	2b7f      	cmp	r3, #127	; 0x7f
 8004fe4:	d8f0      	bhi.n	8004fc8 <SEGGER_SYSVIEW_Start+0x94>
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	627a      	str	r2, [r7, #36]	; 0x24
 8004fec:	6a3a      	ldr	r2, [r7, #32]
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	61fb      	str	r3, [r7, #28]
 8004ffa:	4b28      	ldr	r3, [pc, #160]	; (800509c <SEGGER_SYSVIEW_Start+0x168>)
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	61bb      	str	r3, [r7, #24]
 8005000:	e00b      	b.n	800501a <SEGGER_SYSVIEW_Start+0xe6>
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	b2da      	uxtb	r2, r3
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	1c59      	adds	r1, r3, #1
 800500a:	61f9      	str	r1, [r7, #28]
 800500c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	701a      	strb	r2, [r3, #0]
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	09db      	lsrs	r3, r3, #7
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	2b7f      	cmp	r3, #127	; 0x7f
 800501e:	d8f0      	bhi.n	8005002 <SEGGER_SYSVIEW_Start+0xce>
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	61fa      	str	r2, [r7, #28]
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	2300      	movs	r3, #0
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	e00b      	b.n	8005052 <SEGGER_SYSVIEW_Start+0x11e>
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	b2da      	uxtb	r2, r3
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	1c59      	adds	r1, r3, #1
 8005042:	6179      	str	r1, [r7, #20]
 8005044:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	701a      	strb	r2, [r3, #0]
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	09db      	lsrs	r3, r3, #7
 8005050:	613b      	str	r3, [r7, #16]
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	2b7f      	cmp	r3, #127	; 0x7f
 8005056:	d8f0      	bhi.n	800503a <SEGGER_SYSVIEW_Start+0x106>
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	617a      	str	r2, [r7, #20]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005068:	2218      	movs	r2, #24
 800506a:	6839      	ldr	r1, [r7, #0]
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff f929 	bl	80042c4 <_SendPacket>
      RECORD_END();
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005078:	4b08      	ldr	r3, [pc, #32]	; (800509c <SEGGER_SYSVIEW_Start+0x168>)
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005080:	4b06      	ldr	r3, [pc, #24]	; (800509c <SEGGER_SYSVIEW_Start+0x168>)
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005086:	f000 f9eb 	bl	8005460 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800508a:	f000 f9b1 	bl	80053f0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800508e:	f000 fac1 	bl	8005614 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005092:	bf00      	nop
 8005094:	3730      	adds	r7, #48	; 0x30
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	200143b8 	.word	0x200143b8
 80050a0:	08006120 	.word	0x08006120
 80050a4:	200143e8 	.word	0x200143e8

080050a8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050ae:	f3ef 8311 	mrs	r3, BASEPRI
 80050b2:	f04f 0120 	mov.w	r1, #32
 80050b6:	f381 8811 	msr	BASEPRI, r1
 80050ba:	607b      	str	r3, [r7, #4]
 80050bc:	480b      	ldr	r0, [pc, #44]	; (80050ec <SEGGER_SYSVIEW_Stop+0x44>)
 80050be:	f7ff f813 	bl	80040e8 <_PreparePacket>
 80050c2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80050c4:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d007      	beq.n	80050dc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80050cc:	220b      	movs	r2, #11
 80050ce:	6839      	ldr	r1, [r7, #0]
 80050d0:	6838      	ldr	r0, [r7, #0]
 80050d2:	f7ff f8f7 	bl	80042c4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80050d6:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80050d8:	2200      	movs	r2, #0
 80050da:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f383 8811 	msr	BASEPRI, r3
}
 80050e2:	bf00      	nop
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	200143e8 	.word	0x200143e8
 80050f0:	200143b8 	.word	0x200143b8

080050f4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08c      	sub	sp, #48	; 0x30
 80050f8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80050fa:	f3ef 8311 	mrs	r3, BASEPRI
 80050fe:	f04f 0120 	mov.w	r1, #32
 8005102:	f381 8811 	msr	BASEPRI, r1
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	4845      	ldr	r0, [pc, #276]	; (8005220 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800510a:	f7fe ffed 	bl	80040e8 <_PreparePacket>
 800510e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005118:	4b42      	ldr	r3, [pc, #264]	; (8005224 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	62bb      	str	r3, [r7, #40]	; 0x28
 800511e:	e00b      	b.n	8005138 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	b2da      	uxtb	r2, r3
 8005124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005126:	1c59      	adds	r1, r3, #1
 8005128:	62f9      	str	r1, [r7, #44]	; 0x2c
 800512a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]
 8005132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005134:	09db      	lsrs	r3, r3, #7
 8005136:	62bb      	str	r3, [r7, #40]	; 0x28
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	2b7f      	cmp	r3, #127	; 0x7f
 800513c:	d8f0      	bhi.n	8005120 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
 8005152:	4b34      	ldr	r3, [pc, #208]	; (8005224 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	623b      	str	r3, [r7, #32]
 8005158:	e00b      	b.n	8005172 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	b2da      	uxtb	r2, r3
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	1c59      	adds	r1, r3, #1
 8005162:	6279      	str	r1, [r7, #36]	; 0x24
 8005164:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005168:	b2d2      	uxtb	r2, r2
 800516a:	701a      	strb	r2, [r3, #0]
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	09db      	lsrs	r3, r3, #7
 8005170:	623b      	str	r3, [r7, #32]
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	2b7f      	cmp	r3, #127	; 0x7f
 8005176:	d8f0      	bhi.n	800515a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	627a      	str	r2, [r7, #36]	; 0x24
 800517e:	6a3a      	ldr	r2, [r7, #32]
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	701a      	strb	r2, [r3, #0]
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	61fb      	str	r3, [r7, #28]
 800518c:	4b25      	ldr	r3, [pc, #148]	; (8005224 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	e00b      	b.n	80051ac <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	b2da      	uxtb	r2, r3
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	1c59      	adds	r1, r3, #1
 800519c:	61f9      	str	r1, [r7, #28]
 800519e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	09db      	lsrs	r3, r3, #7
 80051aa:	61bb      	str	r3, [r7, #24]
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	2b7f      	cmp	r3, #127	; 0x7f
 80051b0:	d8f0      	bhi.n	8005194 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	61fa      	str	r2, [r7, #28]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	2300      	movs	r3, #0
 80051c8:	613b      	str	r3, [r7, #16]
 80051ca:	e00b      	b.n	80051e4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	1c59      	adds	r1, r3, #1
 80051d4:	6179      	str	r1, [r7, #20]
 80051d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	09db      	lsrs	r3, r3, #7
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	2b7f      	cmp	r3, #127	; 0x7f
 80051e8:	d8f0      	bhi.n	80051cc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	617a      	str	r2, [r7, #20]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80051fa:	2218      	movs	r2, #24
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	68b8      	ldr	r0, [r7, #8]
 8005200:	f7ff f860 	bl	80042c4 <_SendPacket>
  RECORD_END();
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800520a:	4b06      	ldr	r3, [pc, #24]	; (8005224 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005212:	4b04      	ldr	r3, [pc, #16]	; (8005224 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	4798      	blx	r3
  }
}
 8005218:	bf00      	nop
 800521a:	3730      	adds	r7, #48	; 0x30
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	200143e8 	.word	0x200143e8
 8005224:	200143b8 	.word	0x200143b8

08005228 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005228:	b580      	push	{r7, lr}
 800522a:	b092      	sub	sp, #72	; 0x48
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005230:	f3ef 8311 	mrs	r3, BASEPRI
 8005234:	f04f 0120 	mov.w	r1, #32
 8005238:	f381 8811 	msr	BASEPRI, r1
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	486a      	ldr	r0, [pc, #424]	; (80053e8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005240:	f7fe ff52 	bl	80040e8 <_PreparePacket>
 8005244:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	647b      	str	r3, [r7, #68]	; 0x44
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	4b66      	ldr	r3, [pc, #408]	; (80053ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	643b      	str	r3, [r7, #64]	; 0x40
 800525a:	e00b      	b.n	8005274 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800525c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800525e:	b2da      	uxtb	r2, r3
 8005260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005262:	1c59      	adds	r1, r3, #1
 8005264:	6479      	str	r1, [r7, #68]	; 0x44
 8005266:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005270:	09db      	lsrs	r3, r3, #7
 8005272:	643b      	str	r3, [r7, #64]	; 0x40
 8005274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005276:	2b7f      	cmp	r3, #127	; 0x7f
 8005278:	d8f0      	bhi.n	800525c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800527a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	647a      	str	r2, [r7, #68]	; 0x44
 8005280:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]
 8005286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005288:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	63bb      	str	r3, [r7, #56]	; 0x38
 8005294:	e00b      	b.n	80052ae <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005298:	b2da      	uxtb	r2, r3
 800529a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800529c:	1c59      	adds	r1, r3, #1
 800529e:	63f9      	str	r1, [r7, #60]	; 0x3c
 80052a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052a4:	b2d2      	uxtb	r2, r2
 80052a6:	701a      	strb	r2, [r3, #0]
 80052a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052aa:	09db      	lsrs	r3, r3, #7
 80052ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80052ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b0:	2b7f      	cmp	r3, #127	; 0x7f
 80052b2:	d8f0      	bhi.n	8005296 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80052b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80052ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	701a      	strb	r2, [r3, #0]
 80052c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2220      	movs	r2, #32
 80052ca:	4619      	mov	r1, r3
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f7fe fedb 	bl	8004088 <_EncodeStr>
 80052d2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80052d4:	2209      	movs	r2, #9
 80052d6:	68f9      	ldr	r1, [r7, #12]
 80052d8:	6938      	ldr	r0, [r7, #16]
 80052da:	f7fe fff3 	bl	80042c4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	637b      	str	r3, [r7, #52]	; 0x34
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	4b40      	ldr	r3, [pc, #256]	; (80053ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	633b      	str	r3, [r7, #48]	; 0x30
 80052f2:	e00b      	b.n	800530c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80052f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fa:	1c59      	adds	r1, r3, #1
 80052fc:	6379      	str	r1, [r7, #52]	; 0x34
 80052fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	09db      	lsrs	r3, r3, #7
 800530a:	633b      	str	r3, [r7, #48]	; 0x30
 800530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530e:	2b7f      	cmp	r3, #127	; 0x7f
 8005310:	d8f0      	bhi.n	80052f4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	637a      	str	r2, [r7, #52]	; 0x34
 8005318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	701a      	strb	r2, [r3, #0]
 800531e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005320:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	62bb      	str	r3, [r7, #40]	; 0x28
 800532c:	e00b      	b.n	8005346 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	b2da      	uxtb	r2, r3
 8005332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005334:	1c59      	adds	r1, r3, #1
 8005336:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005338:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	09db      	lsrs	r3, r3, #7
 8005344:	62bb      	str	r3, [r7, #40]	; 0x28
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	2b7f      	cmp	r3, #127	; 0x7f
 800534a:	d8f0      	bhi.n	800532e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800534c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	623b      	str	r3, [r7, #32]
 8005366:	e00b      	b.n	8005380 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	b2da      	uxtb	r2, r3
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	1c59      	adds	r1, r3, #1
 8005370:	6279      	str	r1, [r7, #36]	; 0x24
 8005372:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	701a      	strb	r2, [r3, #0]
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	09db      	lsrs	r3, r3, #7
 800537e:	623b      	str	r3, [r7, #32]
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	2b7f      	cmp	r3, #127	; 0x7f
 8005384:	d8f0      	bhi.n	8005368 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	627a      	str	r2, [r7, #36]	; 0x24
 800538c:	6a3a      	ldr	r2, [r7, #32]
 800538e:	b2d2      	uxtb	r2, r2
 8005390:	701a      	strb	r2, [r3, #0]
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	61fb      	str	r3, [r7, #28]
 800539a:	2300      	movs	r3, #0
 800539c:	61bb      	str	r3, [r7, #24]
 800539e:	e00b      	b.n	80053b8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	1c59      	adds	r1, r3, #1
 80053a8:	61f9      	str	r1, [r7, #28]
 80053aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	701a      	strb	r2, [r3, #0]
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	09db      	lsrs	r3, r3, #7
 80053b6:	61bb      	str	r3, [r7, #24]
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	2b7f      	cmp	r3, #127	; 0x7f
 80053bc:	d8f0      	bhi.n	80053a0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	61fa      	str	r2, [r7, #28]
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	701a      	strb	r2, [r3, #0]
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80053ce:	2215      	movs	r2, #21
 80053d0:	68f9      	ldr	r1, [r7, #12]
 80053d2:	6938      	ldr	r0, [r7, #16]
 80053d4:	f7fe ff76 	bl	80042c4 <_SendPacket>
  RECORD_END();
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f383 8811 	msr	BASEPRI, r3
}
 80053de:	bf00      	nop
 80053e0:	3748      	adds	r7, #72	; 0x48
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	200143e8 	.word	0x200143e8
 80053ec:	200143b8 	.word	0x200143b8

080053f0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80053f4:	4b07      	ldr	r3, [pc, #28]	; (8005414 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d008      	beq.n	800540e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80053fc:	4b05      	ldr	r3, [pc, #20]	; (8005414 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005406:	4b03      	ldr	r3, [pc, #12]	; (8005414 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	4798      	blx	r3
  }
}
 800540e:	bf00      	nop
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	200143b8 	.word	0x200143b8

08005418 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005420:	f3ef 8311 	mrs	r3, BASEPRI
 8005424:	f04f 0120 	mov.w	r1, #32
 8005428:	f381 8811 	msr	BASEPRI, r1
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	480b      	ldr	r0, [pc, #44]	; (800545c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005430:	f7fe fe5a 	bl	80040e8 <_PreparePacket>
 8005434:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005436:	2280      	movs	r2, #128	; 0x80
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	6938      	ldr	r0, [r7, #16]
 800543c:	f7fe fe24 	bl	8004088 <_EncodeStr>
 8005440:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005442:	220e      	movs	r2, #14
 8005444:	68f9      	ldr	r1, [r7, #12]
 8005446:	6938      	ldr	r0, [r7, #16]
 8005448:	f7fe ff3c 	bl	80042c4 <_SendPacket>
  RECORD_END();
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f383 8811 	msr	BASEPRI, r3
}
 8005452:	bf00      	nop
 8005454:	3718      	adds	r7, #24
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	200143e8 	.word	0x200143e8

08005460 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005460:	b590      	push	{r4, r7, lr}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005466:	4b15      	ldr	r3, [pc, #84]	; (80054bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d01a      	beq.n	80054a4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800546e:	4b13      	ldr	r3, [pc, #76]	; (80054bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d015      	beq.n	80054a4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005478:	4b10      	ldr	r3, [pc, #64]	; (80054bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4798      	blx	r3
 8005480:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005484:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005486:	e9d7 0100 	ldrd	r0, r1, [r7]
 800548a:	f04f 0200 	mov.w	r2, #0
 800548e:	f04f 0300 	mov.w	r3, #0
 8005492:	000a      	movs	r2, r1
 8005494:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005496:	4613      	mov	r3, r2
 8005498:	461a      	mov	r2, r3
 800549a:	4621      	mov	r1, r4
 800549c:	200d      	movs	r0, #13
 800549e:	f7ff fcef 	bl	8004e80 <SEGGER_SYSVIEW_RecordU32x2>
 80054a2:	e006      	b.n	80054b2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80054a4:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4619      	mov	r1, r3
 80054aa:	200c      	movs	r0, #12
 80054ac:	f7ff fcac 	bl	8004e08 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80054b0:	bf00      	nop
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd90      	pop	{r4, r7, pc}
 80054ba:	bf00      	nop
 80054bc:	200143b8 	.word	0x200143b8
 80054c0:	e0001004 	.word	0xe0001004

080054c4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b08c      	sub	sp, #48	; 0x30
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	4603      	mov	r3, r0
 80054cc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80054ce:	4b40      	ldr	r3, [pc, #256]	; (80055d0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d077      	beq.n	80055c6 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80054d6:	4b3e      	ldr	r3, [pc, #248]	; (80055d0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80054dc:	2300      	movs	r3, #0
 80054de:	62bb      	str	r3, [r7, #40]	; 0x28
 80054e0:	e008      	b.n	80054f4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80054e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f0:	3301      	adds	r3, #1
 80054f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80054f4:	79fb      	ldrb	r3, [r7, #7]
 80054f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d3f2      	bcc.n	80054e2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80054fc:	e000      	b.n	8005500 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80054fe:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005502:	2b00      	cmp	r3, #0
 8005504:	d055      	beq.n	80055b2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005506:	f3ef 8311 	mrs	r3, BASEPRI
 800550a:	f04f 0120 	mov.w	r1, #32
 800550e:	f381 8811 	msr	BASEPRI, r1
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	482f      	ldr	r0, [pc, #188]	; (80055d4 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005516:	f7fe fde7 	bl	80040e8 <_PreparePacket>
 800551a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	627b      	str	r3, [r7, #36]	; 0x24
 8005524:	79fb      	ldrb	r3, [r7, #7]
 8005526:	623b      	str	r3, [r7, #32]
 8005528:	e00b      	b.n	8005542 <SEGGER_SYSVIEW_SendModule+0x7e>
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	b2da      	uxtb	r2, r3
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	1c59      	adds	r1, r3, #1
 8005532:	6279      	str	r1, [r7, #36]	; 0x24
 8005534:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005538:	b2d2      	uxtb	r2, r2
 800553a:	701a      	strb	r2, [r3, #0]
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	09db      	lsrs	r3, r3, #7
 8005540:	623b      	str	r3, [r7, #32]
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	2b7f      	cmp	r3, #127	; 0x7f
 8005546:	d8f0      	bhi.n	800552a <SEGGER_SYSVIEW_SendModule+0x66>
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	627a      	str	r2, [r7, #36]	; 0x24
 800554e:	6a3a      	ldr	r2, [r7, #32]
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	701a      	strb	r2, [r3, #0]
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	61fb      	str	r3, [r7, #28]
 800555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	61bb      	str	r3, [r7, #24]
 8005562:	e00b      	b.n	800557c <SEGGER_SYSVIEW_SendModule+0xb8>
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	b2da      	uxtb	r2, r3
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	1c59      	adds	r1, r3, #1
 800556c:	61f9      	str	r1, [r7, #28]
 800556e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	09db      	lsrs	r3, r3, #7
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	2b7f      	cmp	r3, #127	; 0x7f
 8005580:	d8f0      	bhi.n	8005564 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	61fa      	str	r2, [r7, #28]
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2280      	movs	r2, #128	; 0x80
 8005598:	4619      	mov	r1, r3
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f7fe fd74 	bl	8004088 <_EncodeStr>
 80055a0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80055a2:	2216      	movs	r2, #22
 80055a4:	68f9      	ldr	r1, [r7, #12]
 80055a6:	6938      	ldr	r0, [r7, #16]
 80055a8:	f7fe fe8c 	bl	80042c4 <_SendPacket>
      RECORD_END();
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80055b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d006      	beq.n	80055c6 <SEGGER_SYSVIEW_SendModule+0x102>
 80055b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	4798      	blx	r3
    }
  }
}
 80055c6:	bf00      	nop
 80055c8:	3730      	adds	r7, #48	; 0x30
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	200143e0 	.word	0x200143e0
 80055d4:	200143e8 	.word	0x200143e8

080055d8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80055de:	4b0c      	ldr	r3, [pc, #48]	; (8005610 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00f      	beq.n	8005606 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80055e6:	4b0a      	ldr	r3, [pc, #40]	; (8005610 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1f2      	bne.n	80055ec <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005606:	bf00      	nop
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	200143e0 	.word	0x200143e0

08005614 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800561a:	f3ef 8311 	mrs	r3, BASEPRI
 800561e:	f04f 0120 	mov.w	r1, #32
 8005622:	f381 8811 	msr	BASEPRI, r1
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	4817      	ldr	r0, [pc, #92]	; (8005688 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800562a:	f7fe fd5d 	bl	80040e8 <_PreparePacket>
 800562e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	4b14      	ldr	r3, [pc, #80]	; (800568c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	e00b      	b.n	8005658 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	b2da      	uxtb	r2, r3
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	1c59      	adds	r1, r3, #1
 8005648:	6179      	str	r1, [r7, #20]
 800564a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	701a      	strb	r2, [r3, #0]
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	09db      	lsrs	r3, r3, #7
 8005656:	613b      	str	r3, [r7, #16]
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2b7f      	cmp	r3, #127	; 0x7f
 800565c:	d8f0      	bhi.n	8005640 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	617a      	str	r2, [r7, #20]
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	701a      	strb	r2, [r3, #0]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800566e:	221b      	movs	r2, #27
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	68b8      	ldr	r0, [r7, #8]
 8005674:	f7fe fe26 	bl	80042c4 <_SendPacket>
  RECORD_END();
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f383 8811 	msr	BASEPRI, r3
}
 800567e:	bf00      	nop
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	200143e8 	.word	0x200143e8
 800568c:	200143e4 	.word	0x200143e4

08005690 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005690:	b40f      	push	{r0, r1, r2, r3}
 8005692:	b580      	push	{r7, lr}
 8005694:	b082      	sub	sp, #8
 8005696:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005698:	f107 0314 	add.w	r3, r7, #20
 800569c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800569e:	1d3b      	adds	r3, r7, #4
 80056a0:	461a      	mov	r2, r3
 80056a2:	2100      	movs	r1, #0
 80056a4:	6938      	ldr	r0, [r7, #16]
 80056a6:	f7ff f91d 	bl	80048e4 <_VPrintTarget>
  va_end(ParamList);
}
 80056aa:	bf00      	nop
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056b4:	b004      	add	sp, #16
 80056b6:	4770      	bx	lr

080056b8 <__errno>:
 80056b8:	4b01      	ldr	r3, [pc, #4]	; (80056c0 <__errno+0x8>)
 80056ba:	6818      	ldr	r0, [r3, #0]
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	20000014 	.word	0x20000014

080056c4 <__libc_init_array>:
 80056c4:	b570      	push	{r4, r5, r6, lr}
 80056c6:	4d0d      	ldr	r5, [pc, #52]	; (80056fc <__libc_init_array+0x38>)
 80056c8:	4c0d      	ldr	r4, [pc, #52]	; (8005700 <__libc_init_array+0x3c>)
 80056ca:	1b64      	subs	r4, r4, r5
 80056cc:	10a4      	asrs	r4, r4, #2
 80056ce:	2600      	movs	r6, #0
 80056d0:	42a6      	cmp	r6, r4
 80056d2:	d109      	bne.n	80056e8 <__libc_init_array+0x24>
 80056d4:	4d0b      	ldr	r5, [pc, #44]	; (8005704 <__libc_init_array+0x40>)
 80056d6:	4c0c      	ldr	r4, [pc, #48]	; (8005708 <__libc_init_array+0x44>)
 80056d8:	f000 fca2 	bl	8006020 <_init>
 80056dc:	1b64      	subs	r4, r4, r5
 80056de:	10a4      	asrs	r4, r4, #2
 80056e0:	2600      	movs	r6, #0
 80056e2:	42a6      	cmp	r6, r4
 80056e4:	d105      	bne.n	80056f2 <__libc_init_array+0x2e>
 80056e6:	bd70      	pop	{r4, r5, r6, pc}
 80056e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ec:	4798      	blx	r3
 80056ee:	3601      	adds	r6, #1
 80056f0:	e7ee      	b.n	80056d0 <__libc_init_array+0xc>
 80056f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f6:	4798      	blx	r3
 80056f8:	3601      	adds	r6, #1
 80056fa:	e7f2      	b.n	80056e2 <__libc_init_array+0x1e>
 80056fc:	08006178 	.word	0x08006178
 8005700:	08006178 	.word	0x08006178
 8005704:	08006178 	.word	0x08006178
 8005708:	0800617c 	.word	0x0800617c

0800570c <memcpy>:
 800570c:	440a      	add	r2, r1
 800570e:	4291      	cmp	r1, r2
 8005710:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005714:	d100      	bne.n	8005718 <memcpy+0xc>
 8005716:	4770      	bx	lr
 8005718:	b510      	push	{r4, lr}
 800571a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800571e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005722:	4291      	cmp	r1, r2
 8005724:	d1f9      	bne.n	800571a <memcpy+0xe>
 8005726:	bd10      	pop	{r4, pc}

08005728 <memset>:
 8005728:	4402      	add	r2, r0
 800572a:	4603      	mov	r3, r0
 800572c:	4293      	cmp	r3, r2
 800572e:	d100      	bne.n	8005732 <memset+0xa>
 8005730:	4770      	bx	lr
 8005732:	f803 1b01 	strb.w	r1, [r3], #1
 8005736:	e7f9      	b.n	800572c <memset+0x4>

08005738 <sniprintf>:
 8005738:	b40c      	push	{r2, r3}
 800573a:	b530      	push	{r4, r5, lr}
 800573c:	4b17      	ldr	r3, [pc, #92]	; (800579c <sniprintf+0x64>)
 800573e:	1e0c      	subs	r4, r1, #0
 8005740:	681d      	ldr	r5, [r3, #0]
 8005742:	b09d      	sub	sp, #116	; 0x74
 8005744:	da08      	bge.n	8005758 <sniprintf+0x20>
 8005746:	238b      	movs	r3, #139	; 0x8b
 8005748:	602b      	str	r3, [r5, #0]
 800574a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800574e:	b01d      	add	sp, #116	; 0x74
 8005750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005754:	b002      	add	sp, #8
 8005756:	4770      	bx	lr
 8005758:	f44f 7302 	mov.w	r3, #520	; 0x208
 800575c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005760:	bf14      	ite	ne
 8005762:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005766:	4623      	moveq	r3, r4
 8005768:	9304      	str	r3, [sp, #16]
 800576a:	9307      	str	r3, [sp, #28]
 800576c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005770:	9002      	str	r0, [sp, #8]
 8005772:	9006      	str	r0, [sp, #24]
 8005774:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005778:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800577a:	ab21      	add	r3, sp, #132	; 0x84
 800577c:	a902      	add	r1, sp, #8
 800577e:	4628      	mov	r0, r5
 8005780:	9301      	str	r3, [sp, #4]
 8005782:	f000 f869 	bl	8005858 <_svfiprintf_r>
 8005786:	1c43      	adds	r3, r0, #1
 8005788:	bfbc      	itt	lt
 800578a:	238b      	movlt	r3, #139	; 0x8b
 800578c:	602b      	strlt	r3, [r5, #0]
 800578e:	2c00      	cmp	r4, #0
 8005790:	d0dd      	beq.n	800574e <sniprintf+0x16>
 8005792:	9b02      	ldr	r3, [sp, #8]
 8005794:	2200      	movs	r2, #0
 8005796:	701a      	strb	r2, [r3, #0]
 8005798:	e7d9      	b.n	800574e <sniprintf+0x16>
 800579a:	bf00      	nop
 800579c:	20000014 	.word	0x20000014

080057a0 <__ssputs_r>:
 80057a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a4:	688e      	ldr	r6, [r1, #8]
 80057a6:	429e      	cmp	r6, r3
 80057a8:	4682      	mov	sl, r0
 80057aa:	460c      	mov	r4, r1
 80057ac:	4690      	mov	r8, r2
 80057ae:	461f      	mov	r7, r3
 80057b0:	d838      	bhi.n	8005824 <__ssputs_r+0x84>
 80057b2:	898a      	ldrh	r2, [r1, #12]
 80057b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057b8:	d032      	beq.n	8005820 <__ssputs_r+0x80>
 80057ba:	6825      	ldr	r5, [r4, #0]
 80057bc:	6909      	ldr	r1, [r1, #16]
 80057be:	eba5 0901 	sub.w	r9, r5, r1
 80057c2:	6965      	ldr	r5, [r4, #20]
 80057c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057cc:	3301      	adds	r3, #1
 80057ce:	444b      	add	r3, r9
 80057d0:	106d      	asrs	r5, r5, #1
 80057d2:	429d      	cmp	r5, r3
 80057d4:	bf38      	it	cc
 80057d6:	461d      	movcc	r5, r3
 80057d8:	0553      	lsls	r3, r2, #21
 80057da:	d531      	bpl.n	8005840 <__ssputs_r+0xa0>
 80057dc:	4629      	mov	r1, r5
 80057de:	f000 fb55 	bl	8005e8c <_malloc_r>
 80057e2:	4606      	mov	r6, r0
 80057e4:	b950      	cbnz	r0, 80057fc <__ssputs_r+0x5c>
 80057e6:	230c      	movs	r3, #12
 80057e8:	f8ca 3000 	str.w	r3, [sl]
 80057ec:	89a3      	ldrh	r3, [r4, #12]
 80057ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f2:	81a3      	strh	r3, [r4, #12]
 80057f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057fc:	6921      	ldr	r1, [r4, #16]
 80057fe:	464a      	mov	r2, r9
 8005800:	f7ff ff84 	bl	800570c <memcpy>
 8005804:	89a3      	ldrh	r3, [r4, #12]
 8005806:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800580a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800580e:	81a3      	strh	r3, [r4, #12]
 8005810:	6126      	str	r6, [r4, #16]
 8005812:	6165      	str	r5, [r4, #20]
 8005814:	444e      	add	r6, r9
 8005816:	eba5 0509 	sub.w	r5, r5, r9
 800581a:	6026      	str	r6, [r4, #0]
 800581c:	60a5      	str	r5, [r4, #8]
 800581e:	463e      	mov	r6, r7
 8005820:	42be      	cmp	r6, r7
 8005822:	d900      	bls.n	8005826 <__ssputs_r+0x86>
 8005824:	463e      	mov	r6, r7
 8005826:	6820      	ldr	r0, [r4, #0]
 8005828:	4632      	mov	r2, r6
 800582a:	4641      	mov	r1, r8
 800582c:	f000 faa8 	bl	8005d80 <memmove>
 8005830:	68a3      	ldr	r3, [r4, #8]
 8005832:	1b9b      	subs	r3, r3, r6
 8005834:	60a3      	str	r3, [r4, #8]
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	4433      	add	r3, r6
 800583a:	6023      	str	r3, [r4, #0]
 800583c:	2000      	movs	r0, #0
 800583e:	e7db      	b.n	80057f8 <__ssputs_r+0x58>
 8005840:	462a      	mov	r2, r5
 8005842:	f000 fb97 	bl	8005f74 <_realloc_r>
 8005846:	4606      	mov	r6, r0
 8005848:	2800      	cmp	r0, #0
 800584a:	d1e1      	bne.n	8005810 <__ssputs_r+0x70>
 800584c:	6921      	ldr	r1, [r4, #16]
 800584e:	4650      	mov	r0, sl
 8005850:	f000 fab0 	bl	8005db4 <_free_r>
 8005854:	e7c7      	b.n	80057e6 <__ssputs_r+0x46>
	...

08005858 <_svfiprintf_r>:
 8005858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800585c:	4698      	mov	r8, r3
 800585e:	898b      	ldrh	r3, [r1, #12]
 8005860:	061b      	lsls	r3, r3, #24
 8005862:	b09d      	sub	sp, #116	; 0x74
 8005864:	4607      	mov	r7, r0
 8005866:	460d      	mov	r5, r1
 8005868:	4614      	mov	r4, r2
 800586a:	d50e      	bpl.n	800588a <_svfiprintf_r+0x32>
 800586c:	690b      	ldr	r3, [r1, #16]
 800586e:	b963      	cbnz	r3, 800588a <_svfiprintf_r+0x32>
 8005870:	2140      	movs	r1, #64	; 0x40
 8005872:	f000 fb0b 	bl	8005e8c <_malloc_r>
 8005876:	6028      	str	r0, [r5, #0]
 8005878:	6128      	str	r0, [r5, #16]
 800587a:	b920      	cbnz	r0, 8005886 <_svfiprintf_r+0x2e>
 800587c:	230c      	movs	r3, #12
 800587e:	603b      	str	r3, [r7, #0]
 8005880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005884:	e0d1      	b.n	8005a2a <_svfiprintf_r+0x1d2>
 8005886:	2340      	movs	r3, #64	; 0x40
 8005888:	616b      	str	r3, [r5, #20]
 800588a:	2300      	movs	r3, #0
 800588c:	9309      	str	r3, [sp, #36]	; 0x24
 800588e:	2320      	movs	r3, #32
 8005890:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005894:	f8cd 800c 	str.w	r8, [sp, #12]
 8005898:	2330      	movs	r3, #48	; 0x30
 800589a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005a44 <_svfiprintf_r+0x1ec>
 800589e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058a2:	f04f 0901 	mov.w	r9, #1
 80058a6:	4623      	mov	r3, r4
 80058a8:	469a      	mov	sl, r3
 80058aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058ae:	b10a      	cbz	r2, 80058b4 <_svfiprintf_r+0x5c>
 80058b0:	2a25      	cmp	r2, #37	; 0x25
 80058b2:	d1f9      	bne.n	80058a8 <_svfiprintf_r+0x50>
 80058b4:	ebba 0b04 	subs.w	fp, sl, r4
 80058b8:	d00b      	beq.n	80058d2 <_svfiprintf_r+0x7a>
 80058ba:	465b      	mov	r3, fp
 80058bc:	4622      	mov	r2, r4
 80058be:	4629      	mov	r1, r5
 80058c0:	4638      	mov	r0, r7
 80058c2:	f7ff ff6d 	bl	80057a0 <__ssputs_r>
 80058c6:	3001      	adds	r0, #1
 80058c8:	f000 80aa 	beq.w	8005a20 <_svfiprintf_r+0x1c8>
 80058cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058ce:	445a      	add	r2, fp
 80058d0:	9209      	str	r2, [sp, #36]	; 0x24
 80058d2:	f89a 3000 	ldrb.w	r3, [sl]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 80a2 	beq.w	8005a20 <_svfiprintf_r+0x1c8>
 80058dc:	2300      	movs	r3, #0
 80058de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058e6:	f10a 0a01 	add.w	sl, sl, #1
 80058ea:	9304      	str	r3, [sp, #16]
 80058ec:	9307      	str	r3, [sp, #28]
 80058ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058f2:	931a      	str	r3, [sp, #104]	; 0x68
 80058f4:	4654      	mov	r4, sl
 80058f6:	2205      	movs	r2, #5
 80058f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058fc:	4851      	ldr	r0, [pc, #324]	; (8005a44 <_svfiprintf_r+0x1ec>)
 80058fe:	f7fa fcd7 	bl	80002b0 <memchr>
 8005902:	9a04      	ldr	r2, [sp, #16]
 8005904:	b9d8      	cbnz	r0, 800593e <_svfiprintf_r+0xe6>
 8005906:	06d0      	lsls	r0, r2, #27
 8005908:	bf44      	itt	mi
 800590a:	2320      	movmi	r3, #32
 800590c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005910:	0711      	lsls	r1, r2, #28
 8005912:	bf44      	itt	mi
 8005914:	232b      	movmi	r3, #43	; 0x2b
 8005916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800591a:	f89a 3000 	ldrb.w	r3, [sl]
 800591e:	2b2a      	cmp	r3, #42	; 0x2a
 8005920:	d015      	beq.n	800594e <_svfiprintf_r+0xf6>
 8005922:	9a07      	ldr	r2, [sp, #28]
 8005924:	4654      	mov	r4, sl
 8005926:	2000      	movs	r0, #0
 8005928:	f04f 0c0a 	mov.w	ip, #10
 800592c:	4621      	mov	r1, r4
 800592e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005932:	3b30      	subs	r3, #48	; 0x30
 8005934:	2b09      	cmp	r3, #9
 8005936:	d94e      	bls.n	80059d6 <_svfiprintf_r+0x17e>
 8005938:	b1b0      	cbz	r0, 8005968 <_svfiprintf_r+0x110>
 800593a:	9207      	str	r2, [sp, #28]
 800593c:	e014      	b.n	8005968 <_svfiprintf_r+0x110>
 800593e:	eba0 0308 	sub.w	r3, r0, r8
 8005942:	fa09 f303 	lsl.w	r3, r9, r3
 8005946:	4313      	orrs	r3, r2
 8005948:	9304      	str	r3, [sp, #16]
 800594a:	46a2      	mov	sl, r4
 800594c:	e7d2      	b.n	80058f4 <_svfiprintf_r+0x9c>
 800594e:	9b03      	ldr	r3, [sp, #12]
 8005950:	1d19      	adds	r1, r3, #4
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	9103      	str	r1, [sp, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	bfbb      	ittet	lt
 800595a:	425b      	neglt	r3, r3
 800595c:	f042 0202 	orrlt.w	r2, r2, #2
 8005960:	9307      	strge	r3, [sp, #28]
 8005962:	9307      	strlt	r3, [sp, #28]
 8005964:	bfb8      	it	lt
 8005966:	9204      	strlt	r2, [sp, #16]
 8005968:	7823      	ldrb	r3, [r4, #0]
 800596a:	2b2e      	cmp	r3, #46	; 0x2e
 800596c:	d10c      	bne.n	8005988 <_svfiprintf_r+0x130>
 800596e:	7863      	ldrb	r3, [r4, #1]
 8005970:	2b2a      	cmp	r3, #42	; 0x2a
 8005972:	d135      	bne.n	80059e0 <_svfiprintf_r+0x188>
 8005974:	9b03      	ldr	r3, [sp, #12]
 8005976:	1d1a      	adds	r2, r3, #4
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	9203      	str	r2, [sp, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	bfb8      	it	lt
 8005980:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005984:	3402      	adds	r4, #2
 8005986:	9305      	str	r3, [sp, #20]
 8005988:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005a54 <_svfiprintf_r+0x1fc>
 800598c:	7821      	ldrb	r1, [r4, #0]
 800598e:	2203      	movs	r2, #3
 8005990:	4650      	mov	r0, sl
 8005992:	f7fa fc8d 	bl	80002b0 <memchr>
 8005996:	b140      	cbz	r0, 80059aa <_svfiprintf_r+0x152>
 8005998:	2340      	movs	r3, #64	; 0x40
 800599a:	eba0 000a 	sub.w	r0, r0, sl
 800599e:	fa03 f000 	lsl.w	r0, r3, r0
 80059a2:	9b04      	ldr	r3, [sp, #16]
 80059a4:	4303      	orrs	r3, r0
 80059a6:	3401      	adds	r4, #1
 80059a8:	9304      	str	r3, [sp, #16]
 80059aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ae:	4826      	ldr	r0, [pc, #152]	; (8005a48 <_svfiprintf_r+0x1f0>)
 80059b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059b4:	2206      	movs	r2, #6
 80059b6:	f7fa fc7b 	bl	80002b0 <memchr>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	d038      	beq.n	8005a30 <_svfiprintf_r+0x1d8>
 80059be:	4b23      	ldr	r3, [pc, #140]	; (8005a4c <_svfiprintf_r+0x1f4>)
 80059c0:	bb1b      	cbnz	r3, 8005a0a <_svfiprintf_r+0x1b2>
 80059c2:	9b03      	ldr	r3, [sp, #12]
 80059c4:	3307      	adds	r3, #7
 80059c6:	f023 0307 	bic.w	r3, r3, #7
 80059ca:	3308      	adds	r3, #8
 80059cc:	9303      	str	r3, [sp, #12]
 80059ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059d0:	4433      	add	r3, r6
 80059d2:	9309      	str	r3, [sp, #36]	; 0x24
 80059d4:	e767      	b.n	80058a6 <_svfiprintf_r+0x4e>
 80059d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80059da:	460c      	mov	r4, r1
 80059dc:	2001      	movs	r0, #1
 80059de:	e7a5      	b.n	800592c <_svfiprintf_r+0xd4>
 80059e0:	2300      	movs	r3, #0
 80059e2:	3401      	adds	r4, #1
 80059e4:	9305      	str	r3, [sp, #20]
 80059e6:	4619      	mov	r1, r3
 80059e8:	f04f 0c0a 	mov.w	ip, #10
 80059ec:	4620      	mov	r0, r4
 80059ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059f2:	3a30      	subs	r2, #48	; 0x30
 80059f4:	2a09      	cmp	r2, #9
 80059f6:	d903      	bls.n	8005a00 <_svfiprintf_r+0x1a8>
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0c5      	beq.n	8005988 <_svfiprintf_r+0x130>
 80059fc:	9105      	str	r1, [sp, #20]
 80059fe:	e7c3      	b.n	8005988 <_svfiprintf_r+0x130>
 8005a00:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a04:	4604      	mov	r4, r0
 8005a06:	2301      	movs	r3, #1
 8005a08:	e7f0      	b.n	80059ec <_svfiprintf_r+0x194>
 8005a0a:	ab03      	add	r3, sp, #12
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	462a      	mov	r2, r5
 8005a10:	4b0f      	ldr	r3, [pc, #60]	; (8005a50 <_svfiprintf_r+0x1f8>)
 8005a12:	a904      	add	r1, sp, #16
 8005a14:	4638      	mov	r0, r7
 8005a16:	f3af 8000 	nop.w
 8005a1a:	1c42      	adds	r2, r0, #1
 8005a1c:	4606      	mov	r6, r0
 8005a1e:	d1d6      	bne.n	80059ce <_svfiprintf_r+0x176>
 8005a20:	89ab      	ldrh	r3, [r5, #12]
 8005a22:	065b      	lsls	r3, r3, #25
 8005a24:	f53f af2c 	bmi.w	8005880 <_svfiprintf_r+0x28>
 8005a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a2a:	b01d      	add	sp, #116	; 0x74
 8005a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a30:	ab03      	add	r3, sp, #12
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	462a      	mov	r2, r5
 8005a36:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <_svfiprintf_r+0x1f8>)
 8005a38:	a904      	add	r1, sp, #16
 8005a3a:	4638      	mov	r0, r7
 8005a3c:	f000 f87a 	bl	8005b34 <_printf_i>
 8005a40:	e7eb      	b.n	8005a1a <_svfiprintf_r+0x1c2>
 8005a42:	bf00      	nop
 8005a44:	0800613c 	.word	0x0800613c
 8005a48:	08006146 	.word	0x08006146
 8005a4c:	00000000 	.word	0x00000000
 8005a50:	080057a1 	.word	0x080057a1
 8005a54:	08006142 	.word	0x08006142

08005a58 <_printf_common>:
 8005a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a5c:	4616      	mov	r6, r2
 8005a5e:	4699      	mov	r9, r3
 8005a60:	688a      	ldr	r2, [r1, #8]
 8005a62:	690b      	ldr	r3, [r1, #16]
 8005a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	bfb8      	it	lt
 8005a6c:	4613      	movlt	r3, r2
 8005a6e:	6033      	str	r3, [r6, #0]
 8005a70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a74:	4607      	mov	r7, r0
 8005a76:	460c      	mov	r4, r1
 8005a78:	b10a      	cbz	r2, 8005a7e <_printf_common+0x26>
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	6033      	str	r3, [r6, #0]
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	0699      	lsls	r1, r3, #26
 8005a82:	bf42      	ittt	mi
 8005a84:	6833      	ldrmi	r3, [r6, #0]
 8005a86:	3302      	addmi	r3, #2
 8005a88:	6033      	strmi	r3, [r6, #0]
 8005a8a:	6825      	ldr	r5, [r4, #0]
 8005a8c:	f015 0506 	ands.w	r5, r5, #6
 8005a90:	d106      	bne.n	8005aa0 <_printf_common+0x48>
 8005a92:	f104 0a19 	add.w	sl, r4, #25
 8005a96:	68e3      	ldr	r3, [r4, #12]
 8005a98:	6832      	ldr	r2, [r6, #0]
 8005a9a:	1a9b      	subs	r3, r3, r2
 8005a9c:	42ab      	cmp	r3, r5
 8005a9e:	dc26      	bgt.n	8005aee <_printf_common+0x96>
 8005aa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005aa4:	1e13      	subs	r3, r2, #0
 8005aa6:	6822      	ldr	r2, [r4, #0]
 8005aa8:	bf18      	it	ne
 8005aaa:	2301      	movne	r3, #1
 8005aac:	0692      	lsls	r2, r2, #26
 8005aae:	d42b      	bmi.n	8005b08 <_printf_common+0xb0>
 8005ab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ab4:	4649      	mov	r1, r9
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	47c0      	blx	r8
 8005aba:	3001      	adds	r0, #1
 8005abc:	d01e      	beq.n	8005afc <_printf_common+0xa4>
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	68e5      	ldr	r5, [r4, #12]
 8005ac2:	6832      	ldr	r2, [r6, #0]
 8005ac4:	f003 0306 	and.w	r3, r3, #6
 8005ac8:	2b04      	cmp	r3, #4
 8005aca:	bf08      	it	eq
 8005acc:	1aad      	subeq	r5, r5, r2
 8005ace:	68a3      	ldr	r3, [r4, #8]
 8005ad0:	6922      	ldr	r2, [r4, #16]
 8005ad2:	bf0c      	ite	eq
 8005ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ad8:	2500      	movne	r5, #0
 8005ada:	4293      	cmp	r3, r2
 8005adc:	bfc4      	itt	gt
 8005ade:	1a9b      	subgt	r3, r3, r2
 8005ae0:	18ed      	addgt	r5, r5, r3
 8005ae2:	2600      	movs	r6, #0
 8005ae4:	341a      	adds	r4, #26
 8005ae6:	42b5      	cmp	r5, r6
 8005ae8:	d11a      	bne.n	8005b20 <_printf_common+0xc8>
 8005aea:	2000      	movs	r0, #0
 8005aec:	e008      	b.n	8005b00 <_printf_common+0xa8>
 8005aee:	2301      	movs	r3, #1
 8005af0:	4652      	mov	r2, sl
 8005af2:	4649      	mov	r1, r9
 8005af4:	4638      	mov	r0, r7
 8005af6:	47c0      	blx	r8
 8005af8:	3001      	adds	r0, #1
 8005afa:	d103      	bne.n	8005b04 <_printf_common+0xac>
 8005afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b04:	3501      	adds	r5, #1
 8005b06:	e7c6      	b.n	8005a96 <_printf_common+0x3e>
 8005b08:	18e1      	adds	r1, r4, r3
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	2030      	movs	r0, #48	; 0x30
 8005b0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b12:	4422      	add	r2, r4
 8005b14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b1c:	3302      	adds	r3, #2
 8005b1e:	e7c7      	b.n	8005ab0 <_printf_common+0x58>
 8005b20:	2301      	movs	r3, #1
 8005b22:	4622      	mov	r2, r4
 8005b24:	4649      	mov	r1, r9
 8005b26:	4638      	mov	r0, r7
 8005b28:	47c0      	blx	r8
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	d0e6      	beq.n	8005afc <_printf_common+0xa4>
 8005b2e:	3601      	adds	r6, #1
 8005b30:	e7d9      	b.n	8005ae6 <_printf_common+0x8e>
	...

08005b34 <_printf_i>:
 8005b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b38:	7e0f      	ldrb	r7, [r1, #24]
 8005b3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b3c:	2f78      	cmp	r7, #120	; 0x78
 8005b3e:	4691      	mov	r9, r2
 8005b40:	4680      	mov	r8, r0
 8005b42:	460c      	mov	r4, r1
 8005b44:	469a      	mov	sl, r3
 8005b46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b4a:	d807      	bhi.n	8005b5c <_printf_i+0x28>
 8005b4c:	2f62      	cmp	r7, #98	; 0x62
 8005b4e:	d80a      	bhi.n	8005b66 <_printf_i+0x32>
 8005b50:	2f00      	cmp	r7, #0
 8005b52:	f000 80d8 	beq.w	8005d06 <_printf_i+0x1d2>
 8005b56:	2f58      	cmp	r7, #88	; 0x58
 8005b58:	f000 80a3 	beq.w	8005ca2 <_printf_i+0x16e>
 8005b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b64:	e03a      	b.n	8005bdc <_printf_i+0xa8>
 8005b66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b6a:	2b15      	cmp	r3, #21
 8005b6c:	d8f6      	bhi.n	8005b5c <_printf_i+0x28>
 8005b6e:	a101      	add	r1, pc, #4	; (adr r1, 8005b74 <_printf_i+0x40>)
 8005b70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b74:	08005bcd 	.word	0x08005bcd
 8005b78:	08005be1 	.word	0x08005be1
 8005b7c:	08005b5d 	.word	0x08005b5d
 8005b80:	08005b5d 	.word	0x08005b5d
 8005b84:	08005b5d 	.word	0x08005b5d
 8005b88:	08005b5d 	.word	0x08005b5d
 8005b8c:	08005be1 	.word	0x08005be1
 8005b90:	08005b5d 	.word	0x08005b5d
 8005b94:	08005b5d 	.word	0x08005b5d
 8005b98:	08005b5d 	.word	0x08005b5d
 8005b9c:	08005b5d 	.word	0x08005b5d
 8005ba0:	08005ced 	.word	0x08005ced
 8005ba4:	08005c11 	.word	0x08005c11
 8005ba8:	08005ccf 	.word	0x08005ccf
 8005bac:	08005b5d 	.word	0x08005b5d
 8005bb0:	08005b5d 	.word	0x08005b5d
 8005bb4:	08005d0f 	.word	0x08005d0f
 8005bb8:	08005b5d 	.word	0x08005b5d
 8005bbc:	08005c11 	.word	0x08005c11
 8005bc0:	08005b5d 	.word	0x08005b5d
 8005bc4:	08005b5d 	.word	0x08005b5d
 8005bc8:	08005cd7 	.word	0x08005cd7
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	1d1a      	adds	r2, r3, #4
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	602a      	str	r2, [r5, #0]
 8005bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e0a3      	b.n	8005d28 <_printf_i+0x1f4>
 8005be0:	6820      	ldr	r0, [r4, #0]
 8005be2:	6829      	ldr	r1, [r5, #0]
 8005be4:	0606      	lsls	r6, r0, #24
 8005be6:	f101 0304 	add.w	r3, r1, #4
 8005bea:	d50a      	bpl.n	8005c02 <_printf_i+0xce>
 8005bec:	680e      	ldr	r6, [r1, #0]
 8005bee:	602b      	str	r3, [r5, #0]
 8005bf0:	2e00      	cmp	r6, #0
 8005bf2:	da03      	bge.n	8005bfc <_printf_i+0xc8>
 8005bf4:	232d      	movs	r3, #45	; 0x2d
 8005bf6:	4276      	negs	r6, r6
 8005bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bfc:	485e      	ldr	r0, [pc, #376]	; (8005d78 <_printf_i+0x244>)
 8005bfe:	230a      	movs	r3, #10
 8005c00:	e019      	b.n	8005c36 <_printf_i+0x102>
 8005c02:	680e      	ldr	r6, [r1, #0]
 8005c04:	602b      	str	r3, [r5, #0]
 8005c06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c0a:	bf18      	it	ne
 8005c0c:	b236      	sxthne	r6, r6
 8005c0e:	e7ef      	b.n	8005bf0 <_printf_i+0xbc>
 8005c10:	682b      	ldr	r3, [r5, #0]
 8005c12:	6820      	ldr	r0, [r4, #0]
 8005c14:	1d19      	adds	r1, r3, #4
 8005c16:	6029      	str	r1, [r5, #0]
 8005c18:	0601      	lsls	r1, r0, #24
 8005c1a:	d501      	bpl.n	8005c20 <_printf_i+0xec>
 8005c1c:	681e      	ldr	r6, [r3, #0]
 8005c1e:	e002      	b.n	8005c26 <_printf_i+0xf2>
 8005c20:	0646      	lsls	r6, r0, #25
 8005c22:	d5fb      	bpl.n	8005c1c <_printf_i+0xe8>
 8005c24:	881e      	ldrh	r6, [r3, #0]
 8005c26:	4854      	ldr	r0, [pc, #336]	; (8005d78 <_printf_i+0x244>)
 8005c28:	2f6f      	cmp	r7, #111	; 0x6f
 8005c2a:	bf0c      	ite	eq
 8005c2c:	2308      	moveq	r3, #8
 8005c2e:	230a      	movne	r3, #10
 8005c30:	2100      	movs	r1, #0
 8005c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c36:	6865      	ldr	r5, [r4, #4]
 8005c38:	60a5      	str	r5, [r4, #8]
 8005c3a:	2d00      	cmp	r5, #0
 8005c3c:	bfa2      	ittt	ge
 8005c3e:	6821      	ldrge	r1, [r4, #0]
 8005c40:	f021 0104 	bicge.w	r1, r1, #4
 8005c44:	6021      	strge	r1, [r4, #0]
 8005c46:	b90e      	cbnz	r6, 8005c4c <_printf_i+0x118>
 8005c48:	2d00      	cmp	r5, #0
 8005c4a:	d04d      	beq.n	8005ce8 <_printf_i+0x1b4>
 8005c4c:	4615      	mov	r5, r2
 8005c4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c52:	fb03 6711 	mls	r7, r3, r1, r6
 8005c56:	5dc7      	ldrb	r7, [r0, r7]
 8005c58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c5c:	4637      	mov	r7, r6
 8005c5e:	42bb      	cmp	r3, r7
 8005c60:	460e      	mov	r6, r1
 8005c62:	d9f4      	bls.n	8005c4e <_printf_i+0x11a>
 8005c64:	2b08      	cmp	r3, #8
 8005c66:	d10b      	bne.n	8005c80 <_printf_i+0x14c>
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	07de      	lsls	r6, r3, #31
 8005c6c:	d508      	bpl.n	8005c80 <_printf_i+0x14c>
 8005c6e:	6923      	ldr	r3, [r4, #16]
 8005c70:	6861      	ldr	r1, [r4, #4]
 8005c72:	4299      	cmp	r1, r3
 8005c74:	bfde      	ittt	le
 8005c76:	2330      	movle	r3, #48	; 0x30
 8005c78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c7c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005c80:	1b52      	subs	r2, r2, r5
 8005c82:	6122      	str	r2, [r4, #16]
 8005c84:	f8cd a000 	str.w	sl, [sp]
 8005c88:	464b      	mov	r3, r9
 8005c8a:	aa03      	add	r2, sp, #12
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	4640      	mov	r0, r8
 8005c90:	f7ff fee2 	bl	8005a58 <_printf_common>
 8005c94:	3001      	adds	r0, #1
 8005c96:	d14c      	bne.n	8005d32 <_printf_i+0x1fe>
 8005c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c9c:	b004      	add	sp, #16
 8005c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca2:	4835      	ldr	r0, [pc, #212]	; (8005d78 <_printf_i+0x244>)
 8005ca4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ca8:	6829      	ldr	r1, [r5, #0]
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cb0:	6029      	str	r1, [r5, #0]
 8005cb2:	061d      	lsls	r5, r3, #24
 8005cb4:	d514      	bpl.n	8005ce0 <_printf_i+0x1ac>
 8005cb6:	07df      	lsls	r7, r3, #31
 8005cb8:	bf44      	itt	mi
 8005cba:	f043 0320 	orrmi.w	r3, r3, #32
 8005cbe:	6023      	strmi	r3, [r4, #0]
 8005cc0:	b91e      	cbnz	r6, 8005cca <_printf_i+0x196>
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	f023 0320 	bic.w	r3, r3, #32
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	2310      	movs	r3, #16
 8005ccc:	e7b0      	b.n	8005c30 <_printf_i+0xfc>
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	f043 0320 	orr.w	r3, r3, #32
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	2378      	movs	r3, #120	; 0x78
 8005cd8:	4828      	ldr	r0, [pc, #160]	; (8005d7c <_printf_i+0x248>)
 8005cda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cde:	e7e3      	b.n	8005ca8 <_printf_i+0x174>
 8005ce0:	0659      	lsls	r1, r3, #25
 8005ce2:	bf48      	it	mi
 8005ce4:	b2b6      	uxthmi	r6, r6
 8005ce6:	e7e6      	b.n	8005cb6 <_printf_i+0x182>
 8005ce8:	4615      	mov	r5, r2
 8005cea:	e7bb      	b.n	8005c64 <_printf_i+0x130>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	6826      	ldr	r6, [r4, #0]
 8005cf0:	6961      	ldr	r1, [r4, #20]
 8005cf2:	1d18      	adds	r0, r3, #4
 8005cf4:	6028      	str	r0, [r5, #0]
 8005cf6:	0635      	lsls	r5, r6, #24
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	d501      	bpl.n	8005d00 <_printf_i+0x1cc>
 8005cfc:	6019      	str	r1, [r3, #0]
 8005cfe:	e002      	b.n	8005d06 <_printf_i+0x1d2>
 8005d00:	0670      	lsls	r0, r6, #25
 8005d02:	d5fb      	bpl.n	8005cfc <_printf_i+0x1c8>
 8005d04:	8019      	strh	r1, [r3, #0]
 8005d06:	2300      	movs	r3, #0
 8005d08:	6123      	str	r3, [r4, #16]
 8005d0a:	4615      	mov	r5, r2
 8005d0c:	e7ba      	b.n	8005c84 <_printf_i+0x150>
 8005d0e:	682b      	ldr	r3, [r5, #0]
 8005d10:	1d1a      	adds	r2, r3, #4
 8005d12:	602a      	str	r2, [r5, #0]
 8005d14:	681d      	ldr	r5, [r3, #0]
 8005d16:	6862      	ldr	r2, [r4, #4]
 8005d18:	2100      	movs	r1, #0
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f7fa fac8 	bl	80002b0 <memchr>
 8005d20:	b108      	cbz	r0, 8005d26 <_printf_i+0x1f2>
 8005d22:	1b40      	subs	r0, r0, r5
 8005d24:	6060      	str	r0, [r4, #4]
 8005d26:	6863      	ldr	r3, [r4, #4]
 8005d28:	6123      	str	r3, [r4, #16]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d30:	e7a8      	b.n	8005c84 <_printf_i+0x150>
 8005d32:	6923      	ldr	r3, [r4, #16]
 8005d34:	462a      	mov	r2, r5
 8005d36:	4649      	mov	r1, r9
 8005d38:	4640      	mov	r0, r8
 8005d3a:	47d0      	blx	sl
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	d0ab      	beq.n	8005c98 <_printf_i+0x164>
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	079b      	lsls	r3, r3, #30
 8005d44:	d413      	bmi.n	8005d6e <_printf_i+0x23a>
 8005d46:	68e0      	ldr	r0, [r4, #12]
 8005d48:	9b03      	ldr	r3, [sp, #12]
 8005d4a:	4298      	cmp	r0, r3
 8005d4c:	bfb8      	it	lt
 8005d4e:	4618      	movlt	r0, r3
 8005d50:	e7a4      	b.n	8005c9c <_printf_i+0x168>
 8005d52:	2301      	movs	r3, #1
 8005d54:	4632      	mov	r2, r6
 8005d56:	4649      	mov	r1, r9
 8005d58:	4640      	mov	r0, r8
 8005d5a:	47d0      	blx	sl
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	d09b      	beq.n	8005c98 <_printf_i+0x164>
 8005d60:	3501      	adds	r5, #1
 8005d62:	68e3      	ldr	r3, [r4, #12]
 8005d64:	9903      	ldr	r1, [sp, #12]
 8005d66:	1a5b      	subs	r3, r3, r1
 8005d68:	42ab      	cmp	r3, r5
 8005d6a:	dcf2      	bgt.n	8005d52 <_printf_i+0x21e>
 8005d6c:	e7eb      	b.n	8005d46 <_printf_i+0x212>
 8005d6e:	2500      	movs	r5, #0
 8005d70:	f104 0619 	add.w	r6, r4, #25
 8005d74:	e7f5      	b.n	8005d62 <_printf_i+0x22e>
 8005d76:	bf00      	nop
 8005d78:	0800614d 	.word	0x0800614d
 8005d7c:	0800615e 	.word	0x0800615e

08005d80 <memmove>:
 8005d80:	4288      	cmp	r0, r1
 8005d82:	b510      	push	{r4, lr}
 8005d84:	eb01 0402 	add.w	r4, r1, r2
 8005d88:	d902      	bls.n	8005d90 <memmove+0x10>
 8005d8a:	4284      	cmp	r4, r0
 8005d8c:	4623      	mov	r3, r4
 8005d8e:	d807      	bhi.n	8005da0 <memmove+0x20>
 8005d90:	1e43      	subs	r3, r0, #1
 8005d92:	42a1      	cmp	r1, r4
 8005d94:	d008      	beq.n	8005da8 <memmove+0x28>
 8005d96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d9e:	e7f8      	b.n	8005d92 <memmove+0x12>
 8005da0:	4402      	add	r2, r0
 8005da2:	4601      	mov	r1, r0
 8005da4:	428a      	cmp	r2, r1
 8005da6:	d100      	bne.n	8005daa <memmove+0x2a>
 8005da8:	bd10      	pop	{r4, pc}
 8005daa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005db2:	e7f7      	b.n	8005da4 <memmove+0x24>

08005db4 <_free_r>:
 8005db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005db6:	2900      	cmp	r1, #0
 8005db8:	d044      	beq.n	8005e44 <_free_r+0x90>
 8005dba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dbe:	9001      	str	r0, [sp, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f1a1 0404 	sub.w	r4, r1, #4
 8005dc6:	bfb8      	it	lt
 8005dc8:	18e4      	addlt	r4, r4, r3
 8005dca:	f000 f913 	bl	8005ff4 <__malloc_lock>
 8005dce:	4a1e      	ldr	r2, [pc, #120]	; (8005e48 <_free_r+0x94>)
 8005dd0:	9801      	ldr	r0, [sp, #4]
 8005dd2:	6813      	ldr	r3, [r2, #0]
 8005dd4:	b933      	cbnz	r3, 8005de4 <_free_r+0x30>
 8005dd6:	6063      	str	r3, [r4, #4]
 8005dd8:	6014      	str	r4, [r2, #0]
 8005dda:	b003      	add	sp, #12
 8005ddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005de0:	f000 b90e 	b.w	8006000 <__malloc_unlock>
 8005de4:	42a3      	cmp	r3, r4
 8005de6:	d908      	bls.n	8005dfa <_free_r+0x46>
 8005de8:	6825      	ldr	r5, [r4, #0]
 8005dea:	1961      	adds	r1, r4, r5
 8005dec:	428b      	cmp	r3, r1
 8005dee:	bf01      	itttt	eq
 8005df0:	6819      	ldreq	r1, [r3, #0]
 8005df2:	685b      	ldreq	r3, [r3, #4]
 8005df4:	1949      	addeq	r1, r1, r5
 8005df6:	6021      	streq	r1, [r4, #0]
 8005df8:	e7ed      	b.n	8005dd6 <_free_r+0x22>
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	b10b      	cbz	r3, 8005e04 <_free_r+0x50>
 8005e00:	42a3      	cmp	r3, r4
 8005e02:	d9fa      	bls.n	8005dfa <_free_r+0x46>
 8005e04:	6811      	ldr	r1, [r2, #0]
 8005e06:	1855      	adds	r5, r2, r1
 8005e08:	42a5      	cmp	r5, r4
 8005e0a:	d10b      	bne.n	8005e24 <_free_r+0x70>
 8005e0c:	6824      	ldr	r4, [r4, #0]
 8005e0e:	4421      	add	r1, r4
 8005e10:	1854      	adds	r4, r2, r1
 8005e12:	42a3      	cmp	r3, r4
 8005e14:	6011      	str	r1, [r2, #0]
 8005e16:	d1e0      	bne.n	8005dda <_free_r+0x26>
 8005e18:	681c      	ldr	r4, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	6053      	str	r3, [r2, #4]
 8005e1e:	4421      	add	r1, r4
 8005e20:	6011      	str	r1, [r2, #0]
 8005e22:	e7da      	b.n	8005dda <_free_r+0x26>
 8005e24:	d902      	bls.n	8005e2c <_free_r+0x78>
 8005e26:	230c      	movs	r3, #12
 8005e28:	6003      	str	r3, [r0, #0]
 8005e2a:	e7d6      	b.n	8005dda <_free_r+0x26>
 8005e2c:	6825      	ldr	r5, [r4, #0]
 8005e2e:	1961      	adds	r1, r4, r5
 8005e30:	428b      	cmp	r3, r1
 8005e32:	bf04      	itt	eq
 8005e34:	6819      	ldreq	r1, [r3, #0]
 8005e36:	685b      	ldreq	r3, [r3, #4]
 8005e38:	6063      	str	r3, [r4, #4]
 8005e3a:	bf04      	itt	eq
 8005e3c:	1949      	addeq	r1, r1, r5
 8005e3e:	6021      	streq	r1, [r4, #0]
 8005e40:	6054      	str	r4, [r2, #4]
 8005e42:	e7ca      	b.n	8005dda <_free_r+0x26>
 8005e44:	b003      	add	sp, #12
 8005e46:	bd30      	pop	{r4, r5, pc}
 8005e48:	200144cc 	.word	0x200144cc

08005e4c <sbrk_aligned>:
 8005e4c:	b570      	push	{r4, r5, r6, lr}
 8005e4e:	4e0e      	ldr	r6, [pc, #56]	; (8005e88 <sbrk_aligned+0x3c>)
 8005e50:	460c      	mov	r4, r1
 8005e52:	6831      	ldr	r1, [r6, #0]
 8005e54:	4605      	mov	r5, r0
 8005e56:	b911      	cbnz	r1, 8005e5e <sbrk_aligned+0x12>
 8005e58:	f000 f8bc 	bl	8005fd4 <_sbrk_r>
 8005e5c:	6030      	str	r0, [r6, #0]
 8005e5e:	4621      	mov	r1, r4
 8005e60:	4628      	mov	r0, r5
 8005e62:	f000 f8b7 	bl	8005fd4 <_sbrk_r>
 8005e66:	1c43      	adds	r3, r0, #1
 8005e68:	d00a      	beq.n	8005e80 <sbrk_aligned+0x34>
 8005e6a:	1cc4      	adds	r4, r0, #3
 8005e6c:	f024 0403 	bic.w	r4, r4, #3
 8005e70:	42a0      	cmp	r0, r4
 8005e72:	d007      	beq.n	8005e84 <sbrk_aligned+0x38>
 8005e74:	1a21      	subs	r1, r4, r0
 8005e76:	4628      	mov	r0, r5
 8005e78:	f000 f8ac 	bl	8005fd4 <_sbrk_r>
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d101      	bne.n	8005e84 <sbrk_aligned+0x38>
 8005e80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005e84:	4620      	mov	r0, r4
 8005e86:	bd70      	pop	{r4, r5, r6, pc}
 8005e88:	200144d0 	.word	0x200144d0

08005e8c <_malloc_r>:
 8005e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e90:	1ccd      	adds	r5, r1, #3
 8005e92:	f025 0503 	bic.w	r5, r5, #3
 8005e96:	3508      	adds	r5, #8
 8005e98:	2d0c      	cmp	r5, #12
 8005e9a:	bf38      	it	cc
 8005e9c:	250c      	movcc	r5, #12
 8005e9e:	2d00      	cmp	r5, #0
 8005ea0:	4607      	mov	r7, r0
 8005ea2:	db01      	blt.n	8005ea8 <_malloc_r+0x1c>
 8005ea4:	42a9      	cmp	r1, r5
 8005ea6:	d905      	bls.n	8005eb4 <_malloc_r+0x28>
 8005ea8:	230c      	movs	r3, #12
 8005eaa:	603b      	str	r3, [r7, #0]
 8005eac:	2600      	movs	r6, #0
 8005eae:	4630      	mov	r0, r6
 8005eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eb4:	4e2e      	ldr	r6, [pc, #184]	; (8005f70 <_malloc_r+0xe4>)
 8005eb6:	f000 f89d 	bl	8005ff4 <__malloc_lock>
 8005eba:	6833      	ldr	r3, [r6, #0]
 8005ebc:	461c      	mov	r4, r3
 8005ebe:	bb34      	cbnz	r4, 8005f0e <_malloc_r+0x82>
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	f7ff ffc2 	bl	8005e4c <sbrk_aligned>
 8005ec8:	1c43      	adds	r3, r0, #1
 8005eca:	4604      	mov	r4, r0
 8005ecc:	d14d      	bne.n	8005f6a <_malloc_r+0xde>
 8005ece:	6834      	ldr	r4, [r6, #0]
 8005ed0:	4626      	mov	r6, r4
 8005ed2:	2e00      	cmp	r6, #0
 8005ed4:	d140      	bne.n	8005f58 <_malloc_r+0xcc>
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	4631      	mov	r1, r6
 8005eda:	4638      	mov	r0, r7
 8005edc:	eb04 0803 	add.w	r8, r4, r3
 8005ee0:	f000 f878 	bl	8005fd4 <_sbrk_r>
 8005ee4:	4580      	cmp	r8, r0
 8005ee6:	d13a      	bne.n	8005f5e <_malloc_r+0xd2>
 8005ee8:	6821      	ldr	r1, [r4, #0]
 8005eea:	3503      	adds	r5, #3
 8005eec:	1a6d      	subs	r5, r5, r1
 8005eee:	f025 0503 	bic.w	r5, r5, #3
 8005ef2:	3508      	adds	r5, #8
 8005ef4:	2d0c      	cmp	r5, #12
 8005ef6:	bf38      	it	cc
 8005ef8:	250c      	movcc	r5, #12
 8005efa:	4629      	mov	r1, r5
 8005efc:	4638      	mov	r0, r7
 8005efe:	f7ff ffa5 	bl	8005e4c <sbrk_aligned>
 8005f02:	3001      	adds	r0, #1
 8005f04:	d02b      	beq.n	8005f5e <_malloc_r+0xd2>
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	442b      	add	r3, r5
 8005f0a:	6023      	str	r3, [r4, #0]
 8005f0c:	e00e      	b.n	8005f2c <_malloc_r+0xa0>
 8005f0e:	6822      	ldr	r2, [r4, #0]
 8005f10:	1b52      	subs	r2, r2, r5
 8005f12:	d41e      	bmi.n	8005f52 <_malloc_r+0xc6>
 8005f14:	2a0b      	cmp	r2, #11
 8005f16:	d916      	bls.n	8005f46 <_malloc_r+0xba>
 8005f18:	1961      	adds	r1, r4, r5
 8005f1a:	42a3      	cmp	r3, r4
 8005f1c:	6025      	str	r5, [r4, #0]
 8005f1e:	bf18      	it	ne
 8005f20:	6059      	strne	r1, [r3, #4]
 8005f22:	6863      	ldr	r3, [r4, #4]
 8005f24:	bf08      	it	eq
 8005f26:	6031      	streq	r1, [r6, #0]
 8005f28:	5162      	str	r2, [r4, r5]
 8005f2a:	604b      	str	r3, [r1, #4]
 8005f2c:	4638      	mov	r0, r7
 8005f2e:	f104 060b 	add.w	r6, r4, #11
 8005f32:	f000 f865 	bl	8006000 <__malloc_unlock>
 8005f36:	f026 0607 	bic.w	r6, r6, #7
 8005f3a:	1d23      	adds	r3, r4, #4
 8005f3c:	1af2      	subs	r2, r6, r3
 8005f3e:	d0b6      	beq.n	8005eae <_malloc_r+0x22>
 8005f40:	1b9b      	subs	r3, r3, r6
 8005f42:	50a3      	str	r3, [r4, r2]
 8005f44:	e7b3      	b.n	8005eae <_malloc_r+0x22>
 8005f46:	6862      	ldr	r2, [r4, #4]
 8005f48:	42a3      	cmp	r3, r4
 8005f4a:	bf0c      	ite	eq
 8005f4c:	6032      	streq	r2, [r6, #0]
 8005f4e:	605a      	strne	r2, [r3, #4]
 8005f50:	e7ec      	b.n	8005f2c <_malloc_r+0xa0>
 8005f52:	4623      	mov	r3, r4
 8005f54:	6864      	ldr	r4, [r4, #4]
 8005f56:	e7b2      	b.n	8005ebe <_malloc_r+0x32>
 8005f58:	4634      	mov	r4, r6
 8005f5a:	6876      	ldr	r6, [r6, #4]
 8005f5c:	e7b9      	b.n	8005ed2 <_malloc_r+0x46>
 8005f5e:	230c      	movs	r3, #12
 8005f60:	603b      	str	r3, [r7, #0]
 8005f62:	4638      	mov	r0, r7
 8005f64:	f000 f84c 	bl	8006000 <__malloc_unlock>
 8005f68:	e7a1      	b.n	8005eae <_malloc_r+0x22>
 8005f6a:	6025      	str	r5, [r4, #0]
 8005f6c:	e7de      	b.n	8005f2c <_malloc_r+0xa0>
 8005f6e:	bf00      	nop
 8005f70:	200144cc 	.word	0x200144cc

08005f74 <_realloc_r>:
 8005f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f78:	4680      	mov	r8, r0
 8005f7a:	4614      	mov	r4, r2
 8005f7c:	460e      	mov	r6, r1
 8005f7e:	b921      	cbnz	r1, 8005f8a <_realloc_r+0x16>
 8005f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f84:	4611      	mov	r1, r2
 8005f86:	f7ff bf81 	b.w	8005e8c <_malloc_r>
 8005f8a:	b92a      	cbnz	r2, 8005f98 <_realloc_r+0x24>
 8005f8c:	f7ff ff12 	bl	8005db4 <_free_r>
 8005f90:	4625      	mov	r5, r4
 8005f92:	4628      	mov	r0, r5
 8005f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f98:	f000 f838 	bl	800600c <_malloc_usable_size_r>
 8005f9c:	4284      	cmp	r4, r0
 8005f9e:	4607      	mov	r7, r0
 8005fa0:	d802      	bhi.n	8005fa8 <_realloc_r+0x34>
 8005fa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005fa6:	d812      	bhi.n	8005fce <_realloc_r+0x5a>
 8005fa8:	4621      	mov	r1, r4
 8005faa:	4640      	mov	r0, r8
 8005fac:	f7ff ff6e 	bl	8005e8c <_malloc_r>
 8005fb0:	4605      	mov	r5, r0
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	d0ed      	beq.n	8005f92 <_realloc_r+0x1e>
 8005fb6:	42bc      	cmp	r4, r7
 8005fb8:	4622      	mov	r2, r4
 8005fba:	4631      	mov	r1, r6
 8005fbc:	bf28      	it	cs
 8005fbe:	463a      	movcs	r2, r7
 8005fc0:	f7ff fba4 	bl	800570c <memcpy>
 8005fc4:	4631      	mov	r1, r6
 8005fc6:	4640      	mov	r0, r8
 8005fc8:	f7ff fef4 	bl	8005db4 <_free_r>
 8005fcc:	e7e1      	b.n	8005f92 <_realloc_r+0x1e>
 8005fce:	4635      	mov	r5, r6
 8005fd0:	e7df      	b.n	8005f92 <_realloc_r+0x1e>
	...

08005fd4 <_sbrk_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	4d06      	ldr	r5, [pc, #24]	; (8005ff0 <_sbrk_r+0x1c>)
 8005fd8:	2300      	movs	r3, #0
 8005fda:	4604      	mov	r4, r0
 8005fdc:	4608      	mov	r0, r1
 8005fde:	602b      	str	r3, [r5, #0]
 8005fe0:	f7fa fdea 	bl	8000bb8 <_sbrk>
 8005fe4:	1c43      	adds	r3, r0, #1
 8005fe6:	d102      	bne.n	8005fee <_sbrk_r+0x1a>
 8005fe8:	682b      	ldr	r3, [r5, #0]
 8005fea:	b103      	cbz	r3, 8005fee <_sbrk_r+0x1a>
 8005fec:	6023      	str	r3, [r4, #0]
 8005fee:	bd38      	pop	{r3, r4, r5, pc}
 8005ff0:	200144d4 	.word	0x200144d4

08005ff4 <__malloc_lock>:
 8005ff4:	4801      	ldr	r0, [pc, #4]	; (8005ffc <__malloc_lock+0x8>)
 8005ff6:	f000 b811 	b.w	800601c <__retarget_lock_acquire_recursive>
 8005ffa:	bf00      	nop
 8005ffc:	200144d8 	.word	0x200144d8

08006000 <__malloc_unlock>:
 8006000:	4801      	ldr	r0, [pc, #4]	; (8006008 <__malloc_unlock+0x8>)
 8006002:	f000 b80c 	b.w	800601e <__retarget_lock_release_recursive>
 8006006:	bf00      	nop
 8006008:	200144d8 	.word	0x200144d8

0800600c <_malloc_usable_size_r>:
 800600c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006010:	1f18      	subs	r0, r3, #4
 8006012:	2b00      	cmp	r3, #0
 8006014:	bfbc      	itt	lt
 8006016:	580b      	ldrlt	r3, [r1, r0]
 8006018:	18c0      	addlt	r0, r0, r3
 800601a:	4770      	bx	lr

0800601c <__retarget_lock_acquire_recursive>:
 800601c:	4770      	bx	lr

0800601e <__retarget_lock_release_recursive>:
 800601e:	4770      	bx	lr

08006020 <_init>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	bf00      	nop
 8006024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006026:	bc08      	pop	{r3}
 8006028:	469e      	mov	lr, r3
 800602a:	4770      	bx	lr

0800602c <_fini>:
 800602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602e:	bf00      	nop
 8006030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006032:	bc08      	pop	{r3}
 8006034:	469e      	mov	lr, r3
 8006036:	4770      	bx	lr
