
P1_Hello_World.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006308  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080064d8  080064d8  000164d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065fc  080065fc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080065fc  080065fc  000165fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006604  08006604  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006604  08006604  00016604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006608  08006608  00016608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800660c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001331c  2000007c  08006688  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013398  08006688  00023398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b3e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b0  00000000  00000000  00036bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00039fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  0003b388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024912  00000000  00000000  0003c618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017000  00000000  00000000  00060f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcbfe  00000000  00000000  00077f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00154b28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005924  00000000  00000000  00154b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080064c0 	.word	0x080064c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	080064c0 	.word	0x080064c0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fb79 	bl	8000c10 <HAL_Init>

  /* USER CODE BEGIN Init */
  TaskHandle_t xTaskHanle1 =NULL;
 800051e:	2300      	movs	r3, #0
 8000520:	607b      	str	r3, [r7, #4]
  TaskHandle_t xTaskHanle2 =NULL;
 8000522:	2300      	movs	r3, #0
 8000524:	603b      	str	r3, [r7, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f823 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 f8b9 	bl	80006a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052e:	f000 f88d 	bl	800064c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
 xTaskCreate(vTask1_handler, "Task-1",200,NULL,2,&xTaskHanle1);
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	2302      	movs	r3, #2
 8000538:	9300      	str	r3, [sp, #0]
 800053a:	2300      	movs	r3, #0
 800053c:	22c8      	movs	r2, #200	; 0xc8
 800053e:	4908      	ldr	r1, [pc, #32]	; (8000560 <main+0x4c>)
 8000540:	4808      	ldr	r0, [pc, #32]	; (8000564 <main+0x50>)
 8000542:	f003 fb27 	bl	8003b94 <xTaskCreate>
 xTaskCreate(vTask2_handler, "Task-2",200,NULL,2,&xTaskHanle2);
 8000546:	463b      	mov	r3, r7
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2302      	movs	r3, #2
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2300      	movs	r3, #0
 8000550:	22c8      	movs	r2, #200	; 0xc8
 8000552:	4905      	ldr	r1, [pc, #20]	; (8000568 <main+0x54>)
 8000554:	4805      	ldr	r0, [pc, #20]	; (800056c <main+0x58>)
 8000556:	f003 fb1d 	bl	8003b94 <xTaskCreate>
 vTaskStartScheduler();
 800055a:	f003 fc85 	bl	8003e68 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055e:	e7fe      	b.n	800055e <main+0x4a>
 8000560:	080064d8 	.word	0x080064d8
 8000564:	0800077d 	.word	0x0800077d
 8000568:	080064e0 	.word	0x080064e0
 800056c:	080007cd 	.word	0x080007cd

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2234      	movs	r2, #52	; 0x34
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f005 faaa 	bl	8005ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b2a      	ldr	r3, [pc, #168]	; (8000644 <SystemClock_Config+0xd4>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a29      	ldr	r2, [pc, #164]	; (8000644 <SystemClock_Config+0xd4>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b27      	ldr	r3, [pc, #156]	; (8000644 <SystemClock_Config+0xd4>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b0:	2300      	movs	r3, #0
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	4b24      	ldr	r3, [pc, #144]	; (8000648 <SystemClock_Config+0xd8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005bc:	4a22      	ldr	r2, [pc, #136]	; (8000648 <SystemClock_Config+0xd8>)
 80005be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b20      	ldr	r3, [pc, #128]	; (8000648 <SystemClock_Config+0xd8>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005cc:	603b      	str	r3, [r7, #0]
 80005ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	2310      	movs	r3, #16
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005dc:	2302      	movs	r3, #2
 80005de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e0:	2300      	movs	r3, #0
 80005e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005e4:	2310      	movs	r3, #16
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ee:	2304      	movs	r3, #4
 80005f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 f9e6 	bl	80019d0 <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800060a:	f000 f919 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	230f      	movs	r3, #15
 8000610:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	2302      	movs	r3, #2
 8000614:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2102      	movs	r1, #2
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fe54 	bl	80012d8 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000636:	f000 f903 	bl	8000840 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	; 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000652:	4a12      	ldr	r2, [pc, #72]	; (800069c <MX_USART2_UART_Init+0x50>)
 8000654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000658:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800065c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000684:	f001 fef0 	bl	8002468 <HAL_UART_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800068e:	f000 f8d7 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000098 	.word	0x20000098
 800069c:	40004400 	.word	0x40004400

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	4b2d      	ldr	r3, [pc, #180]	; (8000770 <MX_GPIO_Init+0xd0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a2c      	ldr	r2, [pc, #176]	; (8000770 <MX_GPIO_Init+0xd0>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b2a      	ldr	r3, [pc, #168]	; (8000770 <MX_GPIO_Init+0xd0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	4b26      	ldr	r3, [pc, #152]	; (8000770 <MX_GPIO_Init+0xd0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a25      	ldr	r2, [pc, #148]	; (8000770 <MX_GPIO_Init+0xd0>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b23      	ldr	r3, [pc, #140]	; (8000770 <MX_GPIO_Init+0xd0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <MX_GPIO_Init+0xd0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <MX_GPIO_Init+0xd0>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MX_GPIO_Init+0xd0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_GPIO_Init+0xd0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a17      	ldr	r2, [pc, #92]	; (8000770 <MX_GPIO_Init+0xd0>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_GPIO_Init+0xd0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2120      	movs	r1, #32
 800072a:	4812      	ldr	r0, [pc, #72]	; (8000774 <MX_GPIO_Init+0xd4>)
 800072c:	f000 fdba 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000736:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <MX_GPIO_Init+0xd8>)
 8000748:	f000 fc18 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800074c:	2320      	movs	r3, #32
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_GPIO_Init+0xd4>)
 8000764:	f000 fc0a 	bl	8000f7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	; 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40023800 	.word	0x40023800
 8000774:	40020000 	.word	0x40020000
 8000778:	40020800 	.word	0x40020800

0800077c <vTask1_handler>:

/* USER CODE BEGIN 4 */
void vTask1_handler(void *params){
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

	while(1)
	{
		if(UART_ACCESS_KEY == AVAILABLE){
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <vTask1_handler+0x3c>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d1fb      	bne.n	8000784 <vTask1_handler+0x8>
			UART_ACCESS_KEY == NOT_AVAILABLE;
		char *dat ="This is From Task-1 \r \n";
 800078c:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <vTask1_handler+0x40>)
 800078e:	60fb      	str	r3, [r7, #12]
		printf("This is from Task -1 \n");
 8000790:	480b      	ldr	r0, [pc, #44]	; (80007c0 <vTask1_handler+0x44>)
 8000792:	f005 fa17 	bl	8005bc4 <puts>
        HAL_UART_Transmit(&huart2,(uint8_t *)dat,24,HAL_MAX_DELAY);
 8000796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800079a:	2218      	movs	r2, #24
 800079c:	68f9      	ldr	r1, [r7, #12]
 800079e:	4809      	ldr	r0, [pc, #36]	; (80007c4 <vTask1_handler+0x48>)
 80007a0:	f001 feaf 	bl	8002502 <HAL_UART_Transmit>
        UART_ACCESS_KEY == AVAILABLE;
        taskYIELD();
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <vTask1_handler+0x4c>)
 80007a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	f3bf 8f4f 	dsb	sy
 80007b0:	f3bf 8f6f 	isb	sy
		if(UART_ACCESS_KEY == AVAILABLE){
 80007b4:	e7e6      	b.n	8000784 <vTask1_handler+0x8>
 80007b6:	bf00      	nop
 80007b8:	20000000 	.word	0x20000000
 80007bc:	080064e8 	.word	0x080064e8
 80007c0:	08006500 	.word	0x08006500
 80007c4:	20000098 	.word	0x20000098
 80007c8:	e000ed04 	.word	0xe000ed04

080007cc <vTask2_handler>:
	}
	}
}

void vTask2_handler(void *params){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

	while(1)
	{
		if(UART_ACCESS_KEY== AVAILABLE){
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <vTask2_handler+0x3c>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d1fb      	bne.n	80007d4 <vTask2_handler+0x8>
			UART_ACCESS_KEY == NOT_AVAILABLE;
		char *dat = "This is From Task-2 \r \n";
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <vTask2_handler+0x40>)
 80007de:	60fb      	str	r3, [r7, #12]
		printf("This is from Task -2 \n");
 80007e0:	480b      	ldr	r0, [pc, #44]	; (8000810 <vTask2_handler+0x44>)
 80007e2:	f005 f9ef 	bl	8005bc4 <puts>
		HAL_UART_Transmit(&huart2,(uint8_t *)dat,24,HAL_MAX_DELAY);
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ea:	2218      	movs	r2, #24
 80007ec:	68f9      	ldr	r1, [r7, #12]
 80007ee:	4809      	ldr	r0, [pc, #36]	; (8000814 <vTask2_handler+0x48>)
 80007f0:	f001 fe87 	bl	8002502 <HAL_UART_Transmit>
		UART_ACCESS_KEY== AVAILABLE;
		taskYIELD();
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <vTask2_handler+0x4c>)
 80007f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	f3bf 8f4f 	dsb	sy
 8000800:	f3bf 8f6f 	isb	sy
		if(UART_ACCESS_KEY== AVAILABLE){
 8000804:	e7e6      	b.n	80007d4 <vTask2_handler+0x8>
 8000806:	bf00      	nop
 8000808:	20000000 	.word	0x20000000
 800080c:	08006518 	.word	0x08006518
 8000810:	08006530 	.word	0x08006530
 8000814:	20000098 	.word	0x20000098
 8000818:	e000ed04 	.word	0xe000ed04

0800081c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a04      	ldr	r2, [pc, #16]	; (800083c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d101      	bne.n	8000832 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800082e:	f000 fa11 	bl	8000c54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40000c00 	.word	0x40000c00

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x8>
	...

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <HAL_MspInit+0x4c>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	4a0f      	ldr	r2, [pc, #60]	; (8000898 <HAL_MspInit+0x4c>)
 800085c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000860:	6453      	str	r3, [r2, #68]	; 0x44
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	4a08      	ldr	r2, [pc, #32]	; (8000898 <HAL_MspInit+0x4c>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	6413      	str	r3, [r2, #64]	; 0x40
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800

0800089c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a1d      	ldr	r2, [pc, #116]	; (8000930 <HAL_UART_MspInit+0x94>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d133      	bne.n	8000926 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <HAL_UART_MspInit+0x98>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	4a1b      	ldr	r2, [pc, #108]	; (8000934 <HAL_UART_MspInit+0x98>)
 80008c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008cc:	6413      	str	r3, [r2, #64]	; 0x40
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <HAL_UART_MspInit+0x98>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_UART_MspInit+0x98>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a14      	ldr	r2, [pc, #80]	; (8000934 <HAL_UART_MspInit+0x98>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_UART_MspInit+0x98>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008f6:	230c      	movs	r3, #12
 80008f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000906:	2307      	movs	r3, #7
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4809      	ldr	r0, [pc, #36]	; (8000938 <HAL_UART_MspInit+0x9c>)
 8000912:	f000 fb33 	bl	8000f7c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	2026      	movs	r0, #38	; 0x26
 800091c:	f000 fa72 	bl	8000e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000920:	2026      	movs	r0, #38	; 0x26
 8000922:	f000 fa8b 	bl	8000e3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40004400 	.word	0x40004400
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000

0800093c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08e      	sub	sp, #56	; 0x38
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	4b33      	ldr	r3, [pc, #204]	; (8000a20 <HAL_InitTick+0xe4>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a32      	ldr	r2, [pc, #200]	; (8000a20 <HAL_InitTick+0xe4>)
 8000956:	f043 0308 	orr.w	r3, r3, #8
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <HAL_InitTick+0xe4>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 0308 	and.w	r3, r3, #8
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000968:	f107 0210 	add.w	r2, r7, #16
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fdca 	bl	800150c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000978:	6a3b      	ldr	r3, [r7, #32]
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800097c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800097e:	2b00      	cmp	r3, #0
 8000980:	d103      	bne.n	800098a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000982:	f000 fd9b 	bl	80014bc <HAL_RCC_GetPCLK1Freq>
 8000986:	6378      	str	r0, [r7, #52]	; 0x34
 8000988:	e004      	b.n	8000994 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800098a:	f000 fd97 	bl	80014bc <HAL_RCC_GetPCLK1Freq>
 800098e:	4603      	mov	r3, r0
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000996:	4a23      	ldr	r2, [pc, #140]	; (8000a24 <HAL_InitTick+0xe8>)
 8000998:	fba2 2303 	umull	r2, r3, r2, r3
 800099c:	0c9b      	lsrs	r3, r3, #18
 800099e:	3b01      	subs	r3, #1
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <HAL_InitTick+0xec>)
 80009a4:	4a21      	ldr	r2, [pc, #132]	; (8000a2c <HAL_InitTick+0xf0>)
 80009a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <HAL_InitTick+0xec>)
 80009aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009ae:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80009b0:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <HAL_InitTick+0xec>)
 80009b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <HAL_InitTick+0xec>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <HAL_InitTick+0xec>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_InitTick+0xec>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80009c8:	4817      	ldr	r0, [pc, #92]	; (8000a28 <HAL_InitTick+0xec>)
 80009ca:	f001 fa9f 	bl	8001f0c <HAL_TIM_Base_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d11b      	bne.n	8000a14 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80009dc:	4812      	ldr	r0, [pc, #72]	; (8000a28 <HAL_InitTick+0xec>)
 80009de:	f001 faef 	bl	8001fc0 <HAL_TIM_Base_Start_IT>
 80009e2:	4603      	mov	r3, r0
 80009e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d111      	bne.n	8000a14 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80009f0:	2032      	movs	r0, #50	; 0x32
 80009f2:	f000 fa23 	bl	8000e3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	d808      	bhi.n	8000a0e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	2032      	movs	r0, #50	; 0x32
 8000a02:	f000 f9ff 	bl	8000e04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <HAL_InitTick+0xf4>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	e002      	b.n	8000a14 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3738      	adds	r7, #56	; 0x38
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	431bde83 	.word	0x431bde83
 8000a28:	200000dc 	.word	0x200000dc
 8000a2c:	40000c00 	.word	0x40000c00
 8000a30:	20000008 	.word	0x20000008

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <NMI_Handler+0x4>

08000a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <MemManage_Handler+0x4>

08000a46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a64:	4802      	ldr	r0, [pc, #8]	; (8000a70 <USART2_IRQHandler+0x10>)
 8000a66:	f001 fddf 	bl	8002628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000098 	.word	0x20000098

08000a74 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <TIM5_IRQHandler+0x10>)
 8000a7a:	f001 fb11 	bl	80020a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200000dc 	.word	0x200000dc

08000a88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	e00a      	b.n	8000ab0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a9a:	f3af 8000 	nop.w
 8000a9e:	4601      	mov	r1, r0
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	60ba      	str	r2, [r7, #8]
 8000aa6:	b2ca      	uxtb	r2, r1
 8000aa8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	dbf0      	blt.n	8000a9a <_read+0x12>
  }

  return len;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aea:	605a      	str	r2, [r3, #4]
  return 0;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_isatty>:

int _isatty(int file)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b34:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <_sbrk+0x5c>)
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <_sbrk+0x60>)
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <_sbrk+0x64>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <_sbrk+0x68>)
 8000b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d207      	bcs.n	8000b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b5c:	f004 ff84 	bl	8005a68 <__errno>
 8000b60:	4603      	mov	r3, r0
 8000b62:	220c      	movs	r2, #12
 8000b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b6a:	e009      	b.n	8000b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <_sbrk+0x64>)
 8000b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20020000 	.word	0x20020000
 8000b8c:	00000400 	.word	0x00000400
 8000b90:	20000124 	.word	0x20000124
 8000b94:	20013398 	.word	0x20013398

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bc2:	490e      	ldr	r1, [pc, #56]	; (8000bfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd8:	4c0b      	ldr	r4, [pc, #44]	; (8000c08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000be6:	f7ff ffd7 	bl	8000b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f004 ff43 	bl	8005a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bee:	f7ff fc91 	bl	8000514 <main>
  bx  lr    
 8000bf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000c00:	0800660c 	.word	0x0800660c
  ldr r2, =_sbss
 8000c04:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000c08:	20013398 	.word	0x20013398

08000c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <HAL_Init+0x40>)
 8000c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_Init+0x40>)
 8000c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_Init+0x40>)
 8000c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 f8d8 	bl	8000dee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff fe7c 	bl	800093c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c44:	f7ff fe02 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023c00 	.word	0x40023c00

08000c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x20>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x24>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_IncTick+0x24>)
 8000c66:	6013      	str	r3, [r2, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	2000000c 	.word	0x2000000c
 8000c78:	20000128 	.word	0x20000128

08000c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_GetTick+0x14>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000128 	.word	0x20000128

08000c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db0b      	blt.n	8000d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 021f 	and.w	r2, r3, #31
 8000d10:	4907      	ldr	r1, [pc, #28]	; (8000d30 <__NVIC_EnableIRQ+0x38>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	2001      	movs	r0, #1
 8000d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	; (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	; (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	; 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ff4c 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e16:	f7ff ff61 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	68b9      	ldr	r1, [r7, #8]
 8000e20:	6978      	ldr	r0, [r7, #20]
 8000e22:	f7ff ffb1 	bl	8000d88 <NVIC_EncodePriority>
 8000e26:	4602      	mov	r2, r0
 8000e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff80 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e34:	bf00      	nop
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff54 	bl	8000cf8 <__NVIC_EnableIRQ>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e66:	f7ff ff09 	bl	8000c7c <HAL_GetTick>
 8000e6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d008      	beq.n	8000e8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2280      	movs	r2, #128	; 0x80
 8000e7c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e052      	b.n	8000f30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f022 0216 	bic.w	r2, r2, #22
 8000e98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	695a      	ldr	r2, [r3, #20]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ea8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d103      	bne.n	8000eba <HAL_DMA_Abort+0x62>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d007      	beq.n	8000eca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f022 0208 	bic.w	r2, r2, #8
 8000ec8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 0201 	bic.w	r2, r2, #1
 8000ed8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eda:	e013      	b.n	8000f04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000edc:	f7ff fece 	bl	8000c7c <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b05      	cmp	r3, #5
 8000ee8:	d90c      	bls.n	8000f04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2220      	movs	r2, #32
 8000eee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e015      	b.n	8000f30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1e4      	bne.n	8000edc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f16:	223f      	movs	r2, #63	; 0x3f
 8000f18:	409a      	lsls	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2201      	movs	r2, #1
 8000f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d004      	beq.n	8000f56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2280      	movs	r2, #128	; 0x80
 8000f50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00c      	b.n	8000f70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2205      	movs	r2, #5
 8000f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 0201 	bic.w	r2, r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	e165      	b.n	8001264 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	f040 8154 	bne.w	800125e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d005      	beq.n	8000fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d130      	bne.n	8001030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001004:	2201      	movs	r2, #1
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	091b      	lsrs	r3, r3, #4
 800101a:	f003 0201 	and.w	r2, r3, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b03      	cmp	r3, #3
 800103a:	d017      	beq.n	800106c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d123      	bne.n	80010c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	08da      	lsrs	r2, r3, #3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3208      	adds	r2, #8
 8001080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	220f      	movs	r2, #15
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	08da      	lsrs	r2, r3, #3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3208      	adds	r2, #8
 80010ba:	69b9      	ldr	r1, [r7, #24]
 80010bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	2203      	movs	r2, #3
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0203 	and.w	r2, r3, #3
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 80ae 	beq.w	800125e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b5d      	ldr	r3, [pc, #372]	; (800127c <HAL_GPIO_Init+0x300>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	4a5c      	ldr	r2, [pc, #368]	; (800127c <HAL_GPIO_Init+0x300>)
 800110c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001110:	6453      	str	r3, [r2, #68]	; 0x44
 8001112:	4b5a      	ldr	r3, [pc, #360]	; (800127c <HAL_GPIO_Init+0x300>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800111e:	4a58      	ldr	r2, [pc, #352]	; (8001280 <HAL_GPIO_Init+0x304>)
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	3302      	adds	r3, #2
 8001126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	220f      	movs	r2, #15
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4f      	ldr	r2, [pc, #316]	; (8001284 <HAL_GPIO_Init+0x308>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d025      	beq.n	8001196 <HAL_GPIO_Init+0x21a>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4e      	ldr	r2, [pc, #312]	; (8001288 <HAL_GPIO_Init+0x30c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d01f      	beq.n	8001192 <HAL_GPIO_Init+0x216>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4d      	ldr	r2, [pc, #308]	; (800128c <HAL_GPIO_Init+0x310>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d019      	beq.n	800118e <HAL_GPIO_Init+0x212>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4c      	ldr	r2, [pc, #304]	; (8001290 <HAL_GPIO_Init+0x314>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d013      	beq.n	800118a <HAL_GPIO_Init+0x20e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4b      	ldr	r2, [pc, #300]	; (8001294 <HAL_GPIO_Init+0x318>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d00d      	beq.n	8001186 <HAL_GPIO_Init+0x20a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4a      	ldr	r2, [pc, #296]	; (8001298 <HAL_GPIO_Init+0x31c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d007      	beq.n	8001182 <HAL_GPIO_Init+0x206>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a49      	ldr	r2, [pc, #292]	; (800129c <HAL_GPIO_Init+0x320>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d101      	bne.n	800117e <HAL_GPIO_Init+0x202>
 800117a:	2306      	movs	r3, #6
 800117c:	e00c      	b.n	8001198 <HAL_GPIO_Init+0x21c>
 800117e:	2307      	movs	r3, #7
 8001180:	e00a      	b.n	8001198 <HAL_GPIO_Init+0x21c>
 8001182:	2305      	movs	r3, #5
 8001184:	e008      	b.n	8001198 <HAL_GPIO_Init+0x21c>
 8001186:	2304      	movs	r3, #4
 8001188:	e006      	b.n	8001198 <HAL_GPIO_Init+0x21c>
 800118a:	2303      	movs	r3, #3
 800118c:	e004      	b.n	8001198 <HAL_GPIO_Init+0x21c>
 800118e:	2302      	movs	r3, #2
 8001190:	e002      	b.n	8001198 <HAL_GPIO_Init+0x21c>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <HAL_GPIO_Init+0x21c>
 8001196:	2300      	movs	r3, #0
 8001198:	69fa      	ldr	r2, [r7, #28]
 800119a:	f002 0203 	and.w	r2, r2, #3
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	4093      	lsls	r3, r2
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a8:	4935      	ldr	r1, [pc, #212]	; (8001280 <HAL_GPIO_Init+0x304>)
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	3302      	adds	r3, #2
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b6:	4b3a      	ldr	r3, [pc, #232]	; (80012a0 <HAL_GPIO_Init+0x324>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011da:	4a31      	ldr	r2, [pc, #196]	; (80012a0 <HAL_GPIO_Init+0x324>)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e0:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <HAL_GPIO_Init+0x324>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001204:	4a26      	ldr	r2, [pc, #152]	; (80012a0 <HAL_GPIO_Init+0x324>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800120a:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <HAL_GPIO_Init+0x324>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800122e:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <HAL_GPIO_Init+0x324>)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <HAL_GPIO_Init+0x324>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001258:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <HAL_GPIO_Init+0x324>)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3301      	adds	r3, #1
 8001262:	61fb      	str	r3, [r7, #28]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	2b0f      	cmp	r3, #15
 8001268:	f67f ae96 	bls.w	8000f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40013800 	.word	0x40013800
 8001284:	40020000 	.word	0x40020000
 8001288:	40020400 	.word	0x40020400
 800128c:	40020800 	.word	0x40020800
 8001290:	40020c00 	.word	0x40020c00
 8001294:	40021000 	.word	0x40021000
 8001298:	40021400 	.word	0x40021400
 800129c:	40021800 	.word	0x40021800
 80012a0:	40013c00 	.word	0x40013c00

080012a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
 80012b0:	4613      	mov	r3, r2
 80012b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b4:	787b      	ldrb	r3, [r7, #1]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012c0:	e003      	b.n	80012ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	041a      	lsls	r2, r3, #16
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	619a      	str	r2, [r3, #24]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d101      	bne.n	80012ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e0cc      	b.n	8001486 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012ec:	4b68      	ldr	r3, [pc, #416]	; (8001490 <HAL_RCC_ClockConfig+0x1b8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d90c      	bls.n	8001314 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fa:	4b65      	ldr	r3, [pc, #404]	; (8001490 <HAL_RCC_ClockConfig+0x1b8>)
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001302:	4b63      	ldr	r3, [pc, #396]	; (8001490 <HAL_RCC_ClockConfig+0x1b8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d001      	beq.n	8001314 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e0b8      	b.n	8001486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d020      	beq.n	8001362 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	2b00      	cmp	r3, #0
 800132a:	d005      	beq.n	8001338 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800132c:	4b59      	ldr	r3, [pc, #356]	; (8001494 <HAL_RCC_ClockConfig+0x1bc>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	4a58      	ldr	r2, [pc, #352]	; (8001494 <HAL_RCC_ClockConfig+0x1bc>)
 8001332:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001336:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0308 	and.w	r3, r3, #8
 8001340:	2b00      	cmp	r3, #0
 8001342:	d005      	beq.n	8001350 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001344:	4b53      	ldr	r3, [pc, #332]	; (8001494 <HAL_RCC_ClockConfig+0x1bc>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	4a52      	ldr	r2, [pc, #328]	; (8001494 <HAL_RCC_ClockConfig+0x1bc>)
 800134a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800134e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001350:	4b50      	ldr	r3, [pc, #320]	; (8001494 <HAL_RCC_ClockConfig+0x1bc>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	494d      	ldr	r1, [pc, #308]	; (8001494 <HAL_RCC_ClockConfig+0x1bc>)
 800135e:	4313      	orrs	r3, r2
 8001360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d044      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d107      	bne.n	8001386 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	4b47      	ldr	r3, [pc, #284]	; (8001494 <HAL_RCC_ClockConfig+0x1bc>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d119      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e07f      	b.n	8001486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d003      	beq.n	8001396 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001392:	2b03      	cmp	r3, #3
 8001394:	d107      	bne.n	80013a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001396:	4b3f      	ldr	r3, [pc, #252]	; (8001494 <HAL_RCC_ClockConfig+0x1bc>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d109      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e06f      	b.n	8001486 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a6:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <HAL_RCC_ClockConfig+0x1bc>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e067      	b.n	8001486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013b6:	4b37      	ldr	r3, [pc, #220]	; (8001494 <HAL_RCC_ClockConfig+0x1bc>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f023 0203 	bic.w	r2, r3, #3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	4934      	ldr	r1, [pc, #208]	; (8001494 <HAL_RCC_ClockConfig+0x1bc>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013c8:	f7ff fc58 	bl	8000c7c <HAL_GetTick>
 80013cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ce:	e00a      	b.n	80013e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013d0:	f7ff fc54 	bl	8000c7c <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	f241 3288 	movw	r2, #5000	; 0x1388
 80013de:	4293      	cmp	r3, r2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e04f      	b.n	8001486 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_RCC_ClockConfig+0x1bc>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 020c 	and.w	r2, r3, #12
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d1eb      	bne.n	80013d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013f8:	4b25      	ldr	r3, [pc, #148]	; (8001490 <HAL_RCC_ClockConfig+0x1b8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 030f 	and.w	r3, r3, #15
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d20c      	bcs.n	8001420 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001406:	4b22      	ldr	r3, [pc, #136]	; (8001490 <HAL_RCC_ClockConfig+0x1b8>)
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <HAL_RCC_ClockConfig+0x1b8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	429a      	cmp	r2, r3
 800141a:	d001      	beq.n	8001420 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e032      	b.n	8001486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	2b00      	cmp	r3, #0
 800142a:	d008      	beq.n	800143e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	4916      	ldr	r1, [pc, #88]	; (8001494 <HAL_RCC_ClockConfig+0x1bc>)
 800143a:	4313      	orrs	r3, r2
 800143c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	2b00      	cmp	r3, #0
 8001448:	d009      	beq.n	800145e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_RCC_ClockConfig+0x1bc>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	490e      	ldr	r1, [pc, #56]	; (8001494 <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	4313      	orrs	r3, r2
 800145c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800145e:	f000 f887 	bl	8001570 <HAL_RCC_GetSysClockFreq>
 8001462:	4602      	mov	r2, r0
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_RCC_ClockConfig+0x1bc>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	490a      	ldr	r1, [pc, #40]	; (8001498 <HAL_RCC_ClockConfig+0x1c0>)
 8001470:	5ccb      	ldrb	r3, [r1, r3]
 8001472:	fa22 f303 	lsr.w	r3, r2, r3
 8001476:	4a09      	ldr	r2, [pc, #36]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 8001478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <HAL_RCC_ClockConfig+0x1c8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fa5c 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023c00 	.word	0x40023c00
 8001494:	40023800 	.word	0x40023800
 8001498:	0800656c 	.word	0x0800656c
 800149c:	20000004 	.word	0x20000004
 80014a0:	20000008 	.word	0x20000008

080014a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000004 	.word	0x20000004

080014bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014c0:	f7ff fff0 	bl	80014a4 <HAL_RCC_GetHCLKFreq>
 80014c4:	4602      	mov	r2, r0
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	0a9b      	lsrs	r3, r3, #10
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	4903      	ldr	r1, [pc, #12]	; (80014e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014d2:	5ccb      	ldrb	r3, [r1, r3]
 80014d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40023800 	.word	0x40023800
 80014e0:	0800657c 	.word	0x0800657c

080014e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80014e8:	f7ff ffdc 	bl	80014a4 <HAL_RCC_GetHCLKFreq>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	0b5b      	lsrs	r3, r3, #13
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	4903      	ldr	r1, [pc, #12]	; (8001508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014fa:	5ccb      	ldrb	r3, [r1, r3]
 80014fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001500:	4618      	mov	r0, r3
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	0800657c 	.word	0x0800657c

0800150c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	220f      	movs	r2, #15
 800151a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_RCC_GetClockConfig+0x5c>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 0203 	and.w	r2, r3, #3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_RCC_GetClockConfig+0x5c>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_RCC_GetClockConfig+0x5c>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_RCC_GetClockConfig+0x5c>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	08db      	lsrs	r3, r3, #3
 8001546:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <HAL_RCC_GetClockConfig+0x60>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 020f 	and.w	r2, r3, #15
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	601a      	str	r2, [r3, #0]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	40023c00 	.word	0x40023c00

08001570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001574:	b0ae      	sub	sp, #184	; 0xb8
 8001576:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800157e:	2300      	movs	r3, #0
 8001580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800158a:	2300      	movs	r3, #0
 800158c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001590:	2300      	movs	r3, #0
 8001592:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001596:	4bcb      	ldr	r3, [pc, #812]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b0c      	cmp	r3, #12
 80015a0:	f200 8206 	bhi.w	80019b0 <HAL_RCC_GetSysClockFreq+0x440>
 80015a4:	a201      	add	r2, pc, #4	; (adr r2, 80015ac <HAL_RCC_GetSysClockFreq+0x3c>)
 80015a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015aa:	bf00      	nop
 80015ac:	080015e1 	.word	0x080015e1
 80015b0:	080019b1 	.word	0x080019b1
 80015b4:	080019b1 	.word	0x080019b1
 80015b8:	080019b1 	.word	0x080019b1
 80015bc:	080015e9 	.word	0x080015e9
 80015c0:	080019b1 	.word	0x080019b1
 80015c4:	080019b1 	.word	0x080019b1
 80015c8:	080019b1 	.word	0x080019b1
 80015cc:	080015f1 	.word	0x080015f1
 80015d0:	080019b1 	.word	0x080019b1
 80015d4:	080019b1 	.word	0x080019b1
 80015d8:	080019b1 	.word	0x080019b1
 80015dc:	080017e1 	.word	0x080017e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015e0:	4bb9      	ldr	r3, [pc, #740]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80015e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80015e6:	e1e7      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015e8:	4bb8      	ldr	r3, [pc, #736]	; (80018cc <HAL_RCC_GetSysClockFreq+0x35c>)
 80015ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015ee:	e1e3      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015f0:	4bb4      	ldr	r3, [pc, #720]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015fc:	4bb1      	ldr	r3, [pc, #708]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d071      	beq.n	80016ec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001608:	4bae      	ldr	r3, [pc, #696]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x354>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	099b      	lsrs	r3, r3, #6
 800160e:	2200      	movs	r2, #0
 8001610:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001614:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800161c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001620:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001624:	2300      	movs	r3, #0
 8001626:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800162a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800162e:	4622      	mov	r2, r4
 8001630:	462b      	mov	r3, r5
 8001632:	f04f 0000 	mov.w	r0, #0
 8001636:	f04f 0100 	mov.w	r1, #0
 800163a:	0159      	lsls	r1, r3, #5
 800163c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001640:	0150      	lsls	r0, r2, #5
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4621      	mov	r1, r4
 8001648:	1a51      	subs	r1, r2, r1
 800164a:	6439      	str	r1, [r7, #64]	; 0x40
 800164c:	4629      	mov	r1, r5
 800164e:	eb63 0301 	sbc.w	r3, r3, r1
 8001652:	647b      	str	r3, [r7, #68]	; 0x44
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001660:	4649      	mov	r1, r9
 8001662:	018b      	lsls	r3, r1, #6
 8001664:	4641      	mov	r1, r8
 8001666:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800166a:	4641      	mov	r1, r8
 800166c:	018a      	lsls	r2, r1, #6
 800166e:	4641      	mov	r1, r8
 8001670:	1a51      	subs	r1, r2, r1
 8001672:	63b9      	str	r1, [r7, #56]	; 0x38
 8001674:	4649      	mov	r1, r9
 8001676:	eb63 0301 	sbc.w	r3, r3, r1
 800167a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001688:	4649      	mov	r1, r9
 800168a:	00cb      	lsls	r3, r1, #3
 800168c:	4641      	mov	r1, r8
 800168e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001692:	4641      	mov	r1, r8
 8001694:	00ca      	lsls	r2, r1, #3
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	4603      	mov	r3, r0
 800169c:	4622      	mov	r2, r4
 800169e:	189b      	adds	r3, r3, r2
 80016a0:	633b      	str	r3, [r7, #48]	; 0x30
 80016a2:	462b      	mov	r3, r5
 80016a4:	460a      	mov	r2, r1
 80016a6:	eb42 0303 	adc.w	r3, r2, r3
 80016aa:	637b      	str	r3, [r7, #52]	; 0x34
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	f04f 0300 	mov.w	r3, #0
 80016b4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80016b8:	4629      	mov	r1, r5
 80016ba:	024b      	lsls	r3, r1, #9
 80016bc:	4621      	mov	r1, r4
 80016be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016c2:	4621      	mov	r1, r4
 80016c4:	024a      	lsls	r2, r1, #9
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016ce:	2200      	movs	r2, #0
 80016d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80016d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80016dc:	f7fe fd98 	bl	8000210 <__aeabi_uldivmod>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4613      	mov	r3, r2
 80016e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016ea:	e067      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ec:	4b75      	ldr	r3, [pc, #468]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	099b      	lsrs	r3, r3, #6
 80016f2:	2200      	movs	r2, #0
 80016f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80016f8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80016fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001704:	67bb      	str	r3, [r7, #120]	; 0x78
 8001706:	2300      	movs	r3, #0
 8001708:	67fb      	str	r3, [r7, #124]	; 0x7c
 800170a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800170e:	4622      	mov	r2, r4
 8001710:	462b      	mov	r3, r5
 8001712:	f04f 0000 	mov.w	r0, #0
 8001716:	f04f 0100 	mov.w	r1, #0
 800171a:	0159      	lsls	r1, r3, #5
 800171c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001720:	0150      	lsls	r0, r2, #5
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4621      	mov	r1, r4
 8001728:	1a51      	subs	r1, r2, r1
 800172a:	62b9      	str	r1, [r7, #40]	; 0x28
 800172c:	4629      	mov	r1, r5
 800172e:	eb63 0301 	sbc.w	r3, r3, r1
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001740:	4649      	mov	r1, r9
 8001742:	018b      	lsls	r3, r1, #6
 8001744:	4641      	mov	r1, r8
 8001746:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800174a:	4641      	mov	r1, r8
 800174c:	018a      	lsls	r2, r1, #6
 800174e:	4641      	mov	r1, r8
 8001750:	ebb2 0a01 	subs.w	sl, r2, r1
 8001754:	4649      	mov	r1, r9
 8001756:	eb63 0b01 	sbc.w	fp, r3, r1
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001766:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800176a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800176e:	4692      	mov	sl, r2
 8001770:	469b      	mov	fp, r3
 8001772:	4623      	mov	r3, r4
 8001774:	eb1a 0303 	adds.w	r3, sl, r3
 8001778:	623b      	str	r3, [r7, #32]
 800177a:	462b      	mov	r3, r5
 800177c:	eb4b 0303 	adc.w	r3, fp, r3
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800178e:	4629      	mov	r1, r5
 8001790:	028b      	lsls	r3, r1, #10
 8001792:	4621      	mov	r1, r4
 8001794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001798:	4621      	mov	r1, r4
 800179a:	028a      	lsls	r2, r1, #10
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017a4:	2200      	movs	r2, #0
 80017a6:	673b      	str	r3, [r7, #112]	; 0x70
 80017a8:	677a      	str	r2, [r7, #116]	; 0x74
 80017aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80017ae:	f7fe fd2f 	bl	8000210 <__aeabi_uldivmod>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4613      	mov	r3, r2
 80017b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017bc:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	0c1b      	lsrs	r3, r3, #16
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	3301      	adds	r3, #1
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80017ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017de:	e0eb      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e0:	4b38      	ldr	r3, [pc, #224]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ec:	4b35      	ldr	r3, [pc, #212]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d06b      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f8:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	099b      	lsrs	r3, r3, #6
 80017fe:	2200      	movs	r2, #0
 8001800:	66bb      	str	r3, [r7, #104]	; 0x68
 8001802:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001804:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800180a:	663b      	str	r3, [r7, #96]	; 0x60
 800180c:	2300      	movs	r3, #0
 800180e:	667b      	str	r3, [r7, #100]	; 0x64
 8001810:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001814:	4622      	mov	r2, r4
 8001816:	462b      	mov	r3, r5
 8001818:	f04f 0000 	mov.w	r0, #0
 800181c:	f04f 0100 	mov.w	r1, #0
 8001820:	0159      	lsls	r1, r3, #5
 8001822:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001826:	0150      	lsls	r0, r2, #5
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4621      	mov	r1, r4
 800182e:	1a51      	subs	r1, r2, r1
 8001830:	61b9      	str	r1, [r7, #24]
 8001832:	4629      	mov	r1, r5
 8001834:	eb63 0301 	sbc.w	r3, r3, r1
 8001838:	61fb      	str	r3, [r7, #28]
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001846:	4659      	mov	r1, fp
 8001848:	018b      	lsls	r3, r1, #6
 800184a:	4651      	mov	r1, sl
 800184c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001850:	4651      	mov	r1, sl
 8001852:	018a      	lsls	r2, r1, #6
 8001854:	4651      	mov	r1, sl
 8001856:	ebb2 0801 	subs.w	r8, r2, r1
 800185a:	4659      	mov	r1, fp
 800185c:	eb63 0901 	sbc.w	r9, r3, r1
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800186c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001870:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001874:	4690      	mov	r8, r2
 8001876:	4699      	mov	r9, r3
 8001878:	4623      	mov	r3, r4
 800187a:	eb18 0303 	adds.w	r3, r8, r3
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	462b      	mov	r3, r5
 8001882:	eb49 0303 	adc.w	r3, r9, r3
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001894:	4629      	mov	r1, r5
 8001896:	024b      	lsls	r3, r1, #9
 8001898:	4621      	mov	r1, r4
 800189a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800189e:	4621      	mov	r1, r4
 80018a0:	024a      	lsls	r2, r1, #9
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018aa:	2200      	movs	r2, #0
 80018ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80018ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 80018b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80018b4:	f7fe fcac 	bl	8000210 <__aeabi_uldivmod>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4613      	mov	r3, r2
 80018be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80018c2:	e065      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x420>
 80018c4:	40023800 	.word	0x40023800
 80018c8:	00f42400 	.word	0x00f42400
 80018cc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d0:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x458>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	099b      	lsrs	r3, r3, #6
 80018d6:	2200      	movs	r2, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	4611      	mov	r1, r2
 80018dc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018e0:	653b      	str	r3, [r7, #80]	; 0x50
 80018e2:	2300      	movs	r3, #0
 80018e4:	657b      	str	r3, [r7, #84]	; 0x54
 80018e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80018ea:	4642      	mov	r2, r8
 80018ec:	464b      	mov	r3, r9
 80018ee:	f04f 0000 	mov.w	r0, #0
 80018f2:	f04f 0100 	mov.w	r1, #0
 80018f6:	0159      	lsls	r1, r3, #5
 80018f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018fc:	0150      	lsls	r0, r2, #5
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4641      	mov	r1, r8
 8001904:	1a51      	subs	r1, r2, r1
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	4649      	mov	r1, r9
 800190a:	eb63 0301 	sbc.w	r3, r3, r1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800191c:	4659      	mov	r1, fp
 800191e:	018b      	lsls	r3, r1, #6
 8001920:	4651      	mov	r1, sl
 8001922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001926:	4651      	mov	r1, sl
 8001928:	018a      	lsls	r2, r1, #6
 800192a:	4651      	mov	r1, sl
 800192c:	1a54      	subs	r4, r2, r1
 800192e:	4659      	mov	r1, fp
 8001930:	eb63 0501 	sbc.w	r5, r3, r1
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	00eb      	lsls	r3, r5, #3
 800193e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001942:	00e2      	lsls	r2, r4, #3
 8001944:	4614      	mov	r4, r2
 8001946:	461d      	mov	r5, r3
 8001948:	4643      	mov	r3, r8
 800194a:	18e3      	adds	r3, r4, r3
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	464b      	mov	r3, r9
 8001950:	eb45 0303 	adc.w	r3, r5, r3
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001962:	4629      	mov	r1, r5
 8001964:	028b      	lsls	r3, r1, #10
 8001966:	4621      	mov	r1, r4
 8001968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800196c:	4621      	mov	r1, r4
 800196e:	028a      	lsls	r2, r1, #10
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001978:	2200      	movs	r2, #0
 800197a:	64bb      	str	r3, [r7, #72]	; 0x48
 800197c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800197e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001982:	f7fe fc45 	bl	8000210 <__aeabi_uldivmod>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4613      	mov	r3, r2
 800198c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	0f1b      	lsrs	r3, r3, #28
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800199e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80019a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019ae:	e003      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_RCC_GetSysClockFreq+0x45c>)
 80019b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	37b8      	adds	r7, #184	; 0xb8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	00f42400 	.word	0x00f42400

080019d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e28d      	b.n	8001efe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 8083 	beq.w	8001af6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019f0:	4b94      	ldr	r3, [pc, #592]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 030c 	and.w	r3, r3, #12
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d019      	beq.n	8001a30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019fc:	4b91      	ldr	r3, [pc, #580]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d106      	bne.n	8001a16 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a08:	4b8e      	ldr	r3, [pc, #568]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a14:	d00c      	beq.n	8001a30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a16:	4b8b      	ldr	r3, [pc, #556]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a1e:	2b0c      	cmp	r3, #12
 8001a20:	d112      	bne.n	8001a48 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a22:	4b88      	ldr	r3, [pc, #544]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a2e:	d10b      	bne.n	8001a48 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a30:	4b84      	ldr	r3, [pc, #528]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d05b      	beq.n	8001af4 <HAL_RCC_OscConfig+0x124>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d157      	bne.n	8001af4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e25a      	b.n	8001efe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a50:	d106      	bne.n	8001a60 <HAL_RCC_OscConfig+0x90>
 8001a52:	4b7c      	ldr	r3, [pc, #496]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a7b      	ldr	r2, [pc, #492]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e01d      	b.n	8001a9c <HAL_RCC_OscConfig+0xcc>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a68:	d10c      	bne.n	8001a84 <HAL_RCC_OscConfig+0xb4>
 8001a6a:	4b76      	ldr	r3, [pc, #472]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a75      	ldr	r2, [pc, #468]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	4b73      	ldr	r3, [pc, #460]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a72      	ldr	r2, [pc, #456]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e00b      	b.n	8001a9c <HAL_RCC_OscConfig+0xcc>
 8001a84:	4b6f      	ldr	r3, [pc, #444]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a6e      	ldr	r2, [pc, #440]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b6c      	ldr	r3, [pc, #432]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a6b      	ldr	r2, [pc, #428]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d013      	beq.n	8001acc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7ff f8ea 	bl	8000c7c <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aac:	f7ff f8e6 	bl	8000c7c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b64      	cmp	r3, #100	; 0x64
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e21f      	b.n	8001efe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	4b61      	ldr	r3, [pc, #388]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0xdc>
 8001aca:	e014      	b.n	8001af6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001acc:	f7ff f8d6 	bl	8000c7c <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad4:	f7ff f8d2 	bl	8000c7c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b64      	cmp	r3, #100	; 0x64
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e20b      	b.n	8001efe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae6:	4b57      	ldr	r3, [pc, #348]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x104>
 8001af2:	e000      	b.n	8001af6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d06f      	beq.n	8001be2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b02:	4b50      	ldr	r3, [pc, #320]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d017      	beq.n	8001b3e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b0e:	4b4d      	ldr	r3, [pc, #308]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d105      	bne.n	8001b26 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b1a:	4b4a      	ldr	r3, [pc, #296]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00b      	beq.n	8001b3e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b26:	4b47      	ldr	r3, [pc, #284]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b2e:	2b0c      	cmp	r3, #12
 8001b30:	d11c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b32:	4b44      	ldr	r3, [pc, #272]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d116      	bne.n	8001b6c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3e:	4b41      	ldr	r3, [pc, #260]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d005      	beq.n	8001b56 <HAL_RCC_OscConfig+0x186>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e1d3      	b.n	8001efe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b56:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4937      	ldr	r1, [pc, #220]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6a:	e03a      	b.n	8001be2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d020      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b74:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <HAL_RCC_OscConfig+0x278>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7a:	f7ff f87f 	bl	8000c7c <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b82:	f7ff f87b 	bl	8000c7c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e1b4      	b.n	8001efe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b94:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba0:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4925      	ldr	r1, [pc, #148]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]
 8001bb4:	e015      	b.n	8001be2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb6:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <HAL_RCC_OscConfig+0x278>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7ff f85e 	bl	8000c7c <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc4:	f7ff f85a 	bl	8000c7c <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e193      	b.n	8001efe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d036      	beq.n	8001c5c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d016      	beq.n	8001c24 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_RCC_OscConfig+0x27c>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfc:	f7ff f83e 	bl	8000c7c <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c04:	f7ff f83a 	bl	8000c7c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e173      	b.n	8001efe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0x234>
 8001c22:	e01b      	b.n	8001c5c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_OscConfig+0x27c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2a:	f7ff f827 	bl	8000c7c <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c30:	e00e      	b.n	8001c50 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c32:	f7ff f823 	bl	8000c7c <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d907      	bls.n	8001c50 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e15c      	b.n	8001efe <HAL_RCC_OscConfig+0x52e>
 8001c44:	40023800 	.word	0x40023800
 8001c48:	42470000 	.word	0x42470000
 8001c4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c50:	4b8a      	ldr	r3, [pc, #552]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1ea      	bne.n	8001c32 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 8097 	beq.w	8001d98 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6e:	4b83      	ldr	r3, [pc, #524]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10f      	bne.n	8001c9a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	4b7f      	ldr	r3, [pc, #508]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a7e      	ldr	r2, [pc, #504]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8a:	4b7c      	ldr	r3, [pc, #496]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c96:	2301      	movs	r3, #1
 8001c98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9a:	4b79      	ldr	r3, [pc, #484]	; (8001e80 <HAL_RCC_OscConfig+0x4b0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d118      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca6:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <HAL_RCC_OscConfig+0x4b0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a75      	ldr	r2, [pc, #468]	; (8001e80 <HAL_RCC_OscConfig+0x4b0>)
 8001cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb2:	f7fe ffe3 	bl	8000c7c <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cba:	f7fe ffdf 	bl	8000c7c <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e118      	b.n	8001efe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ccc:	4b6c      	ldr	r3, [pc, #432]	; (8001e80 <HAL_RCC_OscConfig+0x4b0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d106      	bne.n	8001cee <HAL_RCC_OscConfig+0x31e>
 8001ce0:	4b66      	ldr	r3, [pc, #408]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce4:	4a65      	ldr	r2, [pc, #404]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6713      	str	r3, [r2, #112]	; 0x70
 8001cec:	e01c      	b.n	8001d28 <HAL_RCC_OscConfig+0x358>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b05      	cmp	r3, #5
 8001cf4:	d10c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x340>
 8001cf6:	4b61      	ldr	r3, [pc, #388]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfa:	4a60      	ldr	r2, [pc, #384]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6713      	str	r3, [r2, #112]	; 0x70
 8001d02:	4b5e      	ldr	r3, [pc, #376]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d06:	4a5d      	ldr	r2, [pc, #372]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0e:	e00b      	b.n	8001d28 <HAL_RCC_OscConfig+0x358>
 8001d10:	4b5a      	ldr	r3, [pc, #360]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d14:	4a59      	ldr	r2, [pc, #356]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001d16:	f023 0301 	bic.w	r3, r3, #1
 8001d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1c:	4b57      	ldr	r3, [pc, #348]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d20:	4a56      	ldr	r2, [pc, #344]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001d22:	f023 0304 	bic.w	r3, r3, #4
 8001d26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d015      	beq.n	8001d5c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d30:	f7fe ffa4 	bl	8000c7c <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d36:	e00a      	b.n	8001d4e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d38:	f7fe ffa0 	bl	8000c7c <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e0d7      	b.n	8001efe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4e:	4b4b      	ldr	r3, [pc, #300]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0ee      	beq.n	8001d38 <HAL_RCC_OscConfig+0x368>
 8001d5a:	e014      	b.n	8001d86 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7fe ff8e 	bl	8000c7c <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d64:	f7fe ff8a 	bl	8000c7c <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e0c1      	b.n	8001efe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7a:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1ee      	bne.n	8001d64 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d105      	bne.n	8001d98 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d8c:	4b3b      	ldr	r3, [pc, #236]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	4a3a      	ldr	r2, [pc, #232]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80ad 	beq.w	8001efc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001da2:	4b36      	ldr	r3, [pc, #216]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d060      	beq.n	8001e70 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d145      	bne.n	8001e42 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db6:	4b33      	ldr	r3, [pc, #204]	; (8001e84 <HAL_RCC_OscConfig+0x4b4>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7fe ff5e 	bl	8000c7c <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7fe ff5a 	bl	8000c7c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e093      	b.n	8001efe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd6:	4b29      	ldr	r3, [pc, #164]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69da      	ldr	r2, [r3, #28]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	019b      	lsls	r3, r3, #6
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	085b      	lsrs	r3, r3, #1
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	041b      	lsls	r3, r3, #16
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	061b      	lsls	r3, r3, #24
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	071b      	lsls	r3, r3, #28
 8001e0e:	491b      	ldr	r1, [pc, #108]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e14:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <HAL_RCC_OscConfig+0x4b4>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1a:	f7fe ff2f 	bl	8000c7c <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e22:	f7fe ff2b 	bl	8000c7c <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e064      	b.n	8001efe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x452>
 8001e40:	e05c      	b.n	8001efc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <HAL_RCC_OscConfig+0x4b4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7fe ff18 	bl	8000c7c <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e50:	f7fe ff14 	bl	8000c7c <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e04d      	b.n	8001efe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_RCC_OscConfig+0x4ac>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x480>
 8001e6e:	e045      	b.n	8001efc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d107      	bne.n	8001e88 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e040      	b.n	8001efe <HAL_RCC_OscConfig+0x52e>
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40007000 	.word	0x40007000
 8001e84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e88:	4b1f      	ldr	r3, [pc, #124]	; (8001f08 <HAL_RCC_OscConfig+0x538>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d030      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d129      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d122      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001eb8:	4013      	ands	r3, r2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ebe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d119      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	085b      	lsrs	r3, r3, #1
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d10f      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d107      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d001      	beq.n	8001efc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800

08001f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e041      	b.n	8001fa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d106      	bne.n	8001f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f839 	bl	8001faa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3304      	adds	r3, #4
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	f000 f9d8 	bl	8002300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d001      	beq.n	8001fd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e04e      	b.n	8002076 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0201 	orr.w	r2, r2, #1
 8001fee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a23      	ldr	r2, [pc, #140]	; (8002084 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d022      	beq.n	8002040 <HAL_TIM_Base_Start_IT+0x80>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002002:	d01d      	beq.n	8002040 <HAL_TIM_Base_Start_IT+0x80>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1f      	ldr	r2, [pc, #124]	; (8002088 <HAL_TIM_Base_Start_IT+0xc8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d018      	beq.n	8002040 <HAL_TIM_Base_Start_IT+0x80>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1e      	ldr	r2, [pc, #120]	; (800208c <HAL_TIM_Base_Start_IT+0xcc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d013      	beq.n	8002040 <HAL_TIM_Base_Start_IT+0x80>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a1c      	ldr	r2, [pc, #112]	; (8002090 <HAL_TIM_Base_Start_IT+0xd0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00e      	beq.n	8002040 <HAL_TIM_Base_Start_IT+0x80>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a1b      	ldr	r2, [pc, #108]	; (8002094 <HAL_TIM_Base_Start_IT+0xd4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d009      	beq.n	8002040 <HAL_TIM_Base_Start_IT+0x80>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a19      	ldr	r2, [pc, #100]	; (8002098 <HAL_TIM_Base_Start_IT+0xd8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d004      	beq.n	8002040 <HAL_TIM_Base_Start_IT+0x80>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a18      	ldr	r2, [pc, #96]	; (800209c <HAL_TIM_Base_Start_IT+0xdc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d111      	bne.n	8002064 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b06      	cmp	r3, #6
 8002050:	d010      	beq.n	8002074 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f042 0201 	orr.w	r2, r2, #1
 8002060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002062:	e007      	b.n	8002074 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0201 	orr.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40010000 	.word	0x40010000
 8002088:	40000400 	.word	0x40000400
 800208c:	40000800 	.word	0x40000800
 8002090:	40000c00 	.word	0x40000c00
 8002094:	40010400 	.word	0x40010400
 8002098:	40014000 	.word	0x40014000
 800209c:	40001800 	.word	0x40001800

080020a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d122      	bne.n	80020fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d11b      	bne.n	80020fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0202 	mvn.w	r2, #2
 80020cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f8ee 	bl	80022c4 <HAL_TIM_IC_CaptureCallback>
 80020e8:	e005      	b.n	80020f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f8e0 	bl	80022b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f8f1 	bl	80022d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	2b04      	cmp	r3, #4
 8002108:	d122      	bne.n	8002150 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b04      	cmp	r3, #4
 8002116:	d11b      	bne.n	8002150 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0204 	mvn.w	r2, #4
 8002120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2202      	movs	r2, #2
 8002126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f8c4 	bl	80022c4 <HAL_TIM_IC_CaptureCallback>
 800213c:	e005      	b.n	800214a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f8b6 	bl	80022b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f8c7 	bl	80022d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b08      	cmp	r3, #8
 800215c:	d122      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b08      	cmp	r3, #8
 800216a:	d11b      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0208 	mvn.w	r2, #8
 8002174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2204      	movs	r2, #4
 800217a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f89a 	bl	80022c4 <HAL_TIM_IC_CaptureCallback>
 8002190:	e005      	b.n	800219e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f88c 	bl	80022b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f89d 	bl	80022d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b10      	cmp	r3, #16
 80021b0:	d122      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b10      	cmp	r3, #16
 80021be:	d11b      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0210 	mvn.w	r2, #16
 80021c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2208      	movs	r2, #8
 80021ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f870 	bl	80022c4 <HAL_TIM_IC_CaptureCallback>
 80021e4:	e005      	b.n	80021f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f862 	bl	80022b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f873 	bl	80022d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b01      	cmp	r3, #1
 8002204:	d10e      	bne.n	8002224 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b01      	cmp	r3, #1
 8002212:	d107      	bne.n	8002224 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0201 	mvn.w	r2, #1
 800221c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe fafc 	bl	800081c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222e:	2b80      	cmp	r3, #128	; 0x80
 8002230:	d10e      	bne.n	8002250 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223c:	2b80      	cmp	r3, #128	; 0x80
 800223e:	d107      	bne.n	8002250 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f902 	bl	8002454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225a:	2b40      	cmp	r3, #64	; 0x40
 800225c:	d10e      	bne.n	800227c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002268:	2b40      	cmp	r3, #64	; 0x40
 800226a:	d107      	bne.n	800227c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f838 	bl	80022ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	2b20      	cmp	r3, #32
 8002288:	d10e      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0320 	and.w	r3, r3, #32
 8002294:	2b20      	cmp	r3, #32
 8002296:	d107      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0220 	mvn.w	r2, #32
 80022a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f8cc 	bl	8002440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a40      	ldr	r2, [pc, #256]	; (8002414 <TIM_Base_SetConfig+0x114>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d013      	beq.n	8002340 <TIM_Base_SetConfig+0x40>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231e:	d00f      	beq.n	8002340 <TIM_Base_SetConfig+0x40>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a3d      	ldr	r2, [pc, #244]	; (8002418 <TIM_Base_SetConfig+0x118>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d00b      	beq.n	8002340 <TIM_Base_SetConfig+0x40>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a3c      	ldr	r2, [pc, #240]	; (800241c <TIM_Base_SetConfig+0x11c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d007      	beq.n	8002340 <TIM_Base_SetConfig+0x40>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a3b      	ldr	r2, [pc, #236]	; (8002420 <TIM_Base_SetConfig+0x120>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d003      	beq.n	8002340 <TIM_Base_SetConfig+0x40>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a3a      	ldr	r2, [pc, #232]	; (8002424 <TIM_Base_SetConfig+0x124>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d108      	bne.n	8002352 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4313      	orrs	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a2f      	ldr	r2, [pc, #188]	; (8002414 <TIM_Base_SetConfig+0x114>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d02b      	beq.n	80023b2 <TIM_Base_SetConfig+0xb2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002360:	d027      	beq.n	80023b2 <TIM_Base_SetConfig+0xb2>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a2c      	ldr	r2, [pc, #176]	; (8002418 <TIM_Base_SetConfig+0x118>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d023      	beq.n	80023b2 <TIM_Base_SetConfig+0xb2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a2b      	ldr	r2, [pc, #172]	; (800241c <TIM_Base_SetConfig+0x11c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d01f      	beq.n	80023b2 <TIM_Base_SetConfig+0xb2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a2a      	ldr	r2, [pc, #168]	; (8002420 <TIM_Base_SetConfig+0x120>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d01b      	beq.n	80023b2 <TIM_Base_SetConfig+0xb2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a29      	ldr	r2, [pc, #164]	; (8002424 <TIM_Base_SetConfig+0x124>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d017      	beq.n	80023b2 <TIM_Base_SetConfig+0xb2>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a28      	ldr	r2, [pc, #160]	; (8002428 <TIM_Base_SetConfig+0x128>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <TIM_Base_SetConfig+0xb2>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a27      	ldr	r2, [pc, #156]	; (800242c <TIM_Base_SetConfig+0x12c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00f      	beq.n	80023b2 <TIM_Base_SetConfig+0xb2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a26      	ldr	r2, [pc, #152]	; (8002430 <TIM_Base_SetConfig+0x130>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00b      	beq.n	80023b2 <TIM_Base_SetConfig+0xb2>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a25      	ldr	r2, [pc, #148]	; (8002434 <TIM_Base_SetConfig+0x134>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d007      	beq.n	80023b2 <TIM_Base_SetConfig+0xb2>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a24      	ldr	r2, [pc, #144]	; (8002438 <TIM_Base_SetConfig+0x138>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d003      	beq.n	80023b2 <TIM_Base_SetConfig+0xb2>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a23      	ldr	r2, [pc, #140]	; (800243c <TIM_Base_SetConfig+0x13c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d108      	bne.n	80023c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <TIM_Base_SetConfig+0x114>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d003      	beq.n	80023f8 <TIM_Base_SetConfig+0xf8>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a0c      	ldr	r2, [pc, #48]	; (8002424 <TIM_Base_SetConfig+0x124>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d103      	bne.n	8002400 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	615a      	str	r2, [r3, #20]
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40010000 	.word	0x40010000
 8002418:	40000400 	.word	0x40000400
 800241c:	40000800 	.word	0x40000800
 8002420:	40000c00 	.word	0x40000c00
 8002424:	40010400 	.word	0x40010400
 8002428:	40014000 	.word	0x40014000
 800242c:	40014400 	.word	0x40014400
 8002430:	40014800 	.word	0x40014800
 8002434:	40001800 	.word	0x40001800
 8002438:	40001c00 	.word	0x40001c00
 800243c:	40002000 	.word	0x40002000

08002440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e03f      	b.n	80024fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe fa04 	bl	800089c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2224      	movs	r2, #36	; 0x24
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fd7b 	bl	8002fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695a      	ldr	r2, [r3, #20]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b08a      	sub	sp, #40	; 0x28
 8002506:	af02      	add	r7, sp, #8
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	4613      	mov	r3, r2
 8002510:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b20      	cmp	r3, #32
 8002520:	d17c      	bne.n	800261c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <HAL_UART_Transmit+0x2c>
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e075      	b.n	800261e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_UART_Transmit+0x3e>
 800253c:	2302      	movs	r3, #2
 800253e:	e06e      	b.n	800261e <HAL_UART_Transmit+0x11c>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2221      	movs	r2, #33	; 0x21
 8002552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002556:	f7fe fb91 	bl	8000c7c <HAL_GetTick>
 800255a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	88fa      	ldrh	r2, [r7, #6]
 8002560:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	88fa      	ldrh	r2, [r7, #6]
 8002566:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002570:	d108      	bne.n	8002584 <HAL_UART_Transmit+0x82>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d104      	bne.n	8002584 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	e003      	b.n	800258c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002594:	e02a      	b.n	80025ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2200      	movs	r2, #0
 800259e:	2180      	movs	r1, #128	; 0x80
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 faf9 	bl	8002b98 <UART_WaitOnFlagUntilTimeout>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e036      	b.n	800261e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10b      	bne.n	80025ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	3302      	adds	r3, #2
 80025ca:	61bb      	str	r3, [r7, #24]
 80025cc:	e007      	b.n	80025de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	781a      	ldrb	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	3301      	adds	r3, #1
 80025dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1cf      	bne.n	8002596 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2200      	movs	r2, #0
 80025fe:	2140      	movs	r1, #64	; 0x40
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 fac9 	bl	8002b98 <UART_WaitOnFlagUntilTimeout>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e006      	b.n	800261e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	e000      	b.n	800261e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800261c:	2302      	movs	r3, #2
  }
}
 800261e:	4618      	mov	r0, r3
 8002620:	3720      	adds	r7, #32
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b0ba      	sub	sp, #232	; 0xe8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800264e:	2300      	movs	r3, #0
 8002650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002654:	2300      	movs	r3, #0
 8002656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800265a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10f      	bne.n	800268e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800266e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b00      	cmp	r3, #0
 8002678:	d009      	beq.n	800268e <HAL_UART_IRQHandler+0x66>
 800267a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fbd3 	bl	8002e32 <UART_Receive_IT>
      return;
 800268c:	e256      	b.n	8002b3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800268e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 80de 	beq.w	8002854 <HAL_UART_IRQHandler+0x22c>
 8002698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d106      	bne.n	80026b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80d1 	beq.w	8002854 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <HAL_UART_IRQHandler+0xae>
 80026be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d005      	beq.n	80026d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f043 0201 	orr.w	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00b      	beq.n	80026fa <HAL_UART_IRQHandler+0xd2>
 80026e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f043 0202 	orr.w	r2, r3, #2
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <HAL_UART_IRQHandler+0xf6>
 8002706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f043 0204 	orr.w	r2, r3, #4
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800271e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d011      	beq.n	800274e <HAL_UART_IRQHandler+0x126>
 800272a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	2b00      	cmp	r3, #0
 8002734:	d105      	bne.n	8002742 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d005      	beq.n	800274e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f043 0208 	orr.w	r2, r3, #8
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 81ed 	beq.w	8002b32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_UART_IRQHandler+0x14e>
 8002764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 fb5e 	bl	8002e32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002780:	2b40      	cmp	r3, #64	; 0x40
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d103      	bne.n	80027a2 <HAL_UART_IRQHandler+0x17a>
 800279a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d04f      	beq.n	8002842 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fa66 	bl	8002c74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b2:	2b40      	cmp	r3, #64	; 0x40
 80027b4:	d141      	bne.n	800283a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3314      	adds	r3, #20
 80027bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027c4:	e853 3f00 	ldrex	r3, [r3]
 80027c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80027cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	3314      	adds	r3, #20
 80027de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80027e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80027e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80027ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80027f2:	e841 2300 	strex	r3, r2, [r1]
 80027f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80027fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1d9      	bne.n	80027b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002806:	2b00      	cmp	r3, #0
 8002808:	d013      	beq.n	8002832 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280e:	4a7d      	ldr	r2, [pc, #500]	; (8002a04 <HAL_UART_IRQHandler+0x3dc>)
 8002810:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe fb8e 	bl	8000f38 <HAL_DMA_Abort_IT>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d016      	beq.n	8002850 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800282c:	4610      	mov	r0, r2
 800282e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002830:	e00e      	b.n	8002850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f99a 	bl	8002b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002838:	e00a      	b.n	8002850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f996 	bl	8002b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002840:	e006      	b.n	8002850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f992 	bl	8002b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800284e:	e170      	b.n	8002b32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002850:	bf00      	nop
    return;
 8002852:	e16e      	b.n	8002b32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	2b01      	cmp	r3, #1
 800285a:	f040 814a 	bne.w	8002af2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800285e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 8143 	beq.w	8002af2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800286c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 813c 	beq.w	8002af2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289a:	2b40      	cmp	r3, #64	; 0x40
 800289c:	f040 80b4 	bne.w	8002a08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8140 	beq.w	8002b36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028be:	429a      	cmp	r2, r3
 80028c0:	f080 8139 	bcs.w	8002b36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d6:	f000 8088 	beq.w	80029ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	330c      	adds	r3, #12
 80028e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028e8:	e853 3f00 	ldrex	r3, [r3]
 80028ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80028f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	330c      	adds	r3, #12
 8002902:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002906:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800290a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002912:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002916:	e841 2300 	strex	r3, r2, [r1]
 800291a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800291e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1d9      	bne.n	80028da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	3314      	adds	r3, #20
 800292c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002930:	e853 3f00 	ldrex	r3, [r3]
 8002934:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	3314      	adds	r3, #20
 8002946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800294a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800294e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002950:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002952:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002956:	e841 2300 	strex	r3, r2, [r1]
 800295a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800295c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1e1      	bne.n	8002926 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	3314      	adds	r3, #20
 8002968:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800296c:	e853 3f00 	ldrex	r3, [r3]
 8002970:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	3314      	adds	r3, #20
 8002982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002986:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002988:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800298c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800298e:	e841 2300 	strex	r3, r2, [r1]
 8002992:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1e3      	bne.n	8002962 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	330c      	adds	r3, #12
 80029ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b2:	e853 3f00 	ldrex	r3, [r3]
 80029b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80029b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ba:	f023 0310 	bic.w	r3, r3, #16
 80029be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	330c      	adds	r3, #12
 80029c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80029cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80029ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029d4:	e841 2300 	strex	r3, r2, [r1]
 80029d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80029da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1e3      	bne.n	80029a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe fa37 	bl	8000e58 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	4619      	mov	r1, r3
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f8c0 	bl	8002b80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a00:	e099      	b.n	8002b36 <HAL_UART_IRQHandler+0x50e>
 8002a02:	bf00      	nop
 8002a04:	08002d3b 	.word	0x08002d3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 808b 	beq.w	8002b3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002a24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 8086 	beq.w	8002b3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	330c      	adds	r3, #12
 8002a34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a38:	e853 3f00 	ldrex	r3, [r3]
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	330c      	adds	r3, #12
 8002a4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a52:	647a      	str	r2, [r7, #68]	; 0x44
 8002a54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a5a:	e841 2300 	strex	r3, r2, [r1]
 8002a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1e3      	bne.n	8002a2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	3314      	adds	r3, #20
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	e853 3f00 	ldrex	r3, [r3]
 8002a74:	623b      	str	r3, [r7, #32]
   return(result);
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	f023 0301 	bic.w	r3, r3, #1
 8002a7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	3314      	adds	r3, #20
 8002a86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a8a:	633a      	str	r2, [r7, #48]	; 0x30
 8002a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a92:	e841 2300 	strex	r3, r2, [r1]
 8002a96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1e3      	bne.n	8002a66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	330c      	adds	r3, #12
 8002ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	e853 3f00 	ldrex	r3, [r3]
 8002aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 0310 	bic.w	r3, r3, #16
 8002ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	330c      	adds	r3, #12
 8002acc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ad0:	61fa      	str	r2, [r7, #28]
 8002ad2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad4:	69b9      	ldr	r1, [r7, #24]
 8002ad6:	69fa      	ldr	r2, [r7, #28]
 8002ad8:	e841 2300 	strex	r3, r2, [r1]
 8002adc:	617b      	str	r3, [r7, #20]
   return(result);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1e3      	bne.n	8002aac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ae4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ae8:	4619      	mov	r1, r3
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f848 	bl	8002b80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002af0:	e023      	b.n	8002b3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <HAL_UART_IRQHandler+0x4ea>
 8002afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f929 	bl	8002d62 <UART_Transmit_IT>
    return;
 8002b10:	e014      	b.n	8002b3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00e      	beq.n	8002b3c <HAL_UART_IRQHandler+0x514>
 8002b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f969 	bl	8002e02 <UART_EndTransmit_IT>
    return;
 8002b30:	e004      	b.n	8002b3c <HAL_UART_IRQHandler+0x514>
    return;
 8002b32:	bf00      	nop
 8002b34:	e002      	b.n	8002b3c <HAL_UART_IRQHandler+0x514>
      return;
 8002b36:	bf00      	nop
 8002b38:	e000      	b.n	8002b3c <HAL_UART_IRQHandler+0x514>
      return;
 8002b3a:	bf00      	nop
  }
}
 8002b3c:	37e8      	adds	r7, #232	; 0xe8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop

08002b44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b090      	sub	sp, #64	; 0x40
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ba8:	e050      	b.n	8002c4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bb0:	d04c      	beq.n	8002c4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d007      	beq.n	8002bc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bb8:	f7fe f860 	bl	8000c7c <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d241      	bcs.n	8002c4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	330c      	adds	r3, #12
 8002bce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd2:	e853 3f00 	ldrex	r3, [r3]
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	330c      	adds	r3, #12
 8002be6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002be8:	637a      	str	r2, [r7, #52]	; 0x34
 8002bea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bf0:	e841 2300 	strex	r3, r2, [r1]
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1e5      	bne.n	8002bc8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3314      	adds	r3, #20
 8002c02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	e853 3f00 	ldrex	r3, [r3]
 8002c0a:	613b      	str	r3, [r7, #16]
   return(result);
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f023 0301 	bic.w	r3, r3, #1
 8002c12:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3314      	adds	r3, #20
 8002c1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c1c:	623a      	str	r2, [r7, #32]
 8002c1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c20:	69f9      	ldr	r1, [r7, #28]
 8002c22:	6a3a      	ldr	r2, [r7, #32]
 8002c24:	e841 2300 	strex	r3, r2, [r1]
 8002c28:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1e5      	bne.n	8002bfc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e00f      	b.n	8002c6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	4013      	ands	r3, r2
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	bf0c      	ite	eq
 8002c5c:	2301      	moveq	r3, #1
 8002c5e:	2300      	movne	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d09f      	beq.n	8002baa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3740      	adds	r7, #64	; 0x40
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b095      	sub	sp, #84	; 0x54
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	330c      	adds	r3, #12
 8002c82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c86:	e853 3f00 	ldrex	r3, [r3]
 8002c8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	330c      	adds	r3, #12
 8002c9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c9c:	643a      	str	r2, [r7, #64]	; 0x40
 8002c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ca2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ca4:	e841 2300 	strex	r3, r2, [r1]
 8002ca8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1e5      	bne.n	8002c7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	3314      	adds	r3, #20
 8002cb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	e853 3f00 	ldrex	r3, [r3]
 8002cbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f023 0301 	bic.w	r3, r3, #1
 8002cc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3314      	adds	r3, #20
 8002cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cd8:	e841 2300 	strex	r3, r2, [r1]
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e5      	bne.n	8002cb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d119      	bne.n	8002d20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	330c      	adds	r3, #12
 8002cf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	e853 3f00 	ldrex	r3, [r3]
 8002cfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f023 0310 	bic.w	r3, r3, #16
 8002d02:	647b      	str	r3, [r7, #68]	; 0x44
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	330c      	adds	r3, #12
 8002d0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d0c:	61ba      	str	r2, [r7, #24]
 8002d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d10:	6979      	ldr	r1, [r7, #20]
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	e841 2300 	strex	r3, r2, [r1]
 8002d18:	613b      	str	r3, [r7, #16]
   return(result);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1e5      	bne.n	8002cec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d2e:	bf00      	nop
 8002d30:	3754      	adds	r7, #84	; 0x54
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f7ff ff09 	bl	8002b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d5a:	bf00      	nop
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b085      	sub	sp, #20
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b21      	cmp	r3, #33	; 0x21
 8002d74:	d13e      	bne.n	8002df4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7e:	d114      	bne.n	8002daa <UART_Transmit_IT+0x48>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d110      	bne.n	8002daa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	1c9a      	adds	r2, r3, #2
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	621a      	str	r2, [r3, #32]
 8002da8:	e008      	b.n	8002dbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	1c59      	adds	r1, r3, #1
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6211      	str	r1, [r2, #32]
 8002db4:	781a      	ldrb	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4619      	mov	r1, r3
 8002dca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10f      	bne.n	8002df0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff fe8e 	bl	8002b44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b08c      	sub	sp, #48	; 0x30
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b22      	cmp	r3, #34	; 0x22
 8002e44:	f040 80ab 	bne.w	8002f9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e50:	d117      	bne.n	8002e82 <UART_Receive_IT+0x50>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d113      	bne.n	8002e82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	1c9a      	adds	r2, r3, #2
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e80:	e026      	b.n	8002ed0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e94:	d007      	beq.n	8002ea6 <UART_Receive_IT+0x74>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10a      	bne.n	8002eb4 <UART_Receive_IT+0x82>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb0:	701a      	strb	r2, [r3, #0]
 8002eb2:	e008      	b.n	8002ec6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	4619      	mov	r1, r3
 8002ede:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d15a      	bne.n	8002f9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0220 	bic.w	r2, r2, #32
 8002ef2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0201 	bic.w	r2, r2, #1
 8002f12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d135      	bne.n	8002f90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	330c      	adds	r3, #12
 8002f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	e853 3f00 	ldrex	r3, [r3]
 8002f38:	613b      	str	r3, [r7, #16]
   return(result);
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f023 0310 	bic.w	r3, r3, #16
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	330c      	adds	r3, #12
 8002f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4a:	623a      	str	r2, [r7, #32]
 8002f4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4e:	69f9      	ldr	r1, [r7, #28]
 8002f50:	6a3a      	ldr	r2, [r7, #32]
 8002f52:	e841 2300 	strex	r3, r2, [r1]
 8002f56:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1e5      	bne.n	8002f2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b10      	cmp	r3, #16
 8002f6a:	d10a      	bne.n	8002f82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f86:	4619      	mov	r1, r3
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff fdf9 	bl	8002b80 <HAL_UARTEx_RxEventCallback>
 8002f8e:	e002      	b.n	8002f96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff fde1 	bl	8002b58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	e002      	b.n	8002fa0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e000      	b.n	8002fa0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002f9e:	2302      	movs	r3, #2
  }
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3730      	adds	r7, #48	; 0x30
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fac:	b0c0      	sub	sp, #256	; 0x100
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc4:	68d9      	ldr	r1, [r3, #12]
 8002fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	ea40 0301 	orr.w	r3, r0, r1
 8002fd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003000:	f021 010c 	bic.w	r1, r1, #12
 8003004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800300e:	430b      	orrs	r3, r1
 8003010:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800301e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003022:	6999      	ldr	r1, [r3, #24]
 8003024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	ea40 0301 	orr.w	r3, r0, r1
 800302e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4b8f      	ldr	r3, [pc, #572]	; (8003274 <UART_SetConfig+0x2cc>)
 8003038:	429a      	cmp	r2, r3
 800303a:	d005      	beq.n	8003048 <UART_SetConfig+0xa0>
 800303c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4b8d      	ldr	r3, [pc, #564]	; (8003278 <UART_SetConfig+0x2d0>)
 8003044:	429a      	cmp	r2, r3
 8003046:	d104      	bne.n	8003052 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003048:	f7fe fa4c 	bl	80014e4 <HAL_RCC_GetPCLK2Freq>
 800304c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003050:	e003      	b.n	800305a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003052:	f7fe fa33 	bl	80014bc <HAL_RCC_GetPCLK1Freq>
 8003056:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800305a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003064:	f040 810c 	bne.w	8003280 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800306c:	2200      	movs	r2, #0
 800306e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003072:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003076:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800307a:	4622      	mov	r2, r4
 800307c:	462b      	mov	r3, r5
 800307e:	1891      	adds	r1, r2, r2
 8003080:	65b9      	str	r1, [r7, #88]	; 0x58
 8003082:	415b      	adcs	r3, r3
 8003084:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003086:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800308a:	4621      	mov	r1, r4
 800308c:	eb12 0801 	adds.w	r8, r2, r1
 8003090:	4629      	mov	r1, r5
 8003092:	eb43 0901 	adc.w	r9, r3, r1
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030aa:	4690      	mov	r8, r2
 80030ac:	4699      	mov	r9, r3
 80030ae:	4623      	mov	r3, r4
 80030b0:	eb18 0303 	adds.w	r3, r8, r3
 80030b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030b8:	462b      	mov	r3, r5
 80030ba:	eb49 0303 	adc.w	r3, r9, r3
 80030be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030d6:	460b      	mov	r3, r1
 80030d8:	18db      	adds	r3, r3, r3
 80030da:	653b      	str	r3, [r7, #80]	; 0x50
 80030dc:	4613      	mov	r3, r2
 80030de:	eb42 0303 	adc.w	r3, r2, r3
 80030e2:	657b      	str	r3, [r7, #84]	; 0x54
 80030e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030ec:	f7fd f890 	bl	8000210 <__aeabi_uldivmod>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4b61      	ldr	r3, [pc, #388]	; (800327c <UART_SetConfig+0x2d4>)
 80030f6:	fba3 2302 	umull	r2, r3, r3, r2
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	011c      	lsls	r4, r3, #4
 80030fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003102:	2200      	movs	r2, #0
 8003104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003108:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800310c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003110:	4642      	mov	r2, r8
 8003112:	464b      	mov	r3, r9
 8003114:	1891      	adds	r1, r2, r2
 8003116:	64b9      	str	r1, [r7, #72]	; 0x48
 8003118:	415b      	adcs	r3, r3
 800311a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800311c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003120:	4641      	mov	r1, r8
 8003122:	eb12 0a01 	adds.w	sl, r2, r1
 8003126:	4649      	mov	r1, r9
 8003128:	eb43 0b01 	adc.w	fp, r3, r1
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003138:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800313c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003140:	4692      	mov	sl, r2
 8003142:	469b      	mov	fp, r3
 8003144:	4643      	mov	r3, r8
 8003146:	eb1a 0303 	adds.w	r3, sl, r3
 800314a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800314e:	464b      	mov	r3, r9
 8003150:	eb4b 0303 	adc.w	r3, fp, r3
 8003154:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003164:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003168:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800316c:	460b      	mov	r3, r1
 800316e:	18db      	adds	r3, r3, r3
 8003170:	643b      	str	r3, [r7, #64]	; 0x40
 8003172:	4613      	mov	r3, r2
 8003174:	eb42 0303 	adc.w	r3, r2, r3
 8003178:	647b      	str	r3, [r7, #68]	; 0x44
 800317a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800317e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003182:	f7fd f845 	bl	8000210 <__aeabi_uldivmod>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4611      	mov	r1, r2
 800318c:	4b3b      	ldr	r3, [pc, #236]	; (800327c <UART_SetConfig+0x2d4>)
 800318e:	fba3 2301 	umull	r2, r3, r3, r1
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	2264      	movs	r2, #100	; 0x64
 8003196:	fb02 f303 	mul.w	r3, r2, r3
 800319a:	1acb      	subs	r3, r1, r3
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031a2:	4b36      	ldr	r3, [pc, #216]	; (800327c <UART_SetConfig+0x2d4>)
 80031a4:	fba3 2302 	umull	r2, r3, r3, r2
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031b0:	441c      	add	r4, r3
 80031b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031b6:	2200      	movs	r2, #0
 80031b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80031c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80031c4:	4642      	mov	r2, r8
 80031c6:	464b      	mov	r3, r9
 80031c8:	1891      	adds	r1, r2, r2
 80031ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80031cc:	415b      	adcs	r3, r3
 80031ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031d4:	4641      	mov	r1, r8
 80031d6:	1851      	adds	r1, r2, r1
 80031d8:	6339      	str	r1, [r7, #48]	; 0x30
 80031da:	4649      	mov	r1, r9
 80031dc:	414b      	adcs	r3, r1
 80031de:	637b      	str	r3, [r7, #52]	; 0x34
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031ec:	4659      	mov	r1, fp
 80031ee:	00cb      	lsls	r3, r1, #3
 80031f0:	4651      	mov	r1, sl
 80031f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031f6:	4651      	mov	r1, sl
 80031f8:	00ca      	lsls	r2, r1, #3
 80031fa:	4610      	mov	r0, r2
 80031fc:	4619      	mov	r1, r3
 80031fe:	4603      	mov	r3, r0
 8003200:	4642      	mov	r2, r8
 8003202:	189b      	adds	r3, r3, r2
 8003204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003208:	464b      	mov	r3, r9
 800320a:	460a      	mov	r2, r1
 800320c:	eb42 0303 	adc.w	r3, r2, r3
 8003210:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003220:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003224:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003228:	460b      	mov	r3, r1
 800322a:	18db      	adds	r3, r3, r3
 800322c:	62bb      	str	r3, [r7, #40]	; 0x28
 800322e:	4613      	mov	r3, r2
 8003230:	eb42 0303 	adc.w	r3, r2, r3
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800323a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800323e:	f7fc ffe7 	bl	8000210 <__aeabi_uldivmod>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4b0d      	ldr	r3, [pc, #52]	; (800327c <UART_SetConfig+0x2d4>)
 8003248:	fba3 1302 	umull	r1, r3, r3, r2
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	2164      	movs	r1, #100	; 0x64
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	3332      	adds	r3, #50	; 0x32
 800325a:	4a08      	ldr	r2, [pc, #32]	; (800327c <UART_SetConfig+0x2d4>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	f003 0207 	and.w	r2, r3, #7
 8003266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4422      	add	r2, r4
 800326e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003270:	e105      	b.n	800347e <UART_SetConfig+0x4d6>
 8003272:	bf00      	nop
 8003274:	40011000 	.word	0x40011000
 8003278:	40011400 	.word	0x40011400
 800327c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003284:	2200      	movs	r2, #0
 8003286:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800328a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800328e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003292:	4642      	mov	r2, r8
 8003294:	464b      	mov	r3, r9
 8003296:	1891      	adds	r1, r2, r2
 8003298:	6239      	str	r1, [r7, #32]
 800329a:	415b      	adcs	r3, r3
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
 800329e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032a2:	4641      	mov	r1, r8
 80032a4:	1854      	adds	r4, r2, r1
 80032a6:	4649      	mov	r1, r9
 80032a8:	eb43 0501 	adc.w	r5, r3, r1
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	00eb      	lsls	r3, r5, #3
 80032b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ba:	00e2      	lsls	r2, r4, #3
 80032bc:	4614      	mov	r4, r2
 80032be:	461d      	mov	r5, r3
 80032c0:	4643      	mov	r3, r8
 80032c2:	18e3      	adds	r3, r4, r3
 80032c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032c8:	464b      	mov	r3, r9
 80032ca:	eb45 0303 	adc.w	r3, r5, r3
 80032ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032ee:	4629      	mov	r1, r5
 80032f0:	008b      	lsls	r3, r1, #2
 80032f2:	4621      	mov	r1, r4
 80032f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032f8:	4621      	mov	r1, r4
 80032fa:	008a      	lsls	r2, r1, #2
 80032fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003300:	f7fc ff86 	bl	8000210 <__aeabi_uldivmod>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4b60      	ldr	r3, [pc, #384]	; (800348c <UART_SetConfig+0x4e4>)
 800330a:	fba3 2302 	umull	r2, r3, r3, r2
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	011c      	lsls	r4, r3, #4
 8003312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003316:	2200      	movs	r2, #0
 8003318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800331c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003320:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003324:	4642      	mov	r2, r8
 8003326:	464b      	mov	r3, r9
 8003328:	1891      	adds	r1, r2, r2
 800332a:	61b9      	str	r1, [r7, #24]
 800332c:	415b      	adcs	r3, r3
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003334:	4641      	mov	r1, r8
 8003336:	1851      	adds	r1, r2, r1
 8003338:	6139      	str	r1, [r7, #16]
 800333a:	4649      	mov	r1, r9
 800333c:	414b      	adcs	r3, r1
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800334c:	4659      	mov	r1, fp
 800334e:	00cb      	lsls	r3, r1, #3
 8003350:	4651      	mov	r1, sl
 8003352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003356:	4651      	mov	r1, sl
 8003358:	00ca      	lsls	r2, r1, #3
 800335a:	4610      	mov	r0, r2
 800335c:	4619      	mov	r1, r3
 800335e:	4603      	mov	r3, r0
 8003360:	4642      	mov	r2, r8
 8003362:	189b      	adds	r3, r3, r2
 8003364:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003368:	464b      	mov	r3, r9
 800336a:	460a      	mov	r2, r1
 800336c:	eb42 0303 	adc.w	r3, r2, r3
 8003370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	67bb      	str	r3, [r7, #120]	; 0x78
 800337e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800338c:	4649      	mov	r1, r9
 800338e:	008b      	lsls	r3, r1, #2
 8003390:	4641      	mov	r1, r8
 8003392:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003396:	4641      	mov	r1, r8
 8003398:	008a      	lsls	r2, r1, #2
 800339a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800339e:	f7fc ff37 	bl	8000210 <__aeabi_uldivmod>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4b39      	ldr	r3, [pc, #228]	; (800348c <UART_SetConfig+0x4e4>)
 80033a8:	fba3 1302 	umull	r1, r3, r3, r2
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	2164      	movs	r1, #100	; 0x64
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	3332      	adds	r3, #50	; 0x32
 80033ba:	4a34      	ldr	r2, [pc, #208]	; (800348c <UART_SetConfig+0x4e4>)
 80033bc:	fba2 2303 	umull	r2, r3, r2, r3
 80033c0:	095b      	lsrs	r3, r3, #5
 80033c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033c6:	441c      	add	r4, r3
 80033c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033cc:	2200      	movs	r2, #0
 80033ce:	673b      	str	r3, [r7, #112]	; 0x70
 80033d0:	677a      	str	r2, [r7, #116]	; 0x74
 80033d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033d6:	4642      	mov	r2, r8
 80033d8:	464b      	mov	r3, r9
 80033da:	1891      	adds	r1, r2, r2
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	415b      	adcs	r3, r3
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033e6:	4641      	mov	r1, r8
 80033e8:	1851      	adds	r1, r2, r1
 80033ea:	6039      	str	r1, [r7, #0]
 80033ec:	4649      	mov	r1, r9
 80033ee:	414b      	adcs	r3, r1
 80033f0:	607b      	str	r3, [r7, #4]
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033fe:	4659      	mov	r1, fp
 8003400:	00cb      	lsls	r3, r1, #3
 8003402:	4651      	mov	r1, sl
 8003404:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003408:	4651      	mov	r1, sl
 800340a:	00ca      	lsls	r2, r1, #3
 800340c:	4610      	mov	r0, r2
 800340e:	4619      	mov	r1, r3
 8003410:	4603      	mov	r3, r0
 8003412:	4642      	mov	r2, r8
 8003414:	189b      	adds	r3, r3, r2
 8003416:	66bb      	str	r3, [r7, #104]	; 0x68
 8003418:	464b      	mov	r3, r9
 800341a:	460a      	mov	r2, r1
 800341c:	eb42 0303 	adc.w	r3, r2, r3
 8003420:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	663b      	str	r3, [r7, #96]	; 0x60
 800342c:	667a      	str	r2, [r7, #100]	; 0x64
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800343a:	4649      	mov	r1, r9
 800343c:	008b      	lsls	r3, r1, #2
 800343e:	4641      	mov	r1, r8
 8003440:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003444:	4641      	mov	r1, r8
 8003446:	008a      	lsls	r2, r1, #2
 8003448:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800344c:	f7fc fee0 	bl	8000210 <__aeabi_uldivmod>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4b0d      	ldr	r3, [pc, #52]	; (800348c <UART_SetConfig+0x4e4>)
 8003456:	fba3 1302 	umull	r1, r3, r3, r2
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	2164      	movs	r1, #100	; 0x64
 800345e:	fb01 f303 	mul.w	r3, r1, r3
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	3332      	adds	r3, #50	; 0x32
 8003468:	4a08      	ldr	r2, [pc, #32]	; (800348c <UART_SetConfig+0x4e4>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	f003 020f 	and.w	r2, r3, #15
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4422      	add	r2, r4
 800347c:	609a      	str	r2, [r3, #8]
}
 800347e:	bf00      	nop
 8003480:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003484:	46bd      	mov	sp, r7
 8003486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800348a:	bf00      	nop
 800348c:	51eb851f 	.word	0x51eb851f

08003490 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f103 0208 	add.w	r2, r3, #8
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034a8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f103 0208 	add.w	r2, r3, #8
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f103 0208 	add.w	r2, r3, #8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80034ea:	b480      	push	{r7}
 80034ec:	b085      	sub	sp, #20
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003500:	d103      	bne.n	800350a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	e00c      	b.n	8003524 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3308      	adds	r3, #8
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	e002      	b.n	8003518 <vListInsert+0x2e>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	429a      	cmp	r2, r3
 8003522:	d2f6      	bcs.n	8003512 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	601a      	str	r2, [r3, #0]
}
 8003550:	bf00      	nop
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6892      	ldr	r2, [r2, #8]
 8003572:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6852      	ldr	r2, [r2, #4]
 800357c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	429a      	cmp	r2, r3
 8003586:	d103      	bne.n	8003590 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	1e5a      	subs	r2, r3, #1
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80035ba:	2301      	movs	r3, #1
 80035bc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10a      	bne.n	80035de <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80035c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035cc:	f383 8811 	msr	BASEPRI, r3
 80035d0:	f3bf 8f6f 	isb	sy
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80035da:	bf00      	nop
 80035dc:	e7fe      	b.n	80035dc <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d05d      	beq.n	80036a0 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d059      	beq.n	80036a0 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f4:	2100      	movs	r1, #0
 80035f6:	fba3 2302 	umull	r2, r3, r3, r2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d000      	beq.n	8003600 <xQueueGenericReset+0x50>
 80035fe:	2101      	movs	r1, #1
 8003600:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003602:	2b00      	cmp	r3, #0
 8003604:	d14c      	bne.n	80036a0 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8003606:	f001 fdd7 	bl	80051b8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003612:	6939      	ldr	r1, [r7, #16]
 8003614:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003616:	fb01 f303 	mul.w	r3, r1, r3
 800361a:	441a      	add	r2, r3
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	2200      	movs	r2, #0
 8003624:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003636:	3b01      	subs	r3, #1
 8003638:	6939      	ldr	r1, [r7, #16]
 800363a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800363c:	fb01 f303 	mul.w	r3, r1, r3
 8003640:	441a      	add	r2, r3
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	22ff      	movs	r2, #255	; 0xff
 800364a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	22ff      	movs	r2, #255	; 0xff
 8003652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d114      	bne.n	8003686 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d01a      	beq.n	800369a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	3310      	adds	r3, #16
 8003668:	4618      	mov	r0, r3
 800366a:	f000 ff45 	bl	80044f8 <xTaskRemoveFromEventList>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d012      	beq.n	800369a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003674:	4b15      	ldr	r3, [pc, #84]	; (80036cc <xQueueGenericReset+0x11c>)
 8003676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	e009      	b.n	800369a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	3310      	adds	r3, #16
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff ff00 	bl	8003490 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	3324      	adds	r3, #36	; 0x24
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff fefb 	bl	8003490 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800369a:	f001 fdbd 	bl	8005218 <vPortExitCritical>
 800369e:	e001      	b.n	80036a4 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10a      	bne.n	80036c0 <xQueueGenericReset+0x110>
        __asm volatile
 80036aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ae:	f383 8811 	msr	BASEPRI, r3
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	60bb      	str	r3, [r7, #8]
    }
 80036bc:	bf00      	nop
 80036be:	e7fe      	b.n	80036be <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80036c0:	697b      	ldr	r3, [r7, #20]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	e000ed04 	.word	0xe000ed04

080036d0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	; 0x28
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	4613      	mov	r3, r2
 80036dc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d02e      	beq.n	8003746 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80036e8:	2100      	movs	r1, #0
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	fba3 2302 	umull	r2, r3, r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d000      	beq.n	80036f8 <xQueueGenericCreate+0x28>
 80036f6:	2101      	movs	r1, #1
 80036f8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d123      	bne.n	8003746 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003706:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800370a:	d81c      	bhi.n	8003746 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	fb02 f303 	mul.w	r3, r2, r3
 8003714:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	3350      	adds	r3, #80	; 0x50
 800371a:	4618      	mov	r0, r3
 800371c:	f001 fe2e 	bl	800537c <pvPortMalloc>
 8003720:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d01c      	beq.n	8003762 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	3350      	adds	r3, #80	; 0x50
 8003730:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003732:	79fa      	ldrb	r2, [r7, #7]
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f814 	bl	800376c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003744:	e00d      	b.n	8003762 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <xQueueGenericCreate+0x92>
        __asm volatile
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	613b      	str	r3, [r7, #16]
    }
 800375e:	bf00      	nop
 8003760:	e7fe      	b.n	8003760 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003762:	69fb      	ldr	r3, [r7, #28]
    }
 8003764:	4618      	mov	r0, r3
 8003766:	3720      	adds	r7, #32
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d103      	bne.n	8003788 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e002      	b.n	800378e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800379a:	2101      	movs	r1, #1
 800379c:	69b8      	ldr	r0, [r7, #24]
 800379e:	f7ff ff07 	bl	80035b0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08c      	sub	sp, #48	; 0x30
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80037c0:	2300      	movs	r3, #0
 80037c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80037c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10a      	bne.n	80037e4 <xQueueReceive+0x30>
        __asm volatile
 80037ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d2:	f383 8811 	msr	BASEPRI, r3
 80037d6:	f3bf 8f6f 	isb	sy
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	623b      	str	r3, [r7, #32]
    }
 80037e0:	bf00      	nop
 80037e2:	e7fe      	b.n	80037e2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d103      	bne.n	80037f2 <xQueueReceive+0x3e>
 80037ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <xQueueReceive+0x42>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <xQueueReceive+0x44>
 80037f6:	2300      	movs	r3, #0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <xQueueReceive+0x5e>
        __asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	61fb      	str	r3, [r7, #28]
    }
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003812:	f001 f881 	bl	8004918 <xTaskGetSchedulerState>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d102      	bne.n	8003822 <xQueueReceive+0x6e>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <xQueueReceive+0x72>
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <xQueueReceive+0x74>
 8003826:	2300      	movs	r3, #0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10a      	bne.n	8003842 <xQueueReceive+0x8e>
        __asm volatile
 800382c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003830:	f383 8811 	msr	BASEPRI, r3
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	61bb      	str	r3, [r7, #24]
    }
 800383e:	bf00      	nop
 8003840:	e7fe      	b.n	8003840 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003842:	f001 fcb9 	bl	80051b8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	2b00      	cmp	r3, #0
 8003850:	d01f      	beq.n	8003892 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003852:	68b9      	ldr	r1, [r7, #8]
 8003854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003856:	f000 f88d 	bl	8003974 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	1e5a      	subs	r2, r3, #1
 800385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003860:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00f      	beq.n	800388a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386c:	3310      	adds	r3, #16
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fe42 	bl	80044f8 <xTaskRemoveFromEventList>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d007      	beq.n	800388a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800387a:	4b3d      	ldr	r3, [pc, #244]	; (8003970 <xQueueReceive+0x1bc>)
 800387c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800388a:	f001 fcc5 	bl	8005218 <vPortExitCritical>
                return pdPASS;
 800388e:	2301      	movs	r3, #1
 8003890:	e069      	b.n	8003966 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d103      	bne.n	80038a0 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003898:	f001 fcbe 	bl	8005218 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800389c:	2300      	movs	r3, #0
 800389e:	e062      	b.n	8003966 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80038a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80038a6:	f107 0310 	add.w	r3, r7, #16
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fefa 	bl	80046a4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80038b0:	2301      	movs	r3, #1
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80038b4:	f001 fcb0 	bl	8005218 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80038b8:	f000 fb28 	bl	8003f0c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80038bc:	f001 fc7c 	bl	80051b8 <vPortEnterCritical>
 80038c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038c6:	b25b      	sxtb	r3, r3
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038cc:	d103      	bne.n	80038d6 <xQueueReceive+0x122>
 80038ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038dc:	b25b      	sxtb	r3, r3
 80038de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038e2:	d103      	bne.n	80038ec <xQueueReceive+0x138>
 80038e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038ec:	f001 fc94 	bl	8005218 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038f0:	1d3a      	adds	r2, r7, #4
 80038f2:	f107 0310 	add.w	r3, r7, #16
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fee9 	bl	80046d0 <xTaskCheckForTimeOut>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d123      	bne.n	800394c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003906:	f000 f8ad 	bl	8003a64 <prvIsQueueEmpty>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d017      	beq.n	8003940 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003912:	3324      	adds	r3, #36	; 0x24
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	4611      	mov	r1, r2
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fd83 	bl	8004424 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800391e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003920:	f000 f84e 	bl	80039c0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003924:	f000 fb00 	bl	8003f28 <xTaskResumeAll>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d189      	bne.n	8003842 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800392e:	4b10      	ldr	r3, [pc, #64]	; (8003970 <xQueueReceive+0x1bc>)
 8003930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	e780      	b.n	8003842 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003942:	f000 f83d 	bl	80039c0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003946:	f000 faef 	bl	8003f28 <xTaskResumeAll>
 800394a:	e77a      	b.n	8003842 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800394c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800394e:	f000 f837 	bl	80039c0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003952:	f000 fae9 	bl	8003f28 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003958:	f000 f884 	bl	8003a64 <prvIsQueueEmpty>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	f43f af6f 	beq.w	8003842 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003964:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003966:	4618      	mov	r0, r3
 8003968:	3730      	adds	r7, #48	; 0x30
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	e000ed04 	.word	0xe000ed04

08003974 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d018      	beq.n	80039b8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	441a      	add	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	429a      	cmp	r2, r3
 800399e:	d303      	bcc.n	80039a8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68d9      	ldr	r1, [r3, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	461a      	mov	r2, r3
 80039b2:	6838      	ldr	r0, [r7, #0]
 80039b4:	f002 f882 	bl	8005abc <memcpy>
    }
}
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80039c8:	f001 fbf6 	bl	80051b8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039d2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80039d4:	e011      	b.n	80039fa <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d012      	beq.n	8003a04 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3324      	adds	r3, #36	; 0x24
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fd88 	bl	80044f8 <xTaskRemoveFromEventList>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80039ee:	f000 fed5 	bl	800479c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80039fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	dce9      	bgt.n	80039d6 <prvUnlockQueue+0x16>
 8003a02:	e000      	b.n	8003a06 <prvUnlockQueue+0x46>
                    break;
 8003a04:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	22ff      	movs	r2, #255	; 0xff
 8003a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003a0e:	f001 fc03 	bl	8005218 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003a12:	f001 fbd1 	bl	80051b8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a1c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a1e:	e011      	b.n	8003a44 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d012      	beq.n	8003a4e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3310      	adds	r3, #16
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fd63 	bl	80044f8 <xTaskRemoveFromEventList>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003a38:	f000 feb0 	bl	800479c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003a3c:	7bbb      	ldrb	r3, [r7, #14]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	dce9      	bgt.n	8003a20 <prvUnlockQueue+0x60>
 8003a4c:	e000      	b.n	8003a50 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003a4e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	22ff      	movs	r2, #255	; 0xff
 8003a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003a58:	f001 fbde 	bl	8005218 <vPortExitCritical>
}
 8003a5c:	bf00      	nop
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003a6c:	f001 fba4 	bl	80051b8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d102      	bne.n	8003a7e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	e001      	b.n	8003a82 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003a82:	f001 fbc9 	bl	8005218 <vPortExitCritical>

    return xReturn;
 8003a86:	68fb      	ldr	r3, [r7, #12]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10a      	bne.n	8003aba <vQueueAddToRegistry+0x2a>
        __asm volatile
 8003aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	60fb      	str	r3, [r7, #12]
    }
 8003ab6:	bf00      	nop
 8003ab8:	e7fe      	b.n	8003ab8 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d024      	beq.n	8003b0a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	e01e      	b.n	8003b04 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003ac6:	4a18      	ldr	r2, [pc, #96]	; (8003b28 <vQueueAddToRegistry+0x98>)
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4413      	add	r3, r2
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d105      	bne.n	8003ae2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <vQueueAddToRegistry+0x98>)
 8003adc:	4413      	add	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
                    break;
 8003ae0:	e013      	b.n	8003b0a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10a      	bne.n	8003afe <vQueueAddToRegistry+0x6e>
 8003ae8:	4a0f      	ldr	r2, [pc, #60]	; (8003b28 <vQueueAddToRegistry+0x98>)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d104      	bne.n	8003afe <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4a0b      	ldr	r2, [pc, #44]	; (8003b28 <vQueueAddToRegistry+0x98>)
 8003afa:	4413      	add	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	3301      	adds	r3, #1
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2b07      	cmp	r3, #7
 8003b08:	d9dd      	bls.n	8003ac6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003b1c:	bf00      	nop
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	2000012c 	.word	0x2000012c

08003b2c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003b3c:	f001 fb3c 	bl	80051b8 <vPortEnterCritical>
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b46:	b25b      	sxtb	r3, r3
 8003b48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b4c:	d103      	bne.n	8003b56 <vQueueWaitForMessageRestricted+0x2a>
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b5c:	b25b      	sxtb	r3, r3
 8003b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b62:	d103      	bne.n	8003b6c <vQueueWaitForMessageRestricted+0x40>
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b6c:	f001 fb54 	bl	8005218 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d106      	bne.n	8003b86 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	3324      	adds	r3, #36	; 0x24
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	68b9      	ldr	r1, [r7, #8]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fc73 	bl	800446c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003b86:	6978      	ldr	r0, [r7, #20]
 8003b88:	f7ff ff1a 	bl	80039c0 <prvUnlockQueue>
    }
 8003b8c:	bf00      	nop
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08c      	sub	sp, #48	; 0x30
 8003b98:	af04      	add	r7, sp, #16
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f001 fbe7 	bl	800537c <pvPortMalloc>
 8003bae:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d013      	beq.n	8003bde <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bb6:	2058      	movs	r0, #88	; 0x58
 8003bb8:	f001 fbe0 	bl	800537c <pvPortMalloc>
 8003bbc:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003bc4:	2258      	movs	r2, #88	; 0x58
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	69f8      	ldr	r0, [r7, #28]
 8003bca:	f001 ff85 	bl	8005ad8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30
 8003bd4:	e005      	b.n	8003be2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003bd6:	6978      	ldr	r0, [r7, #20]
 8003bd8:	f001 fc8a 	bl	80054f0 <vPortFree>
 8003bdc:	e001      	b.n	8003be2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d013      	beq.n	8003c10 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003be8:	88fa      	ldrh	r2, [r7, #6]
 8003bea:	2300      	movs	r3, #0
 8003bec:	9303      	str	r3, [sp, #12]
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	9302      	str	r3, [sp, #8]
 8003bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf4:	9301      	str	r3, [sp, #4]
 8003bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68b9      	ldr	r1, [r7, #8]
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 f80e 	bl	8003c20 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003c04:	69f8      	ldr	r0, [r7, #28]
 8003c06:	f000 f899 	bl	8003d3c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	61bb      	str	r3, [r7, #24]
 8003c0e:	e002      	b.n	8003c16 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c14:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003c16:	69bb      	ldr	r3, [r7, #24]
    }
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3720      	adds	r7, #32
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	461a      	mov	r2, r3
 8003c38:	21a5      	movs	r1, #165	; 0xa5
 8003c3a:	f001 ff4d 	bl	8005ad8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	f023 0307 	bic.w	r3, r3, #7
 8003c56:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <prvInitialiseNewTask+0x58>
        __asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	617b      	str	r3, [r7, #20]
    }
 8003c74:	bf00      	nop
 8003c76:	e7fe      	b.n	8003c76 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d01e      	beq.n	8003cbc <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
 8003c82:	e012      	b.n	8003caa <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	4413      	add	r3, r2
 8003c8a:	7819      	ldrb	r1, [r3, #0]
 8003c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	4413      	add	r3, r2
 8003c92:	3334      	adds	r3, #52	; 0x34
 8003c94:	460a      	mov	r2, r1
 8003c96:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d006      	beq.n	8003cb2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	61fb      	str	r3, [r7, #28]
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	2b09      	cmp	r3, #9
 8003cae:	d9e9      	bls.n	8003c84 <prvInitialiseNewTask+0x64>
 8003cb0:	e000      	b.n	8003cb4 <prvInitialiseNewTask+0x94>
            {
                break;
 8003cb2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d90a      	bls.n	8003cd8 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	613b      	str	r3, [r7, #16]
    }
 8003cd4:	bf00      	nop
 8003cd6:	e7fe      	b.n	8003cd6 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d901      	bls.n	8003ce2 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003cde:	2304      	movs	r3, #4
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ce6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cec:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff fbec 	bl	80034d0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	3318      	adds	r3, #24
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fbe7 	bl	80034d0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d06:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0a:	f1c3 0205 	rsb	r2, r3, #5
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d10:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	68f9      	ldr	r1, [r7, #12]
 8003d1c:	69b8      	ldr	r0, [r7, #24]
 8003d1e:	f001 f91d 	bl	8004f5c <pxPortInitialiseStack>
 8003d22:	4602      	mov	r2, r0
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d32:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003d34:	bf00      	nop
 8003d36:	3720      	adds	r7, #32
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003d44:	f001 fa38 	bl	80051b8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003d48:	4b40      	ldr	r3, [pc, #256]	; (8003e4c <prvAddNewTaskToReadyList+0x110>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	4a3f      	ldr	r2, [pc, #252]	; (8003e4c <prvAddNewTaskToReadyList+0x110>)
 8003d50:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003d52:	4b3f      	ldr	r3, [pc, #252]	; (8003e50 <prvAddNewTaskToReadyList+0x114>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d109      	bne.n	8003d6e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003d5a:	4a3d      	ldr	r2, [pc, #244]	; (8003e50 <prvAddNewTaskToReadyList+0x114>)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d60:	4b3a      	ldr	r3, [pc, #232]	; (8003e4c <prvAddNewTaskToReadyList+0x110>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d110      	bne.n	8003d8a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003d68:	f000 fd3c 	bl	80047e4 <prvInitialiseTaskLists>
 8003d6c:	e00d      	b.n	8003d8a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003d6e:	4b39      	ldr	r3, [pc, #228]	; (8003e54 <prvAddNewTaskToReadyList+0x118>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d109      	bne.n	8003d8a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d76:	4b36      	ldr	r3, [pc, #216]	; (8003e50 <prvAddNewTaskToReadyList+0x114>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d802      	bhi.n	8003d8a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003d84:	4a32      	ldr	r2, [pc, #200]	; (8003e50 <prvAddNewTaskToReadyList+0x114>)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003d8a:	4b33      	ldr	r3, [pc, #204]	; (8003e58 <prvAddNewTaskToReadyList+0x11c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	4a31      	ldr	r2, [pc, #196]	; (8003e58 <prvAddNewTaskToReadyList+0x11c>)
 8003d92:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d94:	4b30      	ldr	r3, [pc, #192]	; (8003e58 <prvAddNewTaskToReadyList+0x11c>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	2201      	movs	r2, #1
 8003da2:	409a      	lsls	r2, r3
 8003da4:	4b2d      	ldr	r3, [pc, #180]	; (8003e5c <prvAddNewTaskToReadyList+0x120>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	4a2c      	ldr	r2, [pc, #176]	; (8003e5c <prvAddNewTaskToReadyList+0x120>)
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db2:	492b      	ldr	r1, [pc, #172]	; (8003e60 <prvAddNewTaskToReadyList+0x124>)
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	609a      	str	r2, [r3, #8]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	60da      	str	r2, [r3, #12]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	3204      	adds	r2, #4
 8003dda:	605a      	str	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	1d1a      	adds	r2, r3, #4
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	609a      	str	r2, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4a1b      	ldr	r2, [pc, #108]	; (8003e60 <prvAddNewTaskToReadyList+0x124>)
 8003df2:	441a      	add	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	615a      	str	r2, [r3, #20]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfc:	4918      	ldr	r1, [pc, #96]	; (8003e60 <prvAddNewTaskToReadyList+0x124>)
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	1c59      	adds	r1, r3, #1
 8003e0c:	4814      	ldr	r0, [pc, #80]	; (8003e60 <prvAddNewTaskToReadyList+0x124>)
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4403      	add	r3, r0
 8003e18:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003e1a:	f001 f9fd 	bl	8005218 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003e1e:	4b0d      	ldr	r3, [pc, #52]	; (8003e54 <prvAddNewTaskToReadyList+0x118>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00e      	beq.n	8003e44 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e26:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <prvAddNewTaskToReadyList+0x114>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d207      	bcs.n	8003e44 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003e34:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <prvAddNewTaskToReadyList+0x128>)
 8003e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e44:	bf00      	nop
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20000244 	.word	0x20000244
 8003e50:	2000016c 	.word	0x2000016c
 8003e54:	20000250 	.word	0x20000250
 8003e58:	20000260 	.word	0x20000260
 8003e5c:	2000024c 	.word	0x2000024c
 8003e60:	20000170 	.word	0x20000170
 8003e64:	e000ed04 	.word	0xe000ed04

08003e68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003e6e:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <vTaskStartScheduler+0x88>)
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	2300      	movs	r3, #0
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	2300      	movs	r3, #0
 8003e78:	2282      	movs	r2, #130	; 0x82
 8003e7a:	491e      	ldr	r1, [pc, #120]	; (8003ef4 <vTaskStartScheduler+0x8c>)
 8003e7c:	481e      	ldr	r0, [pc, #120]	; (8003ef8 <vTaskStartScheduler+0x90>)
 8003e7e:	f7ff fe89 	bl	8003b94 <xTaskCreate>
 8003e82:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d102      	bne.n	8003e90 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8003e8a:	f000 fde3 	bl	8004a54 <xTimerCreateTimerTask>
 8003e8e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d116      	bne.n	8003ec4 <vTaskStartScheduler+0x5c>
        __asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	60bb      	str	r3, [r7, #8]
    }
 8003ea8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003eaa:	4b14      	ldr	r3, [pc, #80]	; (8003efc <vTaskStartScheduler+0x94>)
 8003eac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003eb0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003eb2:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <vTaskStartScheduler+0x98>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003eb8:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <vTaskStartScheduler+0x9c>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003ebe:	f001 f8d9 	bl	8005074 <xPortStartScheduler>
 8003ec2:	e00e      	b.n	8003ee2 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eca:	d10a      	bne.n	8003ee2 <vTaskStartScheduler+0x7a>
        __asm volatile
 8003ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed0:	f383 8811 	msr	BASEPRI, r3
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	607b      	str	r3, [r7, #4]
    }
 8003ede:	bf00      	nop
 8003ee0:	e7fe      	b.n	8003ee0 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003ee2:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <vTaskStartScheduler+0xa0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
}
 8003ee6:	bf00      	nop
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000268 	.word	0x20000268
 8003ef4:	08006548 	.word	0x08006548
 8003ef8:	080047b5 	.word	0x080047b5
 8003efc:	20000264 	.word	0x20000264
 8003f00:	20000250 	.word	0x20000250
 8003f04:	20000248 	.word	0x20000248
 8003f08:	20000010 	.word	0x20000010

08003f0c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003f10:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <vTaskSuspendAll+0x18>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3301      	adds	r3, #1
 8003f16:	4a03      	ldr	r2, [pc, #12]	; (8003f24 <vTaskSuspendAll+0x18>)
 8003f18:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003f1a:	bf00      	nop
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	2000026c 	.word	0x2000026c

08003f28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003f36:	4b71      	ldr	r3, [pc, #452]	; (80040fc <xTaskResumeAll+0x1d4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10a      	bne.n	8003f54 <xTaskResumeAll+0x2c>
        __asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	607b      	str	r3, [r7, #4]
    }
 8003f50:	bf00      	nop
 8003f52:	e7fe      	b.n	8003f52 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003f54:	f001 f930 	bl	80051b8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003f58:	4b68      	ldr	r3, [pc, #416]	; (80040fc <xTaskResumeAll+0x1d4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	4a67      	ldr	r2, [pc, #412]	; (80040fc <xTaskResumeAll+0x1d4>)
 8003f60:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f62:	4b66      	ldr	r3, [pc, #408]	; (80040fc <xTaskResumeAll+0x1d4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f040 80c0 	bne.w	80040ec <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f6c:	4b64      	ldr	r3, [pc, #400]	; (8004100 <xTaskResumeAll+0x1d8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80bb 	beq.w	80040ec <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f76:	e08a      	b.n	800408e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f78:	4b62      	ldr	r3, [pc, #392]	; (8004104 <xTaskResumeAll+0x1dc>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	6a12      	ldr	r2, [r2, #32]
 8003f8e:	609a      	str	r2, [r3, #8]
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	69d2      	ldr	r2, [r2, #28]
 8003f98:	605a      	str	r2, [r3, #4]
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3318      	adds	r3, #24
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d103      	bne.n	8003fae <xTaskResumeAll+0x86>
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	6a1a      	ldr	r2, [r3, #32]
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	629a      	str	r2, [r3, #40]	; 0x28
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	1e5a      	subs	r2, r3, #1
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	68d2      	ldr	r2, [r2, #12]
 8003fcc:	609a      	str	r2, [r3, #8]
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	6892      	ldr	r2, [r2, #8]
 8003fd6:	605a      	str	r2, [r3, #4]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d103      	bne.n	8003fec <xTaskResumeAll+0xc4>
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	605a      	str	r2, [r3, #4]
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	615a      	str	r2, [r3, #20]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	1e5a      	subs	r2, r3, #1
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	2201      	movs	r2, #1
 8004002:	409a      	lsls	r2, r3
 8004004:	4b40      	ldr	r3, [pc, #256]	; (8004108 <xTaskResumeAll+0x1e0>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4313      	orrs	r3, r2
 800400a:	4a3f      	ldr	r2, [pc, #252]	; (8004108 <xTaskResumeAll+0x1e0>)
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004012:	493e      	ldr	r1, [pc, #248]	; (800410c <xTaskResumeAll+0x1e4>)
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	3304      	adds	r3, #4
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	609a      	str	r2, [r3, #8]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	60da      	str	r2, [r3, #12]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	3204      	adds	r2, #4
 800403a:	605a      	str	r2, [r3, #4]
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	1d1a      	adds	r2, r3, #4
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4a2e      	ldr	r2, [pc, #184]	; (800410c <xTaskResumeAll+0x1e4>)
 8004052:	441a      	add	r2, r3
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	615a      	str	r2, [r3, #20]
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405c:	492b      	ldr	r1, [pc, #172]	; (800410c <xTaskResumeAll+0x1e4>)
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	1c59      	adds	r1, r3, #1
 800406c:	4827      	ldr	r0, [pc, #156]	; (800410c <xTaskResumeAll+0x1e4>)
 800406e:	4613      	mov	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4403      	add	r3, r0
 8004078:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407e:	4b24      	ldr	r3, [pc, #144]	; (8004110 <xTaskResumeAll+0x1e8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	429a      	cmp	r2, r3
 8004086:	d302      	bcc.n	800408e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8004088:	4b22      	ldr	r3, [pc, #136]	; (8004114 <xTaskResumeAll+0x1ec>)
 800408a:	2201      	movs	r2, #1
 800408c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800408e:	4b1d      	ldr	r3, [pc, #116]	; (8004104 <xTaskResumeAll+0x1dc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	f47f af70 	bne.w	8003f78 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800409e:	f000 fc1f 	bl	80048e0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80040a2:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <xTaskResumeAll+0x1f0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d010      	beq.n	80040d0 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80040ae:	f000 f847 	bl	8004140 <xTaskIncrementTick>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80040b8:	4b16      	ldr	r3, [pc, #88]	; (8004114 <xTaskResumeAll+0x1ec>)
 80040ba:	2201      	movs	r2, #1
 80040bc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f1      	bne.n	80040ae <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80040ca:	4b13      	ldr	r3, [pc, #76]	; (8004118 <xTaskResumeAll+0x1f0>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80040d0:	4b10      	ldr	r3, [pc, #64]	; (8004114 <xTaskResumeAll+0x1ec>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d009      	beq.n	80040ec <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80040d8:	2301      	movs	r3, #1
 80040da:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80040dc:	4b0f      	ldr	r3, [pc, #60]	; (800411c <xTaskResumeAll+0x1f4>)
 80040de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80040ec:	f001 f894 	bl	8005218 <vPortExitCritical>

    return xAlreadyYielded;
 80040f0:	69bb      	ldr	r3, [r7, #24]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3720      	adds	r7, #32
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	2000026c 	.word	0x2000026c
 8004100:	20000244 	.word	0x20000244
 8004104:	20000204 	.word	0x20000204
 8004108:	2000024c 	.word	0x2000024c
 800410c:	20000170 	.word	0x20000170
 8004110:	2000016c 	.word	0x2000016c
 8004114:	20000258 	.word	0x20000258
 8004118:	20000254 	.word	0x20000254
 800411c:	e000ed04 	.word	0xe000ed04

08004120 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004126:	4b05      	ldr	r3, [pc, #20]	; (800413c <xTaskGetTickCount+0x1c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800412c:	687b      	ldr	r3, [r7, #4]
}
 800412e:	4618      	mov	r0, r3
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20000248 	.word	0x20000248

08004140 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08a      	sub	sp, #40	; 0x28
 8004144:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004146:	2300      	movs	r3, #0
 8004148:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800414a:	4b7d      	ldr	r3, [pc, #500]	; (8004340 <xTaskIncrementTick+0x200>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	f040 80ec 	bne.w	800432c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004154:	4b7b      	ldr	r3, [pc, #492]	; (8004344 <xTaskIncrementTick+0x204>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3301      	adds	r3, #1
 800415a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800415c:	4a79      	ldr	r2, [pc, #484]	; (8004344 <xTaskIncrementTick+0x204>)
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d120      	bne.n	80041aa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004168:	4b77      	ldr	r3, [pc, #476]	; (8004348 <xTaskIncrementTick+0x208>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <xTaskIncrementTick+0x48>
        __asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	607b      	str	r3, [r7, #4]
    }
 8004184:	bf00      	nop
 8004186:	e7fe      	b.n	8004186 <xTaskIncrementTick+0x46>
 8004188:	4b6f      	ldr	r3, [pc, #444]	; (8004348 <xTaskIncrementTick+0x208>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	61fb      	str	r3, [r7, #28]
 800418e:	4b6f      	ldr	r3, [pc, #444]	; (800434c <xTaskIncrementTick+0x20c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a6d      	ldr	r2, [pc, #436]	; (8004348 <xTaskIncrementTick+0x208>)
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	4a6d      	ldr	r2, [pc, #436]	; (800434c <xTaskIncrementTick+0x20c>)
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	4b6c      	ldr	r3, [pc, #432]	; (8004350 <xTaskIncrementTick+0x210>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3301      	adds	r3, #1
 80041a2:	4a6b      	ldr	r2, [pc, #428]	; (8004350 <xTaskIncrementTick+0x210>)
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	f000 fb9b 	bl	80048e0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80041aa:	4b6a      	ldr	r3, [pc, #424]	; (8004354 <xTaskIncrementTick+0x214>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6a3a      	ldr	r2, [r7, #32]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	f0c0 80a6 	bcc.w	8004302 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041b6:	4b64      	ldr	r3, [pc, #400]	; (8004348 <xTaskIncrementTick+0x208>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d104      	bne.n	80041ca <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041c0:	4b64      	ldr	r3, [pc, #400]	; (8004354 <xTaskIncrementTick+0x214>)
 80041c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041c6:	601a      	str	r2, [r3, #0]
                    break;
 80041c8:	e09b      	b.n	8004302 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ca:	4b5f      	ldr	r3, [pc, #380]	; (8004348 <xTaskIncrementTick+0x208>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80041da:	6a3a      	ldr	r2, [r7, #32]
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d203      	bcs.n	80041ea <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80041e2:	4a5c      	ldr	r2, [pc, #368]	; (8004354 <xTaskIncrementTick+0x214>)
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80041e8:	e08b      	b.n	8004302 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	68d2      	ldr	r2, [r2, #12]
 80041f8:	609a      	str	r2, [r3, #8]
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	6892      	ldr	r2, [r2, #8]
 8004202:	605a      	str	r2, [r3, #4]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	3304      	adds	r3, #4
 800420c:	429a      	cmp	r2, r3
 800420e:	d103      	bne.n	8004218 <xTaskIncrementTick+0xd8>
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	605a      	str	r2, [r3, #4]
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2200      	movs	r2, #0
 800421c:	615a      	str	r2, [r3, #20]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	1e5a      	subs	r2, r3, #1
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01e      	beq.n	800426e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	6a12      	ldr	r2, [r2, #32]
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	69d2      	ldr	r2, [r2, #28]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	3318      	adds	r3, #24
 8004252:	429a      	cmp	r2, r3
 8004254:	d103      	bne.n	800425e <xTaskIncrementTick+0x11e>
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	6a1a      	ldr	r2, [r3, #32]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2200      	movs	r2, #0
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	1e5a      	subs	r2, r3, #1
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	2201      	movs	r2, #1
 8004274:	409a      	lsls	r2, r3
 8004276:	4b38      	ldr	r3, [pc, #224]	; (8004358 <xTaskIncrementTick+0x218>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4313      	orrs	r3, r2
 800427c:	4a36      	ldr	r2, [pc, #216]	; (8004358 <xTaskIncrementTick+0x218>)
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004284:	4935      	ldr	r1, [pc, #212]	; (800435c <xTaskIncrementTick+0x21c>)
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	3304      	adds	r3, #4
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	609a      	str	r2, [r3, #8]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	60da      	str	r2, [r3, #12]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	3204      	adds	r2, #4
 80042ac:	605a      	str	r2, [r3, #4]
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	1d1a      	adds	r2, r3, #4
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	609a      	str	r2, [r3, #8]
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4a26      	ldr	r2, [pc, #152]	; (800435c <xTaskIncrementTick+0x21c>)
 80042c4:	441a      	add	r2, r3
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	615a      	str	r2, [r3, #20]
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ce:	4923      	ldr	r1, [pc, #140]	; (800435c <xTaskIncrementTick+0x21c>)
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	1c59      	adds	r1, r3, #1
 80042de:	481f      	ldr	r0, [pc, #124]	; (800435c <xTaskIncrementTick+0x21c>)
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4403      	add	r3, r0
 80042ea:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f0:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <xTaskIncrementTick+0x220>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	429a      	cmp	r2, r3
 80042f8:	f67f af5d 	bls.w	80041b6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80042fc:	2301      	movs	r3, #1
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004300:	e759      	b.n	80041b6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004302:	4b17      	ldr	r3, [pc, #92]	; (8004360 <xTaskIncrementTick+0x220>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004308:	4914      	ldr	r1, [pc, #80]	; (800435c <xTaskIncrementTick+0x21c>)
 800430a:	4613      	mov	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	440b      	add	r3, r1
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d901      	bls.n	800431e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800431a:	2301      	movs	r3, #1
 800431c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800431e:	4b11      	ldr	r3, [pc, #68]	; (8004364 <xTaskIncrementTick+0x224>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d007      	beq.n	8004336 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8004326:	2301      	movs	r3, #1
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
 800432a:	e004      	b.n	8004336 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800432c:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <xTaskIncrementTick+0x228>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3301      	adds	r3, #1
 8004332:	4a0d      	ldr	r2, [pc, #52]	; (8004368 <xTaskIncrementTick+0x228>)
 8004334:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004338:	4618      	mov	r0, r3
 800433a:	3728      	adds	r7, #40	; 0x28
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	2000026c 	.word	0x2000026c
 8004344:	20000248 	.word	0x20000248
 8004348:	200001fc 	.word	0x200001fc
 800434c:	20000200 	.word	0x20000200
 8004350:	2000025c 	.word	0x2000025c
 8004354:	20000264 	.word	0x20000264
 8004358:	2000024c 	.word	0x2000024c
 800435c:	20000170 	.word	0x20000170
 8004360:	2000016c 	.word	0x2000016c
 8004364:	20000258 	.word	0x20000258
 8004368:	20000254 	.word	0x20000254

0800436c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004372:	4b27      	ldr	r3, [pc, #156]	; (8004410 <vTaskSwitchContext+0xa4>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800437a:	4b26      	ldr	r3, [pc, #152]	; (8004414 <vTaskSwitchContext+0xa8>)
 800437c:	2201      	movs	r2, #1
 800437e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8004380:	e03f      	b.n	8004402 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8004382:	4b24      	ldr	r3, [pc, #144]	; (8004414 <vTaskSwitchContext+0xa8>)
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004388:	4b23      	ldr	r3, [pc, #140]	; (8004418 <vTaskSwitchContext+0xac>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	fab3 f383 	clz	r3, r3
 8004394:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004396:	7afb      	ldrb	r3, [r7, #11]
 8004398:	f1c3 031f 	rsb	r3, r3, #31
 800439c:	617b      	str	r3, [r7, #20]
 800439e:	491f      	ldr	r1, [pc, #124]	; (800441c <vTaskSwitchContext+0xb0>)
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	4613      	mov	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10a      	bne.n	80043c8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	607b      	str	r3, [r7, #4]
    }
 80043c4:	bf00      	nop
 80043c6:	e7fe      	b.n	80043c6 <vTaskSwitchContext+0x5a>
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4a12      	ldr	r2, [pc, #72]	; (800441c <vTaskSwitchContext+0xb0>)
 80043d4:	4413      	add	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	605a      	str	r2, [r3, #4]
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	3308      	adds	r3, #8
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d104      	bne.n	80043f8 <vTaskSwitchContext+0x8c>
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	605a      	str	r2, [r3, #4]
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	4a08      	ldr	r2, [pc, #32]	; (8004420 <vTaskSwitchContext+0xb4>)
 8004400:	6013      	str	r3, [r2, #0]
}
 8004402:	bf00      	nop
 8004404:	371c      	adds	r7, #28
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	2000026c 	.word	0x2000026c
 8004414:	20000258 	.word	0x20000258
 8004418:	2000024c 	.word	0x2000024c
 800441c:	20000170 	.word	0x20000170
 8004420:	2000016c 	.word	0x2000016c

08004424 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10a      	bne.n	800444a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	60fb      	str	r3, [r7, #12]
    }
 8004446:	bf00      	nop
 8004448:	e7fe      	b.n	8004448 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800444a:	4b07      	ldr	r3, [pc, #28]	; (8004468 <vTaskPlaceOnEventList+0x44>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3318      	adds	r3, #24
 8004450:	4619      	mov	r1, r3
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7ff f849 	bl	80034ea <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004458:	2101      	movs	r1, #1
 800445a:	6838      	ldr	r0, [r7, #0]
 800445c:	f000 fa7a 	bl	8004954 <prvAddCurrentTaskToDelayedList>
}
 8004460:	bf00      	nop
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	2000016c 	.word	0x2000016c

0800446c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	613b      	str	r3, [r7, #16]
    }
 8004490:	bf00      	nop
 8004492:	e7fe      	b.n	8004492 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	4b16      	ldr	r3, [pc, #88]	; (80044f4 <vTaskPlaceOnEventListRestricted+0x88>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	61da      	str	r2, [r3, #28]
 80044a2:	4b14      	ldr	r3, [pc, #80]	; (80044f4 <vTaskPlaceOnEventListRestricted+0x88>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	6892      	ldr	r2, [r2, #8]
 80044aa:	621a      	str	r2, [r3, #32]
 80044ac:	4b11      	ldr	r3, [pc, #68]	; (80044f4 <vTaskPlaceOnEventListRestricted+0x88>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	3218      	adds	r2, #24
 80044b6:	605a      	str	r2, [r3, #4]
 80044b8:	4b0e      	ldr	r3, [pc, #56]	; (80044f4 <vTaskPlaceOnEventListRestricted+0x88>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f103 0218 	add.w	r2, r3, #24
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	609a      	str	r2, [r3, #8]
 80044c4:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <vTaskPlaceOnEventListRestricted+0x88>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	629a      	str	r2, [r3, #40]	; 0x28
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80044dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044e0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	68b8      	ldr	r0, [r7, #8]
 80044e6:	f000 fa35 	bl	8004954 <prvAddCurrentTaskToDelayedList>
    }
 80044ea:	bf00      	nop
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	2000016c 	.word	0x2000016c

080044f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80044f8:	b480      	push	{r7}
 80044fa:	b08b      	sub	sp, #44	; 0x2c
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10a      	bne.n	8004524 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	60fb      	str	r3, [r7, #12]
    }
 8004520:	bf00      	nop
 8004522:	e7fe      	b.n	8004522 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	6a3a      	ldr	r2, [r7, #32]
 8004530:	6a12      	ldr	r2, [r2, #32]
 8004532:	609a      	str	r2, [r3, #8]
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	6a3a      	ldr	r2, [r7, #32]
 800453a:	69d2      	ldr	r2, [r2, #28]
 800453c:	605a      	str	r2, [r3, #4]
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	3318      	adds	r3, #24
 8004546:	429a      	cmp	r2, r3
 8004548:	d103      	bne.n	8004552 <xTaskRemoveFromEventList+0x5a>
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	6a1a      	ldr	r2, [r3, #32]
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	2200      	movs	r2, #0
 8004556:	629a      	str	r2, [r3, #40]	; 0x28
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	1e5a      	subs	r2, r3, #1
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004562:	4b4a      	ldr	r3, [pc, #296]	; (800468c <xTaskRemoveFromEventList+0x194>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d15e      	bne.n	8004628 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	6a3a      	ldr	r2, [r7, #32]
 8004576:	68d2      	ldr	r2, [r2, #12]
 8004578:	609a      	str	r2, [r3, #8]
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	6a3a      	ldr	r2, [r7, #32]
 8004580:	6892      	ldr	r2, [r2, #8]
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	3304      	adds	r3, #4
 800458c:	429a      	cmp	r2, r3
 800458e:	d103      	bne.n	8004598 <xTaskRemoveFromEventList+0xa0>
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	605a      	str	r2, [r3, #4]
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	2200      	movs	r2, #0
 800459c:	615a      	str	r2, [r3, #20]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	1e5a      	subs	r2, r3, #1
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	2201      	movs	r2, #1
 80045ae:	409a      	lsls	r2, r3
 80045b0:	4b37      	ldr	r3, [pc, #220]	; (8004690 <xTaskRemoveFromEventList+0x198>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	4a36      	ldr	r2, [pc, #216]	; (8004690 <xTaskRemoveFromEventList+0x198>)
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045be:	4935      	ldr	r1, [pc, #212]	; (8004694 <xTaskRemoveFromEventList+0x19c>)
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	3304      	adds	r3, #4
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	613b      	str	r3, [r7, #16]
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	609a      	str	r2, [r3, #8]
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	60da      	str	r2, [r3, #12]
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	6a3a      	ldr	r2, [r7, #32]
 80045e4:	3204      	adds	r2, #4
 80045e6:	605a      	str	r2, [r3, #4]
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	1d1a      	adds	r2, r3, #4
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	609a      	str	r2, [r3, #8]
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4a25      	ldr	r2, [pc, #148]	; (8004694 <xTaskRemoveFromEventList+0x19c>)
 80045fe:	441a      	add	r2, r3
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	615a      	str	r2, [r3, #20]
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004608:	4922      	ldr	r1, [pc, #136]	; (8004694 <xTaskRemoveFromEventList+0x19c>)
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	1c59      	adds	r1, r3, #1
 8004618:	481e      	ldr	r0, [pc, #120]	; (8004694 <xTaskRemoveFromEventList+0x19c>)
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4403      	add	r3, r0
 8004624:	6019      	str	r1, [r3, #0]
 8004626:	e01b      	b.n	8004660 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004628:	4b1b      	ldr	r3, [pc, #108]	; (8004698 <xTaskRemoveFromEventList+0x1a0>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	61da      	str	r2, [r3, #28]
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	621a      	str	r2, [r3, #32]
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	6a3a      	ldr	r2, [r7, #32]
 8004642:	3218      	adds	r2, #24
 8004644:	605a      	str	r2, [r3, #4]
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	f103 0218 	add.w	r2, r3, #24
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	609a      	str	r2, [r3, #8]
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	4a11      	ldr	r2, [pc, #68]	; (8004698 <xTaskRemoveFromEventList+0x1a0>)
 8004654:	629a      	str	r2, [r3, #40]	; 0x28
 8004656:	4b10      	ldr	r3, [pc, #64]	; (8004698 <xTaskRemoveFromEventList+0x1a0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3301      	adds	r3, #1
 800465c:	4a0e      	ldr	r2, [pc, #56]	; (8004698 <xTaskRemoveFromEventList+0x1a0>)
 800465e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004664:	4b0d      	ldr	r3, [pc, #52]	; (800469c <xTaskRemoveFromEventList+0x1a4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	429a      	cmp	r2, r3
 800466c:	d905      	bls.n	800467a <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800466e:	2301      	movs	r3, #1
 8004670:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004672:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <xTaskRemoveFromEventList+0x1a8>)
 8004674:	2201      	movs	r2, #1
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	e001      	b.n	800467e <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800467a:	2300      	movs	r3, #0
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004680:	4618      	mov	r0, r3
 8004682:	372c      	adds	r7, #44	; 0x2c
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	2000026c 	.word	0x2000026c
 8004690:	2000024c 	.word	0x2000024c
 8004694:	20000170 	.word	0x20000170
 8004698:	20000204 	.word	0x20000204
 800469c:	2000016c 	.word	0x2000016c
 80046a0:	20000258 	.word	0x20000258

080046a4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <vTaskInternalSetTimeOutState+0x24>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80046b4:	4b05      	ldr	r3, [pc, #20]	; (80046cc <vTaskInternalSetTimeOutState+0x28>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	605a      	str	r2, [r3, #4]
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	2000025c 	.word	0x2000025c
 80046cc:	20000248 	.word	0x20000248

080046d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10a      	bne.n	80046f6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	613b      	str	r3, [r7, #16]
    }
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10a      	bne.n	8004712 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	60fb      	str	r3, [r7, #12]
    }
 800470e:	bf00      	nop
 8004710:	e7fe      	b.n	8004710 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004712:	f000 fd51 	bl	80051b8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004716:	4b1f      	ldr	r3, [pc, #124]	; (8004794 <xTaskCheckForTimeOut+0xc4>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800472e:	d102      	bne.n	8004736 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004730:	2300      	movs	r3, #0
 8004732:	61fb      	str	r3, [r7, #28]
 8004734:	e026      	b.n	8004784 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	4b17      	ldr	r3, [pc, #92]	; (8004798 <xTaskCheckForTimeOut+0xc8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d00a      	beq.n	8004758 <xTaskCheckForTimeOut+0x88>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	429a      	cmp	r2, r3
 800474a:	d305      	bcc.n	8004758 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800474c:	2301      	movs	r3, #1
 800474e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	e015      	b.n	8004784 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	429a      	cmp	r2, r3
 8004760:	d20b      	bcs.n	800477a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	1ad2      	subs	r2, r2, r3
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff ff98 	bl	80046a4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]
 8004778:	e004      	b.n	8004784 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004780:	2301      	movs	r3, #1
 8004782:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004784:	f000 fd48 	bl	8005218 <vPortExitCritical>

    return xReturn;
 8004788:	69fb      	ldr	r3, [r7, #28]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3720      	adds	r7, #32
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20000248 	.word	0x20000248
 8004798:	2000025c 	.word	0x2000025c

0800479c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80047a0:	4b03      	ldr	r3, [pc, #12]	; (80047b0 <vTaskMissedYield+0x14>)
 80047a2:	2201      	movs	r2, #1
 80047a4:	601a      	str	r2, [r3, #0]
}
 80047a6:	bf00      	nop
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	20000258 	.word	0x20000258

080047b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80047bc:	f000 f852 	bl	8004864 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047c0:	4b06      	ldr	r3, [pc, #24]	; (80047dc <prvIdleTask+0x28>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d9f9      	bls.n	80047bc <prvIdleTask+0x8>
            {
                taskYIELD();
 80047c8:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <prvIdleTask+0x2c>)
 80047ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80047d8:	e7f0      	b.n	80047bc <prvIdleTask+0x8>
 80047da:	bf00      	nop
 80047dc:	20000170 	.word	0x20000170
 80047e0:	e000ed04 	.word	0xe000ed04

080047e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047ea:	2300      	movs	r3, #0
 80047ec:	607b      	str	r3, [r7, #4]
 80047ee:	e00c      	b.n	800480a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	4613      	mov	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4a12      	ldr	r2, [pc, #72]	; (8004844 <prvInitialiseTaskLists+0x60>)
 80047fc:	4413      	add	r3, r2
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fe fe46 	bl	8003490 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3301      	adds	r3, #1
 8004808:	607b      	str	r3, [r7, #4]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b04      	cmp	r3, #4
 800480e:	d9ef      	bls.n	80047f0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004810:	480d      	ldr	r0, [pc, #52]	; (8004848 <prvInitialiseTaskLists+0x64>)
 8004812:	f7fe fe3d 	bl	8003490 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004816:	480d      	ldr	r0, [pc, #52]	; (800484c <prvInitialiseTaskLists+0x68>)
 8004818:	f7fe fe3a 	bl	8003490 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800481c:	480c      	ldr	r0, [pc, #48]	; (8004850 <prvInitialiseTaskLists+0x6c>)
 800481e:	f7fe fe37 	bl	8003490 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004822:	480c      	ldr	r0, [pc, #48]	; (8004854 <prvInitialiseTaskLists+0x70>)
 8004824:	f7fe fe34 	bl	8003490 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004828:	480b      	ldr	r0, [pc, #44]	; (8004858 <prvInitialiseTaskLists+0x74>)
 800482a:	f7fe fe31 	bl	8003490 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800482e:	4b0b      	ldr	r3, [pc, #44]	; (800485c <prvInitialiseTaskLists+0x78>)
 8004830:	4a05      	ldr	r2, [pc, #20]	; (8004848 <prvInitialiseTaskLists+0x64>)
 8004832:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004834:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <prvInitialiseTaskLists+0x7c>)
 8004836:	4a05      	ldr	r2, [pc, #20]	; (800484c <prvInitialiseTaskLists+0x68>)
 8004838:	601a      	str	r2, [r3, #0]
}
 800483a:	bf00      	nop
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000170 	.word	0x20000170
 8004848:	200001d4 	.word	0x200001d4
 800484c:	200001e8 	.word	0x200001e8
 8004850:	20000204 	.word	0x20000204
 8004854:	20000218 	.word	0x20000218
 8004858:	20000230 	.word	0x20000230
 800485c:	200001fc 	.word	0x200001fc
 8004860:	20000200 	.word	0x20000200

08004864 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800486a:	e019      	b.n	80048a0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800486c:	f000 fca4 	bl	80051b8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004870:	4b10      	ldr	r3, [pc, #64]	; (80048b4 <prvCheckTasksWaitingTermination+0x50>)
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3304      	adds	r3, #4
 800487c:	4618      	mov	r0, r3
 800487e:	f7fe fe6d 	bl	800355c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8004882:	4b0d      	ldr	r3, [pc, #52]	; (80048b8 <prvCheckTasksWaitingTermination+0x54>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3b01      	subs	r3, #1
 8004888:	4a0b      	ldr	r2, [pc, #44]	; (80048b8 <prvCheckTasksWaitingTermination+0x54>)
 800488a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <prvCheckTasksWaitingTermination+0x58>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3b01      	subs	r3, #1
 8004892:	4a0a      	ldr	r2, [pc, #40]	; (80048bc <prvCheckTasksWaitingTermination+0x58>)
 8004894:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8004896:	f000 fcbf 	bl	8005218 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f810 	bl	80048c0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048a0:	4b06      	ldr	r3, [pc, #24]	; (80048bc <prvCheckTasksWaitingTermination+0x58>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1e1      	bne.n	800486c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80048a8:	bf00      	nop
 80048aa:	bf00      	nop
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000218 	.word	0x20000218
 80048b8:	20000244 	.word	0x20000244
 80048bc:	2000022c 	.word	0x2000022c

080048c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fe0f 	bl	80054f0 <vPortFree>
            vPortFree( pxTCB );
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fe0c 	bl	80054f0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80048d8:	bf00      	nop
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048e4:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <prvResetNextTaskUnblockTime+0x30>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d104      	bne.n	80048f8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80048ee:	4b09      	ldr	r3, [pc, #36]	; (8004914 <prvResetNextTaskUnblockTime+0x34>)
 80048f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048f4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80048f6:	e005      	b.n	8004904 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80048f8:	4b05      	ldr	r3, [pc, #20]	; (8004910 <prvResetNextTaskUnblockTime+0x30>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a04      	ldr	r2, [pc, #16]	; (8004914 <prvResetNextTaskUnblockTime+0x34>)
 8004902:	6013      	str	r3, [r2, #0]
}
 8004904:	bf00      	nop
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	200001fc 	.word	0x200001fc
 8004914:	20000264 	.word	0x20000264

08004918 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800491e:	4b0b      	ldr	r3, [pc, #44]	; (800494c <xTaskGetSchedulerState+0x34>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d102      	bne.n	800492c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004926:	2301      	movs	r3, #1
 8004928:	607b      	str	r3, [r7, #4]
 800492a:	e008      	b.n	800493e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800492c:	4b08      	ldr	r3, [pc, #32]	; (8004950 <xTaskGetSchedulerState+0x38>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d102      	bne.n	800493a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004934:	2302      	movs	r3, #2
 8004936:	607b      	str	r3, [r7, #4]
 8004938:	e001      	b.n	800493e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800493a:	2300      	movs	r3, #0
 800493c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800493e:	687b      	ldr	r3, [r7, #4]
    }
 8004940:	4618      	mov	r0, r3
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	20000250 	.word	0x20000250
 8004950:	2000026c 	.word	0x2000026c

08004954 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800495e:	4b36      	ldr	r3, [pc, #216]	; (8004a38 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004964:	4b35      	ldr	r3, [pc, #212]	; (8004a3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3304      	adds	r3, #4
 800496a:	4618      	mov	r0, r3
 800496c:	f7fe fdf6 	bl	800355c <uxListRemove>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10b      	bne.n	800498e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004976:	4b31      	ldr	r3, [pc, #196]	; (8004a3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	2201      	movs	r2, #1
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	43da      	mvns	r2, r3
 8004984:	4b2e      	ldr	r3, [pc, #184]	; (8004a40 <prvAddCurrentTaskToDelayedList+0xec>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4013      	ands	r3, r2
 800498a:	4a2d      	ldr	r2, [pc, #180]	; (8004a40 <prvAddCurrentTaskToDelayedList+0xec>)
 800498c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004994:	d124      	bne.n	80049e0 <prvAddCurrentTaskToDelayedList+0x8c>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d021      	beq.n	80049e0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800499c:	4b29      	ldr	r3, [pc, #164]	; (8004a44 <prvAddCurrentTaskToDelayedList+0xf0>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	4b26      	ldr	r3, [pc, #152]	; (8004a3c <prvAddCurrentTaskToDelayedList+0xe8>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	609a      	str	r2, [r3, #8]
 80049aa:	4b24      	ldr	r3, [pc, #144]	; (8004a3c <prvAddCurrentTaskToDelayedList+0xe8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	6892      	ldr	r2, [r2, #8]
 80049b2:	60da      	str	r2, [r3, #12]
 80049b4:	4b21      	ldr	r3, [pc, #132]	; (8004a3c <prvAddCurrentTaskToDelayedList+0xe8>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	3204      	adds	r2, #4
 80049be:	605a      	str	r2, [r3, #4]
 80049c0:	4b1e      	ldr	r3, [pc, #120]	; (8004a3c <prvAddCurrentTaskToDelayedList+0xe8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	1d1a      	adds	r2, r3, #4
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	609a      	str	r2, [r3, #8]
 80049ca:	4b1c      	ldr	r3, [pc, #112]	; (8004a3c <prvAddCurrentTaskToDelayedList+0xe8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a1d      	ldr	r2, [pc, #116]	; (8004a44 <prvAddCurrentTaskToDelayedList+0xf0>)
 80049d0:	615a      	str	r2, [r3, #20]
 80049d2:	4b1c      	ldr	r3, [pc, #112]	; (8004a44 <prvAddCurrentTaskToDelayedList+0xf0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3301      	adds	r3, #1
 80049d8:	4a1a      	ldr	r2, [pc, #104]	; (8004a44 <prvAddCurrentTaskToDelayedList+0xf0>)
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80049de:	e026      	b.n	8004a2e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4413      	add	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049e8:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <prvAddCurrentTaskToDelayedList+0xe8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d209      	bcs.n	8004a0c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049f8:	4b13      	ldr	r3, [pc, #76]	; (8004a48 <prvAddCurrentTaskToDelayedList+0xf4>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4b0f      	ldr	r3, [pc, #60]	; (8004a3c <prvAddCurrentTaskToDelayedList+0xe8>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3304      	adds	r3, #4
 8004a02:	4619      	mov	r1, r3
 8004a04:	4610      	mov	r0, r2
 8004a06:	f7fe fd70 	bl	80034ea <vListInsert>
}
 8004a0a:	e010      	b.n	8004a2e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a0c:	4b0f      	ldr	r3, [pc, #60]	; (8004a4c <prvAddCurrentTaskToDelayedList+0xf8>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3304      	adds	r3, #4
 8004a16:	4619      	mov	r1, r3
 8004a18:	4610      	mov	r0, r2
 8004a1a:	f7fe fd66 	bl	80034ea <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004a1e:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d202      	bcs.n	8004a2e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004a28:	4a09      	ldr	r2, [pc, #36]	; (8004a50 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6013      	str	r3, [r2, #0]
}
 8004a2e:	bf00      	nop
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000248 	.word	0x20000248
 8004a3c:	2000016c 	.word	0x2000016c
 8004a40:	2000024c 	.word	0x2000024c
 8004a44:	20000230 	.word	0x20000230
 8004a48:	20000200 	.word	0x20000200
 8004a4c:	200001fc 	.word	0x200001fc
 8004a50:	20000264 	.word	0x20000264

08004a54 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004a5e:	f000 fa47 	bl	8004ef0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004a62:	4b11      	ldr	r3, [pc, #68]	; (8004aa8 <xTimerCreateTimerTask+0x54>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00b      	beq.n	8004a82 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004a6a:	4b10      	ldr	r3, [pc, #64]	; (8004aac <xTimerCreateTimerTask+0x58>)
 8004a6c:	9301      	str	r3, [sp, #4]
 8004a6e:	2302      	movs	r3, #2
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	2300      	movs	r3, #0
 8004a74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a78:	490d      	ldr	r1, [pc, #52]	; (8004ab0 <xTimerCreateTimerTask+0x5c>)
 8004a7a:	480e      	ldr	r0, [pc, #56]	; (8004ab4 <xTimerCreateTimerTask+0x60>)
 8004a7c:	f7ff f88a 	bl	8003b94 <xTaskCreate>
 8004a80:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10a      	bne.n	8004a9e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	603b      	str	r3, [r7, #0]
    }
 8004a9a:	bf00      	nop
 8004a9c:	e7fe      	b.n	8004a9c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004a9e:	687b      	ldr	r3, [r7, #4]
    }
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	200002a0 	.word	0x200002a0
 8004aac:	200002a4 	.word	0x200002a4
 8004ab0:	08006550 	.word	0x08006550
 8004ab4:	08004b5d 	.word	0x08004b5d

08004ab8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004ac4:	e008      	b.n	8004ad8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	4413      	add	r3, r2
 8004ace:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	699a      	ldr	r2, [r3, #24]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	18d1      	adds	r1, r2, r3
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 f8dd 	bl	8004ca4 <prvInsertTimerInActiveList>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1ea      	bne.n	8004ac6 <prvReloadTimer+0xe>
        }
    }
 8004af0:	bf00      	nop
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b06:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <prvProcessExpiredTimer+0x5c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3304      	adds	r3, #4
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fe fd21 	bl	800355c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f7ff ffc3 	bl	8004ab8 <prvReloadTimer>
 8004b32:	e008      	b.n	8004b46 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b3a:	f023 0301 	bic.w	r3, r3, #1
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	4798      	blx	r3
    }
 8004b4e:	bf00      	nop
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	20000298 	.word	0x20000298

08004b5c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b64:	f107 0308 	add.w	r3, r7, #8
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 f857 	bl	8004c1c <prvGetNextExpireTime>
 8004b6e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4619      	mov	r1, r3
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 f803 	bl	8004b80 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004b7a:	f000 f8d5 	bl	8004d28 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b7e:	e7f1      	b.n	8004b64 <prvTimerTask+0x8>

08004b80 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004b8a:	f7ff f9bf 	bl	8003f0c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b8e:	f107 0308 	add.w	r3, r7, #8
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 f866 	bl	8004c64 <prvSampleTimeNow>
 8004b98:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d130      	bne.n	8004c02 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10a      	bne.n	8004bbc <prvProcessTimerOrBlockTask+0x3c>
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d806      	bhi.n	8004bbc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004bae:	f7ff f9bb 	bl	8003f28 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004bb2:	68f9      	ldr	r1, [r7, #12]
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff ffa1 	bl	8004afc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004bba:	e024      	b.n	8004c06 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d008      	beq.n	8004bd4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004bc2:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <prvProcessTimerOrBlockTask+0x90>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <prvProcessTimerOrBlockTask+0x50>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e000      	b.n	8004bd2 <prvProcessTimerOrBlockTask+0x52>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004bd4:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <prvProcessTimerOrBlockTask+0x94>)
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	4619      	mov	r1, r3
 8004be2:	f7fe ffa3 	bl	8003b2c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004be6:	f7ff f99f 	bl	8003f28 <xTaskResumeAll>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10a      	bne.n	8004c06 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004bf0:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <prvProcessTimerOrBlockTask+0x98>)
 8004bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	f3bf 8f6f 	isb	sy
    }
 8004c00:	e001      	b.n	8004c06 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004c02:	f7ff f991 	bl	8003f28 <xTaskResumeAll>
    }
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	2000029c 	.word	0x2000029c
 8004c14:	200002a0 	.word	0x200002a0
 8004c18:	e000ed04 	.word	0xe000ed04

08004c1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c24:	4b0e      	ldr	r3, [pc, #56]	; (8004c60 <prvGetNextExpireTime+0x44>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <prvGetNextExpireTime+0x16>
 8004c2e:	2201      	movs	r2, #1
 8004c30:	e000      	b.n	8004c34 <prvGetNextExpireTime+0x18>
 8004c32:	2200      	movs	r2, #0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d105      	bne.n	8004c4c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c40:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <prvGetNextExpireTime+0x44>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	e001      	b.n	8004c50 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004c50:	68fb      	ldr	r3, [r7, #12]
    }
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	20000298 	.word	0x20000298

08004c64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004c6c:	f7ff fa58 	bl	8004120 <xTaskGetTickCount>
 8004c70:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004c72:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <prvSampleTimeNow+0x3c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d205      	bcs.n	8004c88 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004c7c:	f000 f912 	bl	8004ea4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	e002      	b.n	8004c8e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004c8e:	4a04      	ldr	r2, [pc, #16]	; (8004ca0 <prvSampleTimeNow+0x3c>)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004c94:	68fb      	ldr	r3, [r7, #12]
    }
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	200002a8 	.word	0x200002a8

08004ca4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d812      	bhi.n	8004cf0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	1ad2      	subs	r2, r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d302      	bcc.n	8004cde <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	e01b      	b.n	8004d16 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004cde:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <prvInsertTimerInActiveList+0x7c>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4610      	mov	r0, r2
 8004cea:	f7fe fbfe 	bl	80034ea <vListInsert>
 8004cee:	e012      	b.n	8004d16 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d206      	bcs.n	8004d06 <prvInsertTimerInActiveList+0x62>
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d302      	bcc.n	8004d06 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004d00:	2301      	movs	r3, #1
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	e007      	b.n	8004d16 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d06:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <prvInsertTimerInActiveList+0x80>)
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4610      	mov	r0, r2
 8004d12:	f7fe fbea 	bl	80034ea <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004d16:	697b      	ldr	r3, [r7, #20]
    }
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	2000029c 	.word	0x2000029c
 8004d24:	20000298 	.word	0x20000298

08004d28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d2e:	e0a6      	b.n	8004e7e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f2c0 80a2 	blt.w	8004e7c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d004      	beq.n	8004d4e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	3304      	adds	r3, #4
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fe fc07 	bl	800355c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d4e:	1d3b      	adds	r3, r7, #4
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff ff87 	bl	8004c64 <prvSampleTimeNow>
 8004d56:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	f200 808e 	bhi.w	8004e7e <prvProcessReceivedCommands+0x156>
 8004d62:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <prvProcessReceivedCommands+0x40>)
 8004d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d68:	08004d8d 	.word	0x08004d8d
 8004d6c:	08004d8d 	.word	0x08004d8d
 8004d70:	08004df5 	.word	0x08004df5
 8004d74:	08004e09 	.word	0x08004e09
 8004d78:	08004e53 	.word	0x08004e53
 8004d7c:	08004d8d 	.word	0x08004d8d
 8004d80:	08004d8d 	.word	0x08004d8d
 8004d84:	08004df5 	.word	0x08004df5
 8004d88:	08004e09 	.word	0x08004e09
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	18d1      	adds	r1, r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	69f8      	ldr	r0, [r7, #28]
 8004dac:	f7ff ff7a 	bl	8004ca4 <prvInsertTimerInActiveList>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d063      	beq.n	8004e7e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d009      	beq.n	8004dd8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	4413      	add	r3, r2
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	4619      	mov	r1, r3
 8004dd0:	69f8      	ldr	r0, [r7, #28]
 8004dd2:	f7ff fe71 	bl	8004ab8 <prvReloadTimer>
 8004dd6:	e008      	b.n	8004dea <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	69f8      	ldr	r0, [r7, #28]
 8004df0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004df2:	e044      	b.n	8004e7e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dfa:	f023 0301 	bic.w	r3, r3, #1
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004e06:	e03a      	b.n	8004e7e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10a      	bne.n	8004e3e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	617b      	str	r3, [r7, #20]
    }
 8004e3a:	bf00      	nop
 8004e3c:	e7fe      	b.n	8004e3c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	18d1      	adds	r1, r2, r3
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	69f8      	ldr	r0, [r7, #28]
 8004e4c:	f7ff ff2a 	bl	8004ca4 <prvInsertTimerInActiveList>
                        break;
 8004e50:	e015      	b.n	8004e7e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d103      	bne.n	8004e68 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8004e60:	69f8      	ldr	r0, [r7, #28]
 8004e62:	f000 fb45 	bl	80054f0 <vPortFree>
 8004e66:	e00a      	b.n	8004e7e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e6e:	f023 0301 	bic.w	r3, r3, #1
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004e7a:	e000      	b.n	8004e7e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004e7c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e7e:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <prvProcessReceivedCommands+0x178>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f107 0108 	add.w	r1, r7, #8
 8004e86:	2200      	movs	r2, #0
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fe fc93 	bl	80037b4 <xQueueReceive>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f47f af4d 	bne.w	8004d30 <prvProcessReceivedCommands+0x8>
        }
    }
 8004e96:	bf00      	nop
 8004e98:	bf00      	nop
 8004e9a:	3720      	adds	r7, #32
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	200002a0 	.word	0x200002a0

08004ea4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004eaa:	e009      	b.n	8004ec0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004eac:	4b0e      	ldr	r3, [pc, #56]	; (8004ee8 <prvSwitchTimerLists+0x44>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004eb6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004eba:	6838      	ldr	r0, [r7, #0]
 8004ebc:	f7ff fe1e 	bl	8004afc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ec0:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <prvSwitchTimerLists+0x44>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1f0      	bne.n	8004eac <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004eca:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <prvSwitchTimerLists+0x44>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004ed0:	4b06      	ldr	r3, [pc, #24]	; (8004eec <prvSwitchTimerLists+0x48>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a04      	ldr	r2, [pc, #16]	; (8004ee8 <prvSwitchTimerLists+0x44>)
 8004ed6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004ed8:	4a04      	ldr	r2, [pc, #16]	; (8004eec <prvSwitchTimerLists+0x48>)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6013      	str	r3, [r2, #0]
    }
 8004ede:	bf00      	nop
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20000298 	.word	0x20000298
 8004eec:	2000029c 	.word	0x2000029c

08004ef0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004ef4:	f000 f960 	bl	80051b8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004ef8:	4b12      	ldr	r3, [pc, #72]	; (8004f44 <prvCheckForValidListAndQueue+0x54>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d11d      	bne.n	8004f3c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004f00:	4811      	ldr	r0, [pc, #68]	; (8004f48 <prvCheckForValidListAndQueue+0x58>)
 8004f02:	f7fe fac5 	bl	8003490 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004f06:	4811      	ldr	r0, [pc, #68]	; (8004f4c <prvCheckForValidListAndQueue+0x5c>)
 8004f08:	f7fe fac2 	bl	8003490 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004f0c:	4b10      	ldr	r3, [pc, #64]	; (8004f50 <prvCheckForValidListAndQueue+0x60>)
 8004f0e:	4a0e      	ldr	r2, [pc, #56]	; (8004f48 <prvCheckForValidListAndQueue+0x58>)
 8004f10:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004f12:	4b10      	ldr	r3, [pc, #64]	; (8004f54 <prvCheckForValidListAndQueue+0x64>)
 8004f14:	4a0d      	ldr	r2, [pc, #52]	; (8004f4c <prvCheckForValidListAndQueue+0x5c>)
 8004f16:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004f18:	2200      	movs	r2, #0
 8004f1a:	210c      	movs	r1, #12
 8004f1c:	200a      	movs	r0, #10
 8004f1e:	f7fe fbd7 	bl	80036d0 <xQueueGenericCreate>
 8004f22:	4603      	mov	r3, r0
 8004f24:	4a07      	ldr	r2, [pc, #28]	; (8004f44 <prvCheckForValidListAndQueue+0x54>)
 8004f26:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004f28:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <prvCheckForValidListAndQueue+0x54>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f30:	4b04      	ldr	r3, [pc, #16]	; (8004f44 <prvCheckForValidListAndQueue+0x54>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4908      	ldr	r1, [pc, #32]	; (8004f58 <prvCheckForValidListAndQueue+0x68>)
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fe fdaa 	bl	8003a90 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004f3c:	f000 f96c 	bl	8005218 <vPortExitCritical>
    }
 8004f40:	bf00      	nop
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	200002a0 	.word	0x200002a0
 8004f48:	20000270 	.word	0x20000270
 8004f4c:	20000284 	.word	0x20000284
 8004f50:	20000298 	.word	0x20000298
 8004f54:	2000029c 	.word	0x2000029c
 8004f58:	08006558 	.word	0x08006558

08004f5c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3b04      	subs	r3, #4
 8004f6c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f74:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3b04      	subs	r3, #4
 8004f7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f023 0201 	bic.w	r2, r3, #1
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3b04      	subs	r3, #4
 8004f8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004f8c:	4a0c      	ldr	r2, [pc, #48]	; (8004fc0 <pxPortInitialiseStack+0x64>)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	3b14      	subs	r3, #20
 8004f96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3b04      	subs	r3, #4
 8004fa2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f06f 0202 	mvn.w	r2, #2
 8004faa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3b20      	subs	r3, #32
 8004fb0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	08004fc5 	.word	0x08004fc5

08004fc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004fce:	4b12      	ldr	r3, [pc, #72]	; (8005018 <prvTaskExitError+0x54>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fd6:	d00a      	beq.n	8004fee <prvTaskExitError+0x2a>
        __asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	60fb      	str	r3, [r7, #12]
    }
 8004fea:	bf00      	nop
 8004fec:	e7fe      	b.n	8004fec <prvTaskExitError+0x28>
        __asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	60bb      	str	r3, [r7, #8]
    }
 8005000:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005002:	bf00      	nop
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0fc      	beq.n	8005004 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800500a:	bf00      	nop
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	20000014 	.word	0x20000014
 800501c:	00000000 	.word	0x00000000

08005020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005020:	4b07      	ldr	r3, [pc, #28]	; (8005040 <pxCurrentTCBConst2>)
 8005022:	6819      	ldr	r1, [r3, #0]
 8005024:	6808      	ldr	r0, [r1, #0]
 8005026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800502a:	f380 8809 	msr	PSP, r0
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f04f 0000 	mov.w	r0, #0
 8005036:	f380 8811 	msr	BASEPRI, r0
 800503a:	4770      	bx	lr
 800503c:	f3af 8000 	nop.w

08005040 <pxCurrentTCBConst2>:
 8005040:	2000016c 	.word	0x2000016c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop

08005048 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005048:	4808      	ldr	r0, [pc, #32]	; (800506c <prvPortStartFirstTask+0x24>)
 800504a:	6800      	ldr	r0, [r0, #0]
 800504c:	6800      	ldr	r0, [r0, #0]
 800504e:	f380 8808 	msr	MSP, r0
 8005052:	f04f 0000 	mov.w	r0, #0
 8005056:	f380 8814 	msr	CONTROL, r0
 800505a:	b662      	cpsie	i
 800505c:	b661      	cpsie	f
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	df00      	svc	0
 8005068:	bf00      	nop
 800506a:	0000      	.short	0x0000
 800506c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005070:	bf00      	nop
 8005072:	bf00      	nop

08005074 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800507a:	4b46      	ldr	r3, [pc, #280]	; (8005194 <xPortStartScheduler+0x120>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a46      	ldr	r2, [pc, #280]	; (8005198 <xPortStartScheduler+0x124>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d10a      	bne.n	800509a <xPortStartScheduler+0x26>
        __asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	613b      	str	r3, [r7, #16]
    }
 8005096:	bf00      	nop
 8005098:	e7fe      	b.n	8005098 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800509a:	4b3e      	ldr	r3, [pc, #248]	; (8005194 <xPortStartScheduler+0x120>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a3f      	ldr	r2, [pc, #252]	; (800519c <xPortStartScheduler+0x128>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d10a      	bne.n	80050ba <xPortStartScheduler+0x46>
        __asm volatile
 80050a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	60fb      	str	r3, [r7, #12]
    }
 80050b6:	bf00      	nop
 80050b8:	e7fe      	b.n	80050b8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050ba:	4b39      	ldr	r3, [pc, #228]	; (80051a0 <xPortStartScheduler+0x12c>)
 80050bc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	22ff      	movs	r2, #255	; 0xff
 80050ca:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050d4:	78fb      	ldrb	r3, [r7, #3]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	4b31      	ldr	r3, [pc, #196]	; (80051a4 <xPortStartScheduler+0x130>)
 80050e0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050e2:	4b31      	ldr	r3, [pc, #196]	; (80051a8 <xPortStartScheduler+0x134>)
 80050e4:	2207      	movs	r2, #7
 80050e6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050e8:	e009      	b.n	80050fe <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80050ea:	4b2f      	ldr	r3, [pc, #188]	; (80051a8 <xPortStartScheduler+0x134>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	4a2d      	ldr	r2, [pc, #180]	; (80051a8 <xPortStartScheduler+0x134>)
 80050f2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050f4:	78fb      	ldrb	r3, [r7, #3]
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005106:	2b80      	cmp	r3, #128	; 0x80
 8005108:	d0ef      	beq.n	80050ea <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800510a:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <xPortStartScheduler+0x134>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f1c3 0307 	rsb	r3, r3, #7
 8005112:	2b04      	cmp	r3, #4
 8005114:	d00a      	beq.n	800512c <xPortStartScheduler+0xb8>
        __asm volatile
 8005116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511a:	f383 8811 	msr	BASEPRI, r3
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	60bb      	str	r3, [r7, #8]
    }
 8005128:	bf00      	nop
 800512a:	e7fe      	b.n	800512a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800512c:	4b1e      	ldr	r3, [pc, #120]	; (80051a8 <xPortStartScheduler+0x134>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	021b      	lsls	r3, r3, #8
 8005132:	4a1d      	ldr	r2, [pc, #116]	; (80051a8 <xPortStartScheduler+0x134>)
 8005134:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005136:	4b1c      	ldr	r3, [pc, #112]	; (80051a8 <xPortStartScheduler+0x134>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800513e:	4a1a      	ldr	r2, [pc, #104]	; (80051a8 <xPortStartScheduler+0x134>)
 8005140:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	b2da      	uxtb	r2, r3
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800514a:	4b18      	ldr	r3, [pc, #96]	; (80051ac <xPortStartScheduler+0x138>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a17      	ldr	r2, [pc, #92]	; (80051ac <xPortStartScheduler+0x138>)
 8005150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005154:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005156:	4b15      	ldr	r3, [pc, #84]	; (80051ac <xPortStartScheduler+0x138>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a14      	ldr	r2, [pc, #80]	; (80051ac <xPortStartScheduler+0x138>)
 800515c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005160:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005162:	f000 f8db 	bl	800531c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005166:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <xPortStartScheduler+0x13c>)
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800516c:	f000 f8fa 	bl	8005364 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005170:	4b10      	ldr	r3, [pc, #64]	; (80051b4 <xPortStartScheduler+0x140>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a0f      	ldr	r2, [pc, #60]	; (80051b4 <xPortStartScheduler+0x140>)
 8005176:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800517a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800517c:	f7ff ff64 	bl	8005048 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005180:	f7ff f8f4 	bl	800436c <vTaskSwitchContext>
    prvTaskExitError();
 8005184:	f7ff ff1e 	bl	8004fc4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	e000ed00 	.word	0xe000ed00
 8005198:	410fc271 	.word	0x410fc271
 800519c:	410fc270 	.word	0x410fc270
 80051a0:	e000e400 	.word	0xe000e400
 80051a4:	200002ac 	.word	0x200002ac
 80051a8:	200002b0 	.word	0x200002b0
 80051ac:	e000ed20 	.word	0xe000ed20
 80051b0:	20000014 	.word	0x20000014
 80051b4:	e000ef34 	.word	0xe000ef34

080051b8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
        __asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	607b      	str	r3, [r7, #4]
    }
 80051d0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80051d2:	4b0f      	ldr	r3, [pc, #60]	; (8005210 <vPortEnterCritical+0x58>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3301      	adds	r3, #1
 80051d8:	4a0d      	ldr	r2, [pc, #52]	; (8005210 <vPortEnterCritical+0x58>)
 80051da:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80051dc:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <vPortEnterCritical+0x58>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d10f      	bne.n	8005204 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051e4:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <vPortEnterCritical+0x5c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <vPortEnterCritical+0x4c>
        __asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	603b      	str	r3, [r7, #0]
    }
 8005200:	bf00      	nop
 8005202:	e7fe      	b.n	8005202 <vPortEnterCritical+0x4a>
    }
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	20000014 	.word	0x20000014
 8005214:	e000ed04 	.word	0xe000ed04

08005218 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800521e:	4b12      	ldr	r3, [pc, #72]	; (8005268 <vPortExitCritical+0x50>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10a      	bne.n	800523c <vPortExitCritical+0x24>
        __asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	607b      	str	r3, [r7, #4]
    }
 8005238:	bf00      	nop
 800523a:	e7fe      	b.n	800523a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800523c:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <vPortExitCritical+0x50>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3b01      	subs	r3, #1
 8005242:	4a09      	ldr	r2, [pc, #36]	; (8005268 <vPortExitCritical+0x50>)
 8005244:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005246:	4b08      	ldr	r3, [pc, #32]	; (8005268 <vPortExitCritical+0x50>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d105      	bne.n	800525a <vPortExitCritical+0x42>
 800524e:	2300      	movs	r3, #0
 8005250:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005258:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	20000014 	.word	0x20000014
 800526c:	00000000 	.word	0x00000000

08005270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005270:	f3ef 8009 	mrs	r0, PSP
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	4b15      	ldr	r3, [pc, #84]	; (80052d0 <pxCurrentTCBConst>)
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	f01e 0f10 	tst.w	lr, #16
 8005280:	bf08      	it	eq
 8005282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528a:	6010      	str	r0, [r2, #0]
 800528c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005294:	f380 8811 	msr	BASEPRI, r0
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f7ff f864 	bl	800436c <vTaskSwitchContext>
 80052a4:	f04f 0000 	mov.w	r0, #0
 80052a8:	f380 8811 	msr	BASEPRI, r0
 80052ac:	bc09      	pop	{r0, r3}
 80052ae:	6819      	ldr	r1, [r3, #0]
 80052b0:	6808      	ldr	r0, [r1, #0]
 80052b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b6:	f01e 0f10 	tst.w	lr, #16
 80052ba:	bf08      	it	eq
 80052bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052c0:	f380 8809 	msr	PSP, r0
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	f3af 8000 	nop.w

080052d0 <pxCurrentTCBConst>:
 80052d0:	2000016c 	.word	0x2000016c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop

080052d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
        __asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	607b      	str	r3, [r7, #4]
    }
 80052f0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80052f2:	f7fe ff25 	bl	8004140 <xTaskIncrementTick>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052fc:	4b06      	ldr	r3, [pc, #24]	; (8005318 <SysTick_Handler+0x40>)
 80052fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	2300      	movs	r3, #0
 8005306:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f383 8811 	msr	BASEPRI, r3
    }
 800530e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005310:	bf00      	nop
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	e000ed04 	.word	0xe000ed04

0800531c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <vPortSetupTimerInterrupt+0x34>)
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005326:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <vPortSetupTimerInterrupt+0x38>)
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800532c:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <vPortSetupTimerInterrupt+0x3c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a0a      	ldr	r2, [pc, #40]	; (800535c <vPortSetupTimerInterrupt+0x40>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	099b      	lsrs	r3, r3, #6
 8005338:	4a09      	ldr	r2, [pc, #36]	; (8005360 <vPortSetupTimerInterrupt+0x44>)
 800533a:	3b01      	subs	r3, #1
 800533c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800533e:	4b04      	ldr	r3, [pc, #16]	; (8005350 <vPortSetupTimerInterrupt+0x34>)
 8005340:	2207      	movs	r2, #7
 8005342:	601a      	str	r2, [r3, #0]
}
 8005344:	bf00      	nop
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	e000e010 	.word	0xe000e010
 8005354:	e000e018 	.word	0xe000e018
 8005358:	20000004 	.word	0x20000004
 800535c:	10624dd3 	.word	0x10624dd3
 8005360:	e000e014 	.word	0xe000e014

08005364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005364:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005374 <vPortEnableVFP+0x10>
 8005368:	6801      	ldr	r1, [r0, #0]
 800536a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800536e:	6001      	str	r1, [r0, #0]
 8005370:	4770      	bx	lr
 8005372:	0000      	.short	0x0000
 8005374:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005378:	bf00      	nop
 800537a:	bf00      	nop

0800537c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08a      	sub	sp, #40	; 0x28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005384:	2300      	movs	r3, #0
 8005386:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8005388:	f7fe fdc0 	bl	8003f0c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800538c:	4b53      	ldr	r3, [pc, #332]	; (80054dc <pvPortMalloc+0x160>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005394:	f000 f908 	bl	80055a8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d012      	beq.n	80053c4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800539e:	2208      	movs	r2, #8
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	3308      	adds	r3, #8
 80053aa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	43db      	mvns	r3, r3
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d804      	bhi.n	80053c0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	4413      	add	r3, r2
 80053bc:	607b      	str	r3, [r7, #4]
 80053be:	e001      	b.n	80053c4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80053c0:	2300      	movs	r3, #0
 80053c2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	db70      	blt.n	80054ac <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d06d      	beq.n	80054ac <pvPortMalloc+0x130>
 80053d0:	4b43      	ldr	r3, [pc, #268]	; (80054e0 <pvPortMalloc+0x164>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d868      	bhi.n	80054ac <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80053da:	4b42      	ldr	r3, [pc, #264]	; (80054e4 <pvPortMalloc+0x168>)
 80053dc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80053de:	4b41      	ldr	r3, [pc, #260]	; (80054e4 <pvPortMalloc+0x168>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053e4:	e004      	b.n	80053f0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d903      	bls.n	8005402 <pvPortMalloc+0x86>
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f1      	bne.n	80053e6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005402:	4b36      	ldr	r3, [pc, #216]	; (80054dc <pvPortMalloc+0x160>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005408:	429a      	cmp	r2, r3
 800540a:	d04f      	beq.n	80054ac <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2208      	movs	r2, #8
 8005412:	4413      	add	r3, r2
 8005414:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	1ad2      	subs	r2, r2, r3
 8005426:	2308      	movs	r3, #8
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	429a      	cmp	r2, r3
 800542c:	d91f      	bls.n	800546e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800542e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4413      	add	r3, r2
 8005434:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <pvPortMalloc+0xda>
        __asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	613b      	str	r3, [r7, #16]
    }
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	1ad2      	subs	r2, r2, r3
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005468:	6978      	ldr	r0, [r7, #20]
 800546a:	f000 f8f9 	bl	8005660 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800546e:	4b1c      	ldr	r3, [pc, #112]	; (80054e0 <pvPortMalloc+0x164>)
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	4a19      	ldr	r2, [pc, #100]	; (80054e0 <pvPortMalloc+0x164>)
 800547a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800547c:	4b18      	ldr	r3, [pc, #96]	; (80054e0 <pvPortMalloc+0x164>)
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	4b19      	ldr	r3, [pc, #100]	; (80054e8 <pvPortMalloc+0x16c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d203      	bcs.n	8005490 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005488:	4b15      	ldr	r3, [pc, #84]	; (80054e0 <pvPortMalloc+0x164>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a16      	ldr	r2, [pc, #88]	; (80054e8 <pvPortMalloc+0x16c>)
 800548e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80054a2:	4b12      	ldr	r3, [pc, #72]	; (80054ec <pvPortMalloc+0x170>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3301      	adds	r3, #1
 80054a8:	4a10      	ldr	r2, [pc, #64]	; (80054ec <pvPortMalloc+0x170>)
 80054aa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80054ac:	f7fe fd3c 	bl	8003f28 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00a      	beq.n	80054d0 <pvPortMalloc+0x154>
        __asm volatile
 80054ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	60fb      	str	r3, [r7, #12]
    }
 80054cc:	bf00      	nop
 80054ce:	e7fe      	b.n	80054ce <pvPortMalloc+0x152>
    return pvReturn;
 80054d0:	69fb      	ldr	r3, [r7, #28]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3728      	adds	r7, #40	; 0x28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20012ebc 	.word	0x20012ebc
 80054e0:	20012ec0 	.word	0x20012ec0
 80054e4:	20012eb4 	.word	0x20012eb4
 80054e8:	20012ec4 	.word	0x20012ec4
 80054ec:	20012ec8 	.word	0x20012ec8

080054f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d049      	beq.n	8005596 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005502:	2308      	movs	r3, #8
 8005504:	425b      	negs	r3, r3
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4413      	add	r3, r2
 800550a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	db0a      	blt.n	800552e <vPortFree+0x3e>
        __asm volatile
 8005518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551c:	f383 8811 	msr	BASEPRI, r3
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	60fb      	str	r3, [r7, #12]
    }
 800552a:	bf00      	nop
 800552c:	e7fe      	b.n	800552c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <vPortFree+0x5c>
        __asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	60bb      	str	r3, [r7, #8]
    }
 8005548:	bf00      	nop
 800554a:	e7fe      	b.n	800554a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	0fdb      	lsrs	r3, r3, #31
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01c      	beq.n	8005596 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d118      	bne.n	8005596 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8005570:	f7fe fccc 	bl	8003f0c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	4b09      	ldr	r3, [pc, #36]	; (80055a0 <vPortFree+0xb0>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4413      	add	r3, r2
 800557e:	4a08      	ldr	r2, [pc, #32]	; (80055a0 <vPortFree+0xb0>)
 8005580:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005582:	6938      	ldr	r0, [r7, #16]
 8005584:	f000 f86c 	bl	8005660 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005588:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <vPortFree+0xb4>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3301      	adds	r3, #1
 800558e:	4a05      	ldr	r2, [pc, #20]	; (80055a4 <vPortFree+0xb4>)
 8005590:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005592:	f7fe fcc9 	bl	8003f28 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005596:	bf00      	nop
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	20012ec0 	.word	0x20012ec0
 80055a4:	20012ecc 	.word	0x20012ecc

080055a8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055ae:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80055b2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80055b4:	4b25      	ldr	r3, [pc, #148]	; (800564c <prvHeapInit+0xa4>)
 80055b6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00c      	beq.n	80055dc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	3307      	adds	r3, #7
 80055c6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0307 	bic.w	r3, r3, #7
 80055ce:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	4a1d      	ldr	r2, [pc, #116]	; (800564c <prvHeapInit+0xa4>)
 80055d8:	4413      	add	r3, r2
 80055da:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055e0:	4a1b      	ldr	r2, [pc, #108]	; (8005650 <prvHeapInit+0xa8>)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80055e6:	4b1a      	ldr	r3, [pc, #104]	; (8005650 <prvHeapInit+0xa8>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	4413      	add	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80055f4:	2208      	movs	r2, #8
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	1a9b      	subs	r3, r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0307 	bic.w	r3, r3, #7
 8005602:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4a13      	ldr	r2, [pc, #76]	; (8005654 <prvHeapInit+0xac>)
 8005608:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800560a:	4b12      	ldr	r3, [pc, #72]	; (8005654 <prvHeapInit+0xac>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2200      	movs	r2, #0
 8005610:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005612:	4b10      	ldr	r3, [pc, #64]	; (8005654 <prvHeapInit+0xac>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	1ad2      	subs	r2, r2, r3
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005628:	4b0a      	ldr	r3, [pc, #40]	; (8005654 <prvHeapInit+0xac>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	4a08      	ldr	r2, [pc, #32]	; (8005658 <prvHeapInit+0xb0>)
 8005636:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	4a07      	ldr	r2, [pc, #28]	; (800565c <prvHeapInit+0xb4>)
 800563e:	6013      	str	r3, [r2, #0]
}
 8005640:	bf00      	nop
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	200002b4 	.word	0x200002b4
 8005650:	20012eb4 	.word	0x20012eb4
 8005654:	20012ebc 	.word	0x20012ebc
 8005658:	20012ec4 	.word	0x20012ec4
 800565c:	20012ec0 	.word	0x20012ec0

08005660 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005668:	4b28      	ldr	r3, [pc, #160]	; (800570c <prvInsertBlockIntoFreeList+0xac>)
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	e002      	b.n	8005674 <prvInsertBlockIntoFreeList+0x14>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	429a      	cmp	r2, r3
 800567c:	d8f7      	bhi.n	800566e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	4413      	add	r3, r2
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	429a      	cmp	r2, r3
 800568e:	d108      	bne.n	80056a2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	441a      	add	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	441a      	add	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d118      	bne.n	80056e8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	4b15      	ldr	r3, [pc, #84]	; (8005710 <prvInsertBlockIntoFreeList+0xb0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d00d      	beq.n	80056de <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	441a      	add	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	e008      	b.n	80056f0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056de:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <prvInsertBlockIntoFreeList+0xb0>)
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	e003      	b.n	80056f0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d002      	beq.n	80056fe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80056fe:	bf00      	nop
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	20012eb4 	.word	0x20012eb4
 8005710:	20012ebc 	.word	0x20012ebc

08005714 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800571a:	4b26      	ldr	r3, [pc, #152]	; (80057b4 <_DoInit+0xa0>)
 800571c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800571e:	22a8      	movs	r2, #168	; 0xa8
 8005720:	2100      	movs	r1, #0
 8005722:	6838      	ldr	r0, [r7, #0]
 8005724:	f000 f9d8 	bl	8005ad8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2203      	movs	r2, #3
 800572c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2203      	movs	r2, #3
 8005732:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	4a20      	ldr	r2, [pc, #128]	; (80057b8 <_DoInit+0xa4>)
 8005738:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	4a1f      	ldr	r2, [pc, #124]	; (80057bc <_DoInit+0xa8>)
 800573e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005746:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2200      	movs	r2, #0
 800574c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2200      	movs	r2, #0
 8005752:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2200      	movs	r2, #0
 8005758:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	4a16      	ldr	r2, [pc, #88]	; (80057b8 <_DoInit+0xa4>)
 800575e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	4a17      	ldr	r2, [pc, #92]	; (80057c0 <_DoInit+0xac>)
 8005764:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2210      	movs	r2, #16
 800576a:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2200      	movs	r2, #0
 8005770:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2200      	movs	r2, #0
 8005776:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2200      	movs	r2, #0
 800577c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800577e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005782:	2300      	movs	r3, #0
 8005784:	607b      	str	r3, [r7, #4]
 8005786:	e00c      	b.n	80057a2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f1c3 030f 	rsb	r3, r3, #15
 800578e:	4a0d      	ldr	r2, [pc, #52]	; (80057c4 <_DoInit+0xb0>)
 8005790:	5cd1      	ldrb	r1, [r2, r3]
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4413      	add	r3, r2
 8005798:	460a      	mov	r2, r1
 800579a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3301      	adds	r3, #1
 80057a0:	607b      	str	r3, [r7, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b0f      	cmp	r3, #15
 80057a6:	d9ef      	bls.n	8005788 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80057a8:	f3bf 8f5f 	dmb	sy
}
 80057ac:	bf00      	nop
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	20012ed0 	.word	0x20012ed0
 80057b8:	08006560 	.word	0x08006560
 80057bc:	20012f78 	.word	0x20012f78
 80057c0:	20013378 	.word	0x20013378
 80057c4:	08006584 	.word	0x08006584

080057c8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08a      	sub	sp, #40	; 0x28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80057d4:	2300      	movs	r3, #0
 80057d6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d905      	bls.n	80057f8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
 80057f6:	e007      	b.n	8005808 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	69b9      	ldr	r1, [r7, #24]
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	1acb      	subs	r3, r1, r3
 8005802:	4413      	add	r3, r2
 8005804:	3b01      	subs	r3, #1
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005812:	4293      	cmp	r3, r2
 8005814:	bf28      	it	cs
 8005816:	4613      	movcs	r3, r2
 8005818:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800581a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4293      	cmp	r3, r2
 8005820:	bf28      	it	cs
 8005822:	4613      	movcs	r3, r2
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	4413      	add	r3, r2
 800582e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005832:	68b9      	ldr	r1, [r7, #8]
 8005834:	6978      	ldr	r0, [r7, #20]
 8005836:	f000 f941 	bl	8005abc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800583a:	6a3a      	ldr	r2, [r7, #32]
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	4413      	add	r3, r2
 8005840:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	4413      	add	r3, r2
 8005848:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	4413      	add	r3, r2
 8005858:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	69fa      	ldr	r2, [r7, #28]
 8005860:	429a      	cmp	r2, r3
 8005862:	d101      	bne.n	8005868 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005864:	2300      	movs	r3, #0
 8005866:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005868:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1b2      	bne.n	80057de <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005878:	6a3b      	ldr	r3, [r7, #32]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3728      	adds	r7, #40	; 0x28
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005882:	b580      	push	{r7, lr}
 8005884:	b088      	sub	sp, #32
 8005886:	af00      	add	r7, sp, #0
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d911      	bls.n	80058ca <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	4413      	add	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	6938      	ldr	r0, [r7, #16]
 80058b6:	f000 f901 	bl	8005abc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80058ba:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80058be:	69fa      	ldr	r2, [r7, #28]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	441a      	add	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80058c8:	e01f      	b.n	800590a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	4413      	add	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	68b9      	ldr	r1, [r7, #8]
 80058dc:	6938      	ldr	r0, [r7, #16]
 80058de:	f000 f8ed 	bl	8005abc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	4413      	add	r3, r2
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	4619      	mov	r1, r3
 80058fa:	6938      	ldr	r0, [r7, #16]
 80058fc:	f000 f8de 	bl	8005abc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005900:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	60da      	str	r2, [r3, #12]
}
 800590a:	bf00      	nop
 800590c:	3720      	adds	r7, #32
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005912:	b480      	push	{r7}
 8005914:	b087      	sub	sp, #28
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	429a      	cmp	r2, r3
 800592c:	d808      	bhi.n	8005940 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	1ad2      	subs	r2, r2, r3
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	4413      	add	r3, r2
 800593a:	3b01      	subs	r3, #1
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	e004      	b.n	800594a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	3b01      	subs	r3, #1
 8005948:	617b      	str	r3, [r7, #20]
  }
  return r;
 800594a:	697b      	ldr	r3, [r7, #20]
}
 800594c:	4618      	mov	r0, r3
 800594e:	371c      	adds	r7, #28
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	4613      	mov	r3, r2
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	4413      	add	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	4a1f      	ldr	r2, [pc, #124]	; (80059f4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005976:	4413      	add	r3, r2
 8005978:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d029      	beq.n	80059d6 <SEGGER_RTT_WriteNoLock+0x7e>
 8005982:	2b02      	cmp	r3, #2
 8005984:	d82e      	bhi.n	80059e4 <SEGGER_RTT_WriteNoLock+0x8c>
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <SEGGER_RTT_WriteNoLock+0x38>
 800598a:	2b01      	cmp	r3, #1
 800598c:	d013      	beq.n	80059b6 <SEGGER_RTT_WriteNoLock+0x5e>
 800598e:	e029      	b.n	80059e4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005990:	6978      	ldr	r0, [r7, #20]
 8005992:	f7ff ffbe 	bl	8005912 <_GetAvailWriteSpace>
 8005996:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	429a      	cmp	r2, r3
 800599e:	d202      	bcs.n	80059a6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80059a0:	2300      	movs	r3, #0
 80059a2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80059a4:	e021      	b.n	80059ea <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	69b9      	ldr	r1, [r7, #24]
 80059ae:	6978      	ldr	r0, [r7, #20]
 80059b0:	f7ff ff67 	bl	8005882 <_WriteNoCheck>
    break;
 80059b4:	e019      	b.n	80059ea <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80059b6:	6978      	ldr	r0, [r7, #20]
 80059b8:	f7ff ffab 	bl	8005912 <_GetAvailWriteSpace>
 80059bc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	4293      	cmp	r3, r2
 80059c4:	bf28      	it	cs
 80059c6:	4613      	movcs	r3, r2
 80059c8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80059ca:	69fa      	ldr	r2, [r7, #28]
 80059cc:	69b9      	ldr	r1, [r7, #24]
 80059ce:	6978      	ldr	r0, [r7, #20]
 80059d0:	f7ff ff57 	bl	8005882 <_WriteNoCheck>
    break;
 80059d4:	e009      	b.n	80059ea <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	69b9      	ldr	r1, [r7, #24]
 80059da:	6978      	ldr	r0, [r7, #20]
 80059dc:	f7ff fef4 	bl	80057c8 <_WriteBlocking>
 80059e0:	61f8      	str	r0, [r7, #28]
    break;
 80059e2:	e002      	b.n	80059ea <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80059e4:	2300      	movs	r3, #0
 80059e6:	61fb      	str	r3, [r7, #28]
    break;
 80059e8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80059ea:	69fb      	ldr	r3, [r7, #28]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3720      	adds	r7, #32
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	20012ed0 	.word	0x20012ed0

080059f8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005a04:	4b0e      	ldr	r3, [pc, #56]	; (8005a40 <SEGGER_RTT_Write+0x48>)
 8005a06:	61fb      	str	r3, [r7, #28]
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <SEGGER_RTT_Write+0x1e>
 8005a12:	f7ff fe7f 	bl	8005714 <_DoInit>
  SEGGER_RTT_LOCK();
 8005a16:	f3ef 8311 	mrs	r3, BASEPRI
 8005a1a:	f04f 0120 	mov.w	r1, #32
 8005a1e:	f381 8811 	msr	BASEPRI, r1
 8005a22:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f7ff ff95 	bl	8005958 <SEGGER_RTT_WriteNoLock>
 8005a2e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005a36:	697b      	ldr	r3, [r7, #20]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3720      	adds	r7, #32
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	20012ed0 	.word	0x20012ed0

08005a44 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	2000      	movs	r0, #0
 8005a58:	f7ff ffce 	bl	80059f8 <SEGGER_RTT_Write>
  return len;
 8005a5c:	683b      	ldr	r3, [r7, #0]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <__errno>:
 8005a68:	4b01      	ldr	r3, [pc, #4]	; (8005a70 <__errno+0x8>)
 8005a6a:	6818      	ldr	r0, [r3, #0]
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	20000018 	.word	0x20000018

08005a74 <__libc_init_array>:
 8005a74:	b570      	push	{r4, r5, r6, lr}
 8005a76:	4d0d      	ldr	r5, [pc, #52]	; (8005aac <__libc_init_array+0x38>)
 8005a78:	4c0d      	ldr	r4, [pc, #52]	; (8005ab0 <__libc_init_array+0x3c>)
 8005a7a:	1b64      	subs	r4, r4, r5
 8005a7c:	10a4      	asrs	r4, r4, #2
 8005a7e:	2600      	movs	r6, #0
 8005a80:	42a6      	cmp	r6, r4
 8005a82:	d109      	bne.n	8005a98 <__libc_init_array+0x24>
 8005a84:	4d0b      	ldr	r5, [pc, #44]	; (8005ab4 <__libc_init_array+0x40>)
 8005a86:	4c0c      	ldr	r4, [pc, #48]	; (8005ab8 <__libc_init_array+0x44>)
 8005a88:	f000 fd1a 	bl	80064c0 <_init>
 8005a8c:	1b64      	subs	r4, r4, r5
 8005a8e:	10a4      	asrs	r4, r4, #2
 8005a90:	2600      	movs	r6, #0
 8005a92:	42a6      	cmp	r6, r4
 8005a94:	d105      	bne.n	8005aa2 <__libc_init_array+0x2e>
 8005a96:	bd70      	pop	{r4, r5, r6, pc}
 8005a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a9c:	4798      	blx	r3
 8005a9e:	3601      	adds	r6, #1
 8005aa0:	e7ee      	b.n	8005a80 <__libc_init_array+0xc>
 8005aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa6:	4798      	blx	r3
 8005aa8:	3601      	adds	r6, #1
 8005aaa:	e7f2      	b.n	8005a92 <__libc_init_array+0x1e>
 8005aac:	08006604 	.word	0x08006604
 8005ab0:	08006604 	.word	0x08006604
 8005ab4:	08006604 	.word	0x08006604
 8005ab8:	08006608 	.word	0x08006608

08005abc <memcpy>:
 8005abc:	440a      	add	r2, r1
 8005abe:	4291      	cmp	r1, r2
 8005ac0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005ac4:	d100      	bne.n	8005ac8 <memcpy+0xc>
 8005ac6:	4770      	bx	lr
 8005ac8:	b510      	push	{r4, lr}
 8005aca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ace:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ad2:	4291      	cmp	r1, r2
 8005ad4:	d1f9      	bne.n	8005aca <memcpy+0xe>
 8005ad6:	bd10      	pop	{r4, pc}

08005ad8 <memset>:
 8005ad8:	4402      	add	r2, r0
 8005ada:	4603      	mov	r3, r0
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d100      	bne.n	8005ae2 <memset+0xa>
 8005ae0:	4770      	bx	lr
 8005ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ae6:	e7f9      	b.n	8005adc <memset+0x4>

08005ae8 <_puts_r>:
 8005ae8:	b570      	push	{r4, r5, r6, lr}
 8005aea:	460e      	mov	r6, r1
 8005aec:	4605      	mov	r5, r0
 8005aee:	b118      	cbz	r0, 8005af8 <_puts_r+0x10>
 8005af0:	6983      	ldr	r3, [r0, #24]
 8005af2:	b90b      	cbnz	r3, 8005af8 <_puts_r+0x10>
 8005af4:	f000 fa48 	bl	8005f88 <__sinit>
 8005af8:	69ab      	ldr	r3, [r5, #24]
 8005afa:	68ac      	ldr	r4, [r5, #8]
 8005afc:	b913      	cbnz	r3, 8005b04 <_puts_r+0x1c>
 8005afe:	4628      	mov	r0, r5
 8005b00:	f000 fa42 	bl	8005f88 <__sinit>
 8005b04:	4b2c      	ldr	r3, [pc, #176]	; (8005bb8 <_puts_r+0xd0>)
 8005b06:	429c      	cmp	r4, r3
 8005b08:	d120      	bne.n	8005b4c <_puts_r+0x64>
 8005b0a:	686c      	ldr	r4, [r5, #4]
 8005b0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b0e:	07db      	lsls	r3, r3, #31
 8005b10:	d405      	bmi.n	8005b1e <_puts_r+0x36>
 8005b12:	89a3      	ldrh	r3, [r4, #12]
 8005b14:	0598      	lsls	r0, r3, #22
 8005b16:	d402      	bmi.n	8005b1e <_puts_r+0x36>
 8005b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b1a:	f000 fad3 	bl	80060c4 <__retarget_lock_acquire_recursive>
 8005b1e:	89a3      	ldrh	r3, [r4, #12]
 8005b20:	0719      	lsls	r1, r3, #28
 8005b22:	d51d      	bpl.n	8005b60 <_puts_r+0x78>
 8005b24:	6923      	ldr	r3, [r4, #16]
 8005b26:	b1db      	cbz	r3, 8005b60 <_puts_r+0x78>
 8005b28:	3e01      	subs	r6, #1
 8005b2a:	68a3      	ldr	r3, [r4, #8]
 8005b2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b30:	3b01      	subs	r3, #1
 8005b32:	60a3      	str	r3, [r4, #8]
 8005b34:	bb39      	cbnz	r1, 8005b86 <_puts_r+0x9e>
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	da38      	bge.n	8005bac <_puts_r+0xc4>
 8005b3a:	4622      	mov	r2, r4
 8005b3c:	210a      	movs	r1, #10
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f000 f848 	bl	8005bd4 <__swbuf_r>
 8005b44:	3001      	adds	r0, #1
 8005b46:	d011      	beq.n	8005b6c <_puts_r+0x84>
 8005b48:	250a      	movs	r5, #10
 8005b4a:	e011      	b.n	8005b70 <_puts_r+0x88>
 8005b4c:	4b1b      	ldr	r3, [pc, #108]	; (8005bbc <_puts_r+0xd4>)
 8005b4e:	429c      	cmp	r4, r3
 8005b50:	d101      	bne.n	8005b56 <_puts_r+0x6e>
 8005b52:	68ac      	ldr	r4, [r5, #8]
 8005b54:	e7da      	b.n	8005b0c <_puts_r+0x24>
 8005b56:	4b1a      	ldr	r3, [pc, #104]	; (8005bc0 <_puts_r+0xd8>)
 8005b58:	429c      	cmp	r4, r3
 8005b5a:	bf08      	it	eq
 8005b5c:	68ec      	ldreq	r4, [r5, #12]
 8005b5e:	e7d5      	b.n	8005b0c <_puts_r+0x24>
 8005b60:	4621      	mov	r1, r4
 8005b62:	4628      	mov	r0, r5
 8005b64:	f000 f888 	bl	8005c78 <__swsetup_r>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	d0dd      	beq.n	8005b28 <_puts_r+0x40>
 8005b6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b72:	07da      	lsls	r2, r3, #31
 8005b74:	d405      	bmi.n	8005b82 <_puts_r+0x9a>
 8005b76:	89a3      	ldrh	r3, [r4, #12]
 8005b78:	059b      	lsls	r3, r3, #22
 8005b7a:	d402      	bmi.n	8005b82 <_puts_r+0x9a>
 8005b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b7e:	f000 faa2 	bl	80060c6 <__retarget_lock_release_recursive>
 8005b82:	4628      	mov	r0, r5
 8005b84:	bd70      	pop	{r4, r5, r6, pc}
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	da04      	bge.n	8005b94 <_puts_r+0xac>
 8005b8a:	69a2      	ldr	r2, [r4, #24]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	dc06      	bgt.n	8005b9e <_puts_r+0xb6>
 8005b90:	290a      	cmp	r1, #10
 8005b92:	d004      	beq.n	8005b9e <_puts_r+0xb6>
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	6022      	str	r2, [r4, #0]
 8005b9a:	7019      	strb	r1, [r3, #0]
 8005b9c:	e7c5      	b.n	8005b2a <_puts_r+0x42>
 8005b9e:	4622      	mov	r2, r4
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f000 f817 	bl	8005bd4 <__swbuf_r>
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	d1bf      	bne.n	8005b2a <_puts_r+0x42>
 8005baa:	e7df      	b.n	8005b6c <_puts_r+0x84>
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	250a      	movs	r5, #10
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	6022      	str	r2, [r4, #0]
 8005bb4:	701d      	strb	r5, [r3, #0]
 8005bb6:	e7db      	b.n	8005b70 <_puts_r+0x88>
 8005bb8:	080065bc 	.word	0x080065bc
 8005bbc:	080065dc 	.word	0x080065dc
 8005bc0:	0800659c 	.word	0x0800659c

08005bc4 <puts>:
 8005bc4:	4b02      	ldr	r3, [pc, #8]	; (8005bd0 <puts+0xc>)
 8005bc6:	4601      	mov	r1, r0
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	f7ff bf8d 	b.w	8005ae8 <_puts_r>
 8005bce:	bf00      	nop
 8005bd0:	20000018 	.word	0x20000018

08005bd4 <__swbuf_r>:
 8005bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd6:	460e      	mov	r6, r1
 8005bd8:	4614      	mov	r4, r2
 8005bda:	4605      	mov	r5, r0
 8005bdc:	b118      	cbz	r0, 8005be6 <__swbuf_r+0x12>
 8005bde:	6983      	ldr	r3, [r0, #24]
 8005be0:	b90b      	cbnz	r3, 8005be6 <__swbuf_r+0x12>
 8005be2:	f000 f9d1 	bl	8005f88 <__sinit>
 8005be6:	4b21      	ldr	r3, [pc, #132]	; (8005c6c <__swbuf_r+0x98>)
 8005be8:	429c      	cmp	r4, r3
 8005bea:	d12b      	bne.n	8005c44 <__swbuf_r+0x70>
 8005bec:	686c      	ldr	r4, [r5, #4]
 8005bee:	69a3      	ldr	r3, [r4, #24]
 8005bf0:	60a3      	str	r3, [r4, #8]
 8005bf2:	89a3      	ldrh	r3, [r4, #12]
 8005bf4:	071a      	lsls	r2, r3, #28
 8005bf6:	d52f      	bpl.n	8005c58 <__swbuf_r+0x84>
 8005bf8:	6923      	ldr	r3, [r4, #16]
 8005bfa:	b36b      	cbz	r3, 8005c58 <__swbuf_r+0x84>
 8005bfc:	6923      	ldr	r3, [r4, #16]
 8005bfe:	6820      	ldr	r0, [r4, #0]
 8005c00:	1ac0      	subs	r0, r0, r3
 8005c02:	6963      	ldr	r3, [r4, #20]
 8005c04:	b2f6      	uxtb	r6, r6
 8005c06:	4283      	cmp	r3, r0
 8005c08:	4637      	mov	r7, r6
 8005c0a:	dc04      	bgt.n	8005c16 <__swbuf_r+0x42>
 8005c0c:	4621      	mov	r1, r4
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f000 f926 	bl	8005e60 <_fflush_r>
 8005c14:	bb30      	cbnz	r0, 8005c64 <__swbuf_r+0x90>
 8005c16:	68a3      	ldr	r3, [r4, #8]
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	60a3      	str	r3, [r4, #8]
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	6022      	str	r2, [r4, #0]
 8005c22:	701e      	strb	r6, [r3, #0]
 8005c24:	6963      	ldr	r3, [r4, #20]
 8005c26:	3001      	adds	r0, #1
 8005c28:	4283      	cmp	r3, r0
 8005c2a:	d004      	beq.n	8005c36 <__swbuf_r+0x62>
 8005c2c:	89a3      	ldrh	r3, [r4, #12]
 8005c2e:	07db      	lsls	r3, r3, #31
 8005c30:	d506      	bpl.n	8005c40 <__swbuf_r+0x6c>
 8005c32:	2e0a      	cmp	r6, #10
 8005c34:	d104      	bne.n	8005c40 <__swbuf_r+0x6c>
 8005c36:	4621      	mov	r1, r4
 8005c38:	4628      	mov	r0, r5
 8005c3a:	f000 f911 	bl	8005e60 <_fflush_r>
 8005c3e:	b988      	cbnz	r0, 8005c64 <__swbuf_r+0x90>
 8005c40:	4638      	mov	r0, r7
 8005c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c44:	4b0a      	ldr	r3, [pc, #40]	; (8005c70 <__swbuf_r+0x9c>)
 8005c46:	429c      	cmp	r4, r3
 8005c48:	d101      	bne.n	8005c4e <__swbuf_r+0x7a>
 8005c4a:	68ac      	ldr	r4, [r5, #8]
 8005c4c:	e7cf      	b.n	8005bee <__swbuf_r+0x1a>
 8005c4e:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <__swbuf_r+0xa0>)
 8005c50:	429c      	cmp	r4, r3
 8005c52:	bf08      	it	eq
 8005c54:	68ec      	ldreq	r4, [r5, #12]
 8005c56:	e7ca      	b.n	8005bee <__swbuf_r+0x1a>
 8005c58:	4621      	mov	r1, r4
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	f000 f80c 	bl	8005c78 <__swsetup_r>
 8005c60:	2800      	cmp	r0, #0
 8005c62:	d0cb      	beq.n	8005bfc <__swbuf_r+0x28>
 8005c64:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005c68:	e7ea      	b.n	8005c40 <__swbuf_r+0x6c>
 8005c6a:	bf00      	nop
 8005c6c:	080065bc 	.word	0x080065bc
 8005c70:	080065dc 	.word	0x080065dc
 8005c74:	0800659c 	.word	0x0800659c

08005c78 <__swsetup_r>:
 8005c78:	4b32      	ldr	r3, [pc, #200]	; (8005d44 <__swsetup_r+0xcc>)
 8005c7a:	b570      	push	{r4, r5, r6, lr}
 8005c7c:	681d      	ldr	r5, [r3, #0]
 8005c7e:	4606      	mov	r6, r0
 8005c80:	460c      	mov	r4, r1
 8005c82:	b125      	cbz	r5, 8005c8e <__swsetup_r+0x16>
 8005c84:	69ab      	ldr	r3, [r5, #24]
 8005c86:	b913      	cbnz	r3, 8005c8e <__swsetup_r+0x16>
 8005c88:	4628      	mov	r0, r5
 8005c8a:	f000 f97d 	bl	8005f88 <__sinit>
 8005c8e:	4b2e      	ldr	r3, [pc, #184]	; (8005d48 <__swsetup_r+0xd0>)
 8005c90:	429c      	cmp	r4, r3
 8005c92:	d10f      	bne.n	8005cb4 <__swsetup_r+0x3c>
 8005c94:	686c      	ldr	r4, [r5, #4]
 8005c96:	89a3      	ldrh	r3, [r4, #12]
 8005c98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c9c:	0719      	lsls	r1, r3, #28
 8005c9e:	d42c      	bmi.n	8005cfa <__swsetup_r+0x82>
 8005ca0:	06dd      	lsls	r5, r3, #27
 8005ca2:	d411      	bmi.n	8005cc8 <__swsetup_r+0x50>
 8005ca4:	2309      	movs	r3, #9
 8005ca6:	6033      	str	r3, [r6, #0]
 8005ca8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005cac:	81a3      	strh	r3, [r4, #12]
 8005cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cb2:	e03e      	b.n	8005d32 <__swsetup_r+0xba>
 8005cb4:	4b25      	ldr	r3, [pc, #148]	; (8005d4c <__swsetup_r+0xd4>)
 8005cb6:	429c      	cmp	r4, r3
 8005cb8:	d101      	bne.n	8005cbe <__swsetup_r+0x46>
 8005cba:	68ac      	ldr	r4, [r5, #8]
 8005cbc:	e7eb      	b.n	8005c96 <__swsetup_r+0x1e>
 8005cbe:	4b24      	ldr	r3, [pc, #144]	; (8005d50 <__swsetup_r+0xd8>)
 8005cc0:	429c      	cmp	r4, r3
 8005cc2:	bf08      	it	eq
 8005cc4:	68ec      	ldreq	r4, [r5, #12]
 8005cc6:	e7e6      	b.n	8005c96 <__swsetup_r+0x1e>
 8005cc8:	0758      	lsls	r0, r3, #29
 8005cca:	d512      	bpl.n	8005cf2 <__swsetup_r+0x7a>
 8005ccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cce:	b141      	cbz	r1, 8005ce2 <__swsetup_r+0x6a>
 8005cd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cd4:	4299      	cmp	r1, r3
 8005cd6:	d002      	beq.n	8005cde <__swsetup_r+0x66>
 8005cd8:	4630      	mov	r0, r6
 8005cda:	f000 fa5b 	bl	8006194 <_free_r>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	6363      	str	r3, [r4, #52]	; 0x34
 8005ce2:	89a3      	ldrh	r3, [r4, #12]
 8005ce4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ce8:	81a3      	strh	r3, [r4, #12]
 8005cea:	2300      	movs	r3, #0
 8005cec:	6063      	str	r3, [r4, #4]
 8005cee:	6923      	ldr	r3, [r4, #16]
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	89a3      	ldrh	r3, [r4, #12]
 8005cf4:	f043 0308 	orr.w	r3, r3, #8
 8005cf8:	81a3      	strh	r3, [r4, #12]
 8005cfa:	6923      	ldr	r3, [r4, #16]
 8005cfc:	b94b      	cbnz	r3, 8005d12 <__swsetup_r+0x9a>
 8005cfe:	89a3      	ldrh	r3, [r4, #12]
 8005d00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d08:	d003      	beq.n	8005d12 <__swsetup_r+0x9a>
 8005d0a:	4621      	mov	r1, r4
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	f000 fa01 	bl	8006114 <__smakebuf_r>
 8005d12:	89a0      	ldrh	r0, [r4, #12]
 8005d14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d18:	f010 0301 	ands.w	r3, r0, #1
 8005d1c:	d00a      	beq.n	8005d34 <__swsetup_r+0xbc>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60a3      	str	r3, [r4, #8]
 8005d22:	6963      	ldr	r3, [r4, #20]
 8005d24:	425b      	negs	r3, r3
 8005d26:	61a3      	str	r3, [r4, #24]
 8005d28:	6923      	ldr	r3, [r4, #16]
 8005d2a:	b943      	cbnz	r3, 8005d3e <__swsetup_r+0xc6>
 8005d2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d30:	d1ba      	bne.n	8005ca8 <__swsetup_r+0x30>
 8005d32:	bd70      	pop	{r4, r5, r6, pc}
 8005d34:	0781      	lsls	r1, r0, #30
 8005d36:	bf58      	it	pl
 8005d38:	6963      	ldrpl	r3, [r4, #20]
 8005d3a:	60a3      	str	r3, [r4, #8]
 8005d3c:	e7f4      	b.n	8005d28 <__swsetup_r+0xb0>
 8005d3e:	2000      	movs	r0, #0
 8005d40:	e7f7      	b.n	8005d32 <__swsetup_r+0xba>
 8005d42:	bf00      	nop
 8005d44:	20000018 	.word	0x20000018
 8005d48:	080065bc 	.word	0x080065bc
 8005d4c:	080065dc 	.word	0x080065dc
 8005d50:	0800659c 	.word	0x0800659c

08005d54 <__sflush_r>:
 8005d54:	898a      	ldrh	r2, [r1, #12]
 8005d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d5a:	4605      	mov	r5, r0
 8005d5c:	0710      	lsls	r0, r2, #28
 8005d5e:	460c      	mov	r4, r1
 8005d60:	d458      	bmi.n	8005e14 <__sflush_r+0xc0>
 8005d62:	684b      	ldr	r3, [r1, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	dc05      	bgt.n	8005d74 <__sflush_r+0x20>
 8005d68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	dc02      	bgt.n	8005d74 <__sflush_r+0x20>
 8005d6e:	2000      	movs	r0, #0
 8005d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d76:	2e00      	cmp	r6, #0
 8005d78:	d0f9      	beq.n	8005d6e <__sflush_r+0x1a>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d80:	682f      	ldr	r7, [r5, #0]
 8005d82:	602b      	str	r3, [r5, #0]
 8005d84:	d032      	beq.n	8005dec <__sflush_r+0x98>
 8005d86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d88:	89a3      	ldrh	r3, [r4, #12]
 8005d8a:	075a      	lsls	r2, r3, #29
 8005d8c:	d505      	bpl.n	8005d9a <__sflush_r+0x46>
 8005d8e:	6863      	ldr	r3, [r4, #4]
 8005d90:	1ac0      	subs	r0, r0, r3
 8005d92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d94:	b10b      	cbz	r3, 8005d9a <__sflush_r+0x46>
 8005d96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d98:	1ac0      	subs	r0, r0, r3
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005da0:	6a21      	ldr	r1, [r4, #32]
 8005da2:	4628      	mov	r0, r5
 8005da4:	47b0      	blx	r6
 8005da6:	1c43      	adds	r3, r0, #1
 8005da8:	89a3      	ldrh	r3, [r4, #12]
 8005daa:	d106      	bne.n	8005dba <__sflush_r+0x66>
 8005dac:	6829      	ldr	r1, [r5, #0]
 8005dae:	291d      	cmp	r1, #29
 8005db0:	d82c      	bhi.n	8005e0c <__sflush_r+0xb8>
 8005db2:	4a2a      	ldr	r2, [pc, #168]	; (8005e5c <__sflush_r+0x108>)
 8005db4:	40ca      	lsrs	r2, r1
 8005db6:	07d6      	lsls	r6, r2, #31
 8005db8:	d528      	bpl.n	8005e0c <__sflush_r+0xb8>
 8005dba:	2200      	movs	r2, #0
 8005dbc:	6062      	str	r2, [r4, #4]
 8005dbe:	04d9      	lsls	r1, r3, #19
 8005dc0:	6922      	ldr	r2, [r4, #16]
 8005dc2:	6022      	str	r2, [r4, #0]
 8005dc4:	d504      	bpl.n	8005dd0 <__sflush_r+0x7c>
 8005dc6:	1c42      	adds	r2, r0, #1
 8005dc8:	d101      	bne.n	8005dce <__sflush_r+0x7a>
 8005dca:	682b      	ldr	r3, [r5, #0]
 8005dcc:	b903      	cbnz	r3, 8005dd0 <__sflush_r+0x7c>
 8005dce:	6560      	str	r0, [r4, #84]	; 0x54
 8005dd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dd2:	602f      	str	r7, [r5, #0]
 8005dd4:	2900      	cmp	r1, #0
 8005dd6:	d0ca      	beq.n	8005d6e <__sflush_r+0x1a>
 8005dd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ddc:	4299      	cmp	r1, r3
 8005dde:	d002      	beq.n	8005de6 <__sflush_r+0x92>
 8005de0:	4628      	mov	r0, r5
 8005de2:	f000 f9d7 	bl	8006194 <_free_r>
 8005de6:	2000      	movs	r0, #0
 8005de8:	6360      	str	r0, [r4, #52]	; 0x34
 8005dea:	e7c1      	b.n	8005d70 <__sflush_r+0x1c>
 8005dec:	6a21      	ldr	r1, [r4, #32]
 8005dee:	2301      	movs	r3, #1
 8005df0:	4628      	mov	r0, r5
 8005df2:	47b0      	blx	r6
 8005df4:	1c41      	adds	r1, r0, #1
 8005df6:	d1c7      	bne.n	8005d88 <__sflush_r+0x34>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0c4      	beq.n	8005d88 <__sflush_r+0x34>
 8005dfe:	2b1d      	cmp	r3, #29
 8005e00:	d001      	beq.n	8005e06 <__sflush_r+0xb2>
 8005e02:	2b16      	cmp	r3, #22
 8005e04:	d101      	bne.n	8005e0a <__sflush_r+0xb6>
 8005e06:	602f      	str	r7, [r5, #0]
 8005e08:	e7b1      	b.n	8005d6e <__sflush_r+0x1a>
 8005e0a:	89a3      	ldrh	r3, [r4, #12]
 8005e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e10:	81a3      	strh	r3, [r4, #12]
 8005e12:	e7ad      	b.n	8005d70 <__sflush_r+0x1c>
 8005e14:	690f      	ldr	r7, [r1, #16]
 8005e16:	2f00      	cmp	r7, #0
 8005e18:	d0a9      	beq.n	8005d6e <__sflush_r+0x1a>
 8005e1a:	0793      	lsls	r3, r2, #30
 8005e1c:	680e      	ldr	r6, [r1, #0]
 8005e1e:	bf08      	it	eq
 8005e20:	694b      	ldreq	r3, [r1, #20]
 8005e22:	600f      	str	r7, [r1, #0]
 8005e24:	bf18      	it	ne
 8005e26:	2300      	movne	r3, #0
 8005e28:	eba6 0807 	sub.w	r8, r6, r7
 8005e2c:	608b      	str	r3, [r1, #8]
 8005e2e:	f1b8 0f00 	cmp.w	r8, #0
 8005e32:	dd9c      	ble.n	8005d6e <__sflush_r+0x1a>
 8005e34:	6a21      	ldr	r1, [r4, #32]
 8005e36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e38:	4643      	mov	r3, r8
 8005e3a:	463a      	mov	r2, r7
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	47b0      	blx	r6
 8005e40:	2800      	cmp	r0, #0
 8005e42:	dc06      	bgt.n	8005e52 <__sflush_r+0xfe>
 8005e44:	89a3      	ldrh	r3, [r4, #12]
 8005e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e4a:	81a3      	strh	r3, [r4, #12]
 8005e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e50:	e78e      	b.n	8005d70 <__sflush_r+0x1c>
 8005e52:	4407      	add	r7, r0
 8005e54:	eba8 0800 	sub.w	r8, r8, r0
 8005e58:	e7e9      	b.n	8005e2e <__sflush_r+0xda>
 8005e5a:	bf00      	nop
 8005e5c:	20400001 	.word	0x20400001

08005e60 <_fflush_r>:
 8005e60:	b538      	push	{r3, r4, r5, lr}
 8005e62:	690b      	ldr	r3, [r1, #16]
 8005e64:	4605      	mov	r5, r0
 8005e66:	460c      	mov	r4, r1
 8005e68:	b913      	cbnz	r3, 8005e70 <_fflush_r+0x10>
 8005e6a:	2500      	movs	r5, #0
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	bd38      	pop	{r3, r4, r5, pc}
 8005e70:	b118      	cbz	r0, 8005e7a <_fflush_r+0x1a>
 8005e72:	6983      	ldr	r3, [r0, #24]
 8005e74:	b90b      	cbnz	r3, 8005e7a <_fflush_r+0x1a>
 8005e76:	f000 f887 	bl	8005f88 <__sinit>
 8005e7a:	4b14      	ldr	r3, [pc, #80]	; (8005ecc <_fflush_r+0x6c>)
 8005e7c:	429c      	cmp	r4, r3
 8005e7e:	d11b      	bne.n	8005eb8 <_fflush_r+0x58>
 8005e80:	686c      	ldr	r4, [r5, #4]
 8005e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0ef      	beq.n	8005e6a <_fflush_r+0xa>
 8005e8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e8c:	07d0      	lsls	r0, r2, #31
 8005e8e:	d404      	bmi.n	8005e9a <_fflush_r+0x3a>
 8005e90:	0599      	lsls	r1, r3, #22
 8005e92:	d402      	bmi.n	8005e9a <_fflush_r+0x3a>
 8005e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e96:	f000 f915 	bl	80060c4 <__retarget_lock_acquire_recursive>
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	f7ff ff59 	bl	8005d54 <__sflush_r>
 8005ea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ea4:	07da      	lsls	r2, r3, #31
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	d4e0      	bmi.n	8005e6c <_fflush_r+0xc>
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	059b      	lsls	r3, r3, #22
 8005eae:	d4dd      	bmi.n	8005e6c <_fflush_r+0xc>
 8005eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eb2:	f000 f908 	bl	80060c6 <__retarget_lock_release_recursive>
 8005eb6:	e7d9      	b.n	8005e6c <_fflush_r+0xc>
 8005eb8:	4b05      	ldr	r3, [pc, #20]	; (8005ed0 <_fflush_r+0x70>)
 8005eba:	429c      	cmp	r4, r3
 8005ebc:	d101      	bne.n	8005ec2 <_fflush_r+0x62>
 8005ebe:	68ac      	ldr	r4, [r5, #8]
 8005ec0:	e7df      	b.n	8005e82 <_fflush_r+0x22>
 8005ec2:	4b04      	ldr	r3, [pc, #16]	; (8005ed4 <_fflush_r+0x74>)
 8005ec4:	429c      	cmp	r4, r3
 8005ec6:	bf08      	it	eq
 8005ec8:	68ec      	ldreq	r4, [r5, #12]
 8005eca:	e7da      	b.n	8005e82 <_fflush_r+0x22>
 8005ecc:	080065bc 	.word	0x080065bc
 8005ed0:	080065dc 	.word	0x080065dc
 8005ed4:	0800659c 	.word	0x0800659c

08005ed8 <std>:
 8005ed8:	2300      	movs	r3, #0
 8005eda:	b510      	push	{r4, lr}
 8005edc:	4604      	mov	r4, r0
 8005ede:	e9c0 3300 	strd	r3, r3, [r0]
 8005ee2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ee6:	6083      	str	r3, [r0, #8]
 8005ee8:	8181      	strh	r1, [r0, #12]
 8005eea:	6643      	str	r3, [r0, #100]	; 0x64
 8005eec:	81c2      	strh	r2, [r0, #14]
 8005eee:	6183      	str	r3, [r0, #24]
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	2208      	movs	r2, #8
 8005ef4:	305c      	adds	r0, #92	; 0x5c
 8005ef6:	f7ff fdef 	bl	8005ad8 <memset>
 8005efa:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <std+0x38>)
 8005efc:	6263      	str	r3, [r4, #36]	; 0x24
 8005efe:	4b05      	ldr	r3, [pc, #20]	; (8005f14 <std+0x3c>)
 8005f00:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f02:	4b05      	ldr	r3, [pc, #20]	; (8005f18 <std+0x40>)
 8005f04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f06:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <std+0x44>)
 8005f08:	6224      	str	r4, [r4, #32]
 8005f0a:	6323      	str	r3, [r4, #48]	; 0x30
 8005f0c:	bd10      	pop	{r4, pc}
 8005f0e:	bf00      	nop
 8005f10:	08006375 	.word	0x08006375
 8005f14:	08006397 	.word	0x08006397
 8005f18:	080063cf 	.word	0x080063cf
 8005f1c:	080063f3 	.word	0x080063f3

08005f20 <_cleanup_r>:
 8005f20:	4901      	ldr	r1, [pc, #4]	; (8005f28 <_cleanup_r+0x8>)
 8005f22:	f000 b8af 	b.w	8006084 <_fwalk_reent>
 8005f26:	bf00      	nop
 8005f28:	08005e61 	.word	0x08005e61

08005f2c <__sfmoreglue>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	2268      	movs	r2, #104	; 0x68
 8005f30:	1e4d      	subs	r5, r1, #1
 8005f32:	4355      	muls	r5, r2
 8005f34:	460e      	mov	r6, r1
 8005f36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f3a:	f000 f997 	bl	800626c <_malloc_r>
 8005f3e:	4604      	mov	r4, r0
 8005f40:	b140      	cbz	r0, 8005f54 <__sfmoreglue+0x28>
 8005f42:	2100      	movs	r1, #0
 8005f44:	e9c0 1600 	strd	r1, r6, [r0]
 8005f48:	300c      	adds	r0, #12
 8005f4a:	60a0      	str	r0, [r4, #8]
 8005f4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f50:	f7ff fdc2 	bl	8005ad8 <memset>
 8005f54:	4620      	mov	r0, r4
 8005f56:	bd70      	pop	{r4, r5, r6, pc}

08005f58 <__sfp_lock_acquire>:
 8005f58:	4801      	ldr	r0, [pc, #4]	; (8005f60 <__sfp_lock_acquire+0x8>)
 8005f5a:	f000 b8b3 	b.w	80060c4 <__retarget_lock_acquire_recursive>
 8005f5e:	bf00      	nop
 8005f60:	20013389 	.word	0x20013389

08005f64 <__sfp_lock_release>:
 8005f64:	4801      	ldr	r0, [pc, #4]	; (8005f6c <__sfp_lock_release+0x8>)
 8005f66:	f000 b8ae 	b.w	80060c6 <__retarget_lock_release_recursive>
 8005f6a:	bf00      	nop
 8005f6c:	20013389 	.word	0x20013389

08005f70 <__sinit_lock_acquire>:
 8005f70:	4801      	ldr	r0, [pc, #4]	; (8005f78 <__sinit_lock_acquire+0x8>)
 8005f72:	f000 b8a7 	b.w	80060c4 <__retarget_lock_acquire_recursive>
 8005f76:	bf00      	nop
 8005f78:	2001338a 	.word	0x2001338a

08005f7c <__sinit_lock_release>:
 8005f7c:	4801      	ldr	r0, [pc, #4]	; (8005f84 <__sinit_lock_release+0x8>)
 8005f7e:	f000 b8a2 	b.w	80060c6 <__retarget_lock_release_recursive>
 8005f82:	bf00      	nop
 8005f84:	2001338a 	.word	0x2001338a

08005f88 <__sinit>:
 8005f88:	b510      	push	{r4, lr}
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	f7ff fff0 	bl	8005f70 <__sinit_lock_acquire>
 8005f90:	69a3      	ldr	r3, [r4, #24]
 8005f92:	b11b      	cbz	r3, 8005f9c <__sinit+0x14>
 8005f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f98:	f7ff bff0 	b.w	8005f7c <__sinit_lock_release>
 8005f9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005fa0:	6523      	str	r3, [r4, #80]	; 0x50
 8005fa2:	4b13      	ldr	r3, [pc, #76]	; (8005ff0 <__sinit+0x68>)
 8005fa4:	4a13      	ldr	r2, [pc, #76]	; (8005ff4 <__sinit+0x6c>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005faa:	42a3      	cmp	r3, r4
 8005fac:	bf04      	itt	eq
 8005fae:	2301      	moveq	r3, #1
 8005fb0:	61a3      	streq	r3, [r4, #24]
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f000 f820 	bl	8005ff8 <__sfp>
 8005fb8:	6060      	str	r0, [r4, #4]
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f000 f81c 	bl	8005ff8 <__sfp>
 8005fc0:	60a0      	str	r0, [r4, #8]
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f000 f818 	bl	8005ff8 <__sfp>
 8005fc8:	2200      	movs	r2, #0
 8005fca:	60e0      	str	r0, [r4, #12]
 8005fcc:	2104      	movs	r1, #4
 8005fce:	6860      	ldr	r0, [r4, #4]
 8005fd0:	f7ff ff82 	bl	8005ed8 <std>
 8005fd4:	68a0      	ldr	r0, [r4, #8]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	2109      	movs	r1, #9
 8005fda:	f7ff ff7d 	bl	8005ed8 <std>
 8005fde:	68e0      	ldr	r0, [r4, #12]
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	2112      	movs	r1, #18
 8005fe4:	f7ff ff78 	bl	8005ed8 <std>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	61a3      	str	r3, [r4, #24]
 8005fec:	e7d2      	b.n	8005f94 <__sinit+0xc>
 8005fee:	bf00      	nop
 8005ff0:	08006598 	.word	0x08006598
 8005ff4:	08005f21 	.word	0x08005f21

08005ff8 <__sfp>:
 8005ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffa:	4607      	mov	r7, r0
 8005ffc:	f7ff ffac 	bl	8005f58 <__sfp_lock_acquire>
 8006000:	4b1e      	ldr	r3, [pc, #120]	; (800607c <__sfp+0x84>)
 8006002:	681e      	ldr	r6, [r3, #0]
 8006004:	69b3      	ldr	r3, [r6, #24]
 8006006:	b913      	cbnz	r3, 800600e <__sfp+0x16>
 8006008:	4630      	mov	r0, r6
 800600a:	f7ff ffbd 	bl	8005f88 <__sinit>
 800600e:	3648      	adds	r6, #72	; 0x48
 8006010:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006014:	3b01      	subs	r3, #1
 8006016:	d503      	bpl.n	8006020 <__sfp+0x28>
 8006018:	6833      	ldr	r3, [r6, #0]
 800601a:	b30b      	cbz	r3, 8006060 <__sfp+0x68>
 800601c:	6836      	ldr	r6, [r6, #0]
 800601e:	e7f7      	b.n	8006010 <__sfp+0x18>
 8006020:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006024:	b9d5      	cbnz	r5, 800605c <__sfp+0x64>
 8006026:	4b16      	ldr	r3, [pc, #88]	; (8006080 <__sfp+0x88>)
 8006028:	60e3      	str	r3, [r4, #12]
 800602a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800602e:	6665      	str	r5, [r4, #100]	; 0x64
 8006030:	f000 f847 	bl	80060c2 <__retarget_lock_init_recursive>
 8006034:	f7ff ff96 	bl	8005f64 <__sfp_lock_release>
 8006038:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800603c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006040:	6025      	str	r5, [r4, #0]
 8006042:	61a5      	str	r5, [r4, #24]
 8006044:	2208      	movs	r2, #8
 8006046:	4629      	mov	r1, r5
 8006048:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800604c:	f7ff fd44 	bl	8005ad8 <memset>
 8006050:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006054:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006058:	4620      	mov	r0, r4
 800605a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800605c:	3468      	adds	r4, #104	; 0x68
 800605e:	e7d9      	b.n	8006014 <__sfp+0x1c>
 8006060:	2104      	movs	r1, #4
 8006062:	4638      	mov	r0, r7
 8006064:	f7ff ff62 	bl	8005f2c <__sfmoreglue>
 8006068:	4604      	mov	r4, r0
 800606a:	6030      	str	r0, [r6, #0]
 800606c:	2800      	cmp	r0, #0
 800606e:	d1d5      	bne.n	800601c <__sfp+0x24>
 8006070:	f7ff ff78 	bl	8005f64 <__sfp_lock_release>
 8006074:	230c      	movs	r3, #12
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	e7ee      	b.n	8006058 <__sfp+0x60>
 800607a:	bf00      	nop
 800607c:	08006598 	.word	0x08006598
 8006080:	ffff0001 	.word	0xffff0001

08006084 <_fwalk_reent>:
 8006084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006088:	4606      	mov	r6, r0
 800608a:	4688      	mov	r8, r1
 800608c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006090:	2700      	movs	r7, #0
 8006092:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006096:	f1b9 0901 	subs.w	r9, r9, #1
 800609a:	d505      	bpl.n	80060a8 <_fwalk_reent+0x24>
 800609c:	6824      	ldr	r4, [r4, #0]
 800609e:	2c00      	cmp	r4, #0
 80060a0:	d1f7      	bne.n	8006092 <_fwalk_reent+0xe>
 80060a2:	4638      	mov	r0, r7
 80060a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060a8:	89ab      	ldrh	r3, [r5, #12]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d907      	bls.n	80060be <_fwalk_reent+0x3a>
 80060ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060b2:	3301      	adds	r3, #1
 80060b4:	d003      	beq.n	80060be <_fwalk_reent+0x3a>
 80060b6:	4629      	mov	r1, r5
 80060b8:	4630      	mov	r0, r6
 80060ba:	47c0      	blx	r8
 80060bc:	4307      	orrs	r7, r0
 80060be:	3568      	adds	r5, #104	; 0x68
 80060c0:	e7e9      	b.n	8006096 <_fwalk_reent+0x12>

080060c2 <__retarget_lock_init_recursive>:
 80060c2:	4770      	bx	lr

080060c4 <__retarget_lock_acquire_recursive>:
 80060c4:	4770      	bx	lr

080060c6 <__retarget_lock_release_recursive>:
 80060c6:	4770      	bx	lr

080060c8 <__swhatbuf_r>:
 80060c8:	b570      	push	{r4, r5, r6, lr}
 80060ca:	460e      	mov	r6, r1
 80060cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d0:	2900      	cmp	r1, #0
 80060d2:	b096      	sub	sp, #88	; 0x58
 80060d4:	4614      	mov	r4, r2
 80060d6:	461d      	mov	r5, r3
 80060d8:	da08      	bge.n	80060ec <__swhatbuf_r+0x24>
 80060da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	602a      	str	r2, [r5, #0]
 80060e2:	061a      	lsls	r2, r3, #24
 80060e4:	d410      	bmi.n	8006108 <__swhatbuf_r+0x40>
 80060e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060ea:	e00e      	b.n	800610a <__swhatbuf_r+0x42>
 80060ec:	466a      	mov	r2, sp
 80060ee:	f000 f995 	bl	800641c <_fstat_r>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	dbf1      	blt.n	80060da <__swhatbuf_r+0x12>
 80060f6:	9a01      	ldr	r2, [sp, #4]
 80060f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80060fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006100:	425a      	negs	r2, r3
 8006102:	415a      	adcs	r2, r3
 8006104:	602a      	str	r2, [r5, #0]
 8006106:	e7ee      	b.n	80060e6 <__swhatbuf_r+0x1e>
 8006108:	2340      	movs	r3, #64	; 0x40
 800610a:	2000      	movs	r0, #0
 800610c:	6023      	str	r3, [r4, #0]
 800610e:	b016      	add	sp, #88	; 0x58
 8006110:	bd70      	pop	{r4, r5, r6, pc}
	...

08006114 <__smakebuf_r>:
 8006114:	898b      	ldrh	r3, [r1, #12]
 8006116:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006118:	079d      	lsls	r5, r3, #30
 800611a:	4606      	mov	r6, r0
 800611c:	460c      	mov	r4, r1
 800611e:	d507      	bpl.n	8006130 <__smakebuf_r+0x1c>
 8006120:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	6123      	str	r3, [r4, #16]
 8006128:	2301      	movs	r3, #1
 800612a:	6163      	str	r3, [r4, #20]
 800612c:	b002      	add	sp, #8
 800612e:	bd70      	pop	{r4, r5, r6, pc}
 8006130:	ab01      	add	r3, sp, #4
 8006132:	466a      	mov	r2, sp
 8006134:	f7ff ffc8 	bl	80060c8 <__swhatbuf_r>
 8006138:	9900      	ldr	r1, [sp, #0]
 800613a:	4605      	mov	r5, r0
 800613c:	4630      	mov	r0, r6
 800613e:	f000 f895 	bl	800626c <_malloc_r>
 8006142:	b948      	cbnz	r0, 8006158 <__smakebuf_r+0x44>
 8006144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006148:	059a      	lsls	r2, r3, #22
 800614a:	d4ef      	bmi.n	800612c <__smakebuf_r+0x18>
 800614c:	f023 0303 	bic.w	r3, r3, #3
 8006150:	f043 0302 	orr.w	r3, r3, #2
 8006154:	81a3      	strh	r3, [r4, #12]
 8006156:	e7e3      	b.n	8006120 <__smakebuf_r+0xc>
 8006158:	4b0d      	ldr	r3, [pc, #52]	; (8006190 <__smakebuf_r+0x7c>)
 800615a:	62b3      	str	r3, [r6, #40]	; 0x28
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	6020      	str	r0, [r4, #0]
 8006160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006164:	81a3      	strh	r3, [r4, #12]
 8006166:	9b00      	ldr	r3, [sp, #0]
 8006168:	6163      	str	r3, [r4, #20]
 800616a:	9b01      	ldr	r3, [sp, #4]
 800616c:	6120      	str	r0, [r4, #16]
 800616e:	b15b      	cbz	r3, 8006188 <__smakebuf_r+0x74>
 8006170:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006174:	4630      	mov	r0, r6
 8006176:	f000 f963 	bl	8006440 <_isatty_r>
 800617a:	b128      	cbz	r0, 8006188 <__smakebuf_r+0x74>
 800617c:	89a3      	ldrh	r3, [r4, #12]
 800617e:	f023 0303 	bic.w	r3, r3, #3
 8006182:	f043 0301 	orr.w	r3, r3, #1
 8006186:	81a3      	strh	r3, [r4, #12]
 8006188:	89a0      	ldrh	r0, [r4, #12]
 800618a:	4305      	orrs	r5, r0
 800618c:	81a5      	strh	r5, [r4, #12]
 800618e:	e7cd      	b.n	800612c <__smakebuf_r+0x18>
 8006190:	08005f21 	.word	0x08005f21

08006194 <_free_r>:
 8006194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006196:	2900      	cmp	r1, #0
 8006198:	d044      	beq.n	8006224 <_free_r+0x90>
 800619a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800619e:	9001      	str	r0, [sp, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f1a1 0404 	sub.w	r4, r1, #4
 80061a6:	bfb8      	it	lt
 80061a8:	18e4      	addlt	r4, r4, r3
 80061aa:	f000 f96b 	bl	8006484 <__malloc_lock>
 80061ae:	4a1e      	ldr	r2, [pc, #120]	; (8006228 <_free_r+0x94>)
 80061b0:	9801      	ldr	r0, [sp, #4]
 80061b2:	6813      	ldr	r3, [r2, #0]
 80061b4:	b933      	cbnz	r3, 80061c4 <_free_r+0x30>
 80061b6:	6063      	str	r3, [r4, #4]
 80061b8:	6014      	str	r4, [r2, #0]
 80061ba:	b003      	add	sp, #12
 80061bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061c0:	f000 b966 	b.w	8006490 <__malloc_unlock>
 80061c4:	42a3      	cmp	r3, r4
 80061c6:	d908      	bls.n	80061da <_free_r+0x46>
 80061c8:	6825      	ldr	r5, [r4, #0]
 80061ca:	1961      	adds	r1, r4, r5
 80061cc:	428b      	cmp	r3, r1
 80061ce:	bf01      	itttt	eq
 80061d0:	6819      	ldreq	r1, [r3, #0]
 80061d2:	685b      	ldreq	r3, [r3, #4]
 80061d4:	1949      	addeq	r1, r1, r5
 80061d6:	6021      	streq	r1, [r4, #0]
 80061d8:	e7ed      	b.n	80061b6 <_free_r+0x22>
 80061da:	461a      	mov	r2, r3
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	b10b      	cbz	r3, 80061e4 <_free_r+0x50>
 80061e0:	42a3      	cmp	r3, r4
 80061e2:	d9fa      	bls.n	80061da <_free_r+0x46>
 80061e4:	6811      	ldr	r1, [r2, #0]
 80061e6:	1855      	adds	r5, r2, r1
 80061e8:	42a5      	cmp	r5, r4
 80061ea:	d10b      	bne.n	8006204 <_free_r+0x70>
 80061ec:	6824      	ldr	r4, [r4, #0]
 80061ee:	4421      	add	r1, r4
 80061f0:	1854      	adds	r4, r2, r1
 80061f2:	42a3      	cmp	r3, r4
 80061f4:	6011      	str	r1, [r2, #0]
 80061f6:	d1e0      	bne.n	80061ba <_free_r+0x26>
 80061f8:	681c      	ldr	r4, [r3, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	6053      	str	r3, [r2, #4]
 80061fe:	4421      	add	r1, r4
 8006200:	6011      	str	r1, [r2, #0]
 8006202:	e7da      	b.n	80061ba <_free_r+0x26>
 8006204:	d902      	bls.n	800620c <_free_r+0x78>
 8006206:	230c      	movs	r3, #12
 8006208:	6003      	str	r3, [r0, #0]
 800620a:	e7d6      	b.n	80061ba <_free_r+0x26>
 800620c:	6825      	ldr	r5, [r4, #0]
 800620e:	1961      	adds	r1, r4, r5
 8006210:	428b      	cmp	r3, r1
 8006212:	bf04      	itt	eq
 8006214:	6819      	ldreq	r1, [r3, #0]
 8006216:	685b      	ldreq	r3, [r3, #4]
 8006218:	6063      	str	r3, [r4, #4]
 800621a:	bf04      	itt	eq
 800621c:	1949      	addeq	r1, r1, r5
 800621e:	6021      	streq	r1, [r4, #0]
 8006220:	6054      	str	r4, [r2, #4]
 8006222:	e7ca      	b.n	80061ba <_free_r+0x26>
 8006224:	b003      	add	sp, #12
 8006226:	bd30      	pop	{r4, r5, pc}
 8006228:	2001338c 	.word	0x2001338c

0800622c <sbrk_aligned>:
 800622c:	b570      	push	{r4, r5, r6, lr}
 800622e:	4e0e      	ldr	r6, [pc, #56]	; (8006268 <sbrk_aligned+0x3c>)
 8006230:	460c      	mov	r4, r1
 8006232:	6831      	ldr	r1, [r6, #0]
 8006234:	4605      	mov	r5, r0
 8006236:	b911      	cbnz	r1, 800623e <sbrk_aligned+0x12>
 8006238:	f000 f88c 	bl	8006354 <_sbrk_r>
 800623c:	6030      	str	r0, [r6, #0]
 800623e:	4621      	mov	r1, r4
 8006240:	4628      	mov	r0, r5
 8006242:	f000 f887 	bl	8006354 <_sbrk_r>
 8006246:	1c43      	adds	r3, r0, #1
 8006248:	d00a      	beq.n	8006260 <sbrk_aligned+0x34>
 800624a:	1cc4      	adds	r4, r0, #3
 800624c:	f024 0403 	bic.w	r4, r4, #3
 8006250:	42a0      	cmp	r0, r4
 8006252:	d007      	beq.n	8006264 <sbrk_aligned+0x38>
 8006254:	1a21      	subs	r1, r4, r0
 8006256:	4628      	mov	r0, r5
 8006258:	f000 f87c 	bl	8006354 <_sbrk_r>
 800625c:	3001      	adds	r0, #1
 800625e:	d101      	bne.n	8006264 <sbrk_aligned+0x38>
 8006260:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006264:	4620      	mov	r0, r4
 8006266:	bd70      	pop	{r4, r5, r6, pc}
 8006268:	20013390 	.word	0x20013390

0800626c <_malloc_r>:
 800626c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006270:	1ccd      	adds	r5, r1, #3
 8006272:	f025 0503 	bic.w	r5, r5, #3
 8006276:	3508      	adds	r5, #8
 8006278:	2d0c      	cmp	r5, #12
 800627a:	bf38      	it	cc
 800627c:	250c      	movcc	r5, #12
 800627e:	2d00      	cmp	r5, #0
 8006280:	4607      	mov	r7, r0
 8006282:	db01      	blt.n	8006288 <_malloc_r+0x1c>
 8006284:	42a9      	cmp	r1, r5
 8006286:	d905      	bls.n	8006294 <_malloc_r+0x28>
 8006288:	230c      	movs	r3, #12
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	2600      	movs	r6, #0
 800628e:	4630      	mov	r0, r6
 8006290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006294:	4e2e      	ldr	r6, [pc, #184]	; (8006350 <_malloc_r+0xe4>)
 8006296:	f000 f8f5 	bl	8006484 <__malloc_lock>
 800629a:	6833      	ldr	r3, [r6, #0]
 800629c:	461c      	mov	r4, r3
 800629e:	bb34      	cbnz	r4, 80062ee <_malloc_r+0x82>
 80062a0:	4629      	mov	r1, r5
 80062a2:	4638      	mov	r0, r7
 80062a4:	f7ff ffc2 	bl	800622c <sbrk_aligned>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	4604      	mov	r4, r0
 80062ac:	d14d      	bne.n	800634a <_malloc_r+0xde>
 80062ae:	6834      	ldr	r4, [r6, #0]
 80062b0:	4626      	mov	r6, r4
 80062b2:	2e00      	cmp	r6, #0
 80062b4:	d140      	bne.n	8006338 <_malloc_r+0xcc>
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	4631      	mov	r1, r6
 80062ba:	4638      	mov	r0, r7
 80062bc:	eb04 0803 	add.w	r8, r4, r3
 80062c0:	f000 f848 	bl	8006354 <_sbrk_r>
 80062c4:	4580      	cmp	r8, r0
 80062c6:	d13a      	bne.n	800633e <_malloc_r+0xd2>
 80062c8:	6821      	ldr	r1, [r4, #0]
 80062ca:	3503      	adds	r5, #3
 80062cc:	1a6d      	subs	r5, r5, r1
 80062ce:	f025 0503 	bic.w	r5, r5, #3
 80062d2:	3508      	adds	r5, #8
 80062d4:	2d0c      	cmp	r5, #12
 80062d6:	bf38      	it	cc
 80062d8:	250c      	movcc	r5, #12
 80062da:	4629      	mov	r1, r5
 80062dc:	4638      	mov	r0, r7
 80062de:	f7ff ffa5 	bl	800622c <sbrk_aligned>
 80062e2:	3001      	adds	r0, #1
 80062e4:	d02b      	beq.n	800633e <_malloc_r+0xd2>
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	442b      	add	r3, r5
 80062ea:	6023      	str	r3, [r4, #0]
 80062ec:	e00e      	b.n	800630c <_malloc_r+0xa0>
 80062ee:	6822      	ldr	r2, [r4, #0]
 80062f0:	1b52      	subs	r2, r2, r5
 80062f2:	d41e      	bmi.n	8006332 <_malloc_r+0xc6>
 80062f4:	2a0b      	cmp	r2, #11
 80062f6:	d916      	bls.n	8006326 <_malloc_r+0xba>
 80062f8:	1961      	adds	r1, r4, r5
 80062fa:	42a3      	cmp	r3, r4
 80062fc:	6025      	str	r5, [r4, #0]
 80062fe:	bf18      	it	ne
 8006300:	6059      	strne	r1, [r3, #4]
 8006302:	6863      	ldr	r3, [r4, #4]
 8006304:	bf08      	it	eq
 8006306:	6031      	streq	r1, [r6, #0]
 8006308:	5162      	str	r2, [r4, r5]
 800630a:	604b      	str	r3, [r1, #4]
 800630c:	4638      	mov	r0, r7
 800630e:	f104 060b 	add.w	r6, r4, #11
 8006312:	f000 f8bd 	bl	8006490 <__malloc_unlock>
 8006316:	f026 0607 	bic.w	r6, r6, #7
 800631a:	1d23      	adds	r3, r4, #4
 800631c:	1af2      	subs	r2, r6, r3
 800631e:	d0b6      	beq.n	800628e <_malloc_r+0x22>
 8006320:	1b9b      	subs	r3, r3, r6
 8006322:	50a3      	str	r3, [r4, r2]
 8006324:	e7b3      	b.n	800628e <_malloc_r+0x22>
 8006326:	6862      	ldr	r2, [r4, #4]
 8006328:	42a3      	cmp	r3, r4
 800632a:	bf0c      	ite	eq
 800632c:	6032      	streq	r2, [r6, #0]
 800632e:	605a      	strne	r2, [r3, #4]
 8006330:	e7ec      	b.n	800630c <_malloc_r+0xa0>
 8006332:	4623      	mov	r3, r4
 8006334:	6864      	ldr	r4, [r4, #4]
 8006336:	e7b2      	b.n	800629e <_malloc_r+0x32>
 8006338:	4634      	mov	r4, r6
 800633a:	6876      	ldr	r6, [r6, #4]
 800633c:	e7b9      	b.n	80062b2 <_malloc_r+0x46>
 800633e:	230c      	movs	r3, #12
 8006340:	603b      	str	r3, [r7, #0]
 8006342:	4638      	mov	r0, r7
 8006344:	f000 f8a4 	bl	8006490 <__malloc_unlock>
 8006348:	e7a1      	b.n	800628e <_malloc_r+0x22>
 800634a:	6025      	str	r5, [r4, #0]
 800634c:	e7de      	b.n	800630c <_malloc_r+0xa0>
 800634e:	bf00      	nop
 8006350:	2001338c 	.word	0x2001338c

08006354 <_sbrk_r>:
 8006354:	b538      	push	{r3, r4, r5, lr}
 8006356:	4d06      	ldr	r5, [pc, #24]	; (8006370 <_sbrk_r+0x1c>)
 8006358:	2300      	movs	r3, #0
 800635a:	4604      	mov	r4, r0
 800635c:	4608      	mov	r0, r1
 800635e:	602b      	str	r3, [r5, #0]
 8006360:	f7fa fbe4 	bl	8000b2c <_sbrk>
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	d102      	bne.n	800636e <_sbrk_r+0x1a>
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	b103      	cbz	r3, 800636e <_sbrk_r+0x1a>
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	bd38      	pop	{r3, r4, r5, pc}
 8006370:	20013394 	.word	0x20013394

08006374 <__sread>:
 8006374:	b510      	push	{r4, lr}
 8006376:	460c      	mov	r4, r1
 8006378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800637c:	f000 f88e 	bl	800649c <_read_r>
 8006380:	2800      	cmp	r0, #0
 8006382:	bfab      	itete	ge
 8006384:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006386:	89a3      	ldrhlt	r3, [r4, #12]
 8006388:	181b      	addge	r3, r3, r0
 800638a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800638e:	bfac      	ite	ge
 8006390:	6563      	strge	r3, [r4, #84]	; 0x54
 8006392:	81a3      	strhlt	r3, [r4, #12]
 8006394:	bd10      	pop	{r4, pc}

08006396 <__swrite>:
 8006396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800639a:	461f      	mov	r7, r3
 800639c:	898b      	ldrh	r3, [r1, #12]
 800639e:	05db      	lsls	r3, r3, #23
 80063a0:	4605      	mov	r5, r0
 80063a2:	460c      	mov	r4, r1
 80063a4:	4616      	mov	r6, r2
 80063a6:	d505      	bpl.n	80063b4 <__swrite+0x1e>
 80063a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ac:	2302      	movs	r3, #2
 80063ae:	2200      	movs	r2, #0
 80063b0:	f000 f856 	bl	8006460 <_lseek_r>
 80063b4:	89a3      	ldrh	r3, [r4, #12]
 80063b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063be:	81a3      	strh	r3, [r4, #12]
 80063c0:	4632      	mov	r2, r6
 80063c2:	463b      	mov	r3, r7
 80063c4:	4628      	mov	r0, r5
 80063c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063ca:	f7ff bb3b 	b.w	8005a44 <_write_r>

080063ce <__sseek>:
 80063ce:	b510      	push	{r4, lr}
 80063d0:	460c      	mov	r4, r1
 80063d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d6:	f000 f843 	bl	8006460 <_lseek_r>
 80063da:	1c43      	adds	r3, r0, #1
 80063dc:	89a3      	ldrh	r3, [r4, #12]
 80063de:	bf15      	itete	ne
 80063e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80063e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063ea:	81a3      	strheq	r3, [r4, #12]
 80063ec:	bf18      	it	ne
 80063ee:	81a3      	strhne	r3, [r4, #12]
 80063f0:	bd10      	pop	{r4, pc}

080063f2 <__sclose>:
 80063f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f6:	f000 b801 	b.w	80063fc <_close_r>
	...

080063fc <_close_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4d06      	ldr	r5, [pc, #24]	; (8006418 <_close_r+0x1c>)
 8006400:	2300      	movs	r3, #0
 8006402:	4604      	mov	r4, r0
 8006404:	4608      	mov	r0, r1
 8006406:	602b      	str	r3, [r5, #0]
 8006408:	f7fa fb5b 	bl	8000ac2 <_close>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d102      	bne.n	8006416 <_close_r+0x1a>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	b103      	cbz	r3, 8006416 <_close_r+0x1a>
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	bd38      	pop	{r3, r4, r5, pc}
 8006418:	20013394 	.word	0x20013394

0800641c <_fstat_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	4d07      	ldr	r5, [pc, #28]	; (800643c <_fstat_r+0x20>)
 8006420:	2300      	movs	r3, #0
 8006422:	4604      	mov	r4, r0
 8006424:	4608      	mov	r0, r1
 8006426:	4611      	mov	r1, r2
 8006428:	602b      	str	r3, [r5, #0]
 800642a:	f7fa fb56 	bl	8000ada <_fstat>
 800642e:	1c43      	adds	r3, r0, #1
 8006430:	d102      	bne.n	8006438 <_fstat_r+0x1c>
 8006432:	682b      	ldr	r3, [r5, #0]
 8006434:	b103      	cbz	r3, 8006438 <_fstat_r+0x1c>
 8006436:	6023      	str	r3, [r4, #0]
 8006438:	bd38      	pop	{r3, r4, r5, pc}
 800643a:	bf00      	nop
 800643c:	20013394 	.word	0x20013394

08006440 <_isatty_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4d06      	ldr	r5, [pc, #24]	; (800645c <_isatty_r+0x1c>)
 8006444:	2300      	movs	r3, #0
 8006446:	4604      	mov	r4, r0
 8006448:	4608      	mov	r0, r1
 800644a:	602b      	str	r3, [r5, #0]
 800644c:	f7fa fb55 	bl	8000afa <_isatty>
 8006450:	1c43      	adds	r3, r0, #1
 8006452:	d102      	bne.n	800645a <_isatty_r+0x1a>
 8006454:	682b      	ldr	r3, [r5, #0]
 8006456:	b103      	cbz	r3, 800645a <_isatty_r+0x1a>
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	bd38      	pop	{r3, r4, r5, pc}
 800645c:	20013394 	.word	0x20013394

08006460 <_lseek_r>:
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	4d07      	ldr	r5, [pc, #28]	; (8006480 <_lseek_r+0x20>)
 8006464:	4604      	mov	r4, r0
 8006466:	4608      	mov	r0, r1
 8006468:	4611      	mov	r1, r2
 800646a:	2200      	movs	r2, #0
 800646c:	602a      	str	r2, [r5, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	f7fa fb4e 	bl	8000b10 <_lseek>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	d102      	bne.n	800647e <_lseek_r+0x1e>
 8006478:	682b      	ldr	r3, [r5, #0]
 800647a:	b103      	cbz	r3, 800647e <_lseek_r+0x1e>
 800647c:	6023      	str	r3, [r4, #0]
 800647e:	bd38      	pop	{r3, r4, r5, pc}
 8006480:	20013394 	.word	0x20013394

08006484 <__malloc_lock>:
 8006484:	4801      	ldr	r0, [pc, #4]	; (800648c <__malloc_lock+0x8>)
 8006486:	f7ff be1d 	b.w	80060c4 <__retarget_lock_acquire_recursive>
 800648a:	bf00      	nop
 800648c:	20013388 	.word	0x20013388

08006490 <__malloc_unlock>:
 8006490:	4801      	ldr	r0, [pc, #4]	; (8006498 <__malloc_unlock+0x8>)
 8006492:	f7ff be18 	b.w	80060c6 <__retarget_lock_release_recursive>
 8006496:	bf00      	nop
 8006498:	20013388 	.word	0x20013388

0800649c <_read_r>:
 800649c:	b538      	push	{r3, r4, r5, lr}
 800649e:	4d07      	ldr	r5, [pc, #28]	; (80064bc <_read_r+0x20>)
 80064a0:	4604      	mov	r4, r0
 80064a2:	4608      	mov	r0, r1
 80064a4:	4611      	mov	r1, r2
 80064a6:	2200      	movs	r2, #0
 80064a8:	602a      	str	r2, [r5, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	f7fa faec 	bl	8000a88 <_read>
 80064b0:	1c43      	adds	r3, r0, #1
 80064b2:	d102      	bne.n	80064ba <_read_r+0x1e>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	b103      	cbz	r3, 80064ba <_read_r+0x1e>
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	bd38      	pop	{r3, r4, r5, pc}
 80064bc:	20013394 	.word	0x20013394

080064c0 <_init>:
 80064c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c2:	bf00      	nop
 80064c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c6:	bc08      	pop	{r3}
 80064c8:	469e      	mov	lr, r3
 80064ca:	4770      	bx	lr

080064cc <_fini>:
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ce:	bf00      	nop
 80064d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d2:	bc08      	pop	{r3}
 80064d4:	469e      	mov	lr, r3
 80064d6:	4770      	bx	lr
