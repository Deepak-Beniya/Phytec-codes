
ESP8266_Data_Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ce4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08004eb4  08004eb4  00014eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005028  08005028  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005028  08005028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005030  08005030  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005030  08005030  00015030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005034  08005034  00015034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  080050a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  080050a8  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be94  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002097  00000000  00000000  0002bf34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0002dfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  0002e938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e6d  00000000  00000000  0002f1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d160  00000000  00000000  00052035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d560d  00000000  00000000  0005f195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001347a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a28  00000000  00000000  001347f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004e9c 	.word	0x08004e9c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004e9c 	.word	0x08004e9c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b10:	f000 b974 	b.w	8000dfc <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	468e      	mov	lr, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14d      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4694      	mov	ip, r2
 8000b3e:	d969      	bls.n	8000c14 <__udivmoddi4+0xe8>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b152      	cbz	r2, 8000b5c <__udivmoddi4+0x30>
 8000b46:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4a:	f1c2 0120 	rsb	r1, r2, #32
 8000b4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b56:	ea41 0e03 	orr.w	lr, r1, r3
 8000b5a:	4094      	lsls	r4, r2
 8000b5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b60:	0c21      	lsrs	r1, r4, #16
 8000b62:	fbbe f6f8 	udiv	r6, lr, r8
 8000b66:	fa1f f78c 	uxth.w	r7, ip
 8000b6a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b72:	fb06 f107 	mul.w	r1, r6, r7
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b82:	f080 811f 	bcs.w	8000dc4 <__udivmoddi4+0x298>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 811c 	bls.w	8000dc4 <__udivmoddi4+0x298>
 8000b8c:	3e02      	subs	r6, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b98:	fb08 3310 	mls	r3, r8, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 f707 	mul.w	r7, r0, r7
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	d90a      	bls.n	8000bbe <__udivmoddi4+0x92>
 8000ba8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bb0:	f080 810a 	bcs.w	8000dc8 <__udivmoddi4+0x29c>
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	f240 8107 	bls.w	8000dc8 <__udivmoddi4+0x29c>
 8000bba:	4464      	add	r4, ip
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc2:	1be4      	subs	r4, r4, r7
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	b11d      	cbz	r5, 8000bd0 <__udivmoddi4+0xa4>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd0:	4631      	mov	r1, r6
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xc2>
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	f000 80ef 	beq.w	8000dbe <__udivmoddi4+0x292>
 8000be0:	2600      	movs	r6, #0
 8000be2:	e9c5 0100 	strd	r0, r1, [r5]
 8000be6:	4630      	mov	r0, r6
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f683 	clz	r6, r3
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d14a      	bne.n	8000c8c <__udivmoddi4+0x160>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd4>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80f9 	bhi.w	8000df2 <__udivmoddi4+0x2c6>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	469e      	mov	lr, r3
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa4>
 8000c0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xec>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 8092 	bne.w	8000d46 <__udivmoddi4+0x21a>
 8000c22:	eba1 010c 	sub.w	r1, r1, ip
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f fe8c 	uxth.w	lr, ip
 8000c2e:	2601      	movs	r6, #1
 8000c30:	0c20      	lsrs	r0, r4, #16
 8000c32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c36:	fb07 1113 	mls	r1, r7, r3, r1
 8000c3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c3e:	fb0e f003 	mul.w	r0, lr, r3
 8000c42:	4288      	cmp	r0, r1
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x12c>
 8000c46:	eb1c 0101 	adds.w	r1, ip, r1
 8000c4a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x12a>
 8000c50:	4288      	cmp	r0, r1
 8000c52:	f200 80cb 	bhi.w	8000dec <__udivmoddi4+0x2c0>
 8000c56:	4643      	mov	r3, r8
 8000c58:	1a09      	subs	r1, r1, r0
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c60:	fb07 1110 	mls	r1, r7, r0, r1
 8000c64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c68:	fb0e fe00 	mul.w	lr, lr, r0
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x156>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c78:	d202      	bcs.n	8000c80 <__udivmoddi4+0x154>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f200 80bb 	bhi.w	8000df6 <__udivmoddi4+0x2ca>
 8000c80:	4608      	mov	r0, r1
 8000c82:	eba4 040e 	sub.w	r4, r4, lr
 8000c86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c8a:	e79c      	b.n	8000bc6 <__udivmoddi4+0x9a>
 8000c8c:	f1c6 0720 	rsb	r7, r6, #32
 8000c90:	40b3      	lsls	r3, r6
 8000c92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000ca2:	431c      	orrs	r4, r3
 8000ca4:	40f9      	lsrs	r1, r7
 8000ca6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000caa:	fa00 f306 	lsl.w	r3, r0, r6
 8000cae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cb2:	0c20      	lsrs	r0, r4, #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cc4:	4288      	cmp	r0, r1
 8000cc6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b8>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cd4:	f080 8088 	bcs.w	8000de8 <__udivmoddi4+0x2bc>
 8000cd8:	4288      	cmp	r0, r1
 8000cda:	f240 8085 	bls.w	8000de8 <__udivmoddi4+0x2bc>
 8000cde:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1a09      	subs	r1, r1, r0
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cec:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf8:	458e      	cmp	lr, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1e2>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d04:	d26c      	bcs.n	8000de0 <__udivmoddi4+0x2b4>
 8000d06:	458e      	cmp	lr, r1
 8000d08:	d96a      	bls.n	8000de0 <__udivmoddi4+0x2b4>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d12:	fba0 9402 	umull	r9, r4, r0, r2
 8000d16:	eba1 010e 	sub.w	r1, r1, lr
 8000d1a:	42a1      	cmp	r1, r4
 8000d1c:	46c8      	mov	r8, r9
 8000d1e:	46a6      	mov	lr, r4
 8000d20:	d356      	bcc.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d22:	d053      	beq.n	8000dcc <__udivmoddi4+0x2a0>
 8000d24:	b15d      	cbz	r5, 8000d3e <__udivmoddi4+0x212>
 8000d26:	ebb3 0208 	subs.w	r2, r3, r8
 8000d2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d32:	fa22 f306 	lsr.w	r3, r2, r6
 8000d36:	40f1      	lsrs	r1, r6
 8000d38:	431f      	orrs	r7, r3
 8000d3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d3e:	2600      	movs	r6, #0
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	f1c2 0320 	rsb	r3, r2, #32
 8000d4a:	40d8      	lsrs	r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	fa21 f303 	lsr.w	r3, r1, r3
 8000d54:	4091      	lsls	r1, r2
 8000d56:	4301      	orrs	r1, r0
 8000d58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d64:	fb07 3610 	mls	r6, r7, r0, r3
 8000d68:	0c0b      	lsrs	r3, r1, #16
 8000d6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d72:	429e      	cmp	r6, r3
 8000d74:	fa04 f402 	lsl.w	r4, r4, r2
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x260>
 8000d7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d82:	d22f      	bcs.n	8000de4 <__udivmoddi4+0x2b8>
 8000d84:	429e      	cmp	r6, r3
 8000d86:	d92d      	bls.n	8000de4 <__udivmoddi4+0x2b8>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	b289      	uxth	r1, r1
 8000d90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d94:	fb07 3316 	mls	r3, r7, r6, r3
 8000d98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x28a>
 8000da4:	eb1c 0101 	adds.w	r1, ip, r1
 8000da8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000dac:	d216      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d914      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000db2:	3e02      	subs	r6, #2
 8000db4:	4461      	add	r1, ip
 8000db6:	1ac9      	subs	r1, r1, r3
 8000db8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dbc:	e738      	b.n	8000c30 <__udivmoddi4+0x104>
 8000dbe:	462e      	mov	r6, r5
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	e705      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	e6e3      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dc8:	4618      	mov	r0, r3
 8000dca:	e6f8      	b.n	8000bbe <__udivmoddi4+0x92>
 8000dcc:	454b      	cmp	r3, r9
 8000dce:	d2a9      	bcs.n	8000d24 <__udivmoddi4+0x1f8>
 8000dd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dd8:	3801      	subs	r0, #1
 8000dda:	e7a3      	b.n	8000d24 <__udivmoddi4+0x1f8>
 8000ddc:	4646      	mov	r6, r8
 8000dde:	e7ea      	b.n	8000db6 <__udivmoddi4+0x28a>
 8000de0:	4620      	mov	r0, r4
 8000de2:	e794      	b.n	8000d0e <__udivmoddi4+0x1e2>
 8000de4:	4640      	mov	r0, r8
 8000de6:	e7d1      	b.n	8000d8c <__udivmoddi4+0x260>
 8000de8:	46d0      	mov	r8, sl
 8000dea:	e77b      	b.n	8000ce4 <__udivmoddi4+0x1b8>
 8000dec:	3b02      	subs	r3, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	e732      	b.n	8000c58 <__udivmoddi4+0x12c>
 8000df2:	4630      	mov	r0, r6
 8000df4:	e709      	b.n	8000c0a <__udivmoddi4+0xde>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	e742      	b.n	8000c82 <__udivmoddi4+0x156>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <bufclr>:
#include "stdio.h"
#include "string.h"


void bufclr (char *buf)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff fa01 	bl	8000210 <strlen>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	e007      	b.n	8000e28 <bufclr+0x28>
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	3301      	adds	r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	dbf3      	blt.n	8000e18 <bufclr+0x18>
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <ESP_Init>:


void ESP_Init (char *SSID, char *PASSWD)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b096      	sub	sp, #88	; 0x58
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 8000e46:	f000 f933 	bl	80010b0 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 8000e4a:	4823      	ldr	r0, [pc, #140]	; (8000ed8 <ESP_Init+0x9c>)
 8000e4c:	f000 f9dc 	bl	8001208 <Uart_sendstring>
	HAL_Delay(1000);
 8000e50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e54:	f000 fea2 	bl	8001b9c <HAL_Delay>

	Uart_flush();
 8000e58:	f000 f952 	bl	8001100 <Uart_flush>

	/********* AT **********/
	Uart_sendstring("AT\r\n");
 8000e5c:	481f      	ldr	r0, [pc, #124]	; (8000edc <ESP_Init+0xa0>)
 8000e5e:	f000 f9d3 	bl	8001208 <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 8000e62:	bf00      	nop
 8000e64:	481e      	ldr	r0, [pc, #120]	; (8000ee0 <ESP_Init+0xa4>)
 8000e66:	f000 f9ff 	bl	8001268 <Wait_for>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0f9      	beq.n	8000e64 <ESP_Init+0x28>

	Uart_flush();
 8000e70:	f000 f946 	bl	8001100 <Uart_flush>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n");
 8000e74:	481b      	ldr	r0, [pc, #108]	; (8000ee4 <ESP_Init+0xa8>)
 8000e76:	f000 f9c7 	bl	8001208 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000e7a:	bf00      	nop
 8000e7c:	4818      	ldr	r0, [pc, #96]	; (8000ee0 <ESP_Init+0xa4>)
 8000e7e:	f000 f9f3 	bl	8001268 <Wait_for>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0f9      	beq.n	8000e7c <ESP_Init+0x40>

	Uart_flush();
 8000e88:	f000 f93a 	bl	8001100 <Uart_flush>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000e8c:	f107 0008 	add.w	r0, r7, #8
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	4914      	ldr	r1, [pc, #80]	; (8000ee8 <ESP_Init+0xac>)
 8000e96:	f003 fb85 	bl	80045a4 <siprintf>
	Uart_sendstring(data);
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f9b2 	bl	8001208 <Uart_sendstring>
	while (!(Wait_for("GOT IP\r\n")));
 8000ea4:	bf00      	nop
 8000ea6:	4811      	ldr	r0, [pc, #68]	; (8000eec <ESP_Init+0xb0>)
 8000ea8:	f000 f9de 	bl	8001268 <Wait_for>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0f9      	beq.n	8000ea6 <ESP_Init+0x6a>

	Uart_flush();
 8000eb2:	f000 f925 	bl	8001100 <Uart_flush>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 8000eb6:	480e      	ldr	r0, [pc, #56]	; (8000ef0 <ESP_Init+0xb4>)
 8000eb8:	f000 f9a6 	bl	8001208 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000ebc:	bf00      	nop
 8000ebe:	4808      	ldr	r0, [pc, #32]	; (8000ee0 <ESP_Init+0xa4>)
 8000ec0:	f000 f9d2 	bl	8001268 <Wait_for>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0f9      	beq.n	8000ebe <ESP_Init+0x82>

	Uart_flush();
 8000eca:	f000 f919 	bl	8001100 <Uart_flush>

}
 8000ece:	bf00      	nop
 8000ed0:	3758      	adds	r7, #88	; 0x58
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	08004eb4 	.word	0x08004eb4
 8000edc:	08004ec0 	.word	0x08004ec0
 8000ee0:	08004ec8 	.word	0x08004ec8
 8000ee4:	08004ed0 	.word	0x08004ed0
 8000ee8:	08004ee0 	.word	0x08004ee0
 8000eec:	08004ef8 	.word	0x08004ef8
 8000ef0:	08004f04 	.word	0x08004f04

08000ef4 <ESP_Send_Multi>:
	Ringbuf_init();

}

void ESP_Send_Multi (char *APIkey, int numberoffileds, uint16_t value[])
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	f5ad 7d3e 	sub.w	sp, sp, #760	; 0x2f8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000f00:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8000f04:	6018      	str	r0, [r3, #0]
 8000f06:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000f0a:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8000f0e:	6019      	str	r1, [r3, #0]
 8000f10:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000f14:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000f18:	601a      	str	r2, [r3, #0]
	char local_buf[500] = {0};
 8000f1a:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000f1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	3304      	adds	r3, #4
 8000f28:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f003 fb30 	bl	8004594 <memset>
	char local_buf2[30] = {0};
 8000f34:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000f38:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]
 8000f4e:	615a      	str	r2, [r3, #20]
 8000f50:	831a      	strh	r2, [r3, #24]
	char field_buf[200] = {0};
 8000f52:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000f56:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	3304      	adds	r3, #4
 8000f60:	22c4      	movs	r2, #196	; 0xc4
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 fb15 	bl	8004594 <memset>


	Uart_sendstring("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n");
 8000f6a:	4848      	ldr	r0, [pc, #288]	; (800108c <ESP_Send_Multi+0x198>)
 8000f6c:	f000 f94c 	bl	8001208 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000f70:	bf00      	nop
 8000f72:	4847      	ldr	r0, [pc, #284]	; (8001090 <ESP_Send_Multi+0x19c>)
 8000f74:	f000 f978 	bl	8001268 <Wait_for>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0f9      	beq.n	8000f72 <ESP_Send_Multi+0x7e>

	sprintf (local_buf, "GET /update?api_key=%s", APIkey);
 8000f7e:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000f82:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8000f86:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4941      	ldr	r1, [pc, #260]	; (8001094 <ESP_Send_Multi+0x1a0>)
 8000f8e:	f003 fb09 	bl	80045a4 <siprintf>
	for (int i=0; i<numberoffileds; i++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8000f98:	e01f      	b.n	8000fda <ESP_Send_Multi+0xe6>
	{
		sprintf(field_buf, "&field%d=%u",i+1, value[i]);
 8000f9a:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8000f9e:	1c59      	adds	r1, r3, #1
 8000fa0:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8000faa:	f5a2 723d 	sub.w	r2, r2, #756	; 0x2f4
 8000fae:	6812      	ldr	r2, [r2, #0]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	f107 0014 	add.w	r0, r7, #20
 8000fb8:	460a      	mov	r2, r1
 8000fba:	4937      	ldr	r1, [pc, #220]	; (8001098 <ESP_Send_Multi+0x1a4>)
 8000fbc:	f003 faf2 	bl	80045a4 <siprintf>
		strcat (local_buf, field_buf);
 8000fc0:	f107 0214 	add.w	r2, r7, #20
 8000fc4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f003 fb0a 	bl	80045e4 <strcat>
	for (int i=0; i<numberoffileds; i++)
 8000fd0:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8000fda:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000fde:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8000fe2:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dbd6      	blt.n	8000f9a <ESP_Send_Multi+0xa6>
	}

	strcat(local_buf, "\r\n");
 8000fec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff f90d 	bl	8000210 <strlen>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000ffe:	4413      	add	r3, r2
 8001000:	4a26      	ldr	r2, [pc, #152]	; (800109c <ESP_Send_Multi+0x1a8>)
 8001002:	8811      	ldrh	r1, [r2, #0]
 8001004:	7892      	ldrb	r2, [r2, #2]
 8001006:	8019      	strh	r1, [r3, #0]
 8001008:	709a      	strb	r2, [r3, #2]
	int len = strlen (local_buf);
 800100a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff f8fe 	bl	8000210 <strlen>
 8001014:	4603      	mov	r3, r0
 8001016:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0

	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 800101a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800101e:	f8d7 22f0 	ldr.w	r2, [r7, #752]	; 0x2f0
 8001022:	491f      	ldr	r1, [pc, #124]	; (80010a0 <ESP_Send_Multi+0x1ac>)
 8001024:	4618      	mov	r0, r3
 8001026:	f003 fabd 	bl	80045a4 <siprintf>
	Uart_sendstring(local_buf2);
 800102a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f8ea 	bl	8001208 <Uart_sendstring>
	while (!(Wait_for(">")));
 8001034:	bf00      	nop
 8001036:	481b      	ldr	r0, [pc, #108]	; (80010a4 <ESP_Send_Multi+0x1b0>)
 8001038:	f000 f916 	bl	8001268 <Wait_for>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d0f9      	beq.n	8001036 <ESP_Send_Multi+0x142>

	Uart_sendstring (local_buf);
 8001042:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f8de 	bl	8001208 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 800104c:	bf00      	nop
 800104e:	4816      	ldr	r0, [pc, #88]	; (80010a8 <ESP_Send_Multi+0x1b4>)
 8001050:	f000 f90a 	bl	8001268 <Wait_for>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0f9      	beq.n	800104e <ESP_Send_Multi+0x15a>

	while (!(Wait_for("CLOSED")));
 800105a:	bf00      	nop
 800105c:	4813      	ldr	r0, [pc, #76]	; (80010ac <ESP_Send_Multi+0x1b8>)
 800105e:	f000 f903 	bl	8001268 <Wait_for>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0f9      	beq.n	800105c <ESP_Send_Multi+0x168>

	bufclr(local_buf);
 8001068:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fec7 	bl	8000e00 <bufclr>
	bufclr(local_buf2);
 8001072:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fec2 	bl	8000e00 <bufclr>

	Ringbuf_init();
 800107c:	f000 f818 	bl	80010b0 <Ringbuf_init>

}
 8001080:	bf00      	nop
 8001082:	f507 773e 	add.w	r7, r7, #760	; 0x2f8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	08004f14 	.word	0x08004f14
 8001090:	08004ec8 	.word	0x08004ec8
 8001094:	08004f8c 	.word	0x08004f8c
 8001098:	08004fa4 	.word	0x08004fa4
 800109c:	08004fb0 	.word	0x08004fb0
 80010a0:	08004f64 	.word	0x08004f64
 80010a4:	08004f74 	.word	0x08004f74
 80010a8:	08004f78 	.word	0x08004f78
 80010ac:	08004f84 	.word	0x08004f84

080010b0 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80010b4:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <Ringbuf_init+0x3c>)
 80010b6:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <Ringbuf_init+0x40>)
 80010b8:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <Ringbuf_init+0x44>)
 80010bc:	4a0e      	ldr	r2, [pc, #56]	; (80010f8 <Ringbuf_init+0x48>)
 80010be:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <Ringbuf_init+0x4c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	695a      	ldr	r2, [r3, #20]
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <Ringbuf_init+0x4c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0201 	orr.w	r2, r2, #1
 80010ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <Ringbuf_init+0x4c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <Ringbuf_init+0x4c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f042 0220 	orr.w	r2, r2, #32
 80010de:	60da      	str	r2, [r3, #12]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	2000011c 	.word	0x2000011c
 80010f0:	2000008c 	.word	0x2000008c
 80010f4:	20000120 	.word	0x20000120
 80010f8:	200000d4 	.word	0x200000d4
 80010fc:	2000016c 	.word	0x2000016c

08001100 <Uart_flush>:
    buffer->head = i;
  }
}

void Uart_flush (void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

	  _rx_buffer->head = _rx_buffer->tail;
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <Uart_flush+0x1c>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <Uart_flush+0x1c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800110e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	2000011c 	.word	0x2000011c

08001120 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <Uart_read+0x4c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <Uart_read+0x4c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	429a      	cmp	r2, r3
 8001134:	d102      	bne.n	800113c <Uart_read+0x1c>
  {
    return -1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800113a:	e010      	b.n	800115e <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <Uart_read+0x4c>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <Uart_read+0x4c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	5cd3      	ldrb	r3, [r2, r3]
 8001148:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <Uart_read+0x4c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <Uart_read+0x4c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800115a:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 800115c:	79fb      	ldrb	r3, [r7, #7]
  }
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	2000011c 	.word	0x2000011c

08001170 <Uart_write>:

void Uart_write(int c)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	db21      	blt.n	80011c2 <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <Uart_write+0x60>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	3301      	adds	r3, #1
 8001186:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800118a:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 800118c:	bf00      	nop
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <Uart_write+0x60>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	429a      	cmp	r2, r3
 8001198:	d0f9      	beq.n	800118e <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <Uart_write+0x60>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <Uart_write+0x60>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	b2c9      	uxtb	r1, r1
 80011a8:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <Uart_write+0x60>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <Uart_write+0x64>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <Uart_write+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011c0:	60da      	str	r2, [r3, #12]
	}
}
 80011c2:	bf00      	nop
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000120 	.word	0x20000120
 80011d4:	2000016c 	.word	0x2000016c

080011d8 <IsDataAvailable>:

int IsDataAvailable(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <IsDataAvailable+0x2c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <IsDataAvailable+0x2c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	3340      	adds	r3, #64	; 0x40
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	2000011c 	.word	0x2000011c

08001208 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8001210:	e006      	b.n	8001220 <Uart_sendstring+0x18>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ffa8 	bl	8001170 <Uart_write>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1f4      	bne.n	8001212 <Uart_sendstring+0xa>
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <Uart_peek+0x30>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <Uart_peek+0x30>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001244:	429a      	cmp	r2, r3
 8001246:	d102      	bne.n	800124e <Uart_peek+0x1a>
  {
    return -1;
 8001248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800124c:	e005      	b.n	800125a <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <Uart_peek+0x30>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <Uart_peek+0x30>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001258:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	2000011c 	.word	0x2000011c

08001268 <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7fe ffcb 	bl	8000210 <strlen>
 800127a:	4603      	mov	r3, r0
 800127c:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 800127e:	bf00      	nop
 8001280:	f7ff ffaa 	bl	80011d8 <IsDataAvailable>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0fa      	beq.n	8001280 <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 800128a:	f7ff ffd3 	bl	8001234 <Uart_peek>
 800128e:	4601      	mov	r1, r0
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4299      	cmp	r1, r3
 800129a:	d01a      	beq.n	80012d2 <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <Wait_for+0xa4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <Wait_for+0xa4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80012ac:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 80012ae:	e7e6      	b.n	800127e <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	3301      	adds	r3, #1
 80012b4:	60fb      	str	r3, [r7, #12]
		Uart_read();
 80012b6:	f7ff ff33 	bl	8001120 <Uart_read>
		if (so_far == len) return 1;
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d101      	bne.n	80012c6 <Wait_for+0x5e>
 80012c2:	2301      	movs	r3, #1
 80012c4:	e01d      	b.n	8001302 <Wait_for+0x9a>
		while (!IsDataAvailable());
 80012c6:	bf00      	nop
 80012c8:	f7ff ff86 	bl	80011d8 <IsDataAvailable>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0fa      	beq.n	80012c8 <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 80012d2:	f7ff ffaf 	bl	8001234 <Uart_peek>
 80012d6:	4601      	mov	r1, r0
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4299      	cmp	r1, r3
 80012e2:	d0e5      	beq.n	80012b0 <Wait_for+0x48>
	}

	if (so_far != len)
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d002      	beq.n	80012f2 <Wait_for+0x8a>
	{
		so_far = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
		goto again;
 80012f0:	e7c5      	b.n	800127e <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d101      	bne.n	80012fe <Wait_for+0x96>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e001      	b.n	8001302 <Wait_for+0x9a>
	else return -1;
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000011c 	.word	0x2000011c

08001310 <ADC_Get_Value>:

uint16_t Value_Buf [4];


uint16_t ADC_Get_Value (void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
	uint16_t val = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Start(&hadc1);
 800131a:	480a      	ldr	r0, [pc, #40]	; (8001344 <ADC_Get_Value+0x34>)
 800131c:	f000 fca6 	bl	8001c6c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001320:	2164      	movs	r1, #100	; 0x64
 8001322:	4808      	ldr	r0, [pc, #32]	; (8001344 <ADC_Get_Value+0x34>)
 8001324:	f000 fda7 	bl	8001e76 <HAL_ADC_PollForConversion>
	val = HAL_ADC_GetValue(&hadc1);
 8001328:	4806      	ldr	r0, [pc, #24]	; (8001344 <ADC_Get_Value+0x34>)
 800132a:	f000 fe2f 	bl	8001f8c <HAL_ADC_GetValue>
 800132e:	4603      	mov	r3, r0
 8001330:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8001332:	4804      	ldr	r0, [pc, #16]	; (8001344 <ADC_Get_Value+0x34>)
 8001334:	f000 fd6c 	bl	8001e10 <HAL_ADC_Stop>
	return val;
 8001338:	88fb      	ldrh	r3, [r7, #6]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000124 	.word	0x20000124

08001348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800134c:	f000 fbb4 	bl	8001ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001350:	f000 f872 	bl	8001438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001354:	f000 f98a 	bl	800166c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001358:	f000 f95e 	bl	8001618 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800135c:	f000 f8de 	bl	800151c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001360:	f000 f930 	bl	80015c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ESP_Init("Deepak","12345678");
 8001364:	492c      	ldr	r1, [pc, #176]	; (8001418 <main+0xd0>)
 8001366:	482d      	ldr	r0, [pc, #180]	; (800141c <main+0xd4>)
 8001368:	f7ff fd68 	bl	8000e3c <ESP_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ADC_Value = ADC_Get_Value();
 800136c:	f7ff ffd0 	bl	8001310 <ADC_Get_Value>
 8001370:	4603      	mov	r3, r0
 8001372:	461a      	mov	r2, r3
 8001374:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <main+0xd8>)
 8001376:	801a      	strh	r2, [r3, #0]
	  Voltage = ((float) ADC_Value * 5.0 / 1023);
 8001378:	4b29      	ldr	r3, [pc, #164]	; (8001420 <main+0xd8>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001384:	ee17 0a90 	vmov	r0, s15
 8001388:	f7ff f8fe 	bl	8000588 <__aeabi_f2d>
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <main+0xdc>)
 8001392:	f7ff f951 	bl	8000638 <__aeabi_dmul>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	a31c      	add	r3, pc, #112	; (adr r3, 8001410 <main+0xc8>)
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f7ff fa72 	bl	800088c <__aeabi_ddiv>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fb54 	bl	8000a5c <__aeabi_d2f>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <main+0xe0>)
 80013b8:	6013      	str	r3, [r2, #0]
	  count++;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <main+0xe4>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	3301      	adds	r3, #1
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <main+0xe4>)
 80013c4:	701a      	strb	r2, [r3, #0]

	  Value_Buf[0] = ADC_Value;
 80013c6:	4b16      	ldr	r3, [pc, #88]	; (8001420 <main+0xd8>)
 80013c8:	881a      	ldrh	r2, [r3, #0]
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <main+0xe8>)
 80013cc:	801a      	strh	r2, [r3, #0]
	  Value_Buf[1] = count;
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <main+0xe4>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <main+0xe8>)
 80013d6:	805a      	strh	r2, [r3, #2]
	  Value_Buf[2] = count*2;
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <main+0xe4>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	4b13      	ldr	r3, [pc, #76]	; (8001430 <main+0xe8>)
 80013e4:	809a      	strh	r2, [r3, #4]
	  Value_Buf[3] = Voltage;
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <main+0xe0>)
 80013e8:	edd3 7a00 	vldr	s15, [r3]
 80013ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f0:	ee17 3a90 	vmov	r3, s15
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <main+0xe8>)
 80013f8:	80da      	strh	r2, [r3, #6]

	  ESP_Send_Multi("EIW33PCNRX5TTMG5", 4, Value_Buf);
 80013fa:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <main+0xe8>)
 80013fc:	2104      	movs	r1, #4
 80013fe:	480d      	ldr	r0, [pc, #52]	; (8001434 <main+0xec>)
 8001400:	f7ff fd78 	bl	8000ef4 <ESP_Send_Multi>

	  HAL_Delay(15000); // must be at least 15 sec delay between 2 send
 8001404:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001408:	f000 fbc8 	bl	8001b9c <HAL_Delay>
	  ADC_Value = ADC_Get_Value();
 800140c:	e7ae      	b.n	800136c <main+0x24>
 800140e:	bf00      	nop
 8001410:	00000000 	.word	0x00000000
 8001414:	408ff800 	.word	0x408ff800
 8001418:	08004fb4 	.word	0x08004fb4
 800141c:	08004fc0 	.word	0x08004fc0
 8001420:	200001f8 	.word	0x200001f8
 8001424:	40140000 	.word	0x40140000
 8001428:	200001f4 	.word	0x200001f4
 800142c:	200001fa 	.word	0x200001fa
 8001430:	200001fc 	.word	0x200001fc
 8001434:	08004fc8 	.word	0x08004fc8

08001438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b094      	sub	sp, #80	; 0x50
 800143c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	2234      	movs	r2, #52	; 0x34
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f003 f8a4 	bl	8004594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	4b2c      	ldr	r3, [pc, #176]	; (8001514 <SystemClock_Config+0xdc>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	4a2b      	ldr	r2, [pc, #172]	; (8001514 <SystemClock_Config+0xdc>)
 8001466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146a:	6413      	str	r3, [r2, #64]	; 0x40
 800146c:	4b29      	ldr	r3, [pc, #164]	; (8001514 <SystemClock_Config+0xdc>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001478:	2300      	movs	r3, #0
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	4b26      	ldr	r3, [pc, #152]	; (8001518 <SystemClock_Config+0xe0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a25      	ldr	r2, [pc, #148]	; (8001518 <SystemClock_Config+0xe0>)
 8001482:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b23      	ldr	r3, [pc, #140]	; (8001518 <SystemClock_Config+0xe0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001494:	2301      	movs	r3, #1
 8001496:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001498:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800149c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149e:	2302      	movs	r3, #2
 80014a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014a8:	2304      	movs	r3, #4
 80014aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80014ac:	23b4      	movs	r3, #180	; 0xb4
 80014ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b0:	2302      	movs	r3, #2
 80014b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014b4:	2302      	movs	r3, #2
 80014b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014b8:	2302      	movs	r3, #2
 80014ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	4618      	mov	r0, r3
 80014c2:	f001 fe8b 	bl	80031dc <HAL_RCC_OscConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014cc:	f000 f93c 	bl	8001748 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014d0:	f001 faea 	bl	8002aa8 <HAL_PWREx_EnableOverDrive>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80014da:	f000 f935 	bl	8001748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014de:	230f      	movs	r3, #15
 80014e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e2:	2302      	movs	r3, #2
 80014e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	2105      	movs	r1, #5
 80014fc:	4618      	mov	r0, r3
 80014fe:	f001 fb23 	bl	8002b48 <HAL_RCC_ClockConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001508:	f000 f91e 	bl	8001748 <Error_Handler>
  }
}
 800150c:	bf00      	nop
 800150e:	3750      	adds	r7, #80	; 0x50
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40023800 	.word	0x40023800
 8001518:	40007000 	.word	0x40007000

0800151c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001522:	463b      	mov	r3, r7
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800152e:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <MX_ADC1_Init+0x9c>)
 8001530:	4a22      	ldr	r2, [pc, #136]	; (80015bc <MX_ADC1_Init+0xa0>)
 8001532:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001534:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <MX_ADC1_Init+0x9c>)
 8001536:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800153a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800153c:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <MX_ADC1_Init+0x9c>)
 800153e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001542:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001544:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <MX_ADC1_Init+0x9c>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <MX_ADC1_Init+0x9c>)
 800154c:	2201      	movs	r2, #1
 800154e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <MX_ADC1_Init+0x9c>)
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <MX_ADC1_Init+0x9c>)
 800155a:	2200      	movs	r2, #0
 800155c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800155e:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <MX_ADC1_Init+0x9c>)
 8001560:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <MX_ADC1_Init+0xa4>)
 8001562:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MX_ADC1_Init+0x9c>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <MX_ADC1_Init+0x9c>)
 800156c:	2201      	movs	r2, #1
 800156e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_ADC1_Init+0x9c>)
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_ADC1_Init+0x9c>)
 800157a:	2201      	movs	r2, #1
 800157c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800157e:	480e      	ldr	r0, [pc, #56]	; (80015b8 <MX_ADC1_Init+0x9c>)
 8001580:	f000 fb30 	bl	8001be4 <HAL_ADC_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800158a:	f000 f8dd 	bl	8001748 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800158e:	2301      	movs	r3, #1
 8001590:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001592:	2301      	movs	r3, #1
 8001594:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159a:	463b      	mov	r3, r7
 800159c:	4619      	mov	r1, r3
 800159e:	4806      	ldr	r0, [pc, #24]	; (80015b8 <MX_ADC1_Init+0x9c>)
 80015a0:	f000 fd02 	bl	8001fa8 <HAL_ADC_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80015aa:	f000 f8cd 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000124 	.word	0x20000124
 80015bc:	40012000 	.word	0x40012000
 80015c0:	0f000001 	.word	0x0f000001

080015c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015ca:	4a12      	ldr	r2, [pc, #72]	; (8001614 <MX_USART1_UART_Init+0x50>)
 80015cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015ea:	220c      	movs	r2, #12
 80015ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015fc:	f002 f88c 	bl	8003718 <HAL_UART_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001606:	f000 f89f 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2000016c 	.word	0x2000016c
 8001614:	40011000 	.word	0x40011000

08001618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <MX_USART2_UART_Init+0x50>)
 8001620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800163e:	220c      	movs	r2, #12
 8001640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001650:	f002 f862 	bl	8003718 <HAL_UART_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800165a:	f000 f875 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200001b0 	.word	0x200001b0
 8001668:	40004400 	.word	0x40004400

0800166c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b2d      	ldr	r3, [pc, #180]	; (800173c <MX_GPIO_Init+0xd0>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a2c      	ldr	r2, [pc, #176]	; (800173c <MX_GPIO_Init+0xd0>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b2a      	ldr	r3, [pc, #168]	; (800173c <MX_GPIO_Init+0xd0>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b26      	ldr	r3, [pc, #152]	; (800173c <MX_GPIO_Init+0xd0>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a25      	ldr	r2, [pc, #148]	; (800173c <MX_GPIO_Init+0xd0>)
 80016a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b23      	ldr	r3, [pc, #140]	; (800173c <MX_GPIO_Init+0xd0>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	4b1f      	ldr	r3, [pc, #124]	; (800173c <MX_GPIO_Init+0xd0>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a1e      	ldr	r2, [pc, #120]	; (800173c <MX_GPIO_Init+0xd0>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b1c      	ldr	r3, [pc, #112]	; (800173c <MX_GPIO_Init+0xd0>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <MX_GPIO_Init+0xd0>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a17      	ldr	r2, [pc, #92]	; (800173c <MX_GPIO_Init+0xd0>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <MX_GPIO_Init+0xd0>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2120      	movs	r1, #32
 80016f6:	4812      	ldr	r0, [pc, #72]	; (8001740 <MX_GPIO_Init+0xd4>)
 80016f8:	f001 f9bc 	bl	8002a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001702:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	480c      	ldr	r0, [pc, #48]	; (8001744 <MX_GPIO_Init+0xd8>)
 8001714:	f001 f81a 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001718:	2320      	movs	r3, #32
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	4804      	ldr	r0, [pc, #16]	; (8001740 <MX_GPIO_Init+0xd4>)
 8001730:	f001 f80c 	bl	800274c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001734:	bf00      	nop
 8001736:	3728      	adds	r7, #40	; 0x28
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40023800 	.word	0x40023800
 8001740:	40020000 	.word	0x40020000
 8001744:	40020800 	.word	0x40020800

08001748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800174c:	b672      	cpsid	i
}
 800174e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001750:	e7fe      	b.n	8001750 <Error_Handler+0x8>
	...

08001754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_MspInit+0x4c>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <HAL_MspInit+0x4c>)
 8001764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <HAL_MspInit+0x4c>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_MspInit+0x4c>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <HAL_MspInit+0x4c>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001784:	6413      	str	r3, [r2, #64]	; 0x40
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_MspInit+0x4c>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001792:	2007      	movs	r0, #7
 8001794:	f000 ff06 	bl	80025a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40023800 	.word	0x40023800

080017a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a24      	ldr	r2, [pc, #144]	; (8001854 <HAL_ADC_MspInit+0xb0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d141      	bne.n	800184a <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <HAL_ADC_MspInit+0xb4>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	4a22      	ldr	r2, [pc, #136]	; (8001858 <HAL_ADC_MspInit+0xb4>)
 80017d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d4:	6453      	str	r3, [r2, #68]	; 0x44
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <HAL_ADC_MspInit+0xb4>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_ADC_MspInit+0xb4>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a1b      	ldr	r2, [pc, #108]	; (8001858 <HAL_ADC_MspInit+0xb4>)
 80017ec:	f043 0304 	orr.w	r3, r3, #4
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_ADC_MspInit+0xb4>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_ADC_MspInit+0xb4>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a14      	ldr	r2, [pc, #80]	; (8001858 <HAL_ADC_MspInit+0xb4>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_ADC_MspInit+0xb4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800181a:	2301      	movs	r3, #1
 800181c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181e:	2303      	movs	r3, #3
 8001820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	480b      	ldr	r0, [pc, #44]	; (800185c <HAL_ADC_MspInit+0xb8>)
 800182e:	f000 ff8d 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001832:	2302      	movs	r3, #2
 8001834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001836:	2303      	movs	r3, #3
 8001838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	4806      	ldr	r0, [pc, #24]	; (8001860 <HAL_ADC_MspInit+0xbc>)
 8001846:	f000 ff81 	bl	800274c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	; 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40012000 	.word	0x40012000
 8001858:	40023800 	.word	0x40023800
 800185c:	40020800 	.word	0x40020800
 8001860:	40020000 	.word	0x40020000

08001864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08c      	sub	sp, #48	; 0x30
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a36      	ldr	r2, [pc, #216]	; (800195c <HAL_UART_MspInit+0xf8>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d135      	bne.n	80018f2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	4b35      	ldr	r3, [pc, #212]	; (8001960 <HAL_UART_MspInit+0xfc>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	4a34      	ldr	r2, [pc, #208]	; (8001960 <HAL_UART_MspInit+0xfc>)
 8001890:	f043 0310 	orr.w	r3, r3, #16
 8001894:	6453      	str	r3, [r2, #68]	; 0x44
 8001896:	4b32      	ldr	r3, [pc, #200]	; (8001960 <HAL_UART_MspInit+0xfc>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	61bb      	str	r3, [r7, #24]
 80018a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	4b2e      	ldr	r3, [pc, #184]	; (8001960 <HAL_UART_MspInit+0xfc>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a2d      	ldr	r2, [pc, #180]	; (8001960 <HAL_UART_MspInit+0xfc>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <HAL_UART_MspInit+0xfc>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018d0:	2307      	movs	r3, #7
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	f107 031c 	add.w	r3, r7, #28
 80018d8:	4619      	mov	r1, r3
 80018da:	4822      	ldr	r0, [pc, #136]	; (8001964 <HAL_UART_MspInit+0x100>)
 80018dc:	f000 ff36 	bl	800274c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2100      	movs	r1, #0
 80018e4:	2025      	movs	r0, #37	; 0x25
 80018e6:	f000 fe68 	bl	80025ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018ea:	2025      	movs	r0, #37	; 0x25
 80018ec:	f000 fe81 	bl	80025f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018f0:	e030      	b.n	8001954 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a1c      	ldr	r2, [pc, #112]	; (8001968 <HAL_UART_MspInit+0x104>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d12b      	bne.n	8001954 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_UART_MspInit+0xfc>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	4a16      	ldr	r2, [pc, #88]	; (8001960 <HAL_UART_MspInit+0xfc>)
 8001906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800190a:	6413      	str	r3, [r2, #64]	; 0x40
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <HAL_UART_MspInit+0xfc>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	4b10      	ldr	r3, [pc, #64]	; (8001960 <HAL_UART_MspInit+0xfc>)
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <HAL_UART_MspInit+0xfc>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6313      	str	r3, [r2, #48]	; 0x30
 8001928:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_UART_MspInit+0xfc>)
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001934:	230c      	movs	r3, #12
 8001936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	4619      	mov	r1, r3
 800194e:	4805      	ldr	r0, [pc, #20]	; (8001964 <HAL_UART_MspInit+0x100>)
 8001950:	f000 fefc 	bl	800274c <HAL_GPIO_Init>
}
 8001954:	bf00      	nop
 8001956:	3730      	adds	r7, #48	; 0x30
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40011000 	.word	0x40011000
 8001960:	40023800 	.word	0x40023800
 8001964:	40020000 	.word	0x40020000
 8001968:	40004400 	.word	0x40004400

0800196c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <NMI_Handler+0x4>

08001972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <HardFault_Handler+0x4>

08001978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800197c:	e7fe      	b.n	800197c <MemManage_Handler+0x4>

0800197e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <BusFault_Handler+0x4>

08001984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <UsageFault_Handler+0x4>

0800198a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b8:	f000 f8d0 	bl	8001b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}

080019c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	extern void Uart_isr (UART_HandleTypeDef *huart);
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <USART1_IRQHandler+0x10>)
 80019c6:	f001 fef5 	bl	80037b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000016c 	.word	0x2000016c

080019d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019dc:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <_sbrk+0x5c>)
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <_sbrk+0x60>)
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <_sbrk+0x64>)
 80019f2:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <_sbrk+0x68>)
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d207      	bcs.n	8001a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a04:	f002 fd9c 	bl	8004540 <__errno>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a12:	e009      	b.n	8001a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <_sbrk+0x64>)
 8001a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a26:	68fb      	ldr	r3, [r7, #12]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20020000 	.word	0x20020000
 8001a34:	00000400 	.word	0x00000400
 8001a38:	20000204 	.word	0x20000204
 8001a3c:	20000220 	.word	0x20000220

08001a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <SystemInit+0x20>)
 8001a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4a:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <SystemInit+0x20>)
 8001a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a68:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a6a:	490e      	ldr	r1, [pc, #56]	; (8001aa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a6c:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a70:	e002      	b.n	8001a78 <LoopCopyDataInit>

08001a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a76:	3304      	adds	r3, #4

08001a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a7c:	d3f9      	bcc.n	8001a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7e:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a80:	4c0b      	ldr	r4, [pc, #44]	; (8001ab0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a84:	e001      	b.n	8001a8a <LoopFillZerobss>

08001a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a88:	3204      	adds	r2, #4

08001a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a8c:	d3fb      	bcc.n	8001a86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a8e:	f7ff ffd7 	bl	8001a40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a92:	f002 fd5b 	bl	800454c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a96:	f7ff fc57 	bl	8001348 <main>
  bx  lr    
 8001a9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001aa8:	08005038 	.word	0x08005038
  ldr r2, =_sbss
 8001aac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ab0:	2000021c 	.word	0x2000021c

08001ab4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab4:	e7fe      	b.n	8001ab4 <ADC_IRQHandler>
	...

08001ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001abc:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <HAL_Init+0x40>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <HAL_Init+0x40>)
 8001ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_Init+0x40>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <HAL_Init+0x40>)
 8001ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <HAL_Init+0x40>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a07      	ldr	r2, [pc, #28]	; (8001af8 <HAL_Init+0x40>)
 8001ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae0:	2003      	movs	r0, #3
 8001ae2:	f000 fd5f 	bl	80025a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f000 f808 	bl	8001afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aec:	f7ff fe32 	bl	8001754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023c00 	.word	0x40023c00

08001afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_InitTick+0x54>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_InitTick+0x58>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 fd77 	bl	800260e <HAL_SYSTICK_Config>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00e      	b.n	8001b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b0f      	cmp	r3, #15
 8001b2e:	d80a      	bhi.n	8001b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b30:	2200      	movs	r2, #0
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b38:	f000 fd3f 	bl	80025ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b3c:	4a06      	ldr	r2, [pc, #24]	; (8001b58 <HAL_InitTick+0x5c>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e000      	b.n	8001b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000000 	.word	0x20000000
 8001b54:	20000008 	.word	0x20000008
 8001b58:	20000004 	.word	0x20000004

08001b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_IncTick+0x20>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_IncTick+0x24>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <HAL_IncTick+0x24>)
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000008 	.word	0x20000008
 8001b80:	20000208 	.word	0x20000208

08001b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return uwTick;
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <HAL_GetTick+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000208 	.word	0x20000208

08001b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba4:	f7ff ffee 	bl	8001b84 <HAL_GetTick>
 8001ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bb4:	d005      	beq.n	8001bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_Delay+0x44>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bc2:	bf00      	nop
 8001bc4:	f7ff ffde 	bl	8001b84 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d8f7      	bhi.n	8001bc4 <HAL_Delay+0x28>
  {
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000008 	.word	0x20000008

08001be4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e033      	b.n	8001c62 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d109      	bne.n	8001c16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff fdce 	bl	80017a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d118      	bne.n	8001c54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c2a:	f023 0302 	bic.w	r3, r3, #2
 8001c2e:	f043 0202 	orr.w	r2, r3, #2
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 fae8 	bl	800220c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f023 0303 	bic.w	r3, r3, #3
 8001c4a:	f043 0201 	orr.w	r2, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
 8001c52:	e001      	b.n	8001c58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_ADC_Start+0x1a>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e0b2      	b.n	8001dec <HAL_ADC_Start+0x180>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d018      	beq.n	8001cce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cac:	4b52      	ldr	r3, [pc, #328]	; (8001df8 <HAL_ADC_Start+0x18c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a52      	ldr	r2, [pc, #328]	; (8001dfc <HAL_ADC_Start+0x190>)
 8001cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb6:	0c9a      	lsrs	r2, r3, #18
 8001cb8:	4613      	mov	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001cc0:	e002      	b.n	8001cc8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f9      	bne.n	8001cc2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d17a      	bne.n	8001dd2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d1a:	d106      	bne.n	8001d2a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d20:	f023 0206 	bic.w	r2, r3, #6
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	645a      	str	r2, [r3, #68]	; 0x44
 8001d28:	e002      	b.n	8001d30 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d38:	4b31      	ldr	r3, [pc, #196]	; (8001e00 <HAL_ADC_Start+0x194>)
 8001d3a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d44:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d12a      	bne.n	8001da8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a2b      	ldr	r2, [pc, #172]	; (8001e04 <HAL_ADC_Start+0x198>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d015      	beq.n	8001d88 <HAL_ADC_Start+0x11c>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a29      	ldr	r2, [pc, #164]	; (8001e08 <HAL_ADC_Start+0x19c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d105      	bne.n	8001d72 <HAL_ADC_Start+0x106>
 8001d66:	4b26      	ldr	r3, [pc, #152]	; (8001e00 <HAL_ADC_Start+0x194>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00a      	beq.n	8001d88 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a25      	ldr	r2, [pc, #148]	; (8001e0c <HAL_ADC_Start+0x1a0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d136      	bne.n	8001dea <HAL_ADC_Start+0x17e>
 8001d7c:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <HAL_ADC_Start+0x194>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d130      	bne.n	8001dea <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d129      	bne.n	8001dea <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	e020      	b.n	8001dea <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a15      	ldr	r2, [pc, #84]	; (8001e04 <HAL_ADC_Start+0x198>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d11b      	bne.n	8001dea <HAL_ADC_Start+0x17e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d114      	bne.n	8001dea <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	e00b      	b.n	8001dea <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f043 0210 	orr.w	r2, r3, #16
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f043 0201 	orr.w	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	431bde83 	.word	0x431bde83
 8001e00:	40012300 	.word	0x40012300
 8001e04:	40012000 	.word	0x40012000
 8001e08:	40012100 	.word	0x40012100
 8001e0c:	40012200 	.word	0x40012200

08001e10 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_ADC_Stop+0x16>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e021      	b.n	8001e6a <HAL_ADC_Stop+0x5a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0201 	bic.w	r2, r2, #1
 8001e3c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d109      	bne.n	8001e60 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e54:	f023 0301 	bic.w	r3, r3, #1
 8001e58:	f043 0201 	orr.w	r2, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b084      	sub	sp, #16
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e92:	d113      	bne.n	8001ebc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea2:	d10b      	bne.n	8001ebc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f043 0220 	orr.w	r2, r3, #32
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e063      	b.n	8001f84 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001ebc:	f7ff fe62 	bl	8001b84 <HAL_GetTick>
 8001ec0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ec2:	e021      	b.n	8001f08 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eca:	d01d      	beq.n	8001f08 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <HAL_ADC_PollForConversion+0x6c>
 8001ed2:	f7ff fe57 	bl	8001b84 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d212      	bcs.n	8001f08 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d00b      	beq.n	8001f08 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f043 0204 	orr.w	r2, r3, #4
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e03d      	b.n	8001f84 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d1d6      	bne.n	8001ec4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f06f 0212 	mvn.w	r2, #18
 8001f1e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d123      	bne.n	8001f82 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d11f      	bne.n	8001f82 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d111      	bne.n	8001f82 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d105      	bne.n	8001f82 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f043 0201 	orr.w	r2, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x1c>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e113      	b.n	80021ec <HAL_ADC_ConfigChannel+0x244>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b09      	cmp	r3, #9
 8001fd2:	d925      	bls.n	8002020 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68d9      	ldr	r1, [r3, #12]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3b1e      	subs	r3, #30
 8001fea:	2207      	movs	r2, #7
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43da      	mvns	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68d9      	ldr	r1, [r3, #12]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	b29b      	uxth	r3, r3
 800200a:	4618      	mov	r0, r3
 800200c:	4603      	mov	r3, r0
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4403      	add	r3, r0
 8002012:	3b1e      	subs	r3, #30
 8002014:	409a      	lsls	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	e022      	b.n	8002066 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6919      	ldr	r1, [r3, #16]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	b29b      	uxth	r3, r3
 800202c:	461a      	mov	r2, r3
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	2207      	movs	r2, #7
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	400a      	ands	r2, r1
 8002042:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6919      	ldr	r1, [r3, #16]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	b29b      	uxth	r3, r3
 8002054:	4618      	mov	r0, r3
 8002056:	4603      	mov	r3, r0
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4403      	add	r3, r0
 800205c:	409a      	lsls	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b06      	cmp	r3, #6
 800206c:	d824      	bhi.n	80020b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	3b05      	subs	r3, #5
 8002080:	221f      	movs	r2, #31
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43da      	mvns	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	400a      	ands	r2, r1
 800208e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	b29b      	uxth	r3, r3
 800209c:	4618      	mov	r0, r3
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	3b05      	subs	r3, #5
 80020aa:	fa00 f203 	lsl.w	r2, r0, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	635a      	str	r2, [r3, #52]	; 0x34
 80020b6:	e04c      	b.n	8002152 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b0c      	cmp	r3, #12
 80020be:	d824      	bhi.n	800210a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	3b23      	subs	r3, #35	; 0x23
 80020d2:	221f      	movs	r2, #31
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43da      	mvns	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	400a      	ands	r2, r1
 80020e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	4618      	mov	r0, r3
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	3b23      	subs	r3, #35	; 0x23
 80020fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	631a      	str	r2, [r3, #48]	; 0x30
 8002108:	e023      	b.n	8002152 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	3b41      	subs	r3, #65	; 0x41
 800211c:	221f      	movs	r2, #31
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	400a      	ands	r2, r1
 800212a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	b29b      	uxth	r3, r3
 8002138:	4618      	mov	r0, r3
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	3b41      	subs	r3, #65	; 0x41
 8002146:	fa00 f203 	lsl.w	r2, r0, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002152:	4b29      	ldr	r3, [pc, #164]	; (80021f8 <HAL_ADC_ConfigChannel+0x250>)
 8002154:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a28      	ldr	r2, [pc, #160]	; (80021fc <HAL_ADC_ConfigChannel+0x254>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d10f      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x1d8>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b12      	cmp	r3, #18
 8002166:	d10b      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <HAL_ADC_ConfigChannel+0x254>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d12b      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x23a>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a1c      	ldr	r2, [pc, #112]	; (8002200 <HAL_ADC_ConfigChannel+0x258>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d003      	beq.n	800219c <HAL_ADC_ConfigChannel+0x1f4>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b11      	cmp	r3, #17
 800219a:	d122      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a11      	ldr	r2, [pc, #68]	; (8002200 <HAL_ADC_ConfigChannel+0x258>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d111      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_ADC_ConfigChannel+0x25c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a11      	ldr	r2, [pc, #68]	; (8002208 <HAL_ADC_ConfigChannel+0x260>)
 80021c4:	fba2 2303 	umull	r2, r3, r2, r3
 80021c8:	0c9a      	lsrs	r2, r3, #18
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021d4:	e002      	b.n	80021dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	3b01      	subs	r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f9      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	40012300 	.word	0x40012300
 80021fc:	40012000 	.word	0x40012000
 8002200:	10000012 	.word	0x10000012
 8002204:	20000000 	.word	0x20000000
 8002208:	431bde83 	.word	0x431bde83

0800220c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002214:	4b79      	ldr	r3, [pc, #484]	; (80023fc <ADC_Init+0x1f0>)
 8002216:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	431a      	orrs	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002240:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6859      	ldr	r1, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	021a      	lsls	r2, r3, #8
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002264:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002286:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6899      	ldr	r1, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229e:	4a58      	ldr	r2, [pc, #352]	; (8002400 <ADC_Init+0x1f4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d022      	beq.n	80022ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6899      	ldr	r1, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6899      	ldr	r1, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	e00f      	b.n	800230a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002308:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0202 	bic.w	r2, r2, #2
 8002318:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6899      	ldr	r1, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	7e1b      	ldrb	r3, [r3, #24]
 8002324:	005a      	lsls	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d01b      	beq.n	8002370 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002346:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002356:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6859      	ldr	r1, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	3b01      	subs	r3, #1
 8002364:	035a      	lsls	r2, r3, #13
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	e007      	b.n	8002380 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800237e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800238e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	3b01      	subs	r3, #1
 800239c:	051a      	lsls	r2, r3, #20
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6899      	ldr	r1, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023c2:	025a      	lsls	r2, r3, #9
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6899      	ldr	r1, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	029a      	lsls	r2, r3, #10
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	609a      	str	r2, [r3, #8]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	40012300 	.word	0x40012300
 8002400:	0f000001 	.word	0x0f000001

08002404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002420:	4013      	ands	r3, r2
 8002422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800242c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002436:	4a04      	ldr	r2, [pc, #16]	; (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	60d3      	str	r3, [r2, #12]
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <__NVIC_GetPriorityGrouping+0x18>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	f003 0307 	and.w	r3, r3, #7
}
 800245a:	4618      	mov	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	2b00      	cmp	r3, #0
 8002478:	db0b      	blt.n	8002492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	f003 021f 	and.w	r2, r3, #31
 8002480:	4907      	ldr	r1, [pc, #28]	; (80024a0 <__NVIC_EnableIRQ+0x38>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	2001      	movs	r0, #1
 800248a:	fa00 f202 	lsl.w	r2, r0, r2
 800248e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000e100 	.word	0xe000e100

080024a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	6039      	str	r1, [r7, #0]
 80024ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	db0a      	blt.n	80024ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	490c      	ldr	r1, [pc, #48]	; (80024f0 <__NVIC_SetPriority+0x4c>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	0112      	lsls	r2, r2, #4
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	440b      	add	r3, r1
 80024c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024cc:	e00a      	b.n	80024e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4908      	ldr	r1, [pc, #32]	; (80024f4 <__NVIC_SetPriority+0x50>)
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	3b04      	subs	r3, #4
 80024dc:	0112      	lsls	r2, r2, #4
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	440b      	add	r3, r1
 80024e2:	761a      	strb	r2, [r3, #24]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000e100 	.word	0xe000e100
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	; 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f1c3 0307 	rsb	r3, r3, #7
 8002512:	2b04      	cmp	r3, #4
 8002514:	bf28      	it	cs
 8002516:	2304      	movcs	r3, #4
 8002518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3304      	adds	r3, #4
 800251e:	2b06      	cmp	r3, #6
 8002520:	d902      	bls.n	8002528 <NVIC_EncodePriority+0x30>
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3b03      	subs	r3, #3
 8002526:	e000      	b.n	800252a <NVIC_EncodePriority+0x32>
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800252c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43da      	mvns	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	401a      	ands	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002540:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	43d9      	mvns	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	4313      	orrs	r3, r2
         );
}
 8002552:	4618      	mov	r0, r3
 8002554:	3724      	adds	r7, #36	; 0x24
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002570:	d301      	bcc.n	8002576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002572:	2301      	movs	r3, #1
 8002574:	e00f      	b.n	8002596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002576:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <SysTick_Config+0x40>)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3b01      	subs	r3, #1
 800257c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800257e:	210f      	movs	r1, #15
 8002580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002584:	f7ff ff8e 	bl	80024a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <SysTick_Config+0x40>)
 800258a:	2200      	movs	r2, #0
 800258c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800258e:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <SysTick_Config+0x40>)
 8002590:	2207      	movs	r2, #7
 8002592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	e000e010 	.word	0xe000e010

080025a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff ff29 	bl	8002404 <__NVIC_SetPriorityGrouping>
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b086      	sub	sp, #24
 80025be:	af00      	add	r7, sp, #0
 80025c0:	4603      	mov	r3, r0
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
 80025c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025cc:	f7ff ff3e 	bl	800244c <__NVIC_GetPriorityGrouping>
 80025d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	6978      	ldr	r0, [r7, #20]
 80025d8:	f7ff ff8e 	bl	80024f8 <NVIC_EncodePriority>
 80025dc:	4602      	mov	r2, r0
 80025de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff5d 	bl	80024a4 <__NVIC_SetPriority>
}
 80025ea:	bf00      	nop
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	4603      	mov	r3, r0
 80025fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ff31 	bl	8002468 <__NVIC_EnableIRQ>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff ffa2 	bl	8002560 <SysTick_Config>
 800261c:	4603      	mov	r3, r0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002634:	f7ff faa6 	bl	8001b84 <HAL_GetTick>
 8002638:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d008      	beq.n	8002658 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2280      	movs	r2, #128	; 0x80
 800264a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e052      	b.n	80026fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0216 	bic.w	r2, r2, #22
 8002666:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002676:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	2b00      	cmp	r3, #0
 800267e:	d103      	bne.n	8002688 <HAL_DMA_Abort+0x62>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002684:	2b00      	cmp	r3, #0
 8002686:	d007      	beq.n	8002698 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0208 	bic.w	r2, r2, #8
 8002696:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0201 	bic.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a8:	e013      	b.n	80026d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026aa:	f7ff fa6b 	bl	8001b84 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b05      	cmp	r3, #5
 80026b6:	d90c      	bls.n	80026d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2220      	movs	r2, #32
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2203      	movs	r2, #3
 80026c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e015      	b.n	80026fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1e4      	bne.n	80026aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e4:	223f      	movs	r2, #63	; 0x3f
 80026e6:	409a      	lsls	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d004      	beq.n	8002724 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2280      	movs	r2, #128	; 0x80
 800271e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e00c      	b.n	800273e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2205      	movs	r2, #5
 8002728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800274c:	b480      	push	{r7}
 800274e:	b089      	sub	sp, #36	; 0x24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800275e:	2300      	movs	r3, #0
 8002760:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	e165      	b.n	8002a34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002768:	2201      	movs	r2, #1
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	429a      	cmp	r2, r3
 8002782:	f040 8154 	bne.w	8002a2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	2b01      	cmp	r3, #1
 8002790:	d005      	beq.n	800279e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800279a:	2b02      	cmp	r3, #2
 800279c:	d130      	bne.n	8002800 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	2203      	movs	r2, #3
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027d4:	2201      	movs	r2, #1
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	091b      	lsrs	r3, r3, #4
 80027ea:	f003 0201 	and.w	r2, r3, #1
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	2b03      	cmp	r3, #3
 800280a:	d017      	beq.n	800283c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	2203      	movs	r2, #3
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d123      	bne.n	8002890 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	08da      	lsrs	r2, r3, #3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3208      	adds	r2, #8
 8002850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	220f      	movs	r2, #15
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	08da      	lsrs	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3208      	adds	r2, #8
 800288a:	69b9      	ldr	r1, [r7, #24]
 800288c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	2203      	movs	r2, #3
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0203 	and.w	r2, r3, #3
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 80ae 	beq.w	8002a2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	4b5d      	ldr	r3, [pc, #372]	; (8002a4c <HAL_GPIO_Init+0x300>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	4a5c      	ldr	r2, [pc, #368]	; (8002a4c <HAL_GPIO_Init+0x300>)
 80028dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e0:	6453      	str	r3, [r2, #68]	; 0x44
 80028e2:	4b5a      	ldr	r3, [pc, #360]	; (8002a4c <HAL_GPIO_Init+0x300>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ee:	4a58      	ldr	r2, [pc, #352]	; (8002a50 <HAL_GPIO_Init+0x304>)
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	3302      	adds	r3, #2
 80028f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	220f      	movs	r2, #15
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a4f      	ldr	r2, [pc, #316]	; (8002a54 <HAL_GPIO_Init+0x308>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d025      	beq.n	8002966 <HAL_GPIO_Init+0x21a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a4e      	ldr	r2, [pc, #312]	; (8002a58 <HAL_GPIO_Init+0x30c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01f      	beq.n	8002962 <HAL_GPIO_Init+0x216>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a4d      	ldr	r2, [pc, #308]	; (8002a5c <HAL_GPIO_Init+0x310>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d019      	beq.n	800295e <HAL_GPIO_Init+0x212>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a4c      	ldr	r2, [pc, #304]	; (8002a60 <HAL_GPIO_Init+0x314>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <HAL_GPIO_Init+0x20e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a4b      	ldr	r2, [pc, #300]	; (8002a64 <HAL_GPIO_Init+0x318>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00d      	beq.n	8002956 <HAL_GPIO_Init+0x20a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a4a      	ldr	r2, [pc, #296]	; (8002a68 <HAL_GPIO_Init+0x31c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d007      	beq.n	8002952 <HAL_GPIO_Init+0x206>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a49      	ldr	r2, [pc, #292]	; (8002a6c <HAL_GPIO_Init+0x320>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d101      	bne.n	800294e <HAL_GPIO_Init+0x202>
 800294a:	2306      	movs	r3, #6
 800294c:	e00c      	b.n	8002968 <HAL_GPIO_Init+0x21c>
 800294e:	2307      	movs	r3, #7
 8002950:	e00a      	b.n	8002968 <HAL_GPIO_Init+0x21c>
 8002952:	2305      	movs	r3, #5
 8002954:	e008      	b.n	8002968 <HAL_GPIO_Init+0x21c>
 8002956:	2304      	movs	r3, #4
 8002958:	e006      	b.n	8002968 <HAL_GPIO_Init+0x21c>
 800295a:	2303      	movs	r3, #3
 800295c:	e004      	b.n	8002968 <HAL_GPIO_Init+0x21c>
 800295e:	2302      	movs	r3, #2
 8002960:	e002      	b.n	8002968 <HAL_GPIO_Init+0x21c>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_GPIO_Init+0x21c>
 8002966:	2300      	movs	r3, #0
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	f002 0203 	and.w	r2, r2, #3
 800296e:	0092      	lsls	r2, r2, #2
 8002970:	4093      	lsls	r3, r2
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002978:	4935      	ldr	r1, [pc, #212]	; (8002a50 <HAL_GPIO_Init+0x304>)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	3302      	adds	r3, #2
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002986:	4b3a      	ldr	r3, [pc, #232]	; (8002a70 <HAL_GPIO_Init+0x324>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029aa:	4a31      	ldr	r2, [pc, #196]	; (8002a70 <HAL_GPIO_Init+0x324>)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029b0:	4b2f      	ldr	r3, [pc, #188]	; (8002a70 <HAL_GPIO_Init+0x324>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d4:	4a26      	ldr	r2, [pc, #152]	; (8002a70 <HAL_GPIO_Init+0x324>)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029da:	4b25      	ldr	r3, [pc, #148]	; (8002a70 <HAL_GPIO_Init+0x324>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029fe:	4a1c      	ldr	r2, [pc, #112]	; (8002a70 <HAL_GPIO_Init+0x324>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a04:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <HAL_GPIO_Init+0x324>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a28:	4a11      	ldr	r2, [pc, #68]	; (8002a70 <HAL_GPIO_Init+0x324>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3301      	adds	r3, #1
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	2b0f      	cmp	r3, #15
 8002a38:	f67f ae96 	bls.w	8002768 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	3724      	adds	r7, #36	; 0x24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40013800 	.word	0x40013800
 8002a54:	40020000 	.word	0x40020000
 8002a58:	40020400 	.word	0x40020400
 8002a5c:	40020800 	.word	0x40020800
 8002a60:	40020c00 	.word	0x40020c00
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40021400 	.word	0x40021400
 8002a6c:	40021800 	.word	0x40021800
 8002a70:	40013c00 	.word	0x40013c00

08002a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	807b      	strh	r3, [r7, #2]
 8002a80:	4613      	mov	r3, r2
 8002a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a84:	787b      	ldrb	r3, [r7, #1]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a8a:	887a      	ldrh	r2, [r7, #2]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a90:	e003      	b.n	8002a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a92:	887b      	ldrh	r3, [r7, #2]
 8002a94:	041a      	lsls	r2, r3, #16
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	619a      	str	r2, [r3, #24]
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a1f      	ldr	r2, [pc, #124]	; (8002b38 <HAL_PWREx_EnableOverDrive+0x90>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ace:	4b1b      	ldr	r3, [pc, #108]	; (8002b3c <HAL_PWREx_EnableOverDrive+0x94>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ad4:	f7ff f856 	bl	8001b84 <HAL_GetTick>
 8002ad8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ada:	e009      	b.n	8002af0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002adc:	f7ff f852 	bl	8001b84 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002aea:	d901      	bls.n	8002af0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e01f      	b.n	8002b30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002af0:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <HAL_PWREx_EnableOverDrive+0x98>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afc:	d1ee      	bne.n	8002adc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002afe:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b04:	f7ff f83e 	bl	8001b84 <HAL_GetTick>
 8002b08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b0a:	e009      	b.n	8002b20 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b0c:	f7ff f83a 	bl	8001b84 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b1a:	d901      	bls.n	8002b20 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e007      	b.n	8002b30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b20:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b2c:	d1ee      	bne.n	8002b0c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	420e0040 	.word	0x420e0040
 8002b40:	40007000 	.word	0x40007000
 8002b44:	420e0044 	.word	0x420e0044

08002b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0cc      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b68      	ldr	r3, [pc, #416]	; (8002d00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 030f 	and.w	r3, r3, #15
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d90c      	bls.n	8002b84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b65      	ldr	r3, [pc, #404]	; (8002d00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b72:	4b63      	ldr	r3, [pc, #396]	; (8002d00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0b8      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d020      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b9c:	4b59      	ldr	r3, [pc, #356]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	4a58      	ldr	r2, [pc, #352]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ba6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb4:	4b53      	ldr	r3, [pc, #332]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4a52      	ldr	r2, [pc, #328]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc0:	4b50      	ldr	r3, [pc, #320]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	494d      	ldr	r1, [pc, #308]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d044      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d107      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be6:	4b47      	ldr	r3, [pc, #284]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d119      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e07f      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d003      	beq.n	8002c06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c06:	4b3f      	ldr	r3, [pc, #252]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e06f      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c16:	4b3b      	ldr	r3, [pc, #236]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e067      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c26:	4b37      	ldr	r3, [pc, #220]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f023 0203 	bic.w	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4934      	ldr	r1, [pc, #208]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c38:	f7fe ffa4 	bl	8001b84 <HAL_GetTick>
 8002c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c40:	f7fe ffa0 	bl	8001b84 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e04f      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	4b2b      	ldr	r3, [pc, #172]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 020c 	and.w	r2, r3, #12
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d1eb      	bne.n	8002c40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c68:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d20c      	bcs.n	8002c90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <HAL_RCC_ClockConfig+0x1b8>)
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <HAL_RCC_ClockConfig+0x1b8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e032      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4916      	ldr	r1, [pc, #88]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	490e      	ldr	r1, [pc, #56]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cce:	f000 f855 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	490a      	ldr	r1, [pc, #40]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce0:	5ccb      	ldrb	r3, [r1, r3]
 8002ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce6:	4a09      	ldr	r2, [pc, #36]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <HAL_RCC_ClockConfig+0x1c8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe ff04 	bl	8001afc <HAL_InitTick>

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023c00 	.word	0x40023c00
 8002d04:	40023800 	.word	0x40023800
 8002d08:	08004fdc 	.word	0x08004fdc
 8002d0c:	20000000 	.word	0x20000000
 8002d10:	20000004 	.word	0x20000004

08002d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d18:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	20000000 	.word	0x20000000

08002d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d30:	f7ff fff0 	bl	8002d14 <HAL_RCC_GetHCLKFreq>
 8002d34:	4602      	mov	r2, r0
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	0a9b      	lsrs	r3, r3, #10
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	4903      	ldr	r1, [pc, #12]	; (8002d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d42:	5ccb      	ldrb	r3, [r1, r3]
 8002d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	08004fec 	.word	0x08004fec

08002d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d58:	f7ff ffdc 	bl	8002d14 <HAL_RCC_GetHCLKFreq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	0b5b      	lsrs	r3, r3, #13
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	4903      	ldr	r1, [pc, #12]	; (8002d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d6a:	5ccb      	ldrb	r3, [r1, r3]
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40023800 	.word	0x40023800
 8002d78:	08004fec 	.word	0x08004fec

08002d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d80:	b0ae      	sub	sp, #184	; 0xb8
 8002d82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002da2:	4bcb      	ldr	r3, [pc, #812]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b0c      	cmp	r3, #12
 8002dac:	f200 8206 	bhi.w	80031bc <HAL_RCC_GetSysClockFreq+0x440>
 8002db0:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db6:	bf00      	nop
 8002db8:	08002ded 	.word	0x08002ded
 8002dbc:	080031bd 	.word	0x080031bd
 8002dc0:	080031bd 	.word	0x080031bd
 8002dc4:	080031bd 	.word	0x080031bd
 8002dc8:	08002df5 	.word	0x08002df5
 8002dcc:	080031bd 	.word	0x080031bd
 8002dd0:	080031bd 	.word	0x080031bd
 8002dd4:	080031bd 	.word	0x080031bd
 8002dd8:	08002dfd 	.word	0x08002dfd
 8002ddc:	080031bd 	.word	0x080031bd
 8002de0:	080031bd 	.word	0x080031bd
 8002de4:	080031bd 	.word	0x080031bd
 8002de8:	08002fed 	.word	0x08002fed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dec:	4bb9      	ldr	r3, [pc, #740]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002dee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002df2:	e1e7      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002df4:	4bb8      	ldr	r3, [pc, #736]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002df6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002dfa:	e1e3      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dfc:	4bb4      	ldr	r3, [pc, #720]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e08:	4bb1      	ldr	r3, [pc, #708]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d071      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e14:	4bae      	ldr	r3, [pc, #696]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	099b      	lsrs	r3, r3, #6
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e20:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e30:	2300      	movs	r3, #0
 8002e32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e3a:	4622      	mov	r2, r4
 8002e3c:	462b      	mov	r3, r5
 8002e3e:	f04f 0000 	mov.w	r0, #0
 8002e42:	f04f 0100 	mov.w	r1, #0
 8002e46:	0159      	lsls	r1, r3, #5
 8002e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e4c:	0150      	lsls	r0, r2, #5
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4621      	mov	r1, r4
 8002e54:	1a51      	subs	r1, r2, r1
 8002e56:	6439      	str	r1, [r7, #64]	; 0x40
 8002e58:	4629      	mov	r1, r5
 8002e5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002e6c:	4649      	mov	r1, r9
 8002e6e:	018b      	lsls	r3, r1, #6
 8002e70:	4641      	mov	r1, r8
 8002e72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e76:	4641      	mov	r1, r8
 8002e78:	018a      	lsls	r2, r1, #6
 8002e7a:	4641      	mov	r1, r8
 8002e7c:	1a51      	subs	r1, r2, r1
 8002e7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e80:	4649      	mov	r1, r9
 8002e82:	eb63 0301 	sbc.w	r3, r3, r1
 8002e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e94:	4649      	mov	r1, r9
 8002e96:	00cb      	lsls	r3, r1, #3
 8002e98:	4641      	mov	r1, r8
 8002e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e9e:	4641      	mov	r1, r8
 8002ea0:	00ca      	lsls	r2, r1, #3
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4622      	mov	r2, r4
 8002eaa:	189b      	adds	r3, r3, r2
 8002eac:	633b      	str	r3, [r7, #48]	; 0x30
 8002eae:	462b      	mov	r3, r5
 8002eb0:	460a      	mov	r2, r1
 8002eb2:	eb42 0303 	adc.w	r3, r2, r3
 8002eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ec4:	4629      	mov	r1, r5
 8002ec6:	024b      	lsls	r3, r1, #9
 8002ec8:	4621      	mov	r1, r4
 8002eca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ece:	4621      	mov	r1, r4
 8002ed0:	024a      	lsls	r2, r1, #9
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002eda:	2200      	movs	r2, #0
 8002edc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ee0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ee4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002ee8:	f7fd fe08 	bl	8000afc <__aeabi_uldivmod>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ef6:	e067      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef8:	4b75      	ldr	r3, [pc, #468]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	099b      	lsrs	r3, r3, #6
 8002efe:	2200      	movs	r2, #0
 8002f00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f04:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002f08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f10:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f12:	2300      	movs	r3, #0
 8002f14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f16:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002f1a:	4622      	mov	r2, r4
 8002f1c:	462b      	mov	r3, r5
 8002f1e:	f04f 0000 	mov.w	r0, #0
 8002f22:	f04f 0100 	mov.w	r1, #0
 8002f26:	0159      	lsls	r1, r3, #5
 8002f28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f2c:	0150      	lsls	r0, r2, #5
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4621      	mov	r1, r4
 8002f34:	1a51      	subs	r1, r2, r1
 8002f36:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f38:	4629      	mov	r1, r5
 8002f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002f4c:	4649      	mov	r1, r9
 8002f4e:	018b      	lsls	r3, r1, #6
 8002f50:	4641      	mov	r1, r8
 8002f52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f56:	4641      	mov	r1, r8
 8002f58:	018a      	lsls	r2, r1, #6
 8002f5a:	4641      	mov	r1, r8
 8002f5c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f60:	4649      	mov	r1, r9
 8002f62:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f72:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f7a:	4692      	mov	sl, r2
 8002f7c:	469b      	mov	fp, r3
 8002f7e:	4623      	mov	r3, r4
 8002f80:	eb1a 0303 	adds.w	r3, sl, r3
 8002f84:	623b      	str	r3, [r7, #32]
 8002f86:	462b      	mov	r3, r5
 8002f88:	eb4b 0303 	adc.w	r3, fp, r3
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f9a:	4629      	mov	r1, r5
 8002f9c:	028b      	lsls	r3, r1, #10
 8002f9e:	4621      	mov	r1, r4
 8002fa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fa4:	4621      	mov	r1, r4
 8002fa6:	028a      	lsls	r2, r1, #10
 8002fa8:	4610      	mov	r0, r2
 8002faa:	4619      	mov	r1, r3
 8002fac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	673b      	str	r3, [r7, #112]	; 0x70
 8002fb4:	677a      	str	r2, [r7, #116]	; 0x74
 8002fb6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002fba:	f7fd fd9f 	bl	8000afc <__aeabi_uldivmod>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fc8:	4b41      	ldr	r3, [pc, #260]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	0c1b      	lsrs	r3, r3, #16
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002fda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002fea:	e0eb      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fec:	4b38      	ldr	r3, [pc, #224]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ff4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ff8:	4b35      	ldr	r3, [pc, #212]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d06b      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003004:	4b32      	ldr	r3, [pc, #200]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	099b      	lsrs	r3, r3, #6
 800300a:	2200      	movs	r2, #0
 800300c:	66bb      	str	r3, [r7, #104]	; 0x68
 800300e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003010:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003016:	663b      	str	r3, [r7, #96]	; 0x60
 8003018:	2300      	movs	r3, #0
 800301a:	667b      	str	r3, [r7, #100]	; 0x64
 800301c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003020:	4622      	mov	r2, r4
 8003022:	462b      	mov	r3, r5
 8003024:	f04f 0000 	mov.w	r0, #0
 8003028:	f04f 0100 	mov.w	r1, #0
 800302c:	0159      	lsls	r1, r3, #5
 800302e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003032:	0150      	lsls	r0, r2, #5
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4621      	mov	r1, r4
 800303a:	1a51      	subs	r1, r2, r1
 800303c:	61b9      	str	r1, [r7, #24]
 800303e:	4629      	mov	r1, r5
 8003040:	eb63 0301 	sbc.w	r3, r3, r1
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003052:	4659      	mov	r1, fp
 8003054:	018b      	lsls	r3, r1, #6
 8003056:	4651      	mov	r1, sl
 8003058:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800305c:	4651      	mov	r1, sl
 800305e:	018a      	lsls	r2, r1, #6
 8003060:	4651      	mov	r1, sl
 8003062:	ebb2 0801 	subs.w	r8, r2, r1
 8003066:	4659      	mov	r1, fp
 8003068:	eb63 0901 	sbc.w	r9, r3, r1
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003078:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800307c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003080:	4690      	mov	r8, r2
 8003082:	4699      	mov	r9, r3
 8003084:	4623      	mov	r3, r4
 8003086:	eb18 0303 	adds.w	r3, r8, r3
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	462b      	mov	r3, r5
 800308e:	eb49 0303 	adc.w	r3, r9, r3
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80030a0:	4629      	mov	r1, r5
 80030a2:	024b      	lsls	r3, r1, #9
 80030a4:	4621      	mov	r1, r4
 80030a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030aa:	4621      	mov	r1, r4
 80030ac:	024a      	lsls	r2, r1, #9
 80030ae:	4610      	mov	r0, r2
 80030b0:	4619      	mov	r1, r3
 80030b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030b6:	2200      	movs	r2, #0
 80030b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80030ba:	65fa      	str	r2, [r7, #92]	; 0x5c
 80030bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030c0:	f7fd fd1c 	bl	8000afc <__aeabi_uldivmod>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4613      	mov	r3, r2
 80030ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030ce:	e065      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x420>
 80030d0:	40023800 	.word	0x40023800
 80030d4:	00f42400 	.word	0x00f42400
 80030d8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030dc:	4b3d      	ldr	r3, [pc, #244]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x458>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	2200      	movs	r2, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	4611      	mov	r1, r2
 80030e8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030ec:	653b      	str	r3, [r7, #80]	; 0x50
 80030ee:	2300      	movs	r3, #0
 80030f0:	657b      	str	r3, [r7, #84]	; 0x54
 80030f2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80030f6:	4642      	mov	r2, r8
 80030f8:	464b      	mov	r3, r9
 80030fa:	f04f 0000 	mov.w	r0, #0
 80030fe:	f04f 0100 	mov.w	r1, #0
 8003102:	0159      	lsls	r1, r3, #5
 8003104:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003108:	0150      	lsls	r0, r2, #5
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4641      	mov	r1, r8
 8003110:	1a51      	subs	r1, r2, r1
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	4649      	mov	r1, r9
 8003116:	eb63 0301 	sbc.w	r3, r3, r1
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003128:	4659      	mov	r1, fp
 800312a:	018b      	lsls	r3, r1, #6
 800312c:	4651      	mov	r1, sl
 800312e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003132:	4651      	mov	r1, sl
 8003134:	018a      	lsls	r2, r1, #6
 8003136:	4651      	mov	r1, sl
 8003138:	1a54      	subs	r4, r2, r1
 800313a:	4659      	mov	r1, fp
 800313c:	eb63 0501 	sbc.w	r5, r3, r1
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	00eb      	lsls	r3, r5, #3
 800314a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800314e:	00e2      	lsls	r2, r4, #3
 8003150:	4614      	mov	r4, r2
 8003152:	461d      	mov	r5, r3
 8003154:	4643      	mov	r3, r8
 8003156:	18e3      	adds	r3, r4, r3
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	464b      	mov	r3, r9
 800315c:	eb45 0303 	adc.w	r3, r5, r3
 8003160:	607b      	str	r3, [r7, #4]
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800316e:	4629      	mov	r1, r5
 8003170:	028b      	lsls	r3, r1, #10
 8003172:	4621      	mov	r1, r4
 8003174:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003178:	4621      	mov	r1, r4
 800317a:	028a      	lsls	r2, r1, #10
 800317c:	4610      	mov	r0, r2
 800317e:	4619      	mov	r1, r3
 8003180:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003184:	2200      	movs	r2, #0
 8003186:	64bb      	str	r3, [r7, #72]	; 0x48
 8003188:	64fa      	str	r2, [r7, #76]	; 0x4c
 800318a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800318e:	f7fd fcb5 	bl	8000afc <__aeabi_uldivmod>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4613      	mov	r3, r2
 8003198:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800319c:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x458>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	0f1b      	lsrs	r3, r3, #28
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80031aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031ba:	e003      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031bc:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80031be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	37b8      	adds	r7, #184	; 0xb8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800
 80031d8:	00f42400 	.word	0x00f42400

080031dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e28d      	b.n	800370a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 8083 	beq.w	8003302 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031fc:	4b94      	ldr	r3, [pc, #592]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 030c 	and.w	r3, r3, #12
 8003204:	2b04      	cmp	r3, #4
 8003206:	d019      	beq.n	800323c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003208:	4b91      	ldr	r3, [pc, #580]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003210:	2b08      	cmp	r3, #8
 8003212:	d106      	bne.n	8003222 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003214:	4b8e      	ldr	r3, [pc, #568]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003220:	d00c      	beq.n	800323c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003222:	4b8b      	ldr	r3, [pc, #556]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800322a:	2b0c      	cmp	r3, #12
 800322c:	d112      	bne.n	8003254 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800322e:	4b88      	ldr	r3, [pc, #544]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003236:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800323a:	d10b      	bne.n	8003254 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323c:	4b84      	ldr	r3, [pc, #528]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d05b      	beq.n	8003300 <HAL_RCC_OscConfig+0x124>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d157      	bne.n	8003300 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e25a      	b.n	800370a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800325c:	d106      	bne.n	800326c <HAL_RCC_OscConfig+0x90>
 800325e:	4b7c      	ldr	r3, [pc, #496]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a7b      	ldr	r2, [pc, #492]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 8003264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	e01d      	b.n	80032a8 <HAL_RCC_OscConfig+0xcc>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003274:	d10c      	bne.n	8003290 <HAL_RCC_OscConfig+0xb4>
 8003276:	4b76      	ldr	r3, [pc, #472]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a75      	ldr	r2, [pc, #468]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 800327c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	4b73      	ldr	r3, [pc, #460]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a72      	ldr	r2, [pc, #456]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 8003288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	e00b      	b.n	80032a8 <HAL_RCC_OscConfig+0xcc>
 8003290:	4b6f      	ldr	r3, [pc, #444]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a6e      	ldr	r2, [pc, #440]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 8003296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	4b6c      	ldr	r3, [pc, #432]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a6b      	ldr	r2, [pc, #428]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 80032a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d013      	beq.n	80032d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b0:	f7fe fc68 	bl	8001b84 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b8:	f7fe fc64 	bl	8001b84 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	; 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e21f      	b.n	800370a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ca:	4b61      	ldr	r3, [pc, #388]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0xdc>
 80032d6:	e014      	b.n	8003302 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fe fc54 	bl	8001b84 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032e0:	f7fe fc50 	bl	8001b84 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b64      	cmp	r3, #100	; 0x64
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e20b      	b.n	800370a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f2:	4b57      	ldr	r3, [pc, #348]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0x104>
 80032fe:	e000      	b.n	8003302 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d06f      	beq.n	80033ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800330e:	4b50      	ldr	r3, [pc, #320]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	2b00      	cmp	r3, #0
 8003318:	d017      	beq.n	800334a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800331a:	4b4d      	ldr	r3, [pc, #308]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003322:	2b08      	cmp	r3, #8
 8003324:	d105      	bne.n	8003332 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003326:	4b4a      	ldr	r3, [pc, #296]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00b      	beq.n	800334a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003332:	4b47      	ldr	r3, [pc, #284]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800333a:	2b0c      	cmp	r3, #12
 800333c:	d11c      	bne.n	8003378 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800333e:	4b44      	ldr	r3, [pc, #272]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d116      	bne.n	8003378 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334a:	4b41      	ldr	r3, [pc, #260]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d005      	beq.n	8003362 <HAL_RCC_OscConfig+0x186>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d001      	beq.n	8003362 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e1d3      	b.n	800370a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003362:	4b3b      	ldr	r3, [pc, #236]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4937      	ldr	r1, [pc, #220]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003376:	e03a      	b.n	80033ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d020      	beq.n	80033c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003380:	4b34      	ldr	r3, [pc, #208]	; (8003454 <HAL_RCC_OscConfig+0x278>)
 8003382:	2201      	movs	r2, #1
 8003384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003386:	f7fe fbfd 	bl	8001b84 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800338e:	f7fe fbf9 	bl	8001b84 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e1b4      	b.n	800370a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a0:	4b2b      	ldr	r3, [pc, #172]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ac:	4b28      	ldr	r3, [pc, #160]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4925      	ldr	r1, [pc, #148]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	600b      	str	r3, [r1, #0]
 80033c0:	e015      	b.n	80033ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033c2:	4b24      	ldr	r3, [pc, #144]	; (8003454 <HAL_RCC_OscConfig+0x278>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fe fbdc 	bl	8001b84 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d0:	f7fe fbd8 	bl	8001b84 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e193      	b.n	800370a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e2:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d036      	beq.n	8003468 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d016      	beq.n	8003430 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003402:	4b15      	ldr	r3, [pc, #84]	; (8003458 <HAL_RCC_OscConfig+0x27c>)
 8003404:	2201      	movs	r2, #1
 8003406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003408:	f7fe fbbc 	bl	8001b84 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003410:	f7fe fbb8 	bl	8001b84 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e173      	b.n	800370a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003422:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 8003424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0x234>
 800342e:	e01b      	b.n	8003468 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003430:	4b09      	ldr	r3, [pc, #36]	; (8003458 <HAL_RCC_OscConfig+0x27c>)
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003436:	f7fe fba5 	bl	8001b84 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800343c:	e00e      	b.n	800345c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800343e:	f7fe fba1 	bl	8001b84 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d907      	bls.n	800345c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e15c      	b.n	800370a <HAL_RCC_OscConfig+0x52e>
 8003450:	40023800 	.word	0x40023800
 8003454:	42470000 	.word	0x42470000
 8003458:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800345c:	4b8a      	ldr	r3, [pc, #552]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 800345e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1ea      	bne.n	800343e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 8097 	beq.w	80035a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003476:	2300      	movs	r3, #0
 8003478:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800347a:	4b83      	ldr	r3, [pc, #524]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10f      	bne.n	80034a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	4b7f      	ldr	r3, [pc, #508]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	4a7e      	ldr	r2, [pc, #504]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 8003490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003494:	6413      	str	r3, [r2, #64]	; 0x40
 8003496:	4b7c      	ldr	r3, [pc, #496]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a2:	2301      	movs	r3, #1
 80034a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a6:	4b79      	ldr	r3, [pc, #484]	; (800368c <HAL_RCC_OscConfig+0x4b0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d118      	bne.n	80034e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b2:	4b76      	ldr	r3, [pc, #472]	; (800368c <HAL_RCC_OscConfig+0x4b0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a75      	ldr	r2, [pc, #468]	; (800368c <HAL_RCC_OscConfig+0x4b0>)
 80034b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034be:	f7fe fb61 	bl	8001b84 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c6:	f7fe fb5d 	bl	8001b84 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e118      	b.n	800370a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d8:	4b6c      	ldr	r3, [pc, #432]	; (800368c <HAL_RCC_OscConfig+0x4b0>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d106      	bne.n	80034fa <HAL_RCC_OscConfig+0x31e>
 80034ec:	4b66      	ldr	r3, [pc, #408]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 80034ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f0:	4a65      	ldr	r2, [pc, #404]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	6713      	str	r3, [r2, #112]	; 0x70
 80034f8:	e01c      	b.n	8003534 <HAL_RCC_OscConfig+0x358>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b05      	cmp	r3, #5
 8003500:	d10c      	bne.n	800351c <HAL_RCC_OscConfig+0x340>
 8003502:	4b61      	ldr	r3, [pc, #388]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	4a60      	ldr	r2, [pc, #384]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 8003508:	f043 0304 	orr.w	r3, r3, #4
 800350c:	6713      	str	r3, [r2, #112]	; 0x70
 800350e:	4b5e      	ldr	r3, [pc, #376]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	4a5d      	ldr	r2, [pc, #372]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	6713      	str	r3, [r2, #112]	; 0x70
 800351a:	e00b      	b.n	8003534 <HAL_RCC_OscConfig+0x358>
 800351c:	4b5a      	ldr	r3, [pc, #360]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003520:	4a59      	ldr	r2, [pc, #356]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	6713      	str	r3, [r2, #112]	; 0x70
 8003528:	4b57      	ldr	r3, [pc, #348]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	4a56      	ldr	r2, [pc, #344]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 800352e:	f023 0304 	bic.w	r3, r3, #4
 8003532:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d015      	beq.n	8003568 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fe fb22 	bl	8001b84 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003542:	e00a      	b.n	800355a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003544:	f7fe fb1e 	bl	8001b84 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003552:	4293      	cmp	r3, r2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e0d7      	b.n	800370a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355a:	4b4b      	ldr	r3, [pc, #300]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0ee      	beq.n	8003544 <HAL_RCC_OscConfig+0x368>
 8003566:	e014      	b.n	8003592 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003568:	f7fe fb0c 	bl	8001b84 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800356e:	e00a      	b.n	8003586 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003570:	f7fe fb08 	bl	8001b84 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	f241 3288 	movw	r2, #5000	; 0x1388
 800357e:	4293      	cmp	r3, r2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e0c1      	b.n	800370a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003586:	4b40      	ldr	r3, [pc, #256]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 8003588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1ee      	bne.n	8003570 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003592:	7dfb      	ldrb	r3, [r7, #23]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d105      	bne.n	80035a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003598:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	4a3a      	ldr	r2, [pc, #232]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 800359e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80ad 	beq.w	8003708 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035ae:	4b36      	ldr	r3, [pc, #216]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d060      	beq.n	800367c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d145      	bne.n	800364e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c2:	4b33      	ldr	r3, [pc, #204]	; (8003690 <HAL_RCC_OscConfig+0x4b4>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fe fadc 	bl	8001b84 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d0:	f7fe fad8 	bl	8001b84 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e093      	b.n	800370a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e2:	4b29      	ldr	r3, [pc, #164]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69da      	ldr	r2, [r3, #28]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	019b      	lsls	r3, r3, #6
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	3b01      	subs	r3, #1
 8003608:	041b      	lsls	r3, r3, #16
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	061b      	lsls	r3, r3, #24
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	071b      	lsls	r3, r3, #28
 800361a:	491b      	ldr	r1, [pc, #108]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003620:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <HAL_RCC_OscConfig+0x4b4>)
 8003622:	2201      	movs	r2, #1
 8003624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003626:	f7fe faad 	bl	8001b84 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800362e:	f7fe faa9 	bl	8001b84 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e064      	b.n	800370a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003640:	4b11      	ldr	r3, [pc, #68]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x452>
 800364c:	e05c      	b.n	8003708 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364e:	4b10      	ldr	r3, [pc, #64]	; (8003690 <HAL_RCC_OscConfig+0x4b4>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fe fa96 	bl	8001b84 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800365c:	f7fe fa92 	bl	8001b84 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e04d      	b.n	800370a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_RCC_OscConfig+0x4ac>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x480>
 800367a:	e045      	b.n	8003708 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d107      	bne.n	8003694 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e040      	b.n	800370a <HAL_RCC_OscConfig+0x52e>
 8003688:	40023800 	.word	0x40023800
 800368c:	40007000 	.word	0x40007000
 8003690:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003694:	4b1f      	ldr	r3, [pc, #124]	; (8003714 <HAL_RCC_OscConfig+0x538>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d030      	beq.n	8003704 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d129      	bne.n	8003704 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d122      	bne.n	8003704 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036c4:	4013      	ands	r3, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d119      	bne.n	8003704 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	085b      	lsrs	r3, r3, #1
 80036dc:	3b01      	subs	r3, #1
 80036de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d10f      	bne.n	8003704 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d107      	bne.n	8003704 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003700:	429a      	cmp	r2, r3
 8003702:	d001      	beq.n	8003708 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40023800 	.word	0x40023800

08003718 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e03f      	b.n	80037aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fe f890 	bl	8001864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2224      	movs	r2, #36	; 0x24
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800375a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fc7b 	bl	8004058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003770:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003780:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003790:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b0ba      	sub	sp, #232	; 0xe8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80037da:	2300      	movs	r3, #0
 80037dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80037f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10f      	bne.n	800381a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <HAL_UART_IRQHandler+0x66>
 8003806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fb65 	bl	8003ee2 <UART_Receive_IT>
      return;
 8003818:	e256      	b.n	8003cc8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800381a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 80de 	beq.w	80039e0 <HAL_UART_IRQHandler+0x22c>
 8003824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003834:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80d1 	beq.w	80039e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800383e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <HAL_UART_IRQHandler+0xae>
 800384a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800384e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	f043 0201 	orr.w	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00b      	beq.n	8003886 <HAL_UART_IRQHandler+0xd2>
 800386e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d005      	beq.n	8003886 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f043 0202 	orr.w	r2, r3, #2
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00b      	beq.n	80038aa <HAL_UART_IRQHandler+0xf6>
 8003892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d005      	beq.n	80038aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f043 0204 	orr.w	r2, r3, #4
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d011      	beq.n	80038da <HAL_UART_IRQHandler+0x126>
 80038b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d105      	bne.n	80038ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f043 0208 	orr.w	r2, r3, #8
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 81ed 	beq.w	8003cbe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_UART_IRQHandler+0x14e>
 80038f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 faf0 	bl	8003ee2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390c:	2b40      	cmp	r3, #64	; 0x40
 800390e:	bf0c      	ite	eq
 8003910:	2301      	moveq	r3, #1
 8003912:	2300      	movne	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d103      	bne.n	800392e <HAL_UART_IRQHandler+0x17a>
 8003926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800392a:	2b00      	cmp	r3, #0
 800392c:	d04f      	beq.n	80039ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f9f8 	bl	8003d24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393e:	2b40      	cmp	r3, #64	; 0x40
 8003940:	d141      	bne.n	80039c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	3314      	adds	r3, #20
 8003948:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003950:	e853 3f00 	ldrex	r3, [r3]
 8003954:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003958:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800395c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003960:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3314      	adds	r3, #20
 800396a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800396e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003972:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800397a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1d9      	bne.n	8003942 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003992:	2b00      	cmp	r3, #0
 8003994:	d013      	beq.n	80039be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	4a7d      	ldr	r2, [pc, #500]	; (8003b90 <HAL_UART_IRQHandler+0x3dc>)
 800399c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fe feaf 	bl	8002706 <HAL_DMA_Abort_IT>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d016      	beq.n	80039dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039b8:	4610      	mov	r0, r2
 80039ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039bc:	e00e      	b.n	80039dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f99a 	bl	8003cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c4:	e00a      	b.n	80039dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f996 	bl	8003cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039cc:	e006      	b.n	80039dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f992 	bl	8003cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80039da:	e170      	b.n	8003cbe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039dc:	bf00      	nop
    return;
 80039de:	e16e      	b.n	8003cbe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	f040 814a 	bne.w	8003c7e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 8143 	beq.w	8003c7e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039fc:	f003 0310 	and.w	r3, r3, #16
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 813c 	beq.w	8003c7e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a06:	2300      	movs	r3, #0
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a26:	2b40      	cmp	r3, #64	; 0x40
 8003a28:	f040 80b4 	bne.w	8003b94 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 8140 	beq.w	8003cc2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	f080 8139 	bcs.w	8003cc2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a62:	f000 8088 	beq.w	8003b76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	330c      	adds	r3, #12
 8003a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a74:	e853 3f00 	ldrex	r3, [r3]
 8003a78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	330c      	adds	r3, #12
 8003a8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003aa2:	e841 2300 	strex	r3, r2, [r1]
 8003aa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1d9      	bne.n	8003a66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3314      	adds	r3, #20
 8003ab8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003abc:	e853 3f00 	ldrex	r3, [r3]
 8003ac0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ac2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ac4:	f023 0301 	bic.w	r3, r3, #1
 8003ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3314      	adds	r3, #20
 8003ad2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ad6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ada:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003adc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ade:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ae2:	e841 2300 	strex	r3, r2, [r1]
 8003ae6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1e1      	bne.n	8003ab2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3314      	adds	r3, #20
 8003af4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003af8:	e853 3f00 	ldrex	r3, [r3]
 8003afc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3314      	adds	r3, #20
 8003b0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b1a:	e841 2300 	strex	r3, r2, [r1]
 8003b1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1e3      	bne.n	8003aee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	330c      	adds	r3, #12
 8003b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b3e:	e853 3f00 	ldrex	r3, [r3]
 8003b42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b46:	f023 0310 	bic.w	r3, r3, #16
 8003b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	330c      	adds	r3, #12
 8003b54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b58:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e3      	bne.n	8003b34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fe fd58 	bl	8002626 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	4619      	mov	r1, r3
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f8c0 	bl	8003d0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b8c:	e099      	b.n	8003cc2 <HAL_UART_IRQHandler+0x50e>
 8003b8e:	bf00      	nop
 8003b90:	08003deb 	.word	0x08003deb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 808b 	beq.w	8003cc6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003bb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8086 	beq.w	8003cc6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	330c      	adds	r3, #12
 8003bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc4:	e853 3f00 	ldrex	r3, [r3]
 8003bc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003bde:	647a      	str	r2, [r7, #68]	; 0x44
 8003be0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003be4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e3      	bne.n	8003bba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3314      	adds	r3, #20
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	623b      	str	r3, [r7, #32]
   return(result);
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	f023 0301 	bic.w	r3, r3, #1
 8003c08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3314      	adds	r3, #20
 8003c12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c16:	633a      	str	r2, [r7, #48]	; 0x30
 8003c18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c1e:	e841 2300 	strex	r3, r2, [r1]
 8003c22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1e3      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	e853 3f00 	ldrex	r3, [r3]
 8003c46:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0310 	bic.w	r3, r3, #16
 8003c4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c5c:	61fa      	str	r2, [r7, #28]
 8003c5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c60:	69b9      	ldr	r1, [r7, #24]
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	e841 2300 	strex	r3, r2, [r1]
 8003c68:	617b      	str	r3, [r7, #20]
   return(result);
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e3      	bne.n	8003c38 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c74:	4619      	mov	r1, r3
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f848 	bl	8003d0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c7c:	e023      	b.n	8003cc6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d009      	beq.n	8003c9e <HAL_UART_IRQHandler+0x4ea>
 8003c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f8bb 	bl	8003e12 <UART_Transmit_IT>
    return;
 8003c9c:	e014      	b.n	8003cc8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00e      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x514>
 8003caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d008      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f8fb 	bl	8003eb2 <UART_EndTransmit_IT>
    return;
 8003cbc:	e004      	b.n	8003cc8 <HAL_UART_IRQHandler+0x514>
    return;
 8003cbe:	bf00      	nop
 8003cc0:	e002      	b.n	8003cc8 <HAL_UART_IRQHandler+0x514>
      return;
 8003cc2:	bf00      	nop
 8003cc4:	e000      	b.n	8003cc8 <HAL_UART_IRQHandler+0x514>
      return;
 8003cc6:	bf00      	nop
  }
}
 8003cc8:	37e8      	adds	r7, #232	; 0xe8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop

08003cd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b095      	sub	sp, #84	; 0x54
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	330c      	adds	r3, #12
 8003d32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	330c      	adds	r3, #12
 8003d4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d4c:	643a      	str	r2, [r7, #64]	; 0x40
 8003d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e5      	bne.n	8003d2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3314      	adds	r3, #20
 8003d66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	e853 3f00 	ldrex	r3, [r3]
 8003d6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3314      	adds	r3, #20
 8003d7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e5      	bne.n	8003d60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d119      	bne.n	8003dd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	330c      	adds	r3, #12
 8003da2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f023 0310 	bic.w	r3, r3, #16
 8003db2:	647b      	str	r3, [r7, #68]	; 0x44
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	330c      	adds	r3, #12
 8003dba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dbc:	61ba      	str	r2, [r7, #24]
 8003dbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	6979      	ldr	r1, [r7, #20]
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e5      	bne.n	8003d9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003dde:	bf00      	nop
 8003de0:	3754      	adds	r7, #84	; 0x54
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b084      	sub	sp, #16
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f7ff ff77 	bl	8003cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e0a:	bf00      	nop
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b085      	sub	sp, #20
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b21      	cmp	r3, #33	; 0x21
 8003e24:	d13e      	bne.n	8003ea4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2e:	d114      	bne.n	8003e5a <UART_Transmit_IT+0x48>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d110      	bne.n	8003e5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	1c9a      	adds	r2, r3, #2
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	621a      	str	r2, [r3, #32]
 8003e58:	e008      	b.n	8003e6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	1c59      	adds	r1, r3, #1
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6211      	str	r1, [r2, #32]
 8003e64:	781a      	ldrb	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10f      	bne.n	8003ea0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	e000      	b.n	8003ea6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ea4:	2302      	movs	r3, #2
  }
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b082      	sub	sp, #8
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff fefc 	bl	8003cd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b08c      	sub	sp, #48	; 0x30
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b22      	cmp	r3, #34	; 0x22
 8003ef4:	f040 80ab 	bne.w	800404e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f00:	d117      	bne.n	8003f32 <UART_Receive_IT+0x50>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d113      	bne.n	8003f32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f12:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	1c9a      	adds	r2, r3, #2
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f30:	e026      	b.n	8003f80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f44:	d007      	beq.n	8003f56 <UART_Receive_IT+0x74>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10a      	bne.n	8003f64 <UART_Receive_IT+0x82>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	701a      	strb	r2, [r3, #0]
 8003f62:	e008      	b.n	8003f76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d15a      	bne.n	800404a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0220 	bic.w	r2, r2, #32
 8003fa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695a      	ldr	r2, [r3, #20]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0201 	bic.w	r2, r2, #1
 8003fc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d135      	bne.n	8004040 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	330c      	adds	r3, #12
 8003fe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	e853 3f00 	ldrex	r3, [r3]
 8003fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f023 0310 	bic.w	r3, r3, #16
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	330c      	adds	r3, #12
 8003ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffa:	623a      	str	r2, [r7, #32]
 8003ffc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffe:	69f9      	ldr	r1, [r7, #28]
 8004000:	6a3a      	ldr	r2, [r7, #32]
 8004002:	e841 2300 	strex	r3, r2, [r1]
 8004006:	61bb      	str	r3, [r7, #24]
   return(result);
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1e5      	bne.n	8003fda <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b10      	cmp	r3, #16
 800401a:	d10a      	bne.n	8004032 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800401c:	2300      	movs	r3, #0
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004036:	4619      	mov	r1, r3
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff fe67 	bl	8003d0c <HAL_UARTEx_RxEventCallback>
 800403e:	e002      	b.n	8004046 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff fe4f 	bl	8003ce4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	e002      	b.n	8004050 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	e000      	b.n	8004050 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800404e:	2302      	movs	r3, #2
  }
}
 8004050:	4618      	mov	r0, r3
 8004052:	3730      	adds	r7, #48	; 0x30
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800405c:	b0c0      	sub	sp, #256	; 0x100
 800405e:	af00      	add	r7, sp, #0
 8004060:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004074:	68d9      	ldr	r1, [r3, #12]
 8004076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	ea40 0301 	orr.w	r3, r0, r1
 8004080:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	431a      	orrs	r2, r3
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	431a      	orrs	r2, r3
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040b0:	f021 010c 	bic.w	r1, r1, #12
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040be:	430b      	orrs	r3, r1
 80040c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d2:	6999      	ldr	r1, [r3, #24]
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	ea40 0301 	orr.w	r3, r0, r1
 80040de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	4b8f      	ldr	r3, [pc, #572]	; (8004324 <UART_SetConfig+0x2cc>)
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d005      	beq.n	80040f8 <UART_SetConfig+0xa0>
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	4b8d      	ldr	r3, [pc, #564]	; (8004328 <UART_SetConfig+0x2d0>)
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d104      	bne.n	8004102 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040f8:	f7fe fe2c 	bl	8002d54 <HAL_RCC_GetPCLK2Freq>
 80040fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004100:	e003      	b.n	800410a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004102:	f7fe fe13 	bl	8002d2c <HAL_RCC_GetPCLK1Freq>
 8004106:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800410a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004114:	f040 810c 	bne.w	8004330 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800411c:	2200      	movs	r2, #0
 800411e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004122:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004126:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800412a:	4622      	mov	r2, r4
 800412c:	462b      	mov	r3, r5
 800412e:	1891      	adds	r1, r2, r2
 8004130:	65b9      	str	r1, [r7, #88]	; 0x58
 8004132:	415b      	adcs	r3, r3
 8004134:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004136:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800413a:	4621      	mov	r1, r4
 800413c:	eb12 0801 	adds.w	r8, r2, r1
 8004140:	4629      	mov	r1, r5
 8004142:	eb43 0901 	adc.w	r9, r3, r1
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800415a:	4690      	mov	r8, r2
 800415c:	4699      	mov	r9, r3
 800415e:	4623      	mov	r3, r4
 8004160:	eb18 0303 	adds.w	r3, r8, r3
 8004164:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004168:	462b      	mov	r3, r5
 800416a:	eb49 0303 	adc.w	r3, r9, r3
 800416e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800417e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004182:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004186:	460b      	mov	r3, r1
 8004188:	18db      	adds	r3, r3, r3
 800418a:	653b      	str	r3, [r7, #80]	; 0x50
 800418c:	4613      	mov	r3, r2
 800418e:	eb42 0303 	adc.w	r3, r2, r3
 8004192:	657b      	str	r3, [r7, #84]	; 0x54
 8004194:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004198:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800419c:	f7fc fcae 	bl	8000afc <__aeabi_uldivmod>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4b61      	ldr	r3, [pc, #388]	; (800432c <UART_SetConfig+0x2d4>)
 80041a6:	fba3 2302 	umull	r2, r3, r3, r2
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	011c      	lsls	r4, r3, #4
 80041ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041c0:	4642      	mov	r2, r8
 80041c2:	464b      	mov	r3, r9
 80041c4:	1891      	adds	r1, r2, r2
 80041c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80041c8:	415b      	adcs	r3, r3
 80041ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041d0:	4641      	mov	r1, r8
 80041d2:	eb12 0a01 	adds.w	sl, r2, r1
 80041d6:	4649      	mov	r1, r9
 80041d8:	eb43 0b01 	adc.w	fp, r3, r1
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041f0:	4692      	mov	sl, r2
 80041f2:	469b      	mov	fp, r3
 80041f4:	4643      	mov	r3, r8
 80041f6:	eb1a 0303 	adds.w	r3, sl, r3
 80041fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041fe:	464b      	mov	r3, r9
 8004200:	eb4b 0303 	adc.w	r3, fp, r3
 8004204:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004214:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004218:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800421c:	460b      	mov	r3, r1
 800421e:	18db      	adds	r3, r3, r3
 8004220:	643b      	str	r3, [r7, #64]	; 0x40
 8004222:	4613      	mov	r3, r2
 8004224:	eb42 0303 	adc.w	r3, r2, r3
 8004228:	647b      	str	r3, [r7, #68]	; 0x44
 800422a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800422e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004232:	f7fc fc63 	bl	8000afc <__aeabi_uldivmod>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4611      	mov	r1, r2
 800423c:	4b3b      	ldr	r3, [pc, #236]	; (800432c <UART_SetConfig+0x2d4>)
 800423e:	fba3 2301 	umull	r2, r3, r3, r1
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	2264      	movs	r2, #100	; 0x64
 8004246:	fb02 f303 	mul.w	r3, r2, r3
 800424a:	1acb      	subs	r3, r1, r3
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004252:	4b36      	ldr	r3, [pc, #216]	; (800432c <UART_SetConfig+0x2d4>)
 8004254:	fba3 2302 	umull	r2, r3, r3, r2
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004260:	441c      	add	r4, r3
 8004262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004266:	2200      	movs	r2, #0
 8004268:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800426c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004270:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004274:	4642      	mov	r2, r8
 8004276:	464b      	mov	r3, r9
 8004278:	1891      	adds	r1, r2, r2
 800427a:	63b9      	str	r1, [r7, #56]	; 0x38
 800427c:	415b      	adcs	r3, r3
 800427e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004280:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004284:	4641      	mov	r1, r8
 8004286:	1851      	adds	r1, r2, r1
 8004288:	6339      	str	r1, [r7, #48]	; 0x30
 800428a:	4649      	mov	r1, r9
 800428c:	414b      	adcs	r3, r1
 800428e:	637b      	str	r3, [r7, #52]	; 0x34
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800429c:	4659      	mov	r1, fp
 800429e:	00cb      	lsls	r3, r1, #3
 80042a0:	4651      	mov	r1, sl
 80042a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042a6:	4651      	mov	r1, sl
 80042a8:	00ca      	lsls	r2, r1, #3
 80042aa:	4610      	mov	r0, r2
 80042ac:	4619      	mov	r1, r3
 80042ae:	4603      	mov	r3, r0
 80042b0:	4642      	mov	r2, r8
 80042b2:	189b      	adds	r3, r3, r2
 80042b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042b8:	464b      	mov	r3, r9
 80042ba:	460a      	mov	r2, r1
 80042bc:	eb42 0303 	adc.w	r3, r2, r3
 80042c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80042d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042d8:	460b      	mov	r3, r1
 80042da:	18db      	adds	r3, r3, r3
 80042dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042de:	4613      	mov	r3, r2
 80042e0:	eb42 0303 	adc.w	r3, r2, r3
 80042e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042ee:	f7fc fc05 	bl	8000afc <__aeabi_uldivmod>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4b0d      	ldr	r3, [pc, #52]	; (800432c <UART_SetConfig+0x2d4>)
 80042f8:	fba3 1302 	umull	r1, r3, r3, r2
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	2164      	movs	r1, #100	; 0x64
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	3332      	adds	r3, #50	; 0x32
 800430a:	4a08      	ldr	r2, [pc, #32]	; (800432c <UART_SetConfig+0x2d4>)
 800430c:	fba2 2303 	umull	r2, r3, r2, r3
 8004310:	095b      	lsrs	r3, r3, #5
 8004312:	f003 0207 	and.w	r2, r3, #7
 8004316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4422      	add	r2, r4
 800431e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004320:	e105      	b.n	800452e <UART_SetConfig+0x4d6>
 8004322:	bf00      	nop
 8004324:	40011000 	.word	0x40011000
 8004328:	40011400 	.word	0x40011400
 800432c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004334:	2200      	movs	r2, #0
 8004336:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800433a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800433e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004342:	4642      	mov	r2, r8
 8004344:	464b      	mov	r3, r9
 8004346:	1891      	adds	r1, r2, r2
 8004348:	6239      	str	r1, [r7, #32]
 800434a:	415b      	adcs	r3, r3
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
 800434e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004352:	4641      	mov	r1, r8
 8004354:	1854      	adds	r4, r2, r1
 8004356:	4649      	mov	r1, r9
 8004358:	eb43 0501 	adc.w	r5, r3, r1
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	00eb      	lsls	r3, r5, #3
 8004366:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800436a:	00e2      	lsls	r2, r4, #3
 800436c:	4614      	mov	r4, r2
 800436e:	461d      	mov	r5, r3
 8004370:	4643      	mov	r3, r8
 8004372:	18e3      	adds	r3, r4, r3
 8004374:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004378:	464b      	mov	r3, r9
 800437a:	eb45 0303 	adc.w	r3, r5, r3
 800437e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800438e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800439e:	4629      	mov	r1, r5
 80043a0:	008b      	lsls	r3, r1, #2
 80043a2:	4621      	mov	r1, r4
 80043a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043a8:	4621      	mov	r1, r4
 80043aa:	008a      	lsls	r2, r1, #2
 80043ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043b0:	f7fc fba4 	bl	8000afc <__aeabi_uldivmod>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4b60      	ldr	r3, [pc, #384]	; (800453c <UART_SetConfig+0x4e4>)
 80043ba:	fba3 2302 	umull	r2, r3, r3, r2
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	011c      	lsls	r4, r3, #4
 80043c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80043d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80043d4:	4642      	mov	r2, r8
 80043d6:	464b      	mov	r3, r9
 80043d8:	1891      	adds	r1, r2, r2
 80043da:	61b9      	str	r1, [r7, #24]
 80043dc:	415b      	adcs	r3, r3
 80043de:	61fb      	str	r3, [r7, #28]
 80043e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043e4:	4641      	mov	r1, r8
 80043e6:	1851      	adds	r1, r2, r1
 80043e8:	6139      	str	r1, [r7, #16]
 80043ea:	4649      	mov	r1, r9
 80043ec:	414b      	adcs	r3, r1
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043fc:	4659      	mov	r1, fp
 80043fe:	00cb      	lsls	r3, r1, #3
 8004400:	4651      	mov	r1, sl
 8004402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004406:	4651      	mov	r1, sl
 8004408:	00ca      	lsls	r2, r1, #3
 800440a:	4610      	mov	r0, r2
 800440c:	4619      	mov	r1, r3
 800440e:	4603      	mov	r3, r0
 8004410:	4642      	mov	r2, r8
 8004412:	189b      	adds	r3, r3, r2
 8004414:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004418:	464b      	mov	r3, r9
 800441a:	460a      	mov	r2, r1
 800441c:	eb42 0303 	adc.w	r3, r2, r3
 8004420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	67bb      	str	r3, [r7, #120]	; 0x78
 800442e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800443c:	4649      	mov	r1, r9
 800443e:	008b      	lsls	r3, r1, #2
 8004440:	4641      	mov	r1, r8
 8004442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004446:	4641      	mov	r1, r8
 8004448:	008a      	lsls	r2, r1, #2
 800444a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800444e:	f7fc fb55 	bl	8000afc <__aeabi_uldivmod>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4b39      	ldr	r3, [pc, #228]	; (800453c <UART_SetConfig+0x4e4>)
 8004458:	fba3 1302 	umull	r1, r3, r3, r2
 800445c:	095b      	lsrs	r3, r3, #5
 800445e:	2164      	movs	r1, #100	; 0x64
 8004460:	fb01 f303 	mul.w	r3, r1, r3
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	3332      	adds	r3, #50	; 0x32
 800446a:	4a34      	ldr	r2, [pc, #208]	; (800453c <UART_SetConfig+0x4e4>)
 800446c:	fba2 2303 	umull	r2, r3, r2, r3
 8004470:	095b      	lsrs	r3, r3, #5
 8004472:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004476:	441c      	add	r4, r3
 8004478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800447c:	2200      	movs	r2, #0
 800447e:	673b      	str	r3, [r7, #112]	; 0x70
 8004480:	677a      	str	r2, [r7, #116]	; 0x74
 8004482:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004486:	4642      	mov	r2, r8
 8004488:	464b      	mov	r3, r9
 800448a:	1891      	adds	r1, r2, r2
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	415b      	adcs	r3, r3
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004496:	4641      	mov	r1, r8
 8004498:	1851      	adds	r1, r2, r1
 800449a:	6039      	str	r1, [r7, #0]
 800449c:	4649      	mov	r1, r9
 800449e:	414b      	adcs	r3, r1
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044ae:	4659      	mov	r1, fp
 80044b0:	00cb      	lsls	r3, r1, #3
 80044b2:	4651      	mov	r1, sl
 80044b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044b8:	4651      	mov	r1, sl
 80044ba:	00ca      	lsls	r2, r1, #3
 80044bc:	4610      	mov	r0, r2
 80044be:	4619      	mov	r1, r3
 80044c0:	4603      	mov	r3, r0
 80044c2:	4642      	mov	r2, r8
 80044c4:	189b      	adds	r3, r3, r2
 80044c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80044c8:	464b      	mov	r3, r9
 80044ca:	460a      	mov	r2, r1
 80044cc:	eb42 0303 	adc.w	r3, r2, r3
 80044d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	663b      	str	r3, [r7, #96]	; 0x60
 80044dc:	667a      	str	r2, [r7, #100]	; 0x64
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044ea:	4649      	mov	r1, r9
 80044ec:	008b      	lsls	r3, r1, #2
 80044ee:	4641      	mov	r1, r8
 80044f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044f4:	4641      	mov	r1, r8
 80044f6:	008a      	lsls	r2, r1, #2
 80044f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044fc:	f7fc fafe 	bl	8000afc <__aeabi_uldivmod>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4b0d      	ldr	r3, [pc, #52]	; (800453c <UART_SetConfig+0x4e4>)
 8004506:	fba3 1302 	umull	r1, r3, r3, r2
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	2164      	movs	r1, #100	; 0x64
 800450e:	fb01 f303 	mul.w	r3, r1, r3
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	3332      	adds	r3, #50	; 0x32
 8004518:	4a08      	ldr	r2, [pc, #32]	; (800453c <UART_SetConfig+0x4e4>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	f003 020f 	and.w	r2, r3, #15
 8004524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4422      	add	r2, r4
 800452c:	609a      	str	r2, [r3, #8]
}
 800452e:	bf00      	nop
 8004530:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004534:	46bd      	mov	sp, r7
 8004536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800453a:	bf00      	nop
 800453c:	51eb851f 	.word	0x51eb851f

08004540 <__errno>:
 8004540:	4b01      	ldr	r3, [pc, #4]	; (8004548 <__errno+0x8>)
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	2000000c 	.word	0x2000000c

0800454c <__libc_init_array>:
 800454c:	b570      	push	{r4, r5, r6, lr}
 800454e:	4d0d      	ldr	r5, [pc, #52]	; (8004584 <__libc_init_array+0x38>)
 8004550:	4c0d      	ldr	r4, [pc, #52]	; (8004588 <__libc_init_array+0x3c>)
 8004552:	1b64      	subs	r4, r4, r5
 8004554:	10a4      	asrs	r4, r4, #2
 8004556:	2600      	movs	r6, #0
 8004558:	42a6      	cmp	r6, r4
 800455a:	d109      	bne.n	8004570 <__libc_init_array+0x24>
 800455c:	4d0b      	ldr	r5, [pc, #44]	; (800458c <__libc_init_array+0x40>)
 800455e:	4c0c      	ldr	r4, [pc, #48]	; (8004590 <__libc_init_array+0x44>)
 8004560:	f000 fc9c 	bl	8004e9c <_init>
 8004564:	1b64      	subs	r4, r4, r5
 8004566:	10a4      	asrs	r4, r4, #2
 8004568:	2600      	movs	r6, #0
 800456a:	42a6      	cmp	r6, r4
 800456c:	d105      	bne.n	800457a <__libc_init_array+0x2e>
 800456e:	bd70      	pop	{r4, r5, r6, pc}
 8004570:	f855 3b04 	ldr.w	r3, [r5], #4
 8004574:	4798      	blx	r3
 8004576:	3601      	adds	r6, #1
 8004578:	e7ee      	b.n	8004558 <__libc_init_array+0xc>
 800457a:	f855 3b04 	ldr.w	r3, [r5], #4
 800457e:	4798      	blx	r3
 8004580:	3601      	adds	r6, #1
 8004582:	e7f2      	b.n	800456a <__libc_init_array+0x1e>
 8004584:	08005030 	.word	0x08005030
 8004588:	08005030 	.word	0x08005030
 800458c:	08005030 	.word	0x08005030
 8004590:	08005034 	.word	0x08005034

08004594 <memset>:
 8004594:	4402      	add	r2, r0
 8004596:	4603      	mov	r3, r0
 8004598:	4293      	cmp	r3, r2
 800459a:	d100      	bne.n	800459e <memset+0xa>
 800459c:	4770      	bx	lr
 800459e:	f803 1b01 	strb.w	r1, [r3], #1
 80045a2:	e7f9      	b.n	8004598 <memset+0x4>

080045a4 <siprintf>:
 80045a4:	b40e      	push	{r1, r2, r3}
 80045a6:	b500      	push	{lr}
 80045a8:	b09c      	sub	sp, #112	; 0x70
 80045aa:	ab1d      	add	r3, sp, #116	; 0x74
 80045ac:	9002      	str	r0, [sp, #8]
 80045ae:	9006      	str	r0, [sp, #24]
 80045b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045b4:	4809      	ldr	r0, [pc, #36]	; (80045dc <siprintf+0x38>)
 80045b6:	9107      	str	r1, [sp, #28]
 80045b8:	9104      	str	r1, [sp, #16]
 80045ba:	4909      	ldr	r1, [pc, #36]	; (80045e0 <siprintf+0x3c>)
 80045bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80045c0:	9105      	str	r1, [sp, #20]
 80045c2:	6800      	ldr	r0, [r0, #0]
 80045c4:	9301      	str	r3, [sp, #4]
 80045c6:	a902      	add	r1, sp, #8
 80045c8:	f000 f876 	bl	80046b8 <_svfiprintf_r>
 80045cc:	9b02      	ldr	r3, [sp, #8]
 80045ce:	2200      	movs	r2, #0
 80045d0:	701a      	strb	r2, [r3, #0]
 80045d2:	b01c      	add	sp, #112	; 0x70
 80045d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80045d8:	b003      	add	sp, #12
 80045da:	4770      	bx	lr
 80045dc:	2000000c 	.word	0x2000000c
 80045e0:	ffff0208 	.word	0xffff0208

080045e4 <strcat>:
 80045e4:	b510      	push	{r4, lr}
 80045e6:	4602      	mov	r2, r0
 80045e8:	7814      	ldrb	r4, [r2, #0]
 80045ea:	4613      	mov	r3, r2
 80045ec:	3201      	adds	r2, #1
 80045ee:	2c00      	cmp	r4, #0
 80045f0:	d1fa      	bne.n	80045e8 <strcat+0x4>
 80045f2:	3b01      	subs	r3, #1
 80045f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045fc:	2a00      	cmp	r2, #0
 80045fe:	d1f9      	bne.n	80045f4 <strcat+0x10>
 8004600:	bd10      	pop	{r4, pc}

08004602 <__ssputs_r>:
 8004602:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004606:	688e      	ldr	r6, [r1, #8]
 8004608:	429e      	cmp	r6, r3
 800460a:	4682      	mov	sl, r0
 800460c:	460c      	mov	r4, r1
 800460e:	4690      	mov	r8, r2
 8004610:	461f      	mov	r7, r3
 8004612:	d838      	bhi.n	8004686 <__ssputs_r+0x84>
 8004614:	898a      	ldrh	r2, [r1, #12]
 8004616:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800461a:	d032      	beq.n	8004682 <__ssputs_r+0x80>
 800461c:	6825      	ldr	r5, [r4, #0]
 800461e:	6909      	ldr	r1, [r1, #16]
 8004620:	eba5 0901 	sub.w	r9, r5, r1
 8004624:	6965      	ldr	r5, [r4, #20]
 8004626:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800462a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800462e:	3301      	adds	r3, #1
 8004630:	444b      	add	r3, r9
 8004632:	106d      	asrs	r5, r5, #1
 8004634:	429d      	cmp	r5, r3
 8004636:	bf38      	it	cc
 8004638:	461d      	movcc	r5, r3
 800463a:	0553      	lsls	r3, r2, #21
 800463c:	d531      	bpl.n	80046a2 <__ssputs_r+0xa0>
 800463e:	4629      	mov	r1, r5
 8004640:	f000 fb62 	bl	8004d08 <_malloc_r>
 8004644:	4606      	mov	r6, r0
 8004646:	b950      	cbnz	r0, 800465e <__ssputs_r+0x5c>
 8004648:	230c      	movs	r3, #12
 800464a:	f8ca 3000 	str.w	r3, [sl]
 800464e:	89a3      	ldrh	r3, [r4, #12]
 8004650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004654:	81a3      	strh	r3, [r4, #12]
 8004656:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800465a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800465e:	6921      	ldr	r1, [r4, #16]
 8004660:	464a      	mov	r2, r9
 8004662:	f000 fabd 	bl	8004be0 <memcpy>
 8004666:	89a3      	ldrh	r3, [r4, #12]
 8004668:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800466c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004670:	81a3      	strh	r3, [r4, #12]
 8004672:	6126      	str	r6, [r4, #16]
 8004674:	6165      	str	r5, [r4, #20]
 8004676:	444e      	add	r6, r9
 8004678:	eba5 0509 	sub.w	r5, r5, r9
 800467c:	6026      	str	r6, [r4, #0]
 800467e:	60a5      	str	r5, [r4, #8]
 8004680:	463e      	mov	r6, r7
 8004682:	42be      	cmp	r6, r7
 8004684:	d900      	bls.n	8004688 <__ssputs_r+0x86>
 8004686:	463e      	mov	r6, r7
 8004688:	6820      	ldr	r0, [r4, #0]
 800468a:	4632      	mov	r2, r6
 800468c:	4641      	mov	r1, r8
 800468e:	f000 fab5 	bl	8004bfc <memmove>
 8004692:	68a3      	ldr	r3, [r4, #8]
 8004694:	1b9b      	subs	r3, r3, r6
 8004696:	60a3      	str	r3, [r4, #8]
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	4433      	add	r3, r6
 800469c:	6023      	str	r3, [r4, #0]
 800469e:	2000      	movs	r0, #0
 80046a0:	e7db      	b.n	800465a <__ssputs_r+0x58>
 80046a2:	462a      	mov	r2, r5
 80046a4:	f000 fba4 	bl	8004df0 <_realloc_r>
 80046a8:	4606      	mov	r6, r0
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d1e1      	bne.n	8004672 <__ssputs_r+0x70>
 80046ae:	6921      	ldr	r1, [r4, #16]
 80046b0:	4650      	mov	r0, sl
 80046b2:	f000 fabd 	bl	8004c30 <_free_r>
 80046b6:	e7c7      	b.n	8004648 <__ssputs_r+0x46>

080046b8 <_svfiprintf_r>:
 80046b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046bc:	4698      	mov	r8, r3
 80046be:	898b      	ldrh	r3, [r1, #12]
 80046c0:	061b      	lsls	r3, r3, #24
 80046c2:	b09d      	sub	sp, #116	; 0x74
 80046c4:	4607      	mov	r7, r0
 80046c6:	460d      	mov	r5, r1
 80046c8:	4614      	mov	r4, r2
 80046ca:	d50e      	bpl.n	80046ea <_svfiprintf_r+0x32>
 80046cc:	690b      	ldr	r3, [r1, #16]
 80046ce:	b963      	cbnz	r3, 80046ea <_svfiprintf_r+0x32>
 80046d0:	2140      	movs	r1, #64	; 0x40
 80046d2:	f000 fb19 	bl	8004d08 <_malloc_r>
 80046d6:	6028      	str	r0, [r5, #0]
 80046d8:	6128      	str	r0, [r5, #16]
 80046da:	b920      	cbnz	r0, 80046e6 <_svfiprintf_r+0x2e>
 80046dc:	230c      	movs	r3, #12
 80046de:	603b      	str	r3, [r7, #0]
 80046e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046e4:	e0d1      	b.n	800488a <_svfiprintf_r+0x1d2>
 80046e6:	2340      	movs	r3, #64	; 0x40
 80046e8:	616b      	str	r3, [r5, #20]
 80046ea:	2300      	movs	r3, #0
 80046ec:	9309      	str	r3, [sp, #36]	; 0x24
 80046ee:	2320      	movs	r3, #32
 80046f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80046f8:	2330      	movs	r3, #48	; 0x30
 80046fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80048a4 <_svfiprintf_r+0x1ec>
 80046fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004702:	f04f 0901 	mov.w	r9, #1
 8004706:	4623      	mov	r3, r4
 8004708:	469a      	mov	sl, r3
 800470a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800470e:	b10a      	cbz	r2, 8004714 <_svfiprintf_r+0x5c>
 8004710:	2a25      	cmp	r2, #37	; 0x25
 8004712:	d1f9      	bne.n	8004708 <_svfiprintf_r+0x50>
 8004714:	ebba 0b04 	subs.w	fp, sl, r4
 8004718:	d00b      	beq.n	8004732 <_svfiprintf_r+0x7a>
 800471a:	465b      	mov	r3, fp
 800471c:	4622      	mov	r2, r4
 800471e:	4629      	mov	r1, r5
 8004720:	4638      	mov	r0, r7
 8004722:	f7ff ff6e 	bl	8004602 <__ssputs_r>
 8004726:	3001      	adds	r0, #1
 8004728:	f000 80aa 	beq.w	8004880 <_svfiprintf_r+0x1c8>
 800472c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800472e:	445a      	add	r2, fp
 8004730:	9209      	str	r2, [sp, #36]	; 0x24
 8004732:	f89a 3000 	ldrb.w	r3, [sl]
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 80a2 	beq.w	8004880 <_svfiprintf_r+0x1c8>
 800473c:	2300      	movs	r3, #0
 800473e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004746:	f10a 0a01 	add.w	sl, sl, #1
 800474a:	9304      	str	r3, [sp, #16]
 800474c:	9307      	str	r3, [sp, #28]
 800474e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004752:	931a      	str	r3, [sp, #104]	; 0x68
 8004754:	4654      	mov	r4, sl
 8004756:	2205      	movs	r2, #5
 8004758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800475c:	4851      	ldr	r0, [pc, #324]	; (80048a4 <_svfiprintf_r+0x1ec>)
 800475e:	f7fb fd5f 	bl	8000220 <memchr>
 8004762:	9a04      	ldr	r2, [sp, #16]
 8004764:	b9d8      	cbnz	r0, 800479e <_svfiprintf_r+0xe6>
 8004766:	06d0      	lsls	r0, r2, #27
 8004768:	bf44      	itt	mi
 800476a:	2320      	movmi	r3, #32
 800476c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004770:	0711      	lsls	r1, r2, #28
 8004772:	bf44      	itt	mi
 8004774:	232b      	movmi	r3, #43	; 0x2b
 8004776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800477a:	f89a 3000 	ldrb.w	r3, [sl]
 800477e:	2b2a      	cmp	r3, #42	; 0x2a
 8004780:	d015      	beq.n	80047ae <_svfiprintf_r+0xf6>
 8004782:	9a07      	ldr	r2, [sp, #28]
 8004784:	4654      	mov	r4, sl
 8004786:	2000      	movs	r0, #0
 8004788:	f04f 0c0a 	mov.w	ip, #10
 800478c:	4621      	mov	r1, r4
 800478e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004792:	3b30      	subs	r3, #48	; 0x30
 8004794:	2b09      	cmp	r3, #9
 8004796:	d94e      	bls.n	8004836 <_svfiprintf_r+0x17e>
 8004798:	b1b0      	cbz	r0, 80047c8 <_svfiprintf_r+0x110>
 800479a:	9207      	str	r2, [sp, #28]
 800479c:	e014      	b.n	80047c8 <_svfiprintf_r+0x110>
 800479e:	eba0 0308 	sub.w	r3, r0, r8
 80047a2:	fa09 f303 	lsl.w	r3, r9, r3
 80047a6:	4313      	orrs	r3, r2
 80047a8:	9304      	str	r3, [sp, #16]
 80047aa:	46a2      	mov	sl, r4
 80047ac:	e7d2      	b.n	8004754 <_svfiprintf_r+0x9c>
 80047ae:	9b03      	ldr	r3, [sp, #12]
 80047b0:	1d19      	adds	r1, r3, #4
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	9103      	str	r1, [sp, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	bfbb      	ittet	lt
 80047ba:	425b      	neglt	r3, r3
 80047bc:	f042 0202 	orrlt.w	r2, r2, #2
 80047c0:	9307      	strge	r3, [sp, #28]
 80047c2:	9307      	strlt	r3, [sp, #28]
 80047c4:	bfb8      	it	lt
 80047c6:	9204      	strlt	r2, [sp, #16]
 80047c8:	7823      	ldrb	r3, [r4, #0]
 80047ca:	2b2e      	cmp	r3, #46	; 0x2e
 80047cc:	d10c      	bne.n	80047e8 <_svfiprintf_r+0x130>
 80047ce:	7863      	ldrb	r3, [r4, #1]
 80047d0:	2b2a      	cmp	r3, #42	; 0x2a
 80047d2:	d135      	bne.n	8004840 <_svfiprintf_r+0x188>
 80047d4:	9b03      	ldr	r3, [sp, #12]
 80047d6:	1d1a      	adds	r2, r3, #4
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	9203      	str	r2, [sp, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	bfb8      	it	lt
 80047e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80047e4:	3402      	adds	r4, #2
 80047e6:	9305      	str	r3, [sp, #20]
 80047e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80048b4 <_svfiprintf_r+0x1fc>
 80047ec:	7821      	ldrb	r1, [r4, #0]
 80047ee:	2203      	movs	r2, #3
 80047f0:	4650      	mov	r0, sl
 80047f2:	f7fb fd15 	bl	8000220 <memchr>
 80047f6:	b140      	cbz	r0, 800480a <_svfiprintf_r+0x152>
 80047f8:	2340      	movs	r3, #64	; 0x40
 80047fa:	eba0 000a 	sub.w	r0, r0, sl
 80047fe:	fa03 f000 	lsl.w	r0, r3, r0
 8004802:	9b04      	ldr	r3, [sp, #16]
 8004804:	4303      	orrs	r3, r0
 8004806:	3401      	adds	r4, #1
 8004808:	9304      	str	r3, [sp, #16]
 800480a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800480e:	4826      	ldr	r0, [pc, #152]	; (80048a8 <_svfiprintf_r+0x1f0>)
 8004810:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004814:	2206      	movs	r2, #6
 8004816:	f7fb fd03 	bl	8000220 <memchr>
 800481a:	2800      	cmp	r0, #0
 800481c:	d038      	beq.n	8004890 <_svfiprintf_r+0x1d8>
 800481e:	4b23      	ldr	r3, [pc, #140]	; (80048ac <_svfiprintf_r+0x1f4>)
 8004820:	bb1b      	cbnz	r3, 800486a <_svfiprintf_r+0x1b2>
 8004822:	9b03      	ldr	r3, [sp, #12]
 8004824:	3307      	adds	r3, #7
 8004826:	f023 0307 	bic.w	r3, r3, #7
 800482a:	3308      	adds	r3, #8
 800482c:	9303      	str	r3, [sp, #12]
 800482e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004830:	4433      	add	r3, r6
 8004832:	9309      	str	r3, [sp, #36]	; 0x24
 8004834:	e767      	b.n	8004706 <_svfiprintf_r+0x4e>
 8004836:	fb0c 3202 	mla	r2, ip, r2, r3
 800483a:	460c      	mov	r4, r1
 800483c:	2001      	movs	r0, #1
 800483e:	e7a5      	b.n	800478c <_svfiprintf_r+0xd4>
 8004840:	2300      	movs	r3, #0
 8004842:	3401      	adds	r4, #1
 8004844:	9305      	str	r3, [sp, #20]
 8004846:	4619      	mov	r1, r3
 8004848:	f04f 0c0a 	mov.w	ip, #10
 800484c:	4620      	mov	r0, r4
 800484e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004852:	3a30      	subs	r2, #48	; 0x30
 8004854:	2a09      	cmp	r2, #9
 8004856:	d903      	bls.n	8004860 <_svfiprintf_r+0x1a8>
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0c5      	beq.n	80047e8 <_svfiprintf_r+0x130>
 800485c:	9105      	str	r1, [sp, #20]
 800485e:	e7c3      	b.n	80047e8 <_svfiprintf_r+0x130>
 8004860:	fb0c 2101 	mla	r1, ip, r1, r2
 8004864:	4604      	mov	r4, r0
 8004866:	2301      	movs	r3, #1
 8004868:	e7f0      	b.n	800484c <_svfiprintf_r+0x194>
 800486a:	ab03      	add	r3, sp, #12
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	462a      	mov	r2, r5
 8004870:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <_svfiprintf_r+0x1f8>)
 8004872:	a904      	add	r1, sp, #16
 8004874:	4638      	mov	r0, r7
 8004876:	f3af 8000 	nop.w
 800487a:	1c42      	adds	r2, r0, #1
 800487c:	4606      	mov	r6, r0
 800487e:	d1d6      	bne.n	800482e <_svfiprintf_r+0x176>
 8004880:	89ab      	ldrh	r3, [r5, #12]
 8004882:	065b      	lsls	r3, r3, #25
 8004884:	f53f af2c 	bmi.w	80046e0 <_svfiprintf_r+0x28>
 8004888:	9809      	ldr	r0, [sp, #36]	; 0x24
 800488a:	b01d      	add	sp, #116	; 0x74
 800488c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004890:	ab03      	add	r3, sp, #12
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	462a      	mov	r2, r5
 8004896:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <_svfiprintf_r+0x1f8>)
 8004898:	a904      	add	r1, sp, #16
 800489a:	4638      	mov	r0, r7
 800489c:	f000 f87a 	bl	8004994 <_printf_i>
 80048a0:	e7eb      	b.n	800487a <_svfiprintf_r+0x1c2>
 80048a2:	bf00      	nop
 80048a4:	08004ff4 	.word	0x08004ff4
 80048a8:	08004ffe 	.word	0x08004ffe
 80048ac:	00000000 	.word	0x00000000
 80048b0:	08004603 	.word	0x08004603
 80048b4:	08004ffa 	.word	0x08004ffa

080048b8 <_printf_common>:
 80048b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048bc:	4616      	mov	r6, r2
 80048be:	4699      	mov	r9, r3
 80048c0:	688a      	ldr	r2, [r1, #8]
 80048c2:	690b      	ldr	r3, [r1, #16]
 80048c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048c8:	4293      	cmp	r3, r2
 80048ca:	bfb8      	it	lt
 80048cc:	4613      	movlt	r3, r2
 80048ce:	6033      	str	r3, [r6, #0]
 80048d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048d4:	4607      	mov	r7, r0
 80048d6:	460c      	mov	r4, r1
 80048d8:	b10a      	cbz	r2, 80048de <_printf_common+0x26>
 80048da:	3301      	adds	r3, #1
 80048dc:	6033      	str	r3, [r6, #0]
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	0699      	lsls	r1, r3, #26
 80048e2:	bf42      	ittt	mi
 80048e4:	6833      	ldrmi	r3, [r6, #0]
 80048e6:	3302      	addmi	r3, #2
 80048e8:	6033      	strmi	r3, [r6, #0]
 80048ea:	6825      	ldr	r5, [r4, #0]
 80048ec:	f015 0506 	ands.w	r5, r5, #6
 80048f0:	d106      	bne.n	8004900 <_printf_common+0x48>
 80048f2:	f104 0a19 	add.w	sl, r4, #25
 80048f6:	68e3      	ldr	r3, [r4, #12]
 80048f8:	6832      	ldr	r2, [r6, #0]
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	42ab      	cmp	r3, r5
 80048fe:	dc26      	bgt.n	800494e <_printf_common+0x96>
 8004900:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004904:	1e13      	subs	r3, r2, #0
 8004906:	6822      	ldr	r2, [r4, #0]
 8004908:	bf18      	it	ne
 800490a:	2301      	movne	r3, #1
 800490c:	0692      	lsls	r2, r2, #26
 800490e:	d42b      	bmi.n	8004968 <_printf_common+0xb0>
 8004910:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004914:	4649      	mov	r1, r9
 8004916:	4638      	mov	r0, r7
 8004918:	47c0      	blx	r8
 800491a:	3001      	adds	r0, #1
 800491c:	d01e      	beq.n	800495c <_printf_common+0xa4>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	68e5      	ldr	r5, [r4, #12]
 8004922:	6832      	ldr	r2, [r6, #0]
 8004924:	f003 0306 	and.w	r3, r3, #6
 8004928:	2b04      	cmp	r3, #4
 800492a:	bf08      	it	eq
 800492c:	1aad      	subeq	r5, r5, r2
 800492e:	68a3      	ldr	r3, [r4, #8]
 8004930:	6922      	ldr	r2, [r4, #16]
 8004932:	bf0c      	ite	eq
 8004934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004938:	2500      	movne	r5, #0
 800493a:	4293      	cmp	r3, r2
 800493c:	bfc4      	itt	gt
 800493e:	1a9b      	subgt	r3, r3, r2
 8004940:	18ed      	addgt	r5, r5, r3
 8004942:	2600      	movs	r6, #0
 8004944:	341a      	adds	r4, #26
 8004946:	42b5      	cmp	r5, r6
 8004948:	d11a      	bne.n	8004980 <_printf_common+0xc8>
 800494a:	2000      	movs	r0, #0
 800494c:	e008      	b.n	8004960 <_printf_common+0xa8>
 800494e:	2301      	movs	r3, #1
 8004950:	4652      	mov	r2, sl
 8004952:	4649      	mov	r1, r9
 8004954:	4638      	mov	r0, r7
 8004956:	47c0      	blx	r8
 8004958:	3001      	adds	r0, #1
 800495a:	d103      	bne.n	8004964 <_printf_common+0xac>
 800495c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004964:	3501      	adds	r5, #1
 8004966:	e7c6      	b.n	80048f6 <_printf_common+0x3e>
 8004968:	18e1      	adds	r1, r4, r3
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	2030      	movs	r0, #48	; 0x30
 800496e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004972:	4422      	add	r2, r4
 8004974:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004978:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800497c:	3302      	adds	r3, #2
 800497e:	e7c7      	b.n	8004910 <_printf_common+0x58>
 8004980:	2301      	movs	r3, #1
 8004982:	4622      	mov	r2, r4
 8004984:	4649      	mov	r1, r9
 8004986:	4638      	mov	r0, r7
 8004988:	47c0      	blx	r8
 800498a:	3001      	adds	r0, #1
 800498c:	d0e6      	beq.n	800495c <_printf_common+0xa4>
 800498e:	3601      	adds	r6, #1
 8004990:	e7d9      	b.n	8004946 <_printf_common+0x8e>
	...

08004994 <_printf_i>:
 8004994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004998:	7e0f      	ldrb	r7, [r1, #24]
 800499a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800499c:	2f78      	cmp	r7, #120	; 0x78
 800499e:	4691      	mov	r9, r2
 80049a0:	4680      	mov	r8, r0
 80049a2:	460c      	mov	r4, r1
 80049a4:	469a      	mov	sl, r3
 80049a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049aa:	d807      	bhi.n	80049bc <_printf_i+0x28>
 80049ac:	2f62      	cmp	r7, #98	; 0x62
 80049ae:	d80a      	bhi.n	80049c6 <_printf_i+0x32>
 80049b0:	2f00      	cmp	r7, #0
 80049b2:	f000 80d8 	beq.w	8004b66 <_printf_i+0x1d2>
 80049b6:	2f58      	cmp	r7, #88	; 0x58
 80049b8:	f000 80a3 	beq.w	8004b02 <_printf_i+0x16e>
 80049bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049c4:	e03a      	b.n	8004a3c <_printf_i+0xa8>
 80049c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049ca:	2b15      	cmp	r3, #21
 80049cc:	d8f6      	bhi.n	80049bc <_printf_i+0x28>
 80049ce:	a101      	add	r1, pc, #4	; (adr r1, 80049d4 <_printf_i+0x40>)
 80049d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049d4:	08004a2d 	.word	0x08004a2d
 80049d8:	08004a41 	.word	0x08004a41
 80049dc:	080049bd 	.word	0x080049bd
 80049e0:	080049bd 	.word	0x080049bd
 80049e4:	080049bd 	.word	0x080049bd
 80049e8:	080049bd 	.word	0x080049bd
 80049ec:	08004a41 	.word	0x08004a41
 80049f0:	080049bd 	.word	0x080049bd
 80049f4:	080049bd 	.word	0x080049bd
 80049f8:	080049bd 	.word	0x080049bd
 80049fc:	080049bd 	.word	0x080049bd
 8004a00:	08004b4d 	.word	0x08004b4d
 8004a04:	08004a71 	.word	0x08004a71
 8004a08:	08004b2f 	.word	0x08004b2f
 8004a0c:	080049bd 	.word	0x080049bd
 8004a10:	080049bd 	.word	0x080049bd
 8004a14:	08004b6f 	.word	0x08004b6f
 8004a18:	080049bd 	.word	0x080049bd
 8004a1c:	08004a71 	.word	0x08004a71
 8004a20:	080049bd 	.word	0x080049bd
 8004a24:	080049bd 	.word	0x080049bd
 8004a28:	08004b37 	.word	0x08004b37
 8004a2c:	682b      	ldr	r3, [r5, #0]
 8004a2e:	1d1a      	adds	r2, r3, #4
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	602a      	str	r2, [r5, #0]
 8004a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0a3      	b.n	8004b88 <_printf_i+0x1f4>
 8004a40:	6820      	ldr	r0, [r4, #0]
 8004a42:	6829      	ldr	r1, [r5, #0]
 8004a44:	0606      	lsls	r6, r0, #24
 8004a46:	f101 0304 	add.w	r3, r1, #4
 8004a4a:	d50a      	bpl.n	8004a62 <_printf_i+0xce>
 8004a4c:	680e      	ldr	r6, [r1, #0]
 8004a4e:	602b      	str	r3, [r5, #0]
 8004a50:	2e00      	cmp	r6, #0
 8004a52:	da03      	bge.n	8004a5c <_printf_i+0xc8>
 8004a54:	232d      	movs	r3, #45	; 0x2d
 8004a56:	4276      	negs	r6, r6
 8004a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a5c:	485e      	ldr	r0, [pc, #376]	; (8004bd8 <_printf_i+0x244>)
 8004a5e:	230a      	movs	r3, #10
 8004a60:	e019      	b.n	8004a96 <_printf_i+0x102>
 8004a62:	680e      	ldr	r6, [r1, #0]
 8004a64:	602b      	str	r3, [r5, #0]
 8004a66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a6a:	bf18      	it	ne
 8004a6c:	b236      	sxthne	r6, r6
 8004a6e:	e7ef      	b.n	8004a50 <_printf_i+0xbc>
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	6820      	ldr	r0, [r4, #0]
 8004a74:	1d19      	adds	r1, r3, #4
 8004a76:	6029      	str	r1, [r5, #0]
 8004a78:	0601      	lsls	r1, r0, #24
 8004a7a:	d501      	bpl.n	8004a80 <_printf_i+0xec>
 8004a7c:	681e      	ldr	r6, [r3, #0]
 8004a7e:	e002      	b.n	8004a86 <_printf_i+0xf2>
 8004a80:	0646      	lsls	r6, r0, #25
 8004a82:	d5fb      	bpl.n	8004a7c <_printf_i+0xe8>
 8004a84:	881e      	ldrh	r6, [r3, #0]
 8004a86:	4854      	ldr	r0, [pc, #336]	; (8004bd8 <_printf_i+0x244>)
 8004a88:	2f6f      	cmp	r7, #111	; 0x6f
 8004a8a:	bf0c      	ite	eq
 8004a8c:	2308      	moveq	r3, #8
 8004a8e:	230a      	movne	r3, #10
 8004a90:	2100      	movs	r1, #0
 8004a92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a96:	6865      	ldr	r5, [r4, #4]
 8004a98:	60a5      	str	r5, [r4, #8]
 8004a9a:	2d00      	cmp	r5, #0
 8004a9c:	bfa2      	ittt	ge
 8004a9e:	6821      	ldrge	r1, [r4, #0]
 8004aa0:	f021 0104 	bicge.w	r1, r1, #4
 8004aa4:	6021      	strge	r1, [r4, #0]
 8004aa6:	b90e      	cbnz	r6, 8004aac <_printf_i+0x118>
 8004aa8:	2d00      	cmp	r5, #0
 8004aaa:	d04d      	beq.n	8004b48 <_printf_i+0x1b4>
 8004aac:	4615      	mov	r5, r2
 8004aae:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ab2:	fb03 6711 	mls	r7, r3, r1, r6
 8004ab6:	5dc7      	ldrb	r7, [r0, r7]
 8004ab8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004abc:	4637      	mov	r7, r6
 8004abe:	42bb      	cmp	r3, r7
 8004ac0:	460e      	mov	r6, r1
 8004ac2:	d9f4      	bls.n	8004aae <_printf_i+0x11a>
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d10b      	bne.n	8004ae0 <_printf_i+0x14c>
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	07de      	lsls	r6, r3, #31
 8004acc:	d508      	bpl.n	8004ae0 <_printf_i+0x14c>
 8004ace:	6923      	ldr	r3, [r4, #16]
 8004ad0:	6861      	ldr	r1, [r4, #4]
 8004ad2:	4299      	cmp	r1, r3
 8004ad4:	bfde      	ittt	le
 8004ad6:	2330      	movle	r3, #48	; 0x30
 8004ad8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004adc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004ae0:	1b52      	subs	r2, r2, r5
 8004ae2:	6122      	str	r2, [r4, #16]
 8004ae4:	f8cd a000 	str.w	sl, [sp]
 8004ae8:	464b      	mov	r3, r9
 8004aea:	aa03      	add	r2, sp, #12
 8004aec:	4621      	mov	r1, r4
 8004aee:	4640      	mov	r0, r8
 8004af0:	f7ff fee2 	bl	80048b8 <_printf_common>
 8004af4:	3001      	adds	r0, #1
 8004af6:	d14c      	bne.n	8004b92 <_printf_i+0x1fe>
 8004af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004afc:	b004      	add	sp, #16
 8004afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b02:	4835      	ldr	r0, [pc, #212]	; (8004bd8 <_printf_i+0x244>)
 8004b04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b08:	6829      	ldr	r1, [r5, #0]
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b10:	6029      	str	r1, [r5, #0]
 8004b12:	061d      	lsls	r5, r3, #24
 8004b14:	d514      	bpl.n	8004b40 <_printf_i+0x1ac>
 8004b16:	07df      	lsls	r7, r3, #31
 8004b18:	bf44      	itt	mi
 8004b1a:	f043 0320 	orrmi.w	r3, r3, #32
 8004b1e:	6023      	strmi	r3, [r4, #0]
 8004b20:	b91e      	cbnz	r6, 8004b2a <_printf_i+0x196>
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	f023 0320 	bic.w	r3, r3, #32
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	2310      	movs	r3, #16
 8004b2c:	e7b0      	b.n	8004a90 <_printf_i+0xfc>
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	f043 0320 	orr.w	r3, r3, #32
 8004b34:	6023      	str	r3, [r4, #0]
 8004b36:	2378      	movs	r3, #120	; 0x78
 8004b38:	4828      	ldr	r0, [pc, #160]	; (8004bdc <_printf_i+0x248>)
 8004b3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b3e:	e7e3      	b.n	8004b08 <_printf_i+0x174>
 8004b40:	0659      	lsls	r1, r3, #25
 8004b42:	bf48      	it	mi
 8004b44:	b2b6      	uxthmi	r6, r6
 8004b46:	e7e6      	b.n	8004b16 <_printf_i+0x182>
 8004b48:	4615      	mov	r5, r2
 8004b4a:	e7bb      	b.n	8004ac4 <_printf_i+0x130>
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	6826      	ldr	r6, [r4, #0]
 8004b50:	6961      	ldr	r1, [r4, #20]
 8004b52:	1d18      	adds	r0, r3, #4
 8004b54:	6028      	str	r0, [r5, #0]
 8004b56:	0635      	lsls	r5, r6, #24
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	d501      	bpl.n	8004b60 <_printf_i+0x1cc>
 8004b5c:	6019      	str	r1, [r3, #0]
 8004b5e:	e002      	b.n	8004b66 <_printf_i+0x1d2>
 8004b60:	0670      	lsls	r0, r6, #25
 8004b62:	d5fb      	bpl.n	8004b5c <_printf_i+0x1c8>
 8004b64:	8019      	strh	r1, [r3, #0]
 8004b66:	2300      	movs	r3, #0
 8004b68:	6123      	str	r3, [r4, #16]
 8004b6a:	4615      	mov	r5, r2
 8004b6c:	e7ba      	b.n	8004ae4 <_printf_i+0x150>
 8004b6e:	682b      	ldr	r3, [r5, #0]
 8004b70:	1d1a      	adds	r2, r3, #4
 8004b72:	602a      	str	r2, [r5, #0]
 8004b74:	681d      	ldr	r5, [r3, #0]
 8004b76:	6862      	ldr	r2, [r4, #4]
 8004b78:	2100      	movs	r1, #0
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	f7fb fb50 	bl	8000220 <memchr>
 8004b80:	b108      	cbz	r0, 8004b86 <_printf_i+0x1f2>
 8004b82:	1b40      	subs	r0, r0, r5
 8004b84:	6060      	str	r0, [r4, #4]
 8004b86:	6863      	ldr	r3, [r4, #4]
 8004b88:	6123      	str	r3, [r4, #16]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b90:	e7a8      	b.n	8004ae4 <_printf_i+0x150>
 8004b92:	6923      	ldr	r3, [r4, #16]
 8004b94:	462a      	mov	r2, r5
 8004b96:	4649      	mov	r1, r9
 8004b98:	4640      	mov	r0, r8
 8004b9a:	47d0      	blx	sl
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	d0ab      	beq.n	8004af8 <_printf_i+0x164>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	079b      	lsls	r3, r3, #30
 8004ba4:	d413      	bmi.n	8004bce <_printf_i+0x23a>
 8004ba6:	68e0      	ldr	r0, [r4, #12]
 8004ba8:	9b03      	ldr	r3, [sp, #12]
 8004baa:	4298      	cmp	r0, r3
 8004bac:	bfb8      	it	lt
 8004bae:	4618      	movlt	r0, r3
 8004bb0:	e7a4      	b.n	8004afc <_printf_i+0x168>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	4632      	mov	r2, r6
 8004bb6:	4649      	mov	r1, r9
 8004bb8:	4640      	mov	r0, r8
 8004bba:	47d0      	blx	sl
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	d09b      	beq.n	8004af8 <_printf_i+0x164>
 8004bc0:	3501      	adds	r5, #1
 8004bc2:	68e3      	ldr	r3, [r4, #12]
 8004bc4:	9903      	ldr	r1, [sp, #12]
 8004bc6:	1a5b      	subs	r3, r3, r1
 8004bc8:	42ab      	cmp	r3, r5
 8004bca:	dcf2      	bgt.n	8004bb2 <_printf_i+0x21e>
 8004bcc:	e7eb      	b.n	8004ba6 <_printf_i+0x212>
 8004bce:	2500      	movs	r5, #0
 8004bd0:	f104 0619 	add.w	r6, r4, #25
 8004bd4:	e7f5      	b.n	8004bc2 <_printf_i+0x22e>
 8004bd6:	bf00      	nop
 8004bd8:	08005005 	.word	0x08005005
 8004bdc:	08005016 	.word	0x08005016

08004be0 <memcpy>:
 8004be0:	440a      	add	r2, r1
 8004be2:	4291      	cmp	r1, r2
 8004be4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004be8:	d100      	bne.n	8004bec <memcpy+0xc>
 8004bea:	4770      	bx	lr
 8004bec:	b510      	push	{r4, lr}
 8004bee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bf6:	4291      	cmp	r1, r2
 8004bf8:	d1f9      	bne.n	8004bee <memcpy+0xe>
 8004bfa:	bd10      	pop	{r4, pc}

08004bfc <memmove>:
 8004bfc:	4288      	cmp	r0, r1
 8004bfe:	b510      	push	{r4, lr}
 8004c00:	eb01 0402 	add.w	r4, r1, r2
 8004c04:	d902      	bls.n	8004c0c <memmove+0x10>
 8004c06:	4284      	cmp	r4, r0
 8004c08:	4623      	mov	r3, r4
 8004c0a:	d807      	bhi.n	8004c1c <memmove+0x20>
 8004c0c:	1e43      	subs	r3, r0, #1
 8004c0e:	42a1      	cmp	r1, r4
 8004c10:	d008      	beq.n	8004c24 <memmove+0x28>
 8004c12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c1a:	e7f8      	b.n	8004c0e <memmove+0x12>
 8004c1c:	4402      	add	r2, r0
 8004c1e:	4601      	mov	r1, r0
 8004c20:	428a      	cmp	r2, r1
 8004c22:	d100      	bne.n	8004c26 <memmove+0x2a>
 8004c24:	bd10      	pop	{r4, pc}
 8004c26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c2e:	e7f7      	b.n	8004c20 <memmove+0x24>

08004c30 <_free_r>:
 8004c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c32:	2900      	cmp	r1, #0
 8004c34:	d044      	beq.n	8004cc0 <_free_r+0x90>
 8004c36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c3a:	9001      	str	r0, [sp, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f1a1 0404 	sub.w	r4, r1, #4
 8004c42:	bfb8      	it	lt
 8004c44:	18e4      	addlt	r4, r4, r3
 8004c46:	f000 f913 	bl	8004e70 <__malloc_lock>
 8004c4a:	4a1e      	ldr	r2, [pc, #120]	; (8004cc4 <_free_r+0x94>)
 8004c4c:	9801      	ldr	r0, [sp, #4]
 8004c4e:	6813      	ldr	r3, [r2, #0]
 8004c50:	b933      	cbnz	r3, 8004c60 <_free_r+0x30>
 8004c52:	6063      	str	r3, [r4, #4]
 8004c54:	6014      	str	r4, [r2, #0]
 8004c56:	b003      	add	sp, #12
 8004c58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c5c:	f000 b90e 	b.w	8004e7c <__malloc_unlock>
 8004c60:	42a3      	cmp	r3, r4
 8004c62:	d908      	bls.n	8004c76 <_free_r+0x46>
 8004c64:	6825      	ldr	r5, [r4, #0]
 8004c66:	1961      	adds	r1, r4, r5
 8004c68:	428b      	cmp	r3, r1
 8004c6a:	bf01      	itttt	eq
 8004c6c:	6819      	ldreq	r1, [r3, #0]
 8004c6e:	685b      	ldreq	r3, [r3, #4]
 8004c70:	1949      	addeq	r1, r1, r5
 8004c72:	6021      	streq	r1, [r4, #0]
 8004c74:	e7ed      	b.n	8004c52 <_free_r+0x22>
 8004c76:	461a      	mov	r2, r3
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	b10b      	cbz	r3, 8004c80 <_free_r+0x50>
 8004c7c:	42a3      	cmp	r3, r4
 8004c7e:	d9fa      	bls.n	8004c76 <_free_r+0x46>
 8004c80:	6811      	ldr	r1, [r2, #0]
 8004c82:	1855      	adds	r5, r2, r1
 8004c84:	42a5      	cmp	r5, r4
 8004c86:	d10b      	bne.n	8004ca0 <_free_r+0x70>
 8004c88:	6824      	ldr	r4, [r4, #0]
 8004c8a:	4421      	add	r1, r4
 8004c8c:	1854      	adds	r4, r2, r1
 8004c8e:	42a3      	cmp	r3, r4
 8004c90:	6011      	str	r1, [r2, #0]
 8004c92:	d1e0      	bne.n	8004c56 <_free_r+0x26>
 8004c94:	681c      	ldr	r4, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	6053      	str	r3, [r2, #4]
 8004c9a:	4421      	add	r1, r4
 8004c9c:	6011      	str	r1, [r2, #0]
 8004c9e:	e7da      	b.n	8004c56 <_free_r+0x26>
 8004ca0:	d902      	bls.n	8004ca8 <_free_r+0x78>
 8004ca2:	230c      	movs	r3, #12
 8004ca4:	6003      	str	r3, [r0, #0]
 8004ca6:	e7d6      	b.n	8004c56 <_free_r+0x26>
 8004ca8:	6825      	ldr	r5, [r4, #0]
 8004caa:	1961      	adds	r1, r4, r5
 8004cac:	428b      	cmp	r3, r1
 8004cae:	bf04      	itt	eq
 8004cb0:	6819      	ldreq	r1, [r3, #0]
 8004cb2:	685b      	ldreq	r3, [r3, #4]
 8004cb4:	6063      	str	r3, [r4, #4]
 8004cb6:	bf04      	itt	eq
 8004cb8:	1949      	addeq	r1, r1, r5
 8004cba:	6021      	streq	r1, [r4, #0]
 8004cbc:	6054      	str	r4, [r2, #4]
 8004cbe:	e7ca      	b.n	8004c56 <_free_r+0x26>
 8004cc0:	b003      	add	sp, #12
 8004cc2:	bd30      	pop	{r4, r5, pc}
 8004cc4:	2000020c 	.word	0x2000020c

08004cc8 <sbrk_aligned>:
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	4e0e      	ldr	r6, [pc, #56]	; (8004d04 <sbrk_aligned+0x3c>)
 8004ccc:	460c      	mov	r4, r1
 8004cce:	6831      	ldr	r1, [r6, #0]
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	b911      	cbnz	r1, 8004cda <sbrk_aligned+0x12>
 8004cd4:	f000 f8bc 	bl	8004e50 <_sbrk_r>
 8004cd8:	6030      	str	r0, [r6, #0]
 8004cda:	4621      	mov	r1, r4
 8004cdc:	4628      	mov	r0, r5
 8004cde:	f000 f8b7 	bl	8004e50 <_sbrk_r>
 8004ce2:	1c43      	adds	r3, r0, #1
 8004ce4:	d00a      	beq.n	8004cfc <sbrk_aligned+0x34>
 8004ce6:	1cc4      	adds	r4, r0, #3
 8004ce8:	f024 0403 	bic.w	r4, r4, #3
 8004cec:	42a0      	cmp	r0, r4
 8004cee:	d007      	beq.n	8004d00 <sbrk_aligned+0x38>
 8004cf0:	1a21      	subs	r1, r4, r0
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	f000 f8ac 	bl	8004e50 <_sbrk_r>
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	d101      	bne.n	8004d00 <sbrk_aligned+0x38>
 8004cfc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004d00:	4620      	mov	r0, r4
 8004d02:	bd70      	pop	{r4, r5, r6, pc}
 8004d04:	20000210 	.word	0x20000210

08004d08 <_malloc_r>:
 8004d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d0c:	1ccd      	adds	r5, r1, #3
 8004d0e:	f025 0503 	bic.w	r5, r5, #3
 8004d12:	3508      	adds	r5, #8
 8004d14:	2d0c      	cmp	r5, #12
 8004d16:	bf38      	it	cc
 8004d18:	250c      	movcc	r5, #12
 8004d1a:	2d00      	cmp	r5, #0
 8004d1c:	4607      	mov	r7, r0
 8004d1e:	db01      	blt.n	8004d24 <_malloc_r+0x1c>
 8004d20:	42a9      	cmp	r1, r5
 8004d22:	d905      	bls.n	8004d30 <_malloc_r+0x28>
 8004d24:	230c      	movs	r3, #12
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	2600      	movs	r6, #0
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d30:	4e2e      	ldr	r6, [pc, #184]	; (8004dec <_malloc_r+0xe4>)
 8004d32:	f000 f89d 	bl	8004e70 <__malloc_lock>
 8004d36:	6833      	ldr	r3, [r6, #0]
 8004d38:	461c      	mov	r4, r3
 8004d3a:	bb34      	cbnz	r4, 8004d8a <_malloc_r+0x82>
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	4638      	mov	r0, r7
 8004d40:	f7ff ffc2 	bl	8004cc8 <sbrk_aligned>
 8004d44:	1c43      	adds	r3, r0, #1
 8004d46:	4604      	mov	r4, r0
 8004d48:	d14d      	bne.n	8004de6 <_malloc_r+0xde>
 8004d4a:	6834      	ldr	r4, [r6, #0]
 8004d4c:	4626      	mov	r6, r4
 8004d4e:	2e00      	cmp	r6, #0
 8004d50:	d140      	bne.n	8004dd4 <_malloc_r+0xcc>
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	4631      	mov	r1, r6
 8004d56:	4638      	mov	r0, r7
 8004d58:	eb04 0803 	add.w	r8, r4, r3
 8004d5c:	f000 f878 	bl	8004e50 <_sbrk_r>
 8004d60:	4580      	cmp	r8, r0
 8004d62:	d13a      	bne.n	8004dda <_malloc_r+0xd2>
 8004d64:	6821      	ldr	r1, [r4, #0]
 8004d66:	3503      	adds	r5, #3
 8004d68:	1a6d      	subs	r5, r5, r1
 8004d6a:	f025 0503 	bic.w	r5, r5, #3
 8004d6e:	3508      	adds	r5, #8
 8004d70:	2d0c      	cmp	r5, #12
 8004d72:	bf38      	it	cc
 8004d74:	250c      	movcc	r5, #12
 8004d76:	4629      	mov	r1, r5
 8004d78:	4638      	mov	r0, r7
 8004d7a:	f7ff ffa5 	bl	8004cc8 <sbrk_aligned>
 8004d7e:	3001      	adds	r0, #1
 8004d80:	d02b      	beq.n	8004dda <_malloc_r+0xd2>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	442b      	add	r3, r5
 8004d86:	6023      	str	r3, [r4, #0]
 8004d88:	e00e      	b.n	8004da8 <_malloc_r+0xa0>
 8004d8a:	6822      	ldr	r2, [r4, #0]
 8004d8c:	1b52      	subs	r2, r2, r5
 8004d8e:	d41e      	bmi.n	8004dce <_malloc_r+0xc6>
 8004d90:	2a0b      	cmp	r2, #11
 8004d92:	d916      	bls.n	8004dc2 <_malloc_r+0xba>
 8004d94:	1961      	adds	r1, r4, r5
 8004d96:	42a3      	cmp	r3, r4
 8004d98:	6025      	str	r5, [r4, #0]
 8004d9a:	bf18      	it	ne
 8004d9c:	6059      	strne	r1, [r3, #4]
 8004d9e:	6863      	ldr	r3, [r4, #4]
 8004da0:	bf08      	it	eq
 8004da2:	6031      	streq	r1, [r6, #0]
 8004da4:	5162      	str	r2, [r4, r5]
 8004da6:	604b      	str	r3, [r1, #4]
 8004da8:	4638      	mov	r0, r7
 8004daa:	f104 060b 	add.w	r6, r4, #11
 8004dae:	f000 f865 	bl	8004e7c <__malloc_unlock>
 8004db2:	f026 0607 	bic.w	r6, r6, #7
 8004db6:	1d23      	adds	r3, r4, #4
 8004db8:	1af2      	subs	r2, r6, r3
 8004dba:	d0b6      	beq.n	8004d2a <_malloc_r+0x22>
 8004dbc:	1b9b      	subs	r3, r3, r6
 8004dbe:	50a3      	str	r3, [r4, r2]
 8004dc0:	e7b3      	b.n	8004d2a <_malloc_r+0x22>
 8004dc2:	6862      	ldr	r2, [r4, #4]
 8004dc4:	42a3      	cmp	r3, r4
 8004dc6:	bf0c      	ite	eq
 8004dc8:	6032      	streq	r2, [r6, #0]
 8004dca:	605a      	strne	r2, [r3, #4]
 8004dcc:	e7ec      	b.n	8004da8 <_malloc_r+0xa0>
 8004dce:	4623      	mov	r3, r4
 8004dd0:	6864      	ldr	r4, [r4, #4]
 8004dd2:	e7b2      	b.n	8004d3a <_malloc_r+0x32>
 8004dd4:	4634      	mov	r4, r6
 8004dd6:	6876      	ldr	r6, [r6, #4]
 8004dd8:	e7b9      	b.n	8004d4e <_malloc_r+0x46>
 8004dda:	230c      	movs	r3, #12
 8004ddc:	603b      	str	r3, [r7, #0]
 8004dde:	4638      	mov	r0, r7
 8004de0:	f000 f84c 	bl	8004e7c <__malloc_unlock>
 8004de4:	e7a1      	b.n	8004d2a <_malloc_r+0x22>
 8004de6:	6025      	str	r5, [r4, #0]
 8004de8:	e7de      	b.n	8004da8 <_malloc_r+0xa0>
 8004dea:	bf00      	nop
 8004dec:	2000020c 	.word	0x2000020c

08004df0 <_realloc_r>:
 8004df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df4:	4680      	mov	r8, r0
 8004df6:	4614      	mov	r4, r2
 8004df8:	460e      	mov	r6, r1
 8004dfa:	b921      	cbnz	r1, 8004e06 <_realloc_r+0x16>
 8004dfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e00:	4611      	mov	r1, r2
 8004e02:	f7ff bf81 	b.w	8004d08 <_malloc_r>
 8004e06:	b92a      	cbnz	r2, 8004e14 <_realloc_r+0x24>
 8004e08:	f7ff ff12 	bl	8004c30 <_free_r>
 8004e0c:	4625      	mov	r5, r4
 8004e0e:	4628      	mov	r0, r5
 8004e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e14:	f000 f838 	bl	8004e88 <_malloc_usable_size_r>
 8004e18:	4284      	cmp	r4, r0
 8004e1a:	4607      	mov	r7, r0
 8004e1c:	d802      	bhi.n	8004e24 <_realloc_r+0x34>
 8004e1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e22:	d812      	bhi.n	8004e4a <_realloc_r+0x5a>
 8004e24:	4621      	mov	r1, r4
 8004e26:	4640      	mov	r0, r8
 8004e28:	f7ff ff6e 	bl	8004d08 <_malloc_r>
 8004e2c:	4605      	mov	r5, r0
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	d0ed      	beq.n	8004e0e <_realloc_r+0x1e>
 8004e32:	42bc      	cmp	r4, r7
 8004e34:	4622      	mov	r2, r4
 8004e36:	4631      	mov	r1, r6
 8004e38:	bf28      	it	cs
 8004e3a:	463a      	movcs	r2, r7
 8004e3c:	f7ff fed0 	bl	8004be0 <memcpy>
 8004e40:	4631      	mov	r1, r6
 8004e42:	4640      	mov	r0, r8
 8004e44:	f7ff fef4 	bl	8004c30 <_free_r>
 8004e48:	e7e1      	b.n	8004e0e <_realloc_r+0x1e>
 8004e4a:	4635      	mov	r5, r6
 8004e4c:	e7df      	b.n	8004e0e <_realloc_r+0x1e>
	...

08004e50 <_sbrk_r>:
 8004e50:	b538      	push	{r3, r4, r5, lr}
 8004e52:	4d06      	ldr	r5, [pc, #24]	; (8004e6c <_sbrk_r+0x1c>)
 8004e54:	2300      	movs	r3, #0
 8004e56:	4604      	mov	r4, r0
 8004e58:	4608      	mov	r0, r1
 8004e5a:	602b      	str	r3, [r5, #0]
 8004e5c:	f7fc fdba 	bl	80019d4 <_sbrk>
 8004e60:	1c43      	adds	r3, r0, #1
 8004e62:	d102      	bne.n	8004e6a <_sbrk_r+0x1a>
 8004e64:	682b      	ldr	r3, [r5, #0]
 8004e66:	b103      	cbz	r3, 8004e6a <_sbrk_r+0x1a>
 8004e68:	6023      	str	r3, [r4, #0]
 8004e6a:	bd38      	pop	{r3, r4, r5, pc}
 8004e6c:	20000214 	.word	0x20000214

08004e70 <__malloc_lock>:
 8004e70:	4801      	ldr	r0, [pc, #4]	; (8004e78 <__malloc_lock+0x8>)
 8004e72:	f000 b811 	b.w	8004e98 <__retarget_lock_acquire_recursive>
 8004e76:	bf00      	nop
 8004e78:	20000218 	.word	0x20000218

08004e7c <__malloc_unlock>:
 8004e7c:	4801      	ldr	r0, [pc, #4]	; (8004e84 <__malloc_unlock+0x8>)
 8004e7e:	f000 b80c 	b.w	8004e9a <__retarget_lock_release_recursive>
 8004e82:	bf00      	nop
 8004e84:	20000218 	.word	0x20000218

08004e88 <_malloc_usable_size_r>:
 8004e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e8c:	1f18      	subs	r0, r3, #4
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bfbc      	itt	lt
 8004e92:	580b      	ldrlt	r3, [r1, r0]
 8004e94:	18c0      	addlt	r0, r0, r3
 8004e96:	4770      	bx	lr

08004e98 <__retarget_lock_acquire_recursive>:
 8004e98:	4770      	bx	lr

08004e9a <__retarget_lock_release_recursive>:
 8004e9a:	4770      	bx	lr

08004e9c <_init>:
 8004e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9e:	bf00      	nop
 8004ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea2:	bc08      	pop	{r3}
 8004ea4:	469e      	mov	lr, r3
 8004ea6:	4770      	bx	lr

08004ea8 <_fini>:
 8004ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eaa:	bf00      	nop
 8004eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eae:	bc08      	pop	{r3}
 8004eb0:	469e      	mov	lr, r3
 8004eb2:	4770      	bx	lr
