
GPIO_Q1_Led_Toggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000468  08000468  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000468  08000468  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000468  08000468  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000468  08000468  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000468  08000468  00010468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800046c  0800046c  0001046c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000470  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000474  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000474  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000013f5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000494  00000000  00000000  00021429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  000218c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000180  00000000  00000000  00021a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f3cf  00000000  00000000  00021c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ea7  00000000  00000000  00040fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0eb2  00000000  00000000  00042e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103d30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000550  00000000  00000000  00103d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000450 	.word	0x08000450

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000450 	.word	0x08000450

08000204 <delay>:
 */

#include"main.h"

void delay(int T)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
   int i;
    while (T--){
 800020c:	e00a      	b.n	8000224 <delay+0x20>
    	for(i=0;i<5000;i++);
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]
 8000212:	e002      	b.n	800021a <delay+0x16>
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	3301      	adds	r3, #1
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000220:	4293      	cmp	r3, r2
 8000222:	ddf7      	ble.n	8000214 <delay+0x10>
    while (T--){
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	1e5a      	subs	r2, r3, #1
 8000228:	607a      	str	r2, [r7, #4]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d1ef      	bne.n	800020e <delay+0xa>

    	}
    }
 800022e:	bf00      	nop
 8000230:	bf00      	nop
 8000232:	3714      	adds	r7, #20
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr

0800023c <main>:
int main(){
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 0x7;
 8000240:	4b30      	ldr	r3, [pc, #192]	; (8000304 <main+0xc8>)
 8000242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000244:	4a2f      	ldr	r2, [pc, #188]	; (8000304 <main+0xc8>)
 8000246:	f043 0307 	orr.w	r3, r3, #7
 800024a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= 0x1400;
 800024c:	4b2e      	ldr	r3, [pc, #184]	; (8000308 <main+0xcc>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a2d      	ldr	r2, [pc, #180]	; (8000308 <main+0xcc>)
 8000252:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000256:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 0x400;
 8000258:	4b2c      	ldr	r3, [pc, #176]	; (800030c <main+0xd0>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a2b      	ldr	r2, [pc, #172]	; (800030c <main+0xd0>)
 800025e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000262:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 0x1000;
 8000264:	4b2a      	ldr	r3, [pc, #168]	; (8000310 <main+0xd4>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a29      	ldr	r2, [pc, #164]	; (8000310 <main+0xd4>)
 800026a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800026e:	6013      	str	r3, [r2, #0]

	while(1){
	GPIOA->ODR |= 0x20;
 8000270:	4b25      	ldr	r3, [pc, #148]	; (8000308 <main+0xcc>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a24      	ldr	r2, [pc, #144]	; (8000308 <main+0xcc>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6153      	str	r3, [r2, #20]
	delay(100);
 800027c:	2064      	movs	r0, #100	; 0x64
 800027e:	f7ff ffc1 	bl	8000204 <delay>
	GPIOA->ODR &= ~(0x20);
 8000282:	4b21      	ldr	r3, [pc, #132]	; (8000308 <main+0xcc>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	4a20      	ldr	r2, [pc, #128]	; (8000308 <main+0xcc>)
 8000288:	f023 0320 	bic.w	r3, r3, #32
 800028c:	6153      	str	r3, [r2, #20]
	delay(100);
 800028e:	2064      	movs	r0, #100	; 0x64
 8000290:	f7ff ffb8 	bl	8000204 <delay>

	GPIOA->ODR |= 0x40;
 8000294:	4b1c      	ldr	r3, [pc, #112]	; (8000308 <main+0xcc>)
 8000296:	695b      	ldr	r3, [r3, #20]
 8000298:	4a1b      	ldr	r2, [pc, #108]	; (8000308 <main+0xcc>)
 800029a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800029e:	6153      	str	r3, [r2, #20]
    delay(100);
 80002a0:	2064      	movs	r0, #100	; 0x64
 80002a2:	f7ff ffaf 	bl	8000204 <delay>
	GPIOA->ODR &= ~(0x40);
 80002a6:	4b18      	ldr	r3, [pc, #96]	; (8000308 <main+0xcc>)
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	4a17      	ldr	r2, [pc, #92]	; (8000308 <main+0xcc>)
 80002ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002b0:	6153      	str	r3, [r2, #20]
	delay(100);
 80002b2:	2064      	movs	r0, #100	; 0x64
 80002b4:	f7ff ffa6 	bl	8000204 <delay>

	GPIOB->ODR |= 0x400;
 80002b8:	4b14      	ldr	r3, [pc, #80]	; (800030c <main+0xd0>)
 80002ba:	695b      	ldr	r3, [r3, #20]
 80002bc:	4a13      	ldr	r2, [pc, #76]	; (800030c <main+0xd0>)
 80002be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002c2:	6153      	str	r3, [r2, #20]
    delay(100);
 80002c4:	2064      	movs	r0, #100	; 0x64
 80002c6:	f7ff ff9d 	bl	8000204 <delay>
	GPIOB->ODR &= ~(0x400);
 80002ca:	4b10      	ldr	r3, [pc, #64]	; (800030c <main+0xd0>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	4a0f      	ldr	r2, [pc, #60]	; (800030c <main+0xd0>)
 80002d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80002d4:	6153      	str	r3, [r2, #20]
	delay(100);
 80002d6:	2064      	movs	r0, #100	; 0x64
 80002d8:	f7ff ff94 	bl	8000204 <delay>

	GPIOC->ODR |= 0x40;
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <main+0xd4>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a0b      	ldr	r2, [pc, #44]	; (8000310 <main+0xd4>)
 80002e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002e6:	6153      	str	r3, [r2, #20]
    delay(100);
 80002e8:	2064      	movs	r0, #100	; 0x64
 80002ea:	f7ff ff8b 	bl	8000204 <delay>
	GPIOC->ODR &= ~(0x40);
 80002ee:	4b08      	ldr	r3, [pc, #32]	; (8000310 <main+0xd4>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a07      	ldr	r2, [pc, #28]	; (8000310 <main+0xd4>)
 80002f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002f8:	6153      	str	r3, [r2, #20]
	delay(100);
 80002fa:	2064      	movs	r0, #100	; 0x64
 80002fc:	f7ff ff82 	bl	8000204 <delay>
	GPIOA->ODR |= 0x20;
 8000300:	e7b6      	b.n	8000270 <main+0x34>
 8000302:	bf00      	nop
 8000304:	40023800 	.word	0x40023800
 8000308:	40020000 	.word	0x40020000
 800030c:	40020400 	.word	0x40020400
 8000310:	40020800 	.word	0x40020800

08000314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000318:	e7fe      	b.n	8000318 <NMI_Handler+0x4>

0800031a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800031a:	b480      	push	{r7}
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800031e:	e7fe      	b.n	800031e <HardFault_Handler+0x4>

08000320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000324:	e7fe      	b.n	8000324 <MemManage_Handler+0x4>

08000326 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000326:	b480      	push	{r7}
 8000328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800032a:	e7fe      	b.n	800032a <BusFault_Handler+0x4>

0800032c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000330:	e7fe      	b.n	8000330 <UsageFault_Handler+0x4>

08000332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000336:	bf00      	nop
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr

08000340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr

0800034e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr

0800035c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000360:	f000 f83e 	bl	80003e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}

08000368 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <SystemInit+0x20>)
 800036e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000372:	4a05      	ldr	r2, [pc, #20]	; (8000388 <SystemInit+0x20>)
 8000374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	e000ed00 	.word	0xe000ed00

0800038c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800038c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000390:	480d      	ldr	r0, [pc, #52]	; (80003c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000392:	490e      	ldr	r1, [pc, #56]	; (80003cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000394:	4a0e      	ldr	r2, [pc, #56]	; (80003d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000398:	e002      	b.n	80003a0 <LoopCopyDataInit>

0800039a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800039c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039e:	3304      	adds	r3, #4

080003a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a4:	d3f9      	bcc.n	800039a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a6:	4a0b      	ldr	r2, [pc, #44]	; (80003d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003a8:	4c0b      	ldr	r4, [pc, #44]	; (80003d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ac:	e001      	b.n	80003b2 <LoopFillZerobss>

080003ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b0:	3204      	adds	r2, #4

080003b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b4:	d3fb      	bcc.n	80003ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003b6:	f7ff ffd7 	bl	8000368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ba:	f000 f825 	bl	8000408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003be:	f7ff ff3d 	bl	800023c <main>
  bx  lr    
 80003c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003cc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003d0:	08000470 	.word	0x08000470
  ldr r2, =_sbss
 80003d4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003d8:	20000024 	.word	0x20000024

080003dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003dc:	e7fe      	b.n	80003dc <ADC_IRQHandler>
	...

080003e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <HAL_IncTick+0x20>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	461a      	mov	r2, r3
 80003ea:	4b06      	ldr	r3, [pc, #24]	; (8000404 <HAL_IncTick+0x24>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4413      	add	r3, r2
 80003f0:	4a04      	ldr	r2, [pc, #16]	; (8000404 <HAL_IncTick+0x24>)
 80003f2:	6013      	str	r3, [r2, #0]
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	20000000 	.word	0x20000000
 8000404:	20000020 	.word	0x20000020

08000408 <__libc_init_array>:
 8000408:	b570      	push	{r4, r5, r6, lr}
 800040a:	4d0d      	ldr	r5, [pc, #52]	; (8000440 <__libc_init_array+0x38>)
 800040c:	4c0d      	ldr	r4, [pc, #52]	; (8000444 <__libc_init_array+0x3c>)
 800040e:	1b64      	subs	r4, r4, r5
 8000410:	10a4      	asrs	r4, r4, #2
 8000412:	2600      	movs	r6, #0
 8000414:	42a6      	cmp	r6, r4
 8000416:	d109      	bne.n	800042c <__libc_init_array+0x24>
 8000418:	4d0b      	ldr	r5, [pc, #44]	; (8000448 <__libc_init_array+0x40>)
 800041a:	4c0c      	ldr	r4, [pc, #48]	; (800044c <__libc_init_array+0x44>)
 800041c:	f000 f818 	bl	8000450 <_init>
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	10a4      	asrs	r4, r4, #2
 8000424:	2600      	movs	r6, #0
 8000426:	42a6      	cmp	r6, r4
 8000428:	d105      	bne.n	8000436 <__libc_init_array+0x2e>
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000430:	4798      	blx	r3
 8000432:	3601      	adds	r6, #1
 8000434:	e7ee      	b.n	8000414 <__libc_init_array+0xc>
 8000436:	f855 3b04 	ldr.w	r3, [r5], #4
 800043a:	4798      	blx	r3
 800043c:	3601      	adds	r6, #1
 800043e:	e7f2      	b.n	8000426 <__libc_init_array+0x1e>
 8000440:	08000468 	.word	0x08000468
 8000444:	08000468 	.word	0x08000468
 8000448:	08000468 	.word	0x08000468
 800044c:	0800046c 	.word	0x0800046c

08000450 <_init>:
 8000450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000452:	bf00      	nop
 8000454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000456:	bc08      	pop	{r3}
 8000458:	469e      	mov	lr, r3
 800045a:	4770      	bx	lr

0800045c <_fini>:
 800045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045e:	bf00      	nop
 8000460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000462:	bc08      	pop	{r3}
 8000464:	469e      	mov	lr, r3
 8000466:	4770      	bx	lr
