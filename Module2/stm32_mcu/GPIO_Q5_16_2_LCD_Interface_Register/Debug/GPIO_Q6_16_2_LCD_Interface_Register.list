
GPIO_Q6_16_2_LCD_Interface_Register.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000750  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000914  08000914  00010914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800092c  0800092c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800092c  0800092c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800092c  0800092c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800092c  0800092c  0001092c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000930  08000930  00010930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000940  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000940  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000269f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000971  00000000  00000000  000226db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000328  00000000  00000000  00023050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002c0  00000000  00000000  00023378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f72f  00000000  00000000  00023638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003162  00000000  00000000  00042d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c12a0  00000000  00000000  00045ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107169  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000acc  00000000  00000000  001071bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080008fc 	.word	0x080008fc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080008fc 	.word	0x080008fc

08000204 <delay_ms>:

/* Private functions ---------------------------------------------------------*/


void delay_ms(uint32_t ms)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800020c:	6878      	ldr	r0, [r7, #4]
 800020e:	f000 fa47 	bl	80006a0 <HAL_Delay>
}
 8000212:	bf00      	nop
 8000214:	3708      	adds	r7, #8
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <print>:

void print(uint8_t dat)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
  GPIOA->ODR &= ~(GPIO_PIN_10 | GPIO_PIN_8 | GPIO_PIN_9);
 8000226:	4b37      	ldr	r3, [pc, #220]	; (8000304 <print+0xe8>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a36      	ldr	r2, [pc, #216]	; (8000304 <print+0xe8>)
 800022c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000230:	6153      	str	r3, [r2, #20]
  GPIOB->ODR &= ~(GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_4 | GPIO_PIN_10);
 8000232:	4b35      	ldr	r3, [pc, #212]	; (8000308 <print+0xec>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	4a34      	ldr	r2, [pc, #208]	; (8000308 <print+0xec>)
 8000238:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 800023c:	6153      	str	r3, [r2, #20]
  GPIOC->ODR &= ~(GPIO_PIN_7);
 800023e:	4b33      	ldr	r3, [pc, #204]	; (800030c <print+0xf0>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	4a32      	ldr	r2, [pc, #200]	; (800030c <print+0xf0>)
 8000244:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000248:	6153      	str	r3, [r2, #20]

  if (dat & 0x01)
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	f003 0301 	and.w	r3, r3, #1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d005      	beq.n	8000260 <print+0x44>
  {
    GPIOA->ODR |= GPIO_PIN_10;
 8000254:	4b2b      	ldr	r3, [pc, #172]	; (8000304 <print+0xe8>)
 8000256:	695b      	ldr	r3, [r3, #20]
 8000258:	4a2a      	ldr	r2, [pc, #168]	; (8000304 <print+0xe8>)
 800025a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800025e:	6153      	str	r3, [r2, #20]
  }
  if (dat & 0x02)
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	f003 0302 	and.w	r3, r3, #2
 8000266:	2b00      	cmp	r3, #0
 8000268:	d005      	beq.n	8000276 <print+0x5a>
  {
    GPIOB->ODR |= GPIO_PIN_3;
 800026a:	4b27      	ldr	r3, [pc, #156]	; (8000308 <print+0xec>)
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	4a26      	ldr	r2, [pc, #152]	; (8000308 <print+0xec>)
 8000270:	f043 0308 	orr.w	r3, r3, #8
 8000274:	6153      	str	r3, [r2, #20]
  }
  if (dat & 0x04)
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	f003 0304 	and.w	r3, r3, #4
 800027c:	2b00      	cmp	r3, #0
 800027e:	d005      	beq.n	800028c <print+0x70>
  {
    GPIOB->ODR |= GPIO_PIN_5;
 8000280:	4b21      	ldr	r3, [pc, #132]	; (8000308 <print+0xec>)
 8000282:	695b      	ldr	r3, [r3, #20]
 8000284:	4a20      	ldr	r2, [pc, #128]	; (8000308 <print+0xec>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6153      	str	r3, [r2, #20]
  }
  if (dat & 0x08)
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	f003 0308 	and.w	r3, r3, #8
 8000292:	2b00      	cmp	r3, #0
 8000294:	d005      	beq.n	80002a2 <print+0x86>
  {
    GPIOB->ODR |= GPIO_PIN_4;
 8000296:	4b1c      	ldr	r3, [pc, #112]	; (8000308 <print+0xec>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	4a1b      	ldr	r2, [pc, #108]	; (8000308 <print+0xec>)
 800029c:	f043 0310 	orr.w	r3, r3, #16
 80002a0:	6153      	str	r3, [r2, #20]
  }
  if (dat & 0x10)
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 0310 	and.w	r3, r3, #16
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d005      	beq.n	80002b8 <print+0x9c>
  {
    GPIOB->ODR |= GPIO_PIN_10;
 80002ac:	4b16      	ldr	r3, [pc, #88]	; (8000308 <print+0xec>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a15      	ldr	r2, [pc, #84]	; (8000308 <print+0xec>)
 80002b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002b6:	6153      	str	r3, [r2, #20]
  }
  if (dat & 0x20)
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	f003 0320 	and.w	r3, r3, #32
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d005      	beq.n	80002ce <print+0xb2>
  {
    GPIOA->ODR |= GPIO_PIN_8;
 80002c2:	4b10      	ldr	r3, [pc, #64]	; (8000304 <print+0xe8>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	4a0f      	ldr	r2, [pc, #60]	; (8000304 <print+0xe8>)
 80002c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002cc:	6153      	str	r3, [r2, #20]
  }
  if (dat & 0x40)
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d005      	beq.n	80002e4 <print+0xc8>
  {
    GPIOA->ODR |= GPIO_PIN_9;
 80002d8:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <print+0xe8>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	4a09      	ldr	r2, [pc, #36]	; (8000304 <print+0xe8>)
 80002de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002e2:	6153      	str	r3, [r2, #20]
  }
  if (dat & 0x80)
 80002e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	da05      	bge.n	80002f8 <print+0xdc>
  {
    GPIOC->ODR |= GPIO_PIN_7;
 80002ec:	4b07      	ldr	r3, [pc, #28]	; (800030c <print+0xf0>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	4a06      	ldr	r2, [pc, #24]	; (800030c <print+0xf0>)
 80002f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002f6:	6153      	str	r3, [r2, #20]
  }
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	40020000 	.word	0x40020000
 8000308:	40020400 	.word	0x40020400
 800030c:	40020800 	.word	0x40020800

08000310 <lcd_cmd>:

void lcd_cmd(uint8_t cmd)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
  print(cmd);
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ff7d 	bl	800021c <print>
  GPIOB->ODR &= ~GPIO_PIN_5; // RS = 0 for command
 8000322:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <lcd_cmd+0x50>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <lcd_cmd+0x50>)
 8000328:	f023 0320 	bic.w	r3, r3, #32
 800032c:	6153      	str	r3, [r2, #20]
  GPIOA->ODR &= ~GPIO_PIN_6; // RW = 0 for write
 800032e:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <lcd_cmd+0x54>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	4a0c      	ldr	r2, [pc, #48]	; (8000364 <lcd_cmd+0x54>)
 8000334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000338:	6153      	str	r3, [r2, #20]
  GPIOA->ODR |= GPIO_PIN_7; // EN = 1
 800033a:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <lcd_cmd+0x54>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	4a09      	ldr	r2, [pc, #36]	; (8000364 <lcd_cmd+0x54>)
 8000340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000344:	6153      	str	r3, [r2, #20]
  delay_ms(1);
 8000346:	2001      	movs	r0, #1
 8000348:	f7ff ff5c 	bl	8000204 <delay_ms>
  GPIOA->ODR &= ~GPIO_PIN_7; // EN = 0
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <lcd_cmd+0x54>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	4a04      	ldr	r2, [pc, #16]	; (8000364 <lcd_cmd+0x54>)
 8000352:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000356:	6153      	str	r3, [r2, #20]
  }
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	40020400 	.word	0x40020400
 8000364:	40020000 	.word	0x40020000

08000368 <lcd_data>:

  void lcd_data(uint8_t mydat)
  {
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
  print(mydat);
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff ff51 	bl	800021c <print>
  GPIOB->ODR |= GPIO_PIN_5; // RS = 1 for data
 800037a:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <lcd_data+0x50>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	4a0e      	ldr	r2, [pc, #56]	; (80003b8 <lcd_data+0x50>)
 8000380:	f043 0320 	orr.w	r3, r3, #32
 8000384:	6153      	str	r3, [r2, #20]
  GPIOA->ODR &= ~GPIO_PIN_6; // RW = 0 for write
 8000386:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <lcd_data+0x54>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a0c      	ldr	r2, [pc, #48]	; (80003bc <lcd_data+0x54>)
 800038c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000390:	6153      	str	r3, [r2, #20]
  GPIOA->ODR |= GPIO_PIN_7; // EN = 1
 8000392:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <lcd_data+0x54>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a09      	ldr	r2, [pc, #36]	; (80003bc <lcd_data+0x54>)
 8000398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800039c:	6153      	str	r3, [r2, #20]
  delay_ms(1);
 800039e:	2001      	movs	r0, #1
 80003a0:	f7ff ff30 	bl	8000204 <delay_ms>
  GPIOA->ODR &= ~GPIO_PIN_7; // EN = 0
 80003a4:	4b05      	ldr	r3, [pc, #20]	; (80003bc <lcd_data+0x54>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	4a04      	ldr	r2, [pc, #16]	; (80003bc <lcd_data+0x54>)
 80003aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003ae:	6153      	str	r3, [r2, #20]
  }
 80003b0:	bf00      	nop
 80003b2:	3708      	adds	r7, #8
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40020400 	.word	0x40020400
 80003bc:	40020000 	.word	0x40020000

080003c0 <lcd_init>:

  void lcd_init(void)
  {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  delay_ms(20); // Wait for power-up
 80003c4:	2014      	movs	r0, #20
 80003c6:	f7ff ff1d 	bl	8000204 <delay_ms>
  lcd_cmd(0x38); // 8-bit mode, 2 lines, 5x7 font
 80003ca:	2038      	movs	r0, #56	; 0x38
 80003cc:	f7ff ffa0 	bl	8000310 <lcd_cmd>
  lcd_cmd(0x0C); // Display on, cursor off, blink off
 80003d0:	200c      	movs	r0, #12
 80003d2:	f7ff ff9d 	bl	8000310 <lcd_cmd>
  lcd_cmd(0x01); // Clear display
 80003d6:	2001      	movs	r0, #1
 80003d8:	f7ff ff9a 	bl	8000310 <lcd_cmd>
  delay_ms(2);
 80003dc:	2002      	movs	r0, #2
 80003de:	f7ff ff11 	bl	8000204 <delay_ms>
  lcd_cmd(0x06); // Entry mode: increment, no shift
 80003e2:	2006      	movs	r0, #6
 80003e4:	f7ff ff94 	bl	8000310 <lcd_cmd>
  }
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}

080003ec <lcd_display>:

  void lcd_display(uint8_t *str, uint16_t length)
  {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	460b      	mov	r3, r1
 80003f6:	807b      	strh	r3, [r7, #2]
  for (uint16_t i = 0; i < length; i++)
 80003f8:	2300      	movs	r3, #0
 80003fa:	81fb      	strh	r3, [r7, #14]
 80003fc:	e009      	b.n	8000412 <lcd_display+0x26>
  {
  lcd_data(str[i]);
 80003fe:	89fb      	ldrh	r3, [r7, #14]
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	4413      	add	r3, r2
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ffae 	bl	8000368 <lcd_data>
  for (uint16_t i = 0; i < length; i++)
 800040c:	89fb      	ldrh	r3, [r7, #14]
 800040e:	3301      	adds	r3, #1
 8000410:	81fb      	strh	r3, [r7, #14]
 8000412:	89fa      	ldrh	r2, [r7, #14]
 8000414:	887b      	ldrh	r3, [r7, #2]
 8000416:	429a      	cmp	r2, r3
 8000418:	d3f1      	bcc.n	80003fe <lcd_display+0x12>
  }
  }
 800041a:	bf00      	nop
 800041c:	bf00      	nop
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}

08000424 <main>:

  int main(void)
  {
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
  HAL_Init();
 800042a:	f000 f8c7 	bl	80005bc <HAL_Init>
  //SystemClock_Config();

  // Enable GPIOA, GPIOB, GPIOC clocks
  RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN);
 800042e:	4b16      	ldr	r3, [pc, #88]	; (8000488 <main+0x64>)
 8000430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000432:	4a15      	ldr	r2, [pc, #84]	; (8000488 <main+0x64>)
 8000434:	f043 0307 	orr.w	r3, r3, #7
 8000438:	6313      	str	r3, [r2, #48]	; 0x30

  // Configure PA6, PA7, PB3, PB4, PB5, PB10 as output
  GPIOA->MODER |= (GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0 | GPIO_MODER_MODER10_0 | GPIO_MODER_MODER8_0 | GPIO_MODER_MODER9_0);
 800043a:	4b14      	ldr	r3, [pc, #80]	; (800048c <main+0x68>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a13      	ldr	r2, [pc, #76]	; (800048c <main+0x68>)
 8000440:	f443 13aa 	orr.w	r3, r3, #1392640	; 0x154000
 8000444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000448:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= (GPIO_MODER_MODER3_0 | GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0 | GPIO_MODER_MODER10_0 | GPIO_MODER_MODER6_0);
 800044a:	4b11      	ldr	r3, [pc, #68]	; (8000490 <main+0x6c>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a10      	ldr	r2, [pc, #64]	; (8000490 <main+0x6c>)
 8000450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000454:	f443 53aa 	orr.w	r3, r3, #5440	; 0x1540
 8000458:	6013      	str	r3, [r2, #0]
  GPIOC->MODER |= GPIO_MODER_MODER7_0;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <main+0x70>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a0d      	ldr	r2, [pc, #52]	; (8000494 <main+0x70>)
 8000460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000464:	6013      	str	r3, [r2, #0]

  // Initialize LCD
  lcd_init();
 8000466:	f7ff ffab 	bl	80003c0 <lcd_init>

  // Display "Hello, World!" on LCD
  uint8_t str[] = "Hello, World!";
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <main+0x74>)
 800046c:	463c      	mov	r4, r7
 800046e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000470:	c407      	stmia	r4!, {r0, r1, r2}
 8000472:	8023      	strh	r3, [r4, #0]
  uint16_t length = sizeof(str) - 1; // Excluding null terminator
 8000474:	230d      	movs	r3, #13
 8000476:	81fb      	strh	r3, [r7, #14]
//  lcd_display(str, length);

  while (1)
  {
	      lcd_cmd(0x80);
 8000478:	2080      	movs	r0, #128	; 0x80
 800047a:	f7ff ff49 	bl	8000310 <lcd_cmd>
	  	  lcd_display("Hello",12);
 800047e:	210c      	movs	r1, #12
 8000480:	4806      	ldr	r0, [pc, #24]	; (800049c <main+0x78>)
 8000482:	f7ff ffb3 	bl	80003ec <lcd_display>
	      lcd_cmd(0x80);
 8000486:	e7f7      	b.n	8000478 <main+0x54>
 8000488:	40023800 	.word	0x40023800
 800048c:	40020000 	.word	0x40020000
 8000490:	40020400 	.word	0x40020400
 8000494:	40020800 	.word	0x40020800
 8000498:	0800091c 	.word	0x0800091c
 800049c:	08000914 	.word	0x08000914

080004a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a6:	2300      	movs	r3, #0
 80004a8:	607b      	str	r3, [r7, #4]
 80004aa:	4b10      	ldr	r3, [pc, #64]	; (80004ec <HAL_MspInit+0x4c>)
 80004ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004ae:	4a0f      	ldr	r2, [pc, #60]	; (80004ec <HAL_MspInit+0x4c>)
 80004b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004b4:	6453      	str	r3, [r2, #68]	; 0x44
 80004b6:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <HAL_MspInit+0x4c>)
 80004b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c2:	2300      	movs	r3, #0
 80004c4:	603b      	str	r3, [r7, #0]
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <HAL_MspInit+0x4c>)
 80004c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004ca:	4a08      	ldr	r2, [pc, #32]	; (80004ec <HAL_MspInit+0x4c>)
 80004cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d0:	6413      	str	r3, [r2, #64]	; 0x40
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <HAL_MspInit+0x4c>)
 80004d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004de:	2007      	movs	r0, #7
 80004e0:	f000 f9b4 	bl	800084c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40023800 	.word	0x40023800

080004f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <NMI_Handler+0x4>

080004f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004fa:	e7fe      	b.n	80004fa <HardFault_Handler+0x4>

080004fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <MemManage_Handler+0x4>

08000502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000506:	e7fe      	b.n	8000506 <BusFault_Handler+0x4>

08000508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800050c:	e7fe      	b.n	800050c <UsageFault_Handler+0x4>

0800050e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800053c:	f000 f890 	bl	8000660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <SystemInit+0x20>)
 800054a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800054e:	4a05      	ldr	r2, [pc, #20]	; (8000564 <SystemInit+0x20>)
 8000550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	e000ed00 	.word	0xe000ed00

08000568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800056c:	480d      	ldr	r0, [pc, #52]	; (80005a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800056e:	490e      	ldr	r1, [pc, #56]	; (80005a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000570:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000574:	e002      	b.n	800057c <LoopCopyDataInit>

08000576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057a:	3304      	adds	r3, #4

0800057c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800057c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000580:	d3f9      	bcc.n	8000576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000582:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000584:	4c0b      	ldr	r4, [pc, #44]	; (80005b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000588:	e001      	b.n	800058e <LoopFillZerobss>

0800058a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800058c:	3204      	adds	r2, #4

0800058e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000590:	d3fb      	bcc.n	800058a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000592:	f7ff ffd7 	bl	8000544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000596:	f000 f98d 	bl	80008b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800059a:	f7ff ff43 	bl	8000424 <main>
  bx  lr    
 800059e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005ac:	08000934 	.word	0x08000934
  ldr r2, =_sbss
 80005b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005b4:	2000002c 	.word	0x2000002c

080005b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005b8:	e7fe      	b.n	80005b8 <ADC_IRQHandler>
	...

080005bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <HAL_Init+0x40>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0d      	ldr	r2, [pc, #52]	; (80005fc <HAL_Init+0x40>)
 80005c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <HAL_Init+0x40>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <HAL_Init+0x40>)
 80005d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <HAL_Init+0x40>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <HAL_Init+0x40>)
 80005de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 f931 	bl	800084c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 f808 	bl	8000600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f0:	f7ff ff56 	bl	80004a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f4:	2300      	movs	r3, #0
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40023c00 	.word	0x40023c00

08000600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_InitTick+0x54>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_InitTick+0x58>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4619      	mov	r1, r3
 8000612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000616:	fbb3 f3f1 	udiv	r3, r3, r1
 800061a:	fbb2 f3f3 	udiv	r3, r2, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f000 f93b 	bl	800089a <HAL_SYSTICK_Config>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e00e      	b.n	800064c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b0f      	cmp	r3, #15
 8000632:	d80a      	bhi.n	800064a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000634:	2200      	movs	r2, #0
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800063c:	f000 f911 	bl	8000862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000640:	4a06      	ldr	r2, [pc, #24]	; (800065c <HAL_InitTick+0x5c>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000646:	2300      	movs	r3, #0
 8000648:	e000      	b.n	800064c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064a:	2301      	movs	r3, #1
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000000 	.word	0x20000000
 8000658:	20000008 	.word	0x20000008
 800065c:	20000004 	.word	0x20000004

08000660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_IncTick+0x20>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_IncTick+0x24>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4413      	add	r3, r2
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <HAL_IncTick+0x24>)
 8000672:	6013      	str	r3, [r2, #0]
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000008 	.word	0x20000008
 8000684:	20000028 	.word	0x20000028

08000688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return uwTick;
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <HAL_GetTick+0x14>)
 800068e:	681b      	ldr	r3, [r3, #0]
}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000028 	.word	0x20000028

080006a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006a8:	f7ff ffee 	bl	8000688 <HAL_GetTick>
 80006ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006b8:	d005      	beq.n	80006c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <HAL_Delay+0x44>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	461a      	mov	r2, r3
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	4413      	add	r3, r2
 80006c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006c6:	bf00      	nop
 80006c8:	f7ff ffde 	bl	8000688 <HAL_GetTick>
 80006cc:	4602      	mov	r2, r0
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d8f7      	bhi.n	80006c8 <HAL_Delay+0x28>
  {
  }
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000008 	.word	0x20000008

080006e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <__NVIC_SetPriorityGrouping+0x44>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800071a:	4a04      	ldr	r2, [pc, #16]	; (800072c <__NVIC_SetPriorityGrouping+0x44>)
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	60d3      	str	r3, [r2, #12]
}
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <__NVIC_GetPriorityGrouping+0x18>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	f003 0307 	and.w	r3, r3, #7
}
 800073e:	4618      	mov	r0, r3
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	db0a      	blt.n	8000776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	490c      	ldr	r1, [pc, #48]	; (8000798 <__NVIC_SetPriority+0x4c>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	0112      	lsls	r2, r2, #4
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	440b      	add	r3, r1
 8000770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000774:	e00a      	b.n	800078c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4908      	ldr	r1, [pc, #32]	; (800079c <__NVIC_SetPriority+0x50>)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	3b04      	subs	r3, #4
 8000784:	0112      	lsls	r2, r2, #4
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	440b      	add	r3, r1
 800078a:	761a      	strb	r2, [r3, #24]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000e100 	.word	0xe000e100
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f1c3 0307 	rsb	r3, r3, #7
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	bf28      	it	cs
 80007be:	2304      	movcs	r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3304      	adds	r3, #4
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d902      	bls.n	80007d0 <NVIC_EncodePriority+0x30>
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3b03      	subs	r3, #3
 80007ce:	e000      	b.n	80007d2 <NVIC_EncodePriority+0x32>
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43da      	mvns	r2, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	401a      	ands	r2, r3
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	43d9      	mvns	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	4313      	orrs	r3, r2
         );
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3724      	adds	r7, #36	; 0x24
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000818:	d301      	bcc.n	800081e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081a:	2301      	movs	r3, #1
 800081c:	e00f      	b.n	800083e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <SysTick_Config+0x40>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000826:	210f      	movs	r1, #15
 8000828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800082c:	f7ff ff8e 	bl	800074c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <SysTick_Config+0x40>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <SysTick_Config+0x40>)
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	e000e010 	.word	0xe000e010

0800084c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff47 	bl	80006e8 <__NVIC_SetPriorityGrouping>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000874:	f7ff ff5c 	bl	8000730 <__NVIC_GetPriorityGrouping>
 8000878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ff8e 	bl	80007a0 <NVIC_EncodePriority>
 8000884:	4602      	mov	r2, r0
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5d 	bl	800074c <__NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff ffb0 	bl	8000808 <SysTick_Config>
 80008a8:	4603      	mov	r3, r0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <__libc_init_array>:
 80008b4:	b570      	push	{r4, r5, r6, lr}
 80008b6:	4d0d      	ldr	r5, [pc, #52]	; (80008ec <__libc_init_array+0x38>)
 80008b8:	4c0d      	ldr	r4, [pc, #52]	; (80008f0 <__libc_init_array+0x3c>)
 80008ba:	1b64      	subs	r4, r4, r5
 80008bc:	10a4      	asrs	r4, r4, #2
 80008be:	2600      	movs	r6, #0
 80008c0:	42a6      	cmp	r6, r4
 80008c2:	d109      	bne.n	80008d8 <__libc_init_array+0x24>
 80008c4:	4d0b      	ldr	r5, [pc, #44]	; (80008f4 <__libc_init_array+0x40>)
 80008c6:	4c0c      	ldr	r4, [pc, #48]	; (80008f8 <__libc_init_array+0x44>)
 80008c8:	f000 f818 	bl	80008fc <_init>
 80008cc:	1b64      	subs	r4, r4, r5
 80008ce:	10a4      	asrs	r4, r4, #2
 80008d0:	2600      	movs	r6, #0
 80008d2:	42a6      	cmp	r6, r4
 80008d4:	d105      	bne.n	80008e2 <__libc_init_array+0x2e>
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80008dc:	4798      	blx	r3
 80008de:	3601      	adds	r6, #1
 80008e0:	e7ee      	b.n	80008c0 <__libc_init_array+0xc>
 80008e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80008e6:	4798      	blx	r3
 80008e8:	3601      	adds	r6, #1
 80008ea:	e7f2      	b.n	80008d2 <__libc_init_array+0x1e>
 80008ec:	0800092c 	.word	0x0800092c
 80008f0:	0800092c 	.word	0x0800092c
 80008f4:	0800092c 	.word	0x0800092c
 80008f8:	08000930 	.word	0x08000930

080008fc <_init>:
 80008fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008fe:	bf00      	nop
 8000900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000902:	bc08      	pop	{r3}
 8000904:	469e      	mov	lr, r3
 8000906:	4770      	bx	lr

08000908 <_fini>:
 8000908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800090a:	bf00      	nop
 800090c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800090e:	bc08      	pop	{r3}
 8000910:	469e      	mov	lr, r3
 8000912:	4770      	bx	lr
