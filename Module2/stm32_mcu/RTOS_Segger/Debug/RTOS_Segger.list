
RTOS_Segger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006afc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08006ccc  08006ccc  00016ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ed0  08006ed0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006ed0  08006ed0  00016ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ed8  08006ed8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ed8  08006ed8  00016ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006edc  08006edc  00016edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014420  20000078  08006f58  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014498  08006f58  00024498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d55  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d4f  00000000  00000000  00033dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  00036b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  00037de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024efc  00000000  00000000  00038ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000150d4  00000000  00000000  0005ddd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd597  00000000  00000000  00072ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015043f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005634  00000000  00000000  00150490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006cb4 	.word	0x08006cb4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08006cb4 	.word	0x08006cb4

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012eb4 	.word	0x20012eb4
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000364:	f000 b974 	b.w	8000650 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	4604      	mov	r4, r0
 8000388:	468e      	mov	lr, r1
 800038a:	2b00      	cmp	r3, #0
 800038c:	d14d      	bne.n	800042a <__udivmoddi4+0xaa>
 800038e:	428a      	cmp	r2, r1
 8000390:	4694      	mov	ip, r2
 8000392:	d969      	bls.n	8000468 <__udivmoddi4+0xe8>
 8000394:	fab2 f282 	clz	r2, r2
 8000398:	b152      	cbz	r2, 80003b0 <__udivmoddi4+0x30>
 800039a:	fa01 f302 	lsl.w	r3, r1, r2
 800039e:	f1c2 0120 	rsb	r1, r2, #32
 80003a2:	fa20 f101 	lsr.w	r1, r0, r1
 80003a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003aa:	ea41 0e03 	orr.w	lr, r1, r3
 80003ae:	4094      	lsls	r4, r2
 80003b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003b4:	0c21      	lsrs	r1, r4, #16
 80003b6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ba:	fa1f f78c 	uxth.w	r7, ip
 80003be:	fb08 e316 	mls	r3, r8, r6, lr
 80003c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003c6:	fb06 f107 	mul.w	r1, r6, r7
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003d6:	f080 811f 	bcs.w	8000618 <__udivmoddi4+0x298>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 811c 	bls.w	8000618 <__udivmoddi4+0x298>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f4:	fb00 f707 	mul.w	r7, r0, r7
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x92>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	f080 810a 	bcs.w	800061c <__udivmoddi4+0x29c>
 8000408:	42a7      	cmp	r7, r4
 800040a:	f240 8107 	bls.w	800061c <__udivmoddi4+0x29c>
 800040e:	4464      	add	r4, ip
 8000410:	3802      	subs	r0, #2
 8000412:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000416:	1be4      	subs	r4, r4, r7
 8000418:	2600      	movs	r6, #0
 800041a:	b11d      	cbz	r5, 8000424 <__udivmoddi4+0xa4>
 800041c:	40d4      	lsrs	r4, r2
 800041e:	2300      	movs	r3, #0
 8000420:	e9c5 4300 	strd	r4, r3, [r5]
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0xc2>
 800042e:	2d00      	cmp	r5, #0
 8000430:	f000 80ef 	beq.w	8000612 <__udivmoddi4+0x292>
 8000434:	2600      	movs	r6, #0
 8000436:	e9c5 0100 	strd	r0, r1, [r5]
 800043a:	4630      	mov	r0, r6
 800043c:	4631      	mov	r1, r6
 800043e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000442:	fab3 f683 	clz	r6, r3
 8000446:	2e00      	cmp	r6, #0
 8000448:	d14a      	bne.n	80004e0 <__udivmoddi4+0x160>
 800044a:	428b      	cmp	r3, r1
 800044c:	d302      	bcc.n	8000454 <__udivmoddi4+0xd4>
 800044e:	4282      	cmp	r2, r0
 8000450:	f200 80f9 	bhi.w	8000646 <__udivmoddi4+0x2c6>
 8000454:	1a84      	subs	r4, r0, r2
 8000456:	eb61 0303 	sbc.w	r3, r1, r3
 800045a:	2001      	movs	r0, #1
 800045c:	469e      	mov	lr, r3
 800045e:	2d00      	cmp	r5, #0
 8000460:	d0e0      	beq.n	8000424 <__udivmoddi4+0xa4>
 8000462:	e9c5 4e00 	strd	r4, lr, [r5]
 8000466:	e7dd      	b.n	8000424 <__udivmoddi4+0xa4>
 8000468:	b902      	cbnz	r2, 800046c <__udivmoddi4+0xec>
 800046a:	deff      	udf	#255	; 0xff
 800046c:	fab2 f282 	clz	r2, r2
 8000470:	2a00      	cmp	r2, #0
 8000472:	f040 8092 	bne.w	800059a <__udivmoddi4+0x21a>
 8000476:	eba1 010c 	sub.w	r1, r1, ip
 800047a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047e:	fa1f fe8c 	uxth.w	lr, ip
 8000482:	2601      	movs	r6, #1
 8000484:	0c20      	lsrs	r0, r4, #16
 8000486:	fbb1 f3f7 	udiv	r3, r1, r7
 800048a:	fb07 1113 	mls	r1, r7, r3, r1
 800048e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000492:	fb0e f003 	mul.w	r0, lr, r3
 8000496:	4288      	cmp	r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x12c>
 800049a:	eb1c 0101 	adds.w	r1, ip, r1
 800049e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x12a>
 80004a4:	4288      	cmp	r0, r1
 80004a6:	f200 80cb 	bhi.w	8000640 <__udivmoddi4+0x2c0>
 80004aa:	4643      	mov	r3, r8
 80004ac:	1a09      	subs	r1, r1, r0
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b4:	fb07 1110 	mls	r1, r7, r0, r1
 80004b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004bc:	fb0e fe00 	mul.w	lr, lr, r0
 80004c0:	45a6      	cmp	lr, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x156>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004cc:	d202      	bcs.n	80004d4 <__udivmoddi4+0x154>
 80004ce:	45a6      	cmp	lr, r4
 80004d0:	f200 80bb 	bhi.w	800064a <__udivmoddi4+0x2ca>
 80004d4:	4608      	mov	r0, r1
 80004d6:	eba4 040e 	sub.w	r4, r4, lr
 80004da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x9a>
 80004e0:	f1c6 0720 	rsb	r7, r6, #32
 80004e4:	40b3      	lsls	r3, r6
 80004e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ee:	fa20 f407 	lsr.w	r4, r0, r7
 80004f2:	fa01 f306 	lsl.w	r3, r1, r6
 80004f6:	431c      	orrs	r4, r3
 80004f8:	40f9      	lsrs	r1, r7
 80004fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000502:	fbb1 f8f9 	udiv	r8, r1, r9
 8000506:	0c20      	lsrs	r0, r4, #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fb09 1118 	mls	r1, r9, r8, r1
 8000510:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000514:	fb08 f00e 	mul.w	r0, r8, lr
 8000518:	4288      	cmp	r0, r1
 800051a:	fa02 f206 	lsl.w	r2, r2, r6
 800051e:	d90b      	bls.n	8000538 <__udivmoddi4+0x1b8>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000528:	f080 8088 	bcs.w	800063c <__udivmoddi4+0x2bc>
 800052c:	4288      	cmp	r0, r1
 800052e:	f240 8085 	bls.w	800063c <__udivmoddi4+0x2bc>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	1a09      	subs	r1, r1, r0
 800053a:	b2a4      	uxth	r4, r4
 800053c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000540:	fb09 1110 	mls	r1, r9, r0, r1
 8000544:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000548:	fb00 fe0e 	mul.w	lr, r0, lr
 800054c:	458e      	cmp	lr, r1
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x1e2>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000558:	d26c      	bcs.n	8000634 <__udivmoddi4+0x2b4>
 800055a:	458e      	cmp	lr, r1
 800055c:	d96a      	bls.n	8000634 <__udivmoddi4+0x2b4>
 800055e:	3802      	subs	r0, #2
 8000560:	4461      	add	r1, ip
 8000562:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000566:	fba0 9402 	umull	r9, r4, r0, r2
 800056a:	eba1 010e 	sub.w	r1, r1, lr
 800056e:	42a1      	cmp	r1, r4
 8000570:	46c8      	mov	r8, r9
 8000572:	46a6      	mov	lr, r4
 8000574:	d356      	bcc.n	8000624 <__udivmoddi4+0x2a4>
 8000576:	d053      	beq.n	8000620 <__udivmoddi4+0x2a0>
 8000578:	b15d      	cbz	r5, 8000592 <__udivmoddi4+0x212>
 800057a:	ebb3 0208 	subs.w	r2, r3, r8
 800057e:	eb61 010e 	sbc.w	r1, r1, lr
 8000582:	fa01 f707 	lsl.w	r7, r1, r7
 8000586:	fa22 f306 	lsr.w	r3, r2, r6
 800058a:	40f1      	lsrs	r1, r6
 800058c:	431f      	orrs	r7, r3
 800058e:	e9c5 7100 	strd	r7, r1, [r5]
 8000592:	2600      	movs	r6, #0
 8000594:	4631      	mov	r1, r6
 8000596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	40d8      	lsrs	r0, r3
 80005a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005a4:	fa21 f303 	lsr.w	r3, r1, r3
 80005a8:	4091      	lsls	r1, r2
 80005aa:	4301      	orrs	r1, r0
 80005ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b0:	fa1f fe8c 	uxth.w	lr, ip
 80005b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005b8:	fb07 3610 	mls	r6, r7, r0, r3
 80005bc:	0c0b      	lsrs	r3, r1, #16
 80005be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005c2:	fb00 f60e 	mul.w	r6, r0, lr
 80005c6:	429e      	cmp	r6, r3
 80005c8:	fa04 f402 	lsl.w	r4, r4, r2
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x260>
 80005ce:	eb1c 0303 	adds.w	r3, ip, r3
 80005d2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005d6:	d22f      	bcs.n	8000638 <__udivmoddi4+0x2b8>
 80005d8:	429e      	cmp	r6, r3
 80005da:	d92d      	bls.n	8000638 <__udivmoddi4+0x2b8>
 80005dc:	3802      	subs	r0, #2
 80005de:	4463      	add	r3, ip
 80005e0:	1b9b      	subs	r3, r3, r6
 80005e2:	b289      	uxth	r1, r1
 80005e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005e8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f0:	fb06 f30e 	mul.w	r3, r6, lr
 80005f4:	428b      	cmp	r3, r1
 80005f6:	d908      	bls.n	800060a <__udivmoddi4+0x28a>
 80005f8:	eb1c 0101 	adds.w	r1, ip, r1
 80005fc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000600:	d216      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 8000602:	428b      	cmp	r3, r1
 8000604:	d914      	bls.n	8000630 <__udivmoddi4+0x2b0>
 8000606:	3e02      	subs	r6, #2
 8000608:	4461      	add	r1, ip
 800060a:	1ac9      	subs	r1, r1, r3
 800060c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000610:	e738      	b.n	8000484 <__udivmoddi4+0x104>
 8000612:	462e      	mov	r6, r5
 8000614:	4628      	mov	r0, r5
 8000616:	e705      	b.n	8000424 <__udivmoddi4+0xa4>
 8000618:	4606      	mov	r6, r0
 800061a:	e6e3      	b.n	80003e4 <__udivmoddi4+0x64>
 800061c:	4618      	mov	r0, r3
 800061e:	e6f8      	b.n	8000412 <__udivmoddi4+0x92>
 8000620:	454b      	cmp	r3, r9
 8000622:	d2a9      	bcs.n	8000578 <__udivmoddi4+0x1f8>
 8000624:	ebb9 0802 	subs.w	r8, r9, r2
 8000628:	eb64 0e0c 	sbc.w	lr, r4, ip
 800062c:	3801      	subs	r0, #1
 800062e:	e7a3      	b.n	8000578 <__udivmoddi4+0x1f8>
 8000630:	4646      	mov	r6, r8
 8000632:	e7ea      	b.n	800060a <__udivmoddi4+0x28a>
 8000634:	4620      	mov	r0, r4
 8000636:	e794      	b.n	8000562 <__udivmoddi4+0x1e2>
 8000638:	4640      	mov	r0, r8
 800063a:	e7d1      	b.n	80005e0 <__udivmoddi4+0x260>
 800063c:	46d0      	mov	r8, sl
 800063e:	e77b      	b.n	8000538 <__udivmoddi4+0x1b8>
 8000640:	3b02      	subs	r3, #2
 8000642:	4461      	add	r1, ip
 8000644:	e732      	b.n	80004ac <__udivmoddi4+0x12c>
 8000646:	4630      	mov	r0, r6
 8000648:	e709      	b.n	800045e <__udivmoddi4+0xde>
 800064a:	4464      	add	r4, ip
 800064c:	3802      	subs	r0, #2
 800064e:	e742      	b.n	80004d6 <__udivmoddi4+0x156>

08000650 <__aeabi_idiv0>:
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fb0f 	bl	8000c7c <HAL_Init>
  		BaseType_t status;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f855 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 f8c1 	bl	80007e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
//  Enable CYCCNT counter
  	  	  DWT_CTRL |= (1<<0);
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <main+0x98>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <main+0x98>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6013      	str	r3, [r2, #0]

  	  	  SEGGER_SYSVIEW_Conf();
 8000672:	f002 ffff 	bl	8003674 <SEGGER_SYSVIEW_Conf>
  	  	  SEGGER_SYSVIEW_Start();
 8000676:	f004 fb6d 	bl	8004d54 <SEGGER_SYSVIEW_Start>

  	  	  status=xTaskCreate(task1_handler,"Task-1", 200,"Hello world from Task-1" , 2, &task1_handle);
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	2302      	movs	r3, #2
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <main+0x9c>)
 8000686:	22c8      	movs	r2, #200	; 0xc8
 8000688:	491a      	ldr	r1, [pc, #104]	; (80006f4 <main+0xa0>)
 800068a:	481b      	ldr	r0, [pc, #108]	; (80006f8 <main+0xa4>)
 800068c:	f001 fef7 	bl	800247e <xTaskCreate>
 8000690:	6178      	str	r0, [r7, #20]
    	  configASSERT(status== pdPASS);
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d00a      	beq.n	80006ae <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800069c:	f383 8811 	msr	BASEPRI, r3
 80006a0:	f3bf 8f6f 	isb	sy
 80006a4:	f3bf 8f4f 	dsb	sy
 80006a8:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006aa:	bf00      	nop
 80006ac:	e7fe      	b.n	80006ac <main+0x58>

    	  status=xTaskCreate(task2_handler,"Task-2", 200,"Hello world from Task-2" , 2, &task2_handle);
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	2302      	movs	r3, #2
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <main+0xa8>)
 80006b8:	22c8      	movs	r2, #200	; 0xc8
 80006ba:	4911      	ldr	r1, [pc, #68]	; (8000700 <main+0xac>)
 80006bc:	4811      	ldr	r0, [pc, #68]	; (8000704 <main+0xb0>)
 80006be:	f001 fede 	bl	800247e <xTaskCreate>
 80006c2:	6178      	str	r0, [r7, #20]
    	  configASSERT(status== pdPASS);
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d00a      	beq.n	80006e0 <main+0x8c>
        __asm volatile
 80006ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ce:	f383 8811 	msr	BASEPRI, r3
 80006d2:	f3bf 8f6f 	isb	sy
 80006d6:	f3bf 8f4f 	dsb	sy
 80006da:	60fb      	str	r3, [r7, #12]
    }
 80006dc:	bf00      	nop
 80006de:	e7fe      	b.n	80006de <main+0x8a>


    	  vTaskStartScheduler();
 80006e0:	f002 f822 	bl	8002728 <vTaskStartScheduler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Hello Fucker ");
 80006e4:	4808      	ldr	r0, [pc, #32]	; (8000708 <main+0xb4>)
 80006e6:	f005 f911 	bl	800590c <iprintf>
 80006ea:	e7fb      	b.n	80006e4 <main+0x90>
 80006ec:	e0001000 	.word	0xe0001000
 80006f0:	08006ccc 	.word	0x08006ccc
 80006f4:	08006ce4 	.word	0x08006ce4
 80006f8:	080008e5 	.word	0x080008e5
 80006fc:	08006cec 	.word	0x08006cec
 8000700:	08006d04 	.word	0x08006d04
 8000704:	08000911 	.word	0x08000911
 8000708:	08006d0c 	.word	0x08006d0c

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	; 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2234      	movs	r2, #52	; 0x34
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f005 f8ee 	bl	80058fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <SystemClock_Config+0xd4>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	4a29      	ldr	r2, [pc, #164]	; (80007e0 <SystemClock_Config+0xd4>)
 800073a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073e:	6413      	str	r3, [r2, #64]	; 0x40
 8000740:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <SystemClock_Config+0xd4>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800074c:	2300      	movs	r3, #0
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <SystemClock_Config+0xd8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000758:	4a22      	ldr	r2, [pc, #136]	; (80007e4 <SystemClock_Config+0xd8>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <SystemClock_Config+0xd8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076c:	2302      	movs	r3, #2
 800076e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000774:	2310      	movs	r3, #16
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000778:	2302      	movs	r3, #2
 800077a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077c:	2300      	movs	r3, #0
 800077e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000780:	2310      	movs	r3, #16
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000784:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000788:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800078a:	2304      	movs	r3, #4
 800078c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800078e:	2302      	movs	r3, #2
 8000790:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4618      	mov	r0, r3
 800079c:	f001 f8a8 	bl	80018f0 <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007a6:	f000 f8db 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	230f      	movs	r3, #15
 80007ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2302      	movs	r3, #2
 80007b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	2102      	movs	r1, #2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fd2a 	bl	8001220 <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007d2:	f000 f8c5 	bl	8000960 <Error_Handler>
  }
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	; 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <MX_GPIO_Init+0xf0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a34      	ldr	r2, [pc, #208]	; (80008d8 <MX_GPIO_Init+0xf0>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b32      	ldr	r3, [pc, #200]	; (80008d8 <MX_GPIO_Init+0xf0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b2e      	ldr	r3, [pc, #184]	; (80008d8 <MX_GPIO_Init+0xf0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a2d      	ldr	r2, [pc, #180]	; (80008d8 <MX_GPIO_Init+0xf0>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b2b      	ldr	r3, [pc, #172]	; (80008d8 <MX_GPIO_Init+0xf0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <MX_GPIO_Init+0xf0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a26      	ldr	r2, [pc, #152]	; (80008d8 <MX_GPIO_Init+0xf0>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b24      	ldr	r3, [pc, #144]	; (80008d8 <MX_GPIO_Init+0xf0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <MX_GPIO_Init+0xf0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a1f      	ldr	r2, [pc, #124]	; (80008d8 <MX_GPIO_Init+0xf0>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_GPIO_Init+0xf0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2120      	movs	r1, #32
 8000872:	481a      	ldr	r0, [pc, #104]	; (80008dc <MX_GPIO_Init+0xf4>)
 8000874:	f000 fcba 	bl	80011ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800087e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	4814      	ldr	r0, [pc, #80]	; (80008e0 <MX_GPIO_Init+0xf8>)
 8000890:	f000 fb18 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000894:	230c      	movs	r3, #12
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a4:	2307      	movs	r3, #7
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	480b      	ldr	r0, [pc, #44]	; (80008dc <MX_GPIO_Init+0xf4>)
 80008b0:	f000 fb08 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008b4:	2320      	movs	r3, #32
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_GPIO_Init+0xf4>)
 80008cc:	f000 fafa 	bl	8000ec4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40020800 	.word	0x40020800

080008e4 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void * parameters)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b09c      	sub	sp, #112	; 0x70
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	char  msg[100];
	while(1)
	{
		printf("%s\n",(char*)parameters);
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f005 f893 	bl	8005a18 <puts>
		snprintf(msg,100,"%s\n",(char*)parameters);
 80008f2:	f107 000c 	add.w	r0, r7, #12
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <task1_handler+0x28>)
 80008fa:	2164      	movs	r1, #100	; 0x64
 80008fc:	f005 f894 	bl	8005a28 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	4618      	mov	r0, r3
 8000906:	f004 ff2f 	bl	8005768 <SEGGER_SYSVIEW_PrintfTarget>
		printf("%s\n",(char*)parameters);
 800090a:	e7ef      	b.n	80008ec <task1_handler+0x8>
 800090c:	08006d1c 	.word	0x08006d1c

08000910 <task2_handler>:
	}
}


static void task2_handler(void * parameters)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b09c      	sub	sp, #112	; 0x70
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	char  msg[100];
	while(1)
		{
		printf("%s\n",(char*)parameters);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f005 f87d 	bl	8005a18 <puts>
		snprintf(msg,100,"%s\n",(char*)parameters);
 800091e:	f107 000c 	add.w	r0, r7, #12
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <task2_handler+0x28>)
 8000926:	2164      	movs	r1, #100	; 0x64
 8000928:	f005 f87e 	bl	8005a28 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	4618      	mov	r0, r3
 8000932:	f004 ff19 	bl	8005768 <SEGGER_SYSVIEW_PrintfTarget>
		printf("%s\n",(char*)parameters);
 8000936:	e7ef      	b.n	8000918 <task2_handler+0x8>
 8000938:	08006d1c 	.word	0x08006d1c

0800093c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d101      	bne.n	8000952 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800094e:	f000 f9b7 	bl	8000cc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40000c00 	.word	0x40000c00

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>
	...

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	4a0f      	ldr	r2, [pc, #60]	; (80009b8 <HAL_MspInit+0x4c>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000980:	6453      	str	r3, [r2, #68]	; 0x44
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x4c>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6413      	str	r3, [r2, #64]	; 0x40
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80009aa:	f002 faad 	bl	8002f08 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08e      	sub	sp, #56	; 0x38
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <HAL_InitTick+0xe4>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	4a32      	ldr	r2, [pc, #200]	; (8000aa0 <HAL_InitTick+0xe4>)
 80009d6:	f043 0308 	orr.w	r3, r3, #8
 80009da:	6413      	str	r3, [r2, #64]	; 0x40
 80009dc:	4b30      	ldr	r3, [pc, #192]	; (8000aa0 <HAL_InitTick+0xe4>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	f003 0308 	and.w	r3, r3, #8
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009e8:	f107 0210 	add.w	r2, r7, #16
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 fd1a 	bl	800142c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009f8:	6a3b      	ldr	r3, [r7, #32]
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d103      	bne.n	8000a0a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a02:	f000 fcff 	bl	8001404 <HAL_RCC_GetPCLK1Freq>
 8000a06:	6378      	str	r0, [r7, #52]	; 0x34
 8000a08:	e004      	b.n	8000a14 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a0a:	f000 fcfb 	bl	8001404 <HAL_RCC_GetPCLK1Freq>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a16:	4a23      	ldr	r2, [pc, #140]	; (8000aa4 <HAL_InitTick+0xe8>)
 8000a18:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1c:	0c9b      	lsrs	r3, r3, #18
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000a22:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a24:	4a21      	ldr	r2, [pc, #132]	; (8000aac <HAL_InitTick+0xf0>)
 8000a26:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a2e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000a30:	4a1d      	ldr	r2, [pc, #116]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a34:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000a48:	4817      	ldr	r0, [pc, #92]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a4a:	f001 f9ef 	bl	8001e2c <HAL_TIM_Base_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d11b      	bne.n	8000a94 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000a5c:	4812      	ldr	r0, [pc, #72]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a5e:	f001 fa3f 	bl	8001ee0 <HAL_TIM_Base_Start_IT>
 8000a62:	4603      	mov	r3, r0
 8000a64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d111      	bne.n	8000a94 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000a70:	2032      	movs	r0, #50	; 0x32
 8000a72:	f000 fa19 	bl	8000ea8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b0f      	cmp	r3, #15
 8000a7a:	d808      	bhi.n	8000a8e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	2032      	movs	r0, #50	; 0x32
 8000a82:	f000 f9f5 	bl	8000e70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <HAL_InitTick+0xf4>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	e002      	b.n	8000a94 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3738      	adds	r7, #56	; 0x38
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	431bde83 	.word	0x431bde83
 8000aa8:	20000094 	.word	0x20000094
 8000aac:	40000c00 	.word	0x40000c00
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <NMI_Handler+0x4>

08000aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <TIM5_IRQHandler+0x10>)
 8000ae6:	f001 fa6b 	bl	8001fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000094 	.word	0x20000094

08000af4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	e00a      	b.n	8000b1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b06:	f3af 8000 	nop.w
 8000b0a:	4601      	mov	r1, r0
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	60ba      	str	r2, [r7, #8]
 8000b12:	b2ca      	uxtb	r2, r1
 8000b14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbf0      	blt.n	8000b06 <_read+0x12>
  }

  return len;
 8000b24:	687b      	ldr	r3, [r7, #4]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b56:	605a      	str	r2, [r3, #4]
  return 0;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <_isatty>:

int _isatty(int file)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba0:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <_sbrk+0x5c>)
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <_sbrk+0x60>)
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <_sbrk+0x64>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <_sbrk+0x68>)
 8000bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d207      	bcs.n	8000bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc8:	f004 fe50 	bl	800586c <__errno>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	220c      	movs	r2, #12
 8000bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bd6:	e009      	b.n	8000bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <_sbrk+0x64>)
 8000be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bea:	68fb      	ldr	r3, [r7, #12]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20020000 	.word	0x20020000
 8000bf8:	00000400 	.word	0x00000400
 8000bfc:	200000dc 	.word	0x200000dc
 8000c00:	20014498 	.word	0x20014498

08000c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c2e:	490e      	ldr	r1, [pc, #56]	; (8000c68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c44:	4c0b      	ldr	r4, [pc, #44]	; (8000c74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c52:	f7ff ffd7 	bl	8000c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c56:	f004 fe0f 	bl	8005878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fcfb 	bl	8000654 <main>
  bx  lr    
 8000c5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c6c:	08006ee0 	.word	0x08006ee0
  ldr r2, =_sbss
 8000c70:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c74:	20014498 	.word	0x20014498

08000c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <HAL_Init+0x40>)
 8000c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_Init+0x40>)
 8000c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_Init+0x40>)
 8000c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f8d8 	bl	8000e5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000caa:	200f      	movs	r0, #15
 8000cac:	f7ff fe86 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb0:	f7ff fe5c 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023c00 	.word	0x40023c00

08000cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x24>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_IncTick+0x24>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	200000e0 	.word	0x200000e0

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_GetTick+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	200000e0 	.word	0x200000e0

08000d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d32:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	60d3      	str	r3, [r2, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <__NVIC_GetPriorityGrouping+0x18>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	0a1b      	lsrs	r3, r3, #8
 8000d52:	f003 0307 	and.w	r3, r3, #7
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	db0b      	blt.n	8000d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	f003 021f 	and.w	r2, r3, #31
 8000d7c:	4907      	ldr	r1, [pc, #28]	; (8000d9c <__NVIC_EnableIRQ+0x38>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	095b      	lsrs	r3, r3, #5
 8000d84:	2001      	movs	r0, #1
 8000d86:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	db0a      	blt.n	8000dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	490c      	ldr	r1, [pc, #48]	; (8000dec <__NVIC_SetPriority+0x4c>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	0112      	lsls	r2, r2, #4
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc8:	e00a      	b.n	8000de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4908      	ldr	r1, [pc, #32]	; (8000df0 <__NVIC_SetPriority+0x50>)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	3b04      	subs	r3, #4
 8000dd8:	0112      	lsls	r2, r2, #4
 8000dda:	b2d2      	uxtb	r2, r2
 8000ddc:	440b      	add	r3, r1
 8000dde:	761a      	strb	r2, [r3, #24]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000e100 	.word	0xe000e100
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f1c3 0307 	rsb	r3, r3, #7
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	bf28      	it	cs
 8000e12:	2304      	movcs	r3, #4
 8000e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	2b06      	cmp	r3, #6
 8000e1c:	d902      	bls.n	8000e24 <NVIC_EncodePriority+0x30>
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3b03      	subs	r3, #3
 8000e22:	e000      	b.n	8000e26 <NVIC_EncodePriority+0x32>
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43da      	mvns	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	401a      	ands	r2, r3
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	43d9      	mvns	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	4313      	orrs	r3, r2
         );
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3724      	adds	r7, #36	; 0x24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ff4c 	bl	8000d00 <__NVIC_SetPriorityGrouping>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
 8000e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e82:	f7ff ff61 	bl	8000d48 <__NVIC_GetPriorityGrouping>
 8000e86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	68b9      	ldr	r1, [r7, #8]
 8000e8c:	6978      	ldr	r0, [r7, #20]
 8000e8e:	f7ff ffb1 	bl	8000df4 <NVIC_EncodePriority>
 8000e92:	4602      	mov	r2, r0
 8000e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ff80 	bl	8000da0 <__NVIC_SetPriority>
}
 8000ea0:	bf00      	nop
 8000ea2:	3718      	adds	r7, #24
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff54 	bl	8000d64 <__NVIC_EnableIRQ>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
 8000ede:	e165      	b.n	80011ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	f040 8154 	bne.w	80011a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d005      	beq.n	8000f16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d130      	bne.n	8000f78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2203      	movs	r2, #3
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	091b      	lsrs	r3, r3, #4
 8000f62:	f003 0201 	and.w	r2, r3, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	d017      	beq.n	8000fb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d123      	bne.n	8001008 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	691a      	ldr	r2, [r3, #16]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	08da      	lsrs	r2, r3, #3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3208      	adds	r2, #8
 8001002:	69b9      	ldr	r1, [r7, #24]
 8001004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0203 	and.w	r2, r3, #3
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 80ae 	beq.w	80011a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b5d      	ldr	r3, [pc, #372]	; (80011c4 <HAL_GPIO_Init+0x300>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a5c      	ldr	r2, [pc, #368]	; (80011c4 <HAL_GPIO_Init+0x300>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b5a      	ldr	r3, [pc, #360]	; (80011c4 <HAL_GPIO_Init+0x300>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001066:	4a58      	ldr	r2, [pc, #352]	; (80011c8 <HAL_GPIO_Init+0x304>)
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4f      	ldr	r2, [pc, #316]	; (80011cc <HAL_GPIO_Init+0x308>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d025      	beq.n	80010de <HAL_GPIO_Init+0x21a>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4e      	ldr	r2, [pc, #312]	; (80011d0 <HAL_GPIO_Init+0x30c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d01f      	beq.n	80010da <HAL_GPIO_Init+0x216>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4d      	ldr	r2, [pc, #308]	; (80011d4 <HAL_GPIO_Init+0x310>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d019      	beq.n	80010d6 <HAL_GPIO_Init+0x212>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4c      	ldr	r2, [pc, #304]	; (80011d8 <HAL_GPIO_Init+0x314>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d013      	beq.n	80010d2 <HAL_GPIO_Init+0x20e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4b      	ldr	r2, [pc, #300]	; (80011dc <HAL_GPIO_Init+0x318>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d00d      	beq.n	80010ce <HAL_GPIO_Init+0x20a>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4a      	ldr	r2, [pc, #296]	; (80011e0 <HAL_GPIO_Init+0x31c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d007      	beq.n	80010ca <HAL_GPIO_Init+0x206>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a49      	ldr	r2, [pc, #292]	; (80011e4 <HAL_GPIO_Init+0x320>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d101      	bne.n	80010c6 <HAL_GPIO_Init+0x202>
 80010c2:	2306      	movs	r3, #6
 80010c4:	e00c      	b.n	80010e0 <HAL_GPIO_Init+0x21c>
 80010c6:	2307      	movs	r3, #7
 80010c8:	e00a      	b.n	80010e0 <HAL_GPIO_Init+0x21c>
 80010ca:	2305      	movs	r3, #5
 80010cc:	e008      	b.n	80010e0 <HAL_GPIO_Init+0x21c>
 80010ce:	2304      	movs	r3, #4
 80010d0:	e006      	b.n	80010e0 <HAL_GPIO_Init+0x21c>
 80010d2:	2303      	movs	r3, #3
 80010d4:	e004      	b.n	80010e0 <HAL_GPIO_Init+0x21c>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e002      	b.n	80010e0 <HAL_GPIO_Init+0x21c>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <HAL_GPIO_Init+0x21c>
 80010de:	2300      	movs	r3, #0
 80010e0:	69fa      	ldr	r2, [r7, #28]
 80010e2:	f002 0203 	and.w	r2, r2, #3
 80010e6:	0092      	lsls	r2, r2, #2
 80010e8:	4093      	lsls	r3, r2
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f0:	4935      	ldr	r1, [pc, #212]	; (80011c8 <HAL_GPIO_Init+0x304>)
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	089b      	lsrs	r3, r3, #2
 80010f6:	3302      	adds	r3, #2
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fe:	4b3a      	ldr	r3, [pc, #232]	; (80011e8 <HAL_GPIO_Init+0x324>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001122:	4a31      	ldr	r2, [pc, #196]	; (80011e8 <HAL_GPIO_Init+0x324>)
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001128:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <HAL_GPIO_Init+0x324>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800114c:	4a26      	ldr	r2, [pc, #152]	; (80011e8 <HAL_GPIO_Init+0x324>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <HAL_GPIO_Init+0x324>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001176:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <HAL_GPIO_Init+0x324>)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <HAL_GPIO_Init+0x324>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011a0:	4a11      	ldr	r2, [pc, #68]	; (80011e8 <HAL_GPIO_Init+0x324>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3301      	adds	r3, #1
 80011aa:	61fb      	str	r3, [r7, #28]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	2b0f      	cmp	r3, #15
 80011b0:	f67f ae96 	bls.w	8000ee0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40013800 	.word	0x40013800
 80011cc:	40020000 	.word	0x40020000
 80011d0:	40020400 	.word	0x40020400
 80011d4:	40020800 	.word	0x40020800
 80011d8:	40020c00 	.word	0x40020c00
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40021400 	.word	0x40021400
 80011e4:	40021800 	.word	0x40021800
 80011e8:	40013c00 	.word	0x40013c00

080011ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
 80011f8:	4613      	mov	r3, r2
 80011fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011fc:	787b      	ldrb	r3, [r7, #1]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001208:	e003      	b.n	8001212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800120a:	887b      	ldrh	r3, [r7, #2]
 800120c:	041a      	lsls	r2, r3, #16
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	619a      	str	r2, [r3, #24]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e0cc      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001234:	4b68      	ldr	r3, [pc, #416]	; (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 030f 	and.w	r3, r3, #15
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	d90c      	bls.n	800125c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001242:	4b65      	ldr	r3, [pc, #404]	; (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800124a:	4b63      	ldr	r3, [pc, #396]	; (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d001      	beq.n	800125c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0b8      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d020      	beq.n	80012aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	d005      	beq.n	8001280 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001274:	4b59      	ldr	r3, [pc, #356]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	4a58      	ldr	r2, [pc, #352]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 800127a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800127e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0308 	and.w	r3, r3, #8
 8001288:	2b00      	cmp	r3, #0
 800128a:	d005      	beq.n	8001298 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800128c:	4b53      	ldr	r3, [pc, #332]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	4a52      	ldr	r2, [pc, #328]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001296:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001298:	4b50      	ldr	r3, [pc, #320]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	494d      	ldr	r1, [pc, #308]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d044      	beq.n	8001340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d107      	bne.n	80012ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012be:	4b47      	ldr	r3, [pc, #284]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d119      	bne.n	80012fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e07f      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d003      	beq.n	80012de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d107      	bne.n	80012ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012de:	4b3f      	ldr	r3, [pc, #252]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d109      	bne.n	80012fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e06f      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ee:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e067      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012fe:	4b37      	ldr	r3, [pc, #220]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f023 0203 	bic.w	r2, r3, #3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4934      	ldr	r1, [pc, #208]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 800130c:	4313      	orrs	r3, r2
 800130e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001310:	f7ff fcea 	bl	8000ce8 <HAL_GetTick>
 8001314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001316:	e00a      	b.n	800132e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001318:	f7ff fce6 	bl	8000ce8 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	f241 3288 	movw	r2, #5000	; 0x1388
 8001326:	4293      	cmp	r3, r2
 8001328:	d901      	bls.n	800132e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e04f      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132e:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 020c 	and.w	r2, r3, #12
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	429a      	cmp	r2, r3
 800133e:	d1eb      	bne.n	8001318 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001340:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 030f 	and.w	r3, r3, #15
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	d20c      	bcs.n	8001368 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134e:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d001      	beq.n	8001368 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e032      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	d008      	beq.n	8001386 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	4916      	ldr	r1, [pc, #88]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001382:	4313      	orrs	r3, r2
 8001384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b00      	cmp	r3, #0
 8001390:	d009      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	490e      	ldr	r1, [pc, #56]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013a6:	f000 f873 	bl	8001490 <HAL_RCC_GetSysClockFreq>
 80013aa:	4602      	mov	r2, r0
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	091b      	lsrs	r3, r3, #4
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	490a      	ldr	r1, [pc, #40]	; (80013e0 <HAL_RCC_ClockConfig+0x1c0>)
 80013b8:	5ccb      	ldrb	r3, [r1, r3]
 80013ba:	fa22 f303 	lsr.w	r3, r2, r3
 80013be:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <HAL_RCC_ClockConfig+0x1c4>)
 80013c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_RCC_ClockConfig+0x1c8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff faf8 	bl	80009bc <HAL_InitTick>

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023c00 	.word	0x40023c00
 80013dc:	40023800 	.word	0x40023800
 80013e0:	08006de8 	.word	0x08006de8
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000004 	.word	0x20000004

080013ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_RCC_GetHCLKFreq+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000000 	.word	0x20000000

08001404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001408:	f7ff fff0 	bl	80013ec <HAL_RCC_GetHCLKFreq>
 800140c:	4602      	mov	r2, r0
 800140e:	4b05      	ldr	r3, [pc, #20]	; (8001424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	0a9b      	lsrs	r3, r3, #10
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	4903      	ldr	r1, [pc, #12]	; (8001428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800141a:	5ccb      	ldrb	r3, [r1, r3]
 800141c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001420:	4618      	mov	r0, r3
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	08006df8 	.word	0x08006df8

0800142c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	220f      	movs	r2, #15
 800143a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_RCC_GetClockConfig+0x5c>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 0203 	and.w	r2, r3, #3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_RCC_GetClockConfig+0x5c>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <HAL_RCC_GetClockConfig+0x5c>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_RCC_GetClockConfig+0x5c>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	08db      	lsrs	r3, r3, #3
 8001466:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800146e:	4b07      	ldr	r3, [pc, #28]	; (800148c <HAL_RCC_GetClockConfig+0x60>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 020f 	and.w	r2, r3, #15
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	601a      	str	r2, [r3, #0]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	40023c00 	.word	0x40023c00

08001490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001494:	b0ae      	sub	sp, #184	; 0xb8
 8001496:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001498:	2300      	movs	r3, #0
 800149a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014b6:	4bcb      	ldr	r3, [pc, #812]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b0c      	cmp	r3, #12
 80014c0:	f200 8206 	bhi.w	80018d0 <HAL_RCC_GetSysClockFreq+0x440>
 80014c4:	a201      	add	r2, pc, #4	; (adr r2, 80014cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80014c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ca:	bf00      	nop
 80014cc:	08001501 	.word	0x08001501
 80014d0:	080018d1 	.word	0x080018d1
 80014d4:	080018d1 	.word	0x080018d1
 80014d8:	080018d1 	.word	0x080018d1
 80014dc:	08001509 	.word	0x08001509
 80014e0:	080018d1 	.word	0x080018d1
 80014e4:	080018d1 	.word	0x080018d1
 80014e8:	080018d1 	.word	0x080018d1
 80014ec:	08001511 	.word	0x08001511
 80014f0:	080018d1 	.word	0x080018d1
 80014f4:	080018d1 	.word	0x080018d1
 80014f8:	080018d1 	.word	0x080018d1
 80014fc:	08001701 	.word	0x08001701
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001500:	4bb9      	ldr	r3, [pc, #740]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001502:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001506:	e1e7      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001508:	4bb8      	ldr	r3, [pc, #736]	; (80017ec <HAL_RCC_GetSysClockFreq+0x35c>)
 800150a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800150e:	e1e3      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001510:	4bb4      	ldr	r3, [pc, #720]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001518:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800151c:	4bb1      	ldr	r3, [pc, #708]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d071      	beq.n	800160c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001528:	4bae      	ldr	r3, [pc, #696]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	099b      	lsrs	r3, r3, #6
 800152e:	2200      	movs	r2, #0
 8001530:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001534:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001538:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800153c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001540:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800154a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800154e:	4622      	mov	r2, r4
 8001550:	462b      	mov	r3, r5
 8001552:	f04f 0000 	mov.w	r0, #0
 8001556:	f04f 0100 	mov.w	r1, #0
 800155a:	0159      	lsls	r1, r3, #5
 800155c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001560:	0150      	lsls	r0, r2, #5
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4621      	mov	r1, r4
 8001568:	1a51      	subs	r1, r2, r1
 800156a:	6439      	str	r1, [r7, #64]	; 0x40
 800156c:	4629      	mov	r1, r5
 800156e:	eb63 0301 	sbc.w	r3, r3, r1
 8001572:	647b      	str	r3, [r7, #68]	; 0x44
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001580:	4649      	mov	r1, r9
 8001582:	018b      	lsls	r3, r1, #6
 8001584:	4641      	mov	r1, r8
 8001586:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800158a:	4641      	mov	r1, r8
 800158c:	018a      	lsls	r2, r1, #6
 800158e:	4641      	mov	r1, r8
 8001590:	1a51      	subs	r1, r2, r1
 8001592:	63b9      	str	r1, [r7, #56]	; 0x38
 8001594:	4649      	mov	r1, r9
 8001596:	eb63 0301 	sbc.w	r3, r3, r1
 800159a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80015a8:	4649      	mov	r1, r9
 80015aa:	00cb      	lsls	r3, r1, #3
 80015ac:	4641      	mov	r1, r8
 80015ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015b2:	4641      	mov	r1, r8
 80015b4:	00ca      	lsls	r2, r1, #3
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	4603      	mov	r3, r0
 80015bc:	4622      	mov	r2, r4
 80015be:	189b      	adds	r3, r3, r2
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
 80015c2:	462b      	mov	r3, r5
 80015c4:	460a      	mov	r2, r1
 80015c6:	eb42 0303 	adc.w	r3, r2, r3
 80015ca:	637b      	str	r3, [r7, #52]	; 0x34
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80015d8:	4629      	mov	r1, r5
 80015da:	024b      	lsls	r3, r1, #9
 80015dc:	4621      	mov	r1, r4
 80015de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015e2:	4621      	mov	r1, r4
 80015e4:	024a      	lsls	r2, r1, #9
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015ee:	2200      	movs	r2, #0
 80015f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80015fc:	f7fe fea8 	bl	8000350 <__aeabi_uldivmod>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4613      	mov	r3, r2
 8001606:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800160a:	e067      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800160c:	4b75      	ldr	r3, [pc, #468]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	099b      	lsrs	r3, r3, #6
 8001612:	2200      	movs	r2, #0
 8001614:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001618:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800161c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001624:	67bb      	str	r3, [r7, #120]	; 0x78
 8001626:	2300      	movs	r3, #0
 8001628:	67fb      	str	r3, [r7, #124]	; 0x7c
 800162a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800162e:	4622      	mov	r2, r4
 8001630:	462b      	mov	r3, r5
 8001632:	f04f 0000 	mov.w	r0, #0
 8001636:	f04f 0100 	mov.w	r1, #0
 800163a:	0159      	lsls	r1, r3, #5
 800163c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001640:	0150      	lsls	r0, r2, #5
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4621      	mov	r1, r4
 8001648:	1a51      	subs	r1, r2, r1
 800164a:	62b9      	str	r1, [r7, #40]	; 0x28
 800164c:	4629      	mov	r1, r5
 800164e:	eb63 0301 	sbc.w	r3, r3, r1
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001660:	4649      	mov	r1, r9
 8001662:	018b      	lsls	r3, r1, #6
 8001664:	4641      	mov	r1, r8
 8001666:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800166a:	4641      	mov	r1, r8
 800166c:	018a      	lsls	r2, r1, #6
 800166e:	4641      	mov	r1, r8
 8001670:	ebb2 0a01 	subs.w	sl, r2, r1
 8001674:	4649      	mov	r1, r9
 8001676:	eb63 0b01 	sbc.w	fp, r3, r1
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001686:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800168a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800168e:	4692      	mov	sl, r2
 8001690:	469b      	mov	fp, r3
 8001692:	4623      	mov	r3, r4
 8001694:	eb1a 0303 	adds.w	r3, sl, r3
 8001698:	623b      	str	r3, [r7, #32]
 800169a:	462b      	mov	r3, r5
 800169c:	eb4b 0303 	adc.w	r3, fp, r3
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80016ae:	4629      	mov	r1, r5
 80016b0:	028b      	lsls	r3, r1, #10
 80016b2:	4621      	mov	r1, r4
 80016b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016b8:	4621      	mov	r1, r4
 80016ba:	028a      	lsls	r2, r1, #10
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016c4:	2200      	movs	r2, #0
 80016c6:	673b      	str	r3, [r7, #112]	; 0x70
 80016c8:	677a      	str	r2, [r7, #116]	; 0x74
 80016ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80016ce:	f7fe fe3f 	bl	8000350 <__aeabi_uldivmod>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4613      	mov	r3, r2
 80016d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016dc:	4b41      	ldr	r3, [pc, #260]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	0c1b      	lsrs	r3, r3, #16
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	3301      	adds	r3, #1
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80016ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80016f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016fe:	e0eb      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001700:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001708:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800170c:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d06b      	beq.n	80017f0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001718:	4b32      	ldr	r3, [pc, #200]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	099b      	lsrs	r3, r3, #6
 800171e:	2200      	movs	r2, #0
 8001720:	66bb      	str	r3, [r7, #104]	; 0x68
 8001722:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001724:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800172a:	663b      	str	r3, [r7, #96]	; 0x60
 800172c:	2300      	movs	r3, #0
 800172e:	667b      	str	r3, [r7, #100]	; 0x64
 8001730:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001734:	4622      	mov	r2, r4
 8001736:	462b      	mov	r3, r5
 8001738:	f04f 0000 	mov.w	r0, #0
 800173c:	f04f 0100 	mov.w	r1, #0
 8001740:	0159      	lsls	r1, r3, #5
 8001742:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001746:	0150      	lsls	r0, r2, #5
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4621      	mov	r1, r4
 800174e:	1a51      	subs	r1, r2, r1
 8001750:	61b9      	str	r1, [r7, #24]
 8001752:	4629      	mov	r1, r5
 8001754:	eb63 0301 	sbc.w	r3, r3, r1
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001766:	4659      	mov	r1, fp
 8001768:	018b      	lsls	r3, r1, #6
 800176a:	4651      	mov	r1, sl
 800176c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001770:	4651      	mov	r1, sl
 8001772:	018a      	lsls	r2, r1, #6
 8001774:	4651      	mov	r1, sl
 8001776:	ebb2 0801 	subs.w	r8, r2, r1
 800177a:	4659      	mov	r1, fp
 800177c:	eb63 0901 	sbc.w	r9, r3, r1
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800178c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001790:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001794:	4690      	mov	r8, r2
 8001796:	4699      	mov	r9, r3
 8001798:	4623      	mov	r3, r4
 800179a:	eb18 0303 	adds.w	r3, r8, r3
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	462b      	mov	r3, r5
 80017a2:	eb49 0303 	adc.w	r3, r9, r3
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80017b4:	4629      	mov	r1, r5
 80017b6:	024b      	lsls	r3, r1, #9
 80017b8:	4621      	mov	r1, r4
 80017ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017be:	4621      	mov	r1, r4
 80017c0:	024a      	lsls	r2, r1, #9
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017ca:	2200      	movs	r2, #0
 80017cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80017ce:	65fa      	str	r2, [r7, #92]	; 0x5c
 80017d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80017d4:	f7fe fdbc 	bl	8000350 <__aeabi_uldivmod>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4613      	mov	r3, r2
 80017de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80017e2:	e065      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x420>
 80017e4:	40023800 	.word	0x40023800
 80017e8:	00f42400 	.word	0x00f42400
 80017ec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f0:	4b3d      	ldr	r3, [pc, #244]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	099b      	lsrs	r3, r3, #6
 80017f6:	2200      	movs	r2, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	4611      	mov	r1, r2
 80017fc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001800:	653b      	str	r3, [r7, #80]	; 0x50
 8001802:	2300      	movs	r3, #0
 8001804:	657b      	str	r3, [r7, #84]	; 0x54
 8001806:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800180a:	4642      	mov	r2, r8
 800180c:	464b      	mov	r3, r9
 800180e:	f04f 0000 	mov.w	r0, #0
 8001812:	f04f 0100 	mov.w	r1, #0
 8001816:	0159      	lsls	r1, r3, #5
 8001818:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800181c:	0150      	lsls	r0, r2, #5
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4641      	mov	r1, r8
 8001824:	1a51      	subs	r1, r2, r1
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	4649      	mov	r1, r9
 800182a:	eb63 0301 	sbc.w	r3, r3, r1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800183c:	4659      	mov	r1, fp
 800183e:	018b      	lsls	r3, r1, #6
 8001840:	4651      	mov	r1, sl
 8001842:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001846:	4651      	mov	r1, sl
 8001848:	018a      	lsls	r2, r1, #6
 800184a:	4651      	mov	r1, sl
 800184c:	1a54      	subs	r4, r2, r1
 800184e:	4659      	mov	r1, fp
 8001850:	eb63 0501 	sbc.w	r5, r3, r1
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	00eb      	lsls	r3, r5, #3
 800185e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001862:	00e2      	lsls	r2, r4, #3
 8001864:	4614      	mov	r4, r2
 8001866:	461d      	mov	r5, r3
 8001868:	4643      	mov	r3, r8
 800186a:	18e3      	adds	r3, r4, r3
 800186c:	603b      	str	r3, [r7, #0]
 800186e:	464b      	mov	r3, r9
 8001870:	eb45 0303 	adc.w	r3, r5, r3
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001882:	4629      	mov	r1, r5
 8001884:	028b      	lsls	r3, r1, #10
 8001886:	4621      	mov	r1, r4
 8001888:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800188c:	4621      	mov	r1, r4
 800188e:	028a      	lsls	r2, r1, #10
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001898:	2200      	movs	r2, #0
 800189a:	64bb      	str	r3, [r7, #72]	; 0x48
 800189c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800189e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80018a2:	f7fe fd55 	bl	8000350 <__aeabi_uldivmod>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4613      	mov	r3, r2
 80018ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018b0:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	0f1b      	lsrs	r3, r3, #28
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80018be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80018c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80018ce:	e003      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_RCC_GetSysClockFreq+0x45c>)
 80018d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80018d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	37b8      	adds	r7, #184	; 0xb8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800
 80018ec:	00f42400 	.word	0x00f42400

080018f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e28d      	b.n	8001e1e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 8083 	beq.w	8001a16 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001910:	4b94      	ldr	r3, [pc, #592]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 030c 	and.w	r3, r3, #12
 8001918:	2b04      	cmp	r3, #4
 800191a:	d019      	beq.n	8001950 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800191c:	4b91      	ldr	r3, [pc, #580]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001924:	2b08      	cmp	r3, #8
 8001926:	d106      	bne.n	8001936 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001928:	4b8e      	ldr	r3, [pc, #568]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001930:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001934:	d00c      	beq.n	8001950 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001936:	4b8b      	ldr	r3, [pc, #556]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800193e:	2b0c      	cmp	r3, #12
 8001940:	d112      	bne.n	8001968 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001942:	4b88      	ldr	r3, [pc, #544]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800194e:	d10b      	bne.n	8001968 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	4b84      	ldr	r3, [pc, #528]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d05b      	beq.n	8001a14 <HAL_RCC_OscConfig+0x124>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d157      	bne.n	8001a14 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e25a      	b.n	8001e1e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001970:	d106      	bne.n	8001980 <HAL_RCC_OscConfig+0x90>
 8001972:	4b7c      	ldr	r3, [pc, #496]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a7b      	ldr	r2, [pc, #492]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	e01d      	b.n	80019bc <HAL_RCC_OscConfig+0xcc>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0xb4>
 800198a:	4b76      	ldr	r3, [pc, #472]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a75      	ldr	r2, [pc, #468]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	4b73      	ldr	r3, [pc, #460]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a72      	ldr	r2, [pc, #456]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 800199c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	e00b      	b.n	80019bc <HAL_RCC_OscConfig+0xcc>
 80019a4:	4b6f      	ldr	r3, [pc, #444]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a6e      	ldr	r2, [pc, #440]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 80019aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b6c      	ldr	r3, [pc, #432]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a6b      	ldr	r2, [pc, #428]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 80019b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d013      	beq.n	80019ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff f990 	bl	8000ce8 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019cc:	f7ff f98c 	bl	8000ce8 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b64      	cmp	r3, #100	; 0x64
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e21f      	b.n	8001e1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019de:	4b61      	ldr	r3, [pc, #388]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0xdc>
 80019ea:	e014      	b.n	8001a16 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7ff f97c 	bl	8000ce8 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f4:	f7ff f978 	bl	8000ce8 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b64      	cmp	r3, #100	; 0x64
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e20b      	b.n	8001e1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a06:	4b57      	ldr	r3, [pc, #348]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x104>
 8001a12:	e000      	b.n	8001a16 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d06f      	beq.n	8001b02 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a22:	4b50      	ldr	r3, [pc, #320]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d017      	beq.n	8001a5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a2e:	4b4d      	ldr	r3, [pc, #308]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d105      	bne.n	8001a46 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a3a:	4b4a      	ldr	r3, [pc, #296]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00b      	beq.n	8001a5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a46:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a4e:	2b0c      	cmp	r3, #12
 8001a50:	d11c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a52:	4b44      	ldr	r3, [pc, #272]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d116      	bne.n	8001a8c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5e:	4b41      	ldr	r3, [pc, #260]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d005      	beq.n	8001a76 <HAL_RCC_OscConfig+0x186>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d001      	beq.n	8001a76 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e1d3      	b.n	8001e1e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a76:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	4937      	ldr	r1, [pc, #220]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8a:	e03a      	b.n	8001b02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d020      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a94:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <HAL_RCC_OscConfig+0x278>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9a:	f7ff f925 	bl	8000ce8 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa2:	f7ff f921 	bl	8000ce8 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e1b4      	b.n	8001e1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac0:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4925      	ldr	r1, [pc, #148]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]
 8001ad4:	e015      	b.n	8001b02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad6:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <HAL_RCC_OscConfig+0x278>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff f904 	bl	8000ce8 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff f900 	bl	8000ce8 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e193      	b.n	8001e1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af6:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d036      	beq.n	8001b7c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d016      	beq.n	8001b44 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_RCC_OscConfig+0x27c>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1c:	f7ff f8e4 	bl	8000ce8 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b24:	f7ff f8e0 	bl	8000ce8 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e173      	b.n	8001e1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x234>
 8001b42:	e01b      	b.n	8001b7c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b44:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_RCC_OscConfig+0x27c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4a:	f7ff f8cd 	bl	8000ce8 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b50:	e00e      	b.n	8001b70 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b52:	f7ff f8c9 	bl	8000ce8 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d907      	bls.n	8001b70 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e15c      	b.n	8001e1e <HAL_RCC_OscConfig+0x52e>
 8001b64:	40023800 	.word	0x40023800
 8001b68:	42470000 	.word	0x42470000
 8001b6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b70:	4b8a      	ldr	r3, [pc, #552]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1ea      	bne.n	8001b52 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 8097 	beq.w	8001cb8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b8e:	4b83      	ldr	r3, [pc, #524]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10f      	bne.n	8001bba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	4b7f      	ldr	r3, [pc, #508]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a7e      	ldr	r2, [pc, #504]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b7c      	ldr	r3, [pc, #496]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bba:	4b79      	ldr	r3, [pc, #484]	; (8001da0 <HAL_RCC_OscConfig+0x4b0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d118      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc6:	4b76      	ldr	r3, [pc, #472]	; (8001da0 <HAL_RCC_OscConfig+0x4b0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a75      	ldr	r2, [pc, #468]	; (8001da0 <HAL_RCC_OscConfig+0x4b0>)
 8001bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd2:	f7ff f889 	bl	8000ce8 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bda:	f7ff f885 	bl	8000ce8 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e118      	b.n	8001e1e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bec:	4b6c      	ldr	r3, [pc, #432]	; (8001da0 <HAL_RCC_OscConfig+0x4b0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d106      	bne.n	8001c0e <HAL_RCC_OscConfig+0x31e>
 8001c00:	4b66      	ldr	r3, [pc, #408]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c04:	4a65      	ldr	r2, [pc, #404]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c0c:	e01c      	b.n	8001c48 <HAL_RCC_OscConfig+0x358>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x340>
 8001c16:	4b61      	ldr	r3, [pc, #388]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1a:	4a60      	ldr	r2, [pc, #384]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	6713      	str	r3, [r2, #112]	; 0x70
 8001c22:	4b5e      	ldr	r3, [pc, #376]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c26:	4a5d      	ldr	r2, [pc, #372]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c2e:	e00b      	b.n	8001c48 <HAL_RCC_OscConfig+0x358>
 8001c30:	4b5a      	ldr	r3, [pc, #360]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c34:	4a59      	ldr	r2, [pc, #356]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001c36:	f023 0301 	bic.w	r3, r3, #1
 8001c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3c:	4b57      	ldr	r3, [pc, #348]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c40:	4a56      	ldr	r2, [pc, #344]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001c42:	f023 0304 	bic.w	r3, r3, #4
 8001c46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d015      	beq.n	8001c7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c50:	f7ff f84a 	bl	8000ce8 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c58:	f7ff f846 	bl	8000ce8 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e0d7      	b.n	8001e1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c6e:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0ee      	beq.n	8001c58 <HAL_RCC_OscConfig+0x368>
 8001c7a:	e014      	b.n	8001ca6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7c:	f7ff f834 	bl	8000ce8 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c82:	e00a      	b.n	8001c9a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c84:	f7ff f830 	bl	8000ce8 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e0c1      	b.n	8001e1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c9a:	4b40      	ldr	r3, [pc, #256]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1ee      	bne.n	8001c84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d105      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cac:	4b3b      	ldr	r3, [pc, #236]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	4a3a      	ldr	r2, [pc, #232]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80ad 	beq.w	8001e1c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cc2:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d060      	beq.n	8001d90 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d145      	bne.n	8001d62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd6:	4b33      	ldr	r3, [pc, #204]	; (8001da4 <HAL_RCC_OscConfig+0x4b4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7ff f804 	bl	8000ce8 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff f800 	bl	8000ce8 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e093      	b.n	8001e1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf6:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69da      	ldr	r2, [r3, #28]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	019b      	lsls	r3, r3, #6
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	085b      	lsrs	r3, r3, #1
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	041b      	lsls	r3, r3, #16
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	061b      	lsls	r3, r3, #24
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	071b      	lsls	r3, r3, #28
 8001d2e:	491b      	ldr	r1, [pc, #108]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_RCC_OscConfig+0x4b4>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3a:	f7fe ffd5 	bl	8000ce8 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d42:	f7fe ffd1 	bl	8000ce8 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e064      	b.n	8001e1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x452>
 8001d60:	e05c      	b.n	8001e1c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <HAL_RCC_OscConfig+0x4b4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7fe ffbe 	bl	8000ce8 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d70:	f7fe ffba 	bl	8000ce8 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e04d      	b.n	8001e1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x480>
 8001d8e:	e045      	b.n	8001e1c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d107      	bne.n	8001da8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e040      	b.n	8001e1e <HAL_RCC_OscConfig+0x52e>
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40007000 	.word	0x40007000
 8001da4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001da8:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <HAL_RCC_OscConfig+0x538>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d030      	beq.n	8001e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d129      	bne.n	8001e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d122      	bne.n	8001e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dd8:	4013      	ands	r3, r2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d119      	bne.n	8001e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dee:	085b      	lsrs	r3, r3, #1
 8001df0:	3b01      	subs	r3, #1
 8001df2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d10f      	bne.n	8001e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d107      	bne.n	8001e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e000      	b.n	8001e1e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800

08001e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e041      	b.n	8001ec2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d106      	bne.n	8001e58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f839 	bl	8001eca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3304      	adds	r3, #4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	f000 f9d8 	bl	8002220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d001      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e04e      	b.n	8001f96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a23      	ldr	r2, [pc, #140]	; (8001fa4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d022      	beq.n	8001f60 <HAL_TIM_Base_Start_IT+0x80>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f22:	d01d      	beq.n	8001f60 <HAL_TIM_Base_Start_IT+0x80>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1f      	ldr	r2, [pc, #124]	; (8001fa8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d018      	beq.n	8001f60 <HAL_TIM_Base_Start_IT+0x80>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a1e      	ldr	r2, [pc, #120]	; (8001fac <HAL_TIM_Base_Start_IT+0xcc>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d013      	beq.n	8001f60 <HAL_TIM_Base_Start_IT+0x80>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00e      	beq.n	8001f60 <HAL_TIM_Base_Start_IT+0x80>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a1b      	ldr	r2, [pc, #108]	; (8001fb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d009      	beq.n	8001f60 <HAL_TIM_Base_Start_IT+0x80>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a19      	ldr	r2, [pc, #100]	; (8001fb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d004      	beq.n	8001f60 <HAL_TIM_Base_Start_IT+0x80>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a18      	ldr	r2, [pc, #96]	; (8001fbc <HAL_TIM_Base_Start_IT+0xdc>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d111      	bne.n	8001f84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d010      	beq.n	8001f94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0201 	orr.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f82:	e007      	b.n	8001f94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40010000 	.word	0x40010000
 8001fa8:	40000400 	.word	0x40000400
 8001fac:	40000800 	.word	0x40000800
 8001fb0:	40000c00 	.word	0x40000c00
 8001fb4:	40010400 	.word	0x40010400
 8001fb8:	40014000 	.word	0x40014000
 8001fbc:	40001800 	.word	0x40001800

08001fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d122      	bne.n	800201c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d11b      	bne.n	800201c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0202 	mvn.w	r2, #2
 8001fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f8ee 	bl	80021e4 <HAL_TIM_IC_CaptureCallback>
 8002008:	e005      	b.n	8002016 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f8e0 	bl	80021d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f8f1 	bl	80021f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	2b04      	cmp	r3, #4
 8002028:	d122      	bne.n	8002070 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b04      	cmp	r3, #4
 8002036:	d11b      	bne.n	8002070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0204 	mvn.w	r2, #4
 8002040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2202      	movs	r2, #2
 8002046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f8c4 	bl	80021e4 <HAL_TIM_IC_CaptureCallback>
 800205c:	e005      	b.n	800206a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f8b6 	bl	80021d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f8c7 	bl	80021f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b08      	cmp	r3, #8
 800207c:	d122      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	2b08      	cmp	r3, #8
 800208a:	d11b      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0208 	mvn.w	r2, #8
 8002094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2204      	movs	r2, #4
 800209a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f89a 	bl	80021e4 <HAL_TIM_IC_CaptureCallback>
 80020b0:	e005      	b.n	80020be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f88c 	bl	80021d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f89d 	bl	80021f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b10      	cmp	r3, #16
 80020d0:	d122      	bne.n	8002118 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	2b10      	cmp	r3, #16
 80020de:	d11b      	bne.n	8002118 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0210 	mvn.w	r2, #16
 80020e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2208      	movs	r2, #8
 80020ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f870 	bl	80021e4 <HAL_TIM_IC_CaptureCallback>
 8002104:	e005      	b.n	8002112 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f862 	bl	80021d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f873 	bl	80021f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b01      	cmp	r3, #1
 8002124:	d10e      	bne.n	8002144 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b01      	cmp	r3, #1
 8002132:	d107      	bne.n	8002144 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f06f 0201 	mvn.w	r2, #1
 800213c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7fe fbfc 	bl	800093c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214e:	2b80      	cmp	r3, #128	; 0x80
 8002150:	d10e      	bne.n	8002170 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215c:	2b80      	cmp	r3, #128	; 0x80
 800215e:	d107      	bne.n	8002170 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f902 	bl	8002374 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217a:	2b40      	cmp	r3, #64	; 0x40
 800217c:	d10e      	bne.n	800219c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002188:	2b40      	cmp	r3, #64	; 0x40
 800218a:	d107      	bne.n	800219c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f838 	bl	800220c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	d10e      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 0320 	and.w	r3, r3, #32
 80021b4:	2b20      	cmp	r3, #32
 80021b6:	d107      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0220 	mvn.w	r2, #32
 80021c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f8cc 	bl	8002360 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a40      	ldr	r2, [pc, #256]	; (8002334 <TIM_Base_SetConfig+0x114>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d013      	beq.n	8002260 <TIM_Base_SetConfig+0x40>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223e:	d00f      	beq.n	8002260 <TIM_Base_SetConfig+0x40>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a3d      	ldr	r2, [pc, #244]	; (8002338 <TIM_Base_SetConfig+0x118>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00b      	beq.n	8002260 <TIM_Base_SetConfig+0x40>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a3c      	ldr	r2, [pc, #240]	; (800233c <TIM_Base_SetConfig+0x11c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d007      	beq.n	8002260 <TIM_Base_SetConfig+0x40>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a3b      	ldr	r2, [pc, #236]	; (8002340 <TIM_Base_SetConfig+0x120>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d003      	beq.n	8002260 <TIM_Base_SetConfig+0x40>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a3a      	ldr	r2, [pc, #232]	; (8002344 <TIM_Base_SetConfig+0x124>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d108      	bne.n	8002272 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a2f      	ldr	r2, [pc, #188]	; (8002334 <TIM_Base_SetConfig+0x114>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d02b      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002280:	d027      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a2c      	ldr	r2, [pc, #176]	; (8002338 <TIM_Base_SetConfig+0x118>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d023      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a2b      	ldr	r2, [pc, #172]	; (800233c <TIM_Base_SetConfig+0x11c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d01f      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a2a      	ldr	r2, [pc, #168]	; (8002340 <TIM_Base_SetConfig+0x120>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d01b      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a29      	ldr	r2, [pc, #164]	; (8002344 <TIM_Base_SetConfig+0x124>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d017      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a28      	ldr	r2, [pc, #160]	; (8002348 <TIM_Base_SetConfig+0x128>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d013      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a27      	ldr	r2, [pc, #156]	; (800234c <TIM_Base_SetConfig+0x12c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00f      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a26      	ldr	r2, [pc, #152]	; (8002350 <TIM_Base_SetConfig+0x130>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00b      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a25      	ldr	r2, [pc, #148]	; (8002354 <TIM_Base_SetConfig+0x134>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d007      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a24      	ldr	r2, [pc, #144]	; (8002358 <TIM_Base_SetConfig+0x138>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d003      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a23      	ldr	r2, [pc, #140]	; (800235c <TIM_Base_SetConfig+0x13c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d108      	bne.n	80022e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <TIM_Base_SetConfig+0x114>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d003      	beq.n	8002318 <TIM_Base_SetConfig+0xf8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a0c      	ldr	r2, [pc, #48]	; (8002344 <TIM_Base_SetConfig+0x124>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	615a      	str	r2, [r3, #20]
}
 8002326:	bf00      	nop
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40010000 	.word	0x40010000
 8002338:	40000400 	.word	0x40000400
 800233c:	40000800 	.word	0x40000800
 8002340:	40000c00 	.word	0x40000c00
 8002344:	40010400 	.word	0x40010400
 8002348:	40014000 	.word	0x40014000
 800234c:	40014400 	.word	0x40014400
 8002350:	40014800 	.word	0x40014800
 8002354:	40001800 	.word	0x40001800
 8002358:	40001c00 	.word	0x40001c00
 800235c:	40002000 	.word	0x40002000

08002360 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f103 0208 	add.w	r2, r3, #8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023a0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f103 0208 	add.w	r2, r3, #8
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f103 0208 	add.w	r2, r3, #8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	601a      	str	r2, [r3, #0]
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800242a:	b480      	push	{r7}
 800242c:	b085      	sub	sp, #20
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6892      	ldr	r2, [r2, #8]
 8002440:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6852      	ldr	r2, [r2, #4]
 800244a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	429a      	cmp	r2, r3
 8002454:	d103      	bne.n	800245e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	1e5a      	subs	r2, r3, #1
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800247e:	b580      	push	{r7, lr}
 8002480:	b08c      	sub	sp, #48	; 0x30
 8002482:	af04      	add	r7, sp, #16
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	4613      	mov	r3, r2
 800248c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fee2 	bl	800325c <pvPortMalloc>
 8002498:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00e      	beq.n	80024be <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80024a0:	2058      	movs	r0, #88	; 0x58
 80024a2:	f000 fedb 	bl	800325c <pvPortMalloc>
 80024a6:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30
 80024b4:	e005      	b.n	80024c2 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80024b6:	6978      	ldr	r0, [r7, #20]
 80024b8:	f000 ffb0 	bl	800341c <vPortFree>
 80024bc:	e001      	b.n	80024c2 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80024c8:	88fa      	ldrh	r2, [r7, #6]
 80024ca:	2300      	movs	r3, #0
 80024cc:	9303      	str	r3, [sp, #12]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	9302      	str	r3, [sp, #8]
 80024d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d4:	9301      	str	r3, [sp, #4]
 80024d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f80e 	bl	8002500 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80024e4:	69f8      	ldr	r0, [r7, #28]
 80024e6:	f000 f8a1 	bl	800262c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80024ea:	2301      	movs	r3, #1
 80024ec:	61bb      	str	r3, [r7, #24]
 80024ee:	e002      	b.n	80024f6 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80024f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024f4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80024f6:	69bb      	ldr	r3, [r7, #24]
    }
 80024f8:	4618      	mov	r0, r3
 80024fa:	3720      	adds	r7, #32
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	461a      	mov	r2, r3
 8002518:	21a5      	movs	r1, #165	; 0xa5
 800251a:	f003 f9ef 	bl	80058fc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002528:	3b01      	subs	r3, #1
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	f023 0307 	bic.w	r3, r3, #7
 8002536:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00a      	beq.n	8002558 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002546:	f383 8811 	msr	BASEPRI, r3
 800254a:	f3bf 8f6f 	isb	sy
 800254e:	f3bf 8f4f 	dsb	sy
 8002552:	617b      	str	r3, [r7, #20]
    }
 8002554:	bf00      	nop
 8002556:	e7fe      	b.n	8002556 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d01f      	beq.n	800259e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	e012      	b.n	800258a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	4413      	add	r3, r2
 800256a:	7819      	ldrb	r1, [r3, #0]
 800256c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	4413      	add	r3, r2
 8002572:	3334      	adds	r3, #52	; 0x34
 8002574:	460a      	mov	r2, r1
 8002576:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	4413      	add	r3, r2
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	3301      	adds	r3, #1
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	2b09      	cmp	r3, #9
 800258e:	d9e9      	bls.n	8002564 <prvInitialiseNewTask+0x64>
 8002590:	e000      	b.n	8002594 <prvInitialiseNewTask+0x94>
            {
                break;
 8002592:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800259c:	e003      	b.n	80025a6 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80025a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d901      	bls.n	80025b0 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80025ac:	2304      	movs	r3, #4
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025ba:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025be:	2200      	movs	r2, #0
 80025c0:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c4:	3304      	adds	r3, #4
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fefe 	bl	80023c8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80025cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ce:	3318      	adds	r3, #24
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fef9 	bl	80023c8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80025d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025da:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025de:	f1c3 0205 	rsb	r2, r3, #5
 80025e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80025e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025ea:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80025ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ee:	3350      	adds	r3, #80	; 0x50
 80025f0:	2204      	movs	r2, #4
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 f981 	bl	80058fc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	3354      	adds	r3, #84	; 0x54
 80025fe:	2201      	movs	r2, #1
 8002600:	2100      	movs	r1, #0
 8002602:	4618      	mov	r0, r3
 8002604:	f003 f97a 	bl	80058fc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	68f9      	ldr	r1, [r7, #12]
 800260c:	69b8      	ldr	r0, [r7, #24]
 800260e:	f000 fb49 	bl	8002ca4 <pxPortInitialiseStack>
 8002612:	4602      	mov	r2, r0
 8002614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002616:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002622:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002624:	bf00      	nop
 8002626:	3720      	adds	r7, #32
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800262c:	b5b0      	push	{r4, r5, r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af02      	add	r7, sp, #8
 8002632:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002634:	f000 fce6 	bl	8003004 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002638:	4b35      	ldr	r3, [pc, #212]	; (8002710 <prvAddNewTaskToReadyList+0xe4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	3301      	adds	r3, #1
 800263e:	4a34      	ldr	r2, [pc, #208]	; (8002710 <prvAddNewTaskToReadyList+0xe4>)
 8002640:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002642:	4b34      	ldr	r3, [pc, #208]	; (8002714 <prvAddNewTaskToReadyList+0xe8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800264a:	4a32      	ldr	r2, [pc, #200]	; (8002714 <prvAddNewTaskToReadyList+0xe8>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002650:	4b2f      	ldr	r3, [pc, #188]	; (8002710 <prvAddNewTaskToReadyList+0xe4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d110      	bne.n	800267a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002658:	f000 fa8a 	bl	8002b70 <prvInitialiseTaskLists>
 800265c:	e00d      	b.n	800267a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800265e:	4b2e      	ldr	r3, [pc, #184]	; (8002718 <prvAddNewTaskToReadyList+0xec>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002666:	4b2b      	ldr	r3, [pc, #172]	; (8002714 <prvAddNewTaskToReadyList+0xe8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	429a      	cmp	r2, r3
 8002672:	d802      	bhi.n	800267a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002674:	4a27      	ldr	r2, [pc, #156]	; (8002714 <prvAddNewTaskToReadyList+0xe8>)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800267a:	4b28      	ldr	r3, [pc, #160]	; (800271c <prvAddNewTaskToReadyList+0xf0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	3301      	adds	r3, #1
 8002680:	4a26      	ldr	r2, [pc, #152]	; (800271c <prvAddNewTaskToReadyList+0xf0>)
 8002682:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002684:	4b25      	ldr	r3, [pc, #148]	; (800271c <prvAddNewTaskToReadyList+0xf0>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d016      	beq.n	80026c0 <prvAddNewTaskToReadyList+0x94>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4618      	mov	r0, r3
 8002696:	f002 febb 	bl	8005410 <SEGGER_SYSVIEW_OnTaskCreate>
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	461d      	mov	r5, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	461c      	mov	r4, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	1ae3      	subs	r3, r4, r3
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	462b      	mov	r3, r5
 80026bc:	f001 f87c 	bl	80037b8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f002 ff28 	bl	8005518 <SEGGER_SYSVIEW_OnTaskStartReady>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	2201      	movs	r2, #1
 80026ce:	409a      	lsls	r2, r3
 80026d0:	4b13      	ldr	r3, [pc, #76]	; (8002720 <prvAddNewTaskToReadyList+0xf4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <prvAddNewTaskToReadyList+0xf4>)
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4a0f      	ldr	r2, [pc, #60]	; (8002724 <prvAddNewTaskToReadyList+0xf8>)
 80026e8:	441a      	add	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3304      	adds	r3, #4
 80026ee:	4619      	mov	r1, r3
 80026f0:	4610      	mov	r0, r2
 80026f2:	f7ff fe76 	bl	80023e2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80026f6:	f000 fcb5 	bl	8003064 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80026fa:	4b07      	ldr	r3, [pc, #28]	; (8002718 <prvAddNewTaskToReadyList+0xec>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <prvAddNewTaskToReadyList+0xe8>)
 8002704:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bdb0      	pop	{r4, r5, r7, pc}
 800270e:	bf00      	nop
 8002710:	200001bc 	.word	0x200001bc
 8002714:	200000e4 	.word	0x200000e4
 8002718:	200001c8 	.word	0x200001c8
 800271c:	200001d8 	.word	0x200001d8
 8002720:	200001c4 	.word	0x200001c4
 8002724:	200000e8 	.word	0x200000e8

08002728 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800272e:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <vTaskStartScheduler+0x98>)
 8002730:	9301      	str	r3, [sp, #4]
 8002732:	2300      	movs	r3, #0
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	2300      	movs	r3, #0
 8002738:	2282      	movs	r2, #130	; 0x82
 800273a:	4922      	ldr	r1, [pc, #136]	; (80027c4 <vTaskStartScheduler+0x9c>)
 800273c:	4822      	ldr	r0, [pc, #136]	; (80027c8 <vTaskStartScheduler+0xa0>)
 800273e:	f7ff fe9e 	bl	800247e <xTaskCreate>
 8002742:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d124      	bne.n	8002794 <vTaskStartScheduler+0x6c>
        __asm volatile
 800274a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274e:	f383 8811 	msr	BASEPRI, r3
 8002752:	f3bf 8f6f 	isb	sy
 8002756:	f3bf 8f4f 	dsb	sy
 800275a:	60bb      	str	r3, [r7, #8]
    }
 800275c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800275e:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <vTaskStartScheduler+0xa4>)
 8002760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002764:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002766:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <vTaskStartScheduler+0xa8>)
 8002768:	2201      	movs	r2, #1
 800276a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800276c:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <vTaskStartScheduler+0xac>)
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002772:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <vTaskStartScheduler+0xb0>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <vTaskStartScheduler+0x98>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d102      	bne.n	8002784 <vTaskStartScheduler+0x5c>
 800277e:	f002 fe2b 	bl	80053d8 <SEGGER_SYSVIEW_OnIdle>
 8002782:	e004      	b.n	800278e <vTaskStartScheduler+0x66>
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <vTaskStartScheduler+0xb0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f002 fe83 	bl	8005494 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800278e:	f000 fb19 	bl	8002dc4 <xPortStartScheduler>
 8002792:	e00e      	b.n	80027b2 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800279a:	d10a      	bne.n	80027b2 <vTaskStartScheduler+0x8a>
        __asm volatile
 800279c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	607b      	str	r3, [r7, #4]
    }
 80027ae:	bf00      	nop
 80027b0:	e7fe      	b.n	80027b0 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <vTaskStartScheduler+0xb4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200001e0 	.word	0x200001e0
 80027c4:	08006d20 	.word	0x08006d20
 80027c8:	08002b4d 	.word	0x08002b4d
 80027cc:	200001dc 	.word	0x200001dc
 80027d0:	200001c8 	.word	0x200001c8
 80027d4:	200001c0 	.word	0x200001c0
 80027d8:	200000e4 	.word	0x200000e4
 80027dc:	2000000c 	.word	0x2000000c

080027e0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <vTaskSuspendAll+0x18>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3301      	adds	r3, #1
 80027ea:	4a03      	ldr	r2, [pc, #12]	; (80027f8 <vTaskSuspendAll+0x18>)
 80027ec:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	200001e4 	.word	0x200001e4

080027fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002806:	2300      	movs	r3, #0
 8002808:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800280a:	4b3d      	ldr	r3, [pc, #244]	; (8002900 <xTaskResumeAll+0x104>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10a      	bne.n	8002828 <xTaskResumeAll+0x2c>
        __asm volatile
 8002812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002816:	f383 8811 	msr	BASEPRI, r3
 800281a:	f3bf 8f6f 	isb	sy
 800281e:	f3bf 8f4f 	dsb	sy
 8002822:	603b      	str	r3, [r7, #0]
    }
 8002824:	bf00      	nop
 8002826:	e7fe      	b.n	8002826 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002828:	f000 fbec 	bl	8003004 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800282c:	4b34      	ldr	r3, [pc, #208]	; (8002900 <xTaskResumeAll+0x104>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3b01      	subs	r3, #1
 8002832:	4a33      	ldr	r2, [pc, #204]	; (8002900 <xTaskResumeAll+0x104>)
 8002834:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002836:	4b32      	ldr	r3, [pc, #200]	; (8002900 <xTaskResumeAll+0x104>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d159      	bne.n	80028f2 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800283e:	4b31      	ldr	r3, [pc, #196]	; (8002904 <xTaskResumeAll+0x108>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d055      	beq.n	80028f2 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002846:	e032      	b.n	80028ae <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002848:	4b2f      	ldr	r3, [pc, #188]	; (8002908 <xTaskResumeAll+0x10c>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3318      	adds	r3, #24
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fde8 	bl	800242a <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3304      	adds	r3, #4
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fde3 	bl	800242a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4618      	mov	r0, r3
 8002868:	f002 fe56 	bl	8005518 <SEGGER_SYSVIEW_OnTaskStartReady>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	2201      	movs	r2, #1
 8002872:	409a      	lsls	r2, r3
 8002874:	4b25      	ldr	r3, [pc, #148]	; (800290c <xTaskResumeAll+0x110>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4313      	orrs	r3, r2
 800287a:	4a24      	ldr	r2, [pc, #144]	; (800290c <xTaskResumeAll+0x110>)
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002882:	4613      	mov	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4a21      	ldr	r2, [pc, #132]	; (8002910 <xTaskResumeAll+0x114>)
 800288c:	441a      	add	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	3304      	adds	r3, #4
 8002892:	4619      	mov	r1, r3
 8002894:	4610      	mov	r0, r2
 8002896:	f7ff fda4 	bl	80023e2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289e:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <xTaskResumeAll+0x118>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d302      	bcc.n	80028ae <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80028a8:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <xTaskResumeAll+0x11c>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028ae:	4b16      	ldr	r3, [pc, #88]	; (8002908 <xTaskResumeAll+0x10c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1c8      	bne.n	8002848 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80028bc:	f000 f9d6 	bl	8002c6c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80028c0:	4b16      	ldr	r3, [pc, #88]	; (800291c <xTaskResumeAll+0x120>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d010      	beq.n	80028ee <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80028cc:	f000 f83a 	bl	8002944 <xTaskIncrementTick>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <xTaskResumeAll+0x11c>)
 80028d8:	2201      	movs	r2, #1
 80028da:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	3b01      	subs	r3, #1
 80028e0:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f1      	bne.n	80028cc <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <xTaskResumeAll+0x120>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <xTaskResumeAll+0x11c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80028f2:	f000 fbb7 	bl	8003064 <vPortExitCritical>

    return xAlreadyYielded;
 80028f6:	687b      	ldr	r3, [r7, #4]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	200001e4 	.word	0x200001e4
 8002904:	200001bc 	.word	0x200001bc
 8002908:	2000017c 	.word	0x2000017c
 800290c:	200001c4 	.word	0x200001c4
 8002910:	200000e8 	.word	0x200000e8
 8002914:	200000e4 	.word	0x200000e4
 8002918:	200001d0 	.word	0x200001d0
 800291c:	200001cc 	.word	0x200001cc

08002920 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002926:	f000 fc59 	bl	80031dc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800292a:	2300      	movs	r3, #0
 800292c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800292e:	4b04      	ldr	r3, [pc, #16]	; (8002940 <xTaskGetTickCountFromISR+0x20>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002934:	683b      	ldr	r3, [r7, #0]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200001c0 	.word	0x200001c0

08002944 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800294e:	4b41      	ldr	r3, [pc, #260]	; (8002a54 <xTaskIncrementTick+0x110>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d173      	bne.n	8002a3e <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002956:	4b40      	ldr	r3, [pc, #256]	; (8002a58 <xTaskIncrementTick+0x114>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3301      	adds	r3, #1
 800295c:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800295e:	4a3e      	ldr	r2, [pc, #248]	; (8002a58 <xTaskIncrementTick+0x114>)
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d120      	bne.n	80029ac <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800296a:	4b3c      	ldr	r3, [pc, #240]	; (8002a5c <xTaskIncrementTick+0x118>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <xTaskIncrementTick+0x46>
        __asm volatile
 8002974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	603b      	str	r3, [r7, #0]
    }
 8002986:	bf00      	nop
 8002988:	e7fe      	b.n	8002988 <xTaskIncrementTick+0x44>
 800298a:	4b34      	ldr	r3, [pc, #208]	; (8002a5c <xTaskIncrementTick+0x118>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	4b33      	ldr	r3, [pc, #204]	; (8002a60 <xTaskIncrementTick+0x11c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a31      	ldr	r2, [pc, #196]	; (8002a5c <xTaskIncrementTick+0x118>)
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	4a31      	ldr	r2, [pc, #196]	; (8002a60 <xTaskIncrementTick+0x11c>)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	4b31      	ldr	r3, [pc, #196]	; (8002a64 <xTaskIncrementTick+0x120>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	3301      	adds	r3, #1
 80029a4:	4a2f      	ldr	r2, [pc, #188]	; (8002a64 <xTaskIncrementTick+0x120>)
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	f000 f960 	bl	8002c6c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80029ac:	4b2e      	ldr	r3, [pc, #184]	; (8002a68 <xTaskIncrementTick+0x124>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d348      	bcc.n	8002a48 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029b6:	4b29      	ldr	r3, [pc, #164]	; (8002a5c <xTaskIncrementTick+0x118>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d104      	bne.n	80029ca <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029c0:	4b29      	ldr	r3, [pc, #164]	; (8002a68 <xTaskIncrementTick+0x124>)
 80029c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029c6:	601a      	str	r2, [r3, #0]
                    break;
 80029c8:	e03e      	b.n	8002a48 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029ca:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <xTaskIncrementTick+0x118>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d203      	bcs.n	80029ea <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80029e2:	4a21      	ldr	r2, [pc, #132]	; (8002a68 <xTaskIncrementTick+0x124>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80029e8:	e02e      	b.n	8002a48 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	3304      	adds	r3, #4
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fd1b 	bl	800242a <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d004      	beq.n	8002a06 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	3318      	adds	r3, #24
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fd12 	bl	800242a <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f002 fd85 	bl	8005518 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	2201      	movs	r2, #1
 8002a14:	409a      	lsls	r2, r3
 8002a16:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <xTaskIncrementTick+0x128>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <xTaskIncrementTick+0x128>)
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4a10      	ldr	r2, [pc, #64]	; (8002a70 <xTaskIncrementTick+0x12c>)
 8002a2e:	441a      	add	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	3304      	adds	r3, #4
 8002a34:	4619      	mov	r1, r3
 8002a36:	4610      	mov	r0, r2
 8002a38:	f7ff fcd3 	bl	80023e2 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a3c:	e7bb      	b.n	80029b6 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <xTaskIncrementTick+0x130>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	3301      	adds	r3, #1
 8002a44:	4a0b      	ldr	r2, [pc, #44]	; (8002a74 <xTaskIncrementTick+0x130>)
 8002a46:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002a48:	697b      	ldr	r3, [r7, #20]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	200001e4 	.word	0x200001e4
 8002a58:	200001c0 	.word	0x200001c0
 8002a5c:	20000174 	.word	0x20000174
 8002a60:	20000178 	.word	0x20000178
 8002a64:	200001d4 	.word	0x200001d4
 8002a68:	200001dc 	.word	0x200001dc
 8002a6c:	200001c4 	.word	0x200001c4
 8002a70:	200000e8 	.word	0x200000e8
 8002a74:	200001cc 	.word	0x200001cc

08002a78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a7e:	4b2d      	ldr	r3, [pc, #180]	; (8002b34 <vTaskSwitchContext+0xbc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002a86:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <vTaskSwitchContext+0xc0>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002a8c:	e04d      	b.n	8002b2a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002a8e:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <vTaskSwitchContext+0xc0>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a94:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <vTaskSwitchContext+0xc4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	fab3 f383 	clz	r3, r3
 8002aa0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002aa2:	7afb      	ldrb	r3, [r7, #11]
 8002aa4:	f1c3 031f 	rsb	r3, r3, #31
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	4925      	ldr	r1, [pc, #148]	; (8002b40 <vTaskSwitchContext+0xc8>)
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10a      	bne.n	8002ad4 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac2:	f383 8811 	msr	BASEPRI, r3
 8002ac6:	f3bf 8f6f 	isb	sy
 8002aca:	f3bf 8f4f 	dsb	sy
 8002ace:	607b      	str	r3, [r7, #4]
    }
 8002ad0:	bf00      	nop
 8002ad2:	e7fe      	b.n	8002ad2 <vTaskSwitchContext+0x5a>
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <vTaskSwitchContext+0xc8>)
 8002ae0:	4413      	add	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	3308      	adds	r3, #8
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d104      	bne.n	8002b04 <vTaskSwitchContext+0x8c>
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	4a0e      	ldr	r2, [pc, #56]	; (8002b44 <vTaskSwitchContext+0xcc>)
 8002b0c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <vTaskSwitchContext+0xcc>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <vTaskSwitchContext+0xd0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d102      	bne.n	8002b20 <vTaskSwitchContext+0xa8>
 8002b1a:	f002 fc5d 	bl	80053d8 <SEGGER_SYSVIEW_OnIdle>
}
 8002b1e:	e004      	b.n	8002b2a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <vTaskSwitchContext+0xcc>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f002 fcb5 	bl	8005494 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002b2a:	bf00      	nop
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	200001e4 	.word	0x200001e4
 8002b38:	200001d0 	.word	0x200001d0
 8002b3c:	200001c4 	.word	0x200001c4
 8002b40:	200000e8 	.word	0x200000e8
 8002b44:	200000e4 	.word	0x200000e4
 8002b48:	200001e0 	.word	0x200001e0

08002b4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002b54:	f000 f84c 	bl	8002bf0 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <prvIdleTask+0x20>)
 8002b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002b68:	e7f4      	b.n	8002b54 <prvIdleTask+0x8>
 8002b6a:	bf00      	nop
 8002b6c:	e000ed04 	.word	0xe000ed04

08002b70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b76:	2300      	movs	r3, #0
 8002b78:	607b      	str	r3, [r7, #4]
 8002b7a:	e00c      	b.n	8002b96 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4a12      	ldr	r2, [pc, #72]	; (8002bd0 <prvInitialiseTaskLists+0x60>)
 8002b88:	4413      	add	r3, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fbfc 	bl	8002388 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3301      	adds	r3, #1
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d9ef      	bls.n	8002b7c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002b9c:	480d      	ldr	r0, [pc, #52]	; (8002bd4 <prvInitialiseTaskLists+0x64>)
 8002b9e:	f7ff fbf3 	bl	8002388 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002ba2:	480d      	ldr	r0, [pc, #52]	; (8002bd8 <prvInitialiseTaskLists+0x68>)
 8002ba4:	f7ff fbf0 	bl	8002388 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002ba8:	480c      	ldr	r0, [pc, #48]	; (8002bdc <prvInitialiseTaskLists+0x6c>)
 8002baa:	f7ff fbed 	bl	8002388 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002bae:	480c      	ldr	r0, [pc, #48]	; (8002be0 <prvInitialiseTaskLists+0x70>)
 8002bb0:	f7ff fbea 	bl	8002388 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002bb4:	480b      	ldr	r0, [pc, #44]	; (8002be4 <prvInitialiseTaskLists+0x74>)
 8002bb6:	f7ff fbe7 	bl	8002388 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002bba:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <prvInitialiseTaskLists+0x78>)
 8002bbc:	4a05      	ldr	r2, [pc, #20]	; (8002bd4 <prvInitialiseTaskLists+0x64>)
 8002bbe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <prvInitialiseTaskLists+0x7c>)
 8002bc2:	4a05      	ldr	r2, [pc, #20]	; (8002bd8 <prvInitialiseTaskLists+0x68>)
 8002bc4:	601a      	str	r2, [r3, #0]
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	200000e8 	.word	0x200000e8
 8002bd4:	2000014c 	.word	0x2000014c
 8002bd8:	20000160 	.word	0x20000160
 8002bdc:	2000017c 	.word	0x2000017c
 8002be0:	20000190 	.word	0x20000190
 8002be4:	200001a8 	.word	0x200001a8
 8002be8:	20000174 	.word	0x20000174
 8002bec:	20000178 	.word	0x20000178

08002bf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bf6:	e019      	b.n	8002c2c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002bf8:	f000 fa04 	bl	8003004 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bfc:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <prvCheckTasksWaitingTermination+0x50>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3304      	adds	r3, #4
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fc0e 	bl	800242a <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <prvCheckTasksWaitingTermination+0x54>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	4a0b      	ldr	r2, [pc, #44]	; (8002c44 <prvCheckTasksWaitingTermination+0x54>)
 8002c16:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <prvCheckTasksWaitingTermination+0x58>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <prvCheckTasksWaitingTermination+0x58>)
 8002c20:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002c22:	f000 fa1f 	bl	8003064 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f810 	bl	8002c4c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <prvCheckTasksWaitingTermination+0x58>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1e1      	bne.n	8002bf8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000190 	.word	0x20000190
 8002c44:	200001bc 	.word	0x200001bc
 8002c48:	200001a4 	.word	0x200001a4

08002c4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 fbdf 	bl	800341c <vPortFree>
                vPortFree( pxTCB );
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fbdc 	bl	800341c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c70:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <prvResetNextTaskUnblockTime+0x30>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d104      	bne.n	8002c84 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <prvResetNextTaskUnblockTime+0x34>)
 8002c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c80:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002c82:	e005      	b.n	8002c90 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <prvResetNextTaskUnblockTime+0x30>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <prvResetNextTaskUnblockTime+0x34>)
 8002c8e:	6013      	str	r3, [r2, #0]
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20000174 	.word	0x20000174
 8002ca0:	200001dc 	.word	0x200001dc

08002ca4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3b04      	subs	r3, #4
 8002cb4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cbc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	3b04      	subs	r3, #4
 8002cc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f023 0201 	bic.w	r2, r3, #1
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	3b04      	subs	r3, #4
 8002cd2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002cd4:	4a0c      	ldr	r2, [pc, #48]	; (8002d08 <pxPortInitialiseStack+0x64>)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3b14      	subs	r3, #20
 8002cde:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	3b04      	subs	r3, #4
 8002cea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f06f 0202 	mvn.w	r2, #2
 8002cf2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3b20      	subs	r3, #32
 8002cf8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	08002d0d 	.word	0x08002d0d

08002d0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002d16:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <prvTaskExitError+0x54>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d1e:	d00a      	beq.n	8002d36 <prvTaskExitError+0x2a>
        __asm volatile
 8002d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d24:	f383 8811 	msr	BASEPRI, r3
 8002d28:	f3bf 8f6f 	isb	sy
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	60fb      	str	r3, [r7, #12]
    }
 8002d32:	bf00      	nop
 8002d34:	e7fe      	b.n	8002d34 <prvTaskExitError+0x28>
        __asm volatile
 8002d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3a:	f383 8811 	msr	BASEPRI, r3
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	f3bf 8f4f 	dsb	sy
 8002d46:	60bb      	str	r3, [r7, #8]
    }
 8002d48:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002d4a:	bf00      	nop
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0fc      	beq.n	8002d4c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002d52:	bf00      	nop
 8002d54:	bf00      	nop
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	20000010 	.word	0x20000010
	...

08002d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002d70:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <pxCurrentTCBConst2>)
 8002d72:	6819      	ldr	r1, [r3, #0]
 8002d74:	6808      	ldr	r0, [r1, #0]
 8002d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d7a:	f380 8809 	msr	PSP, r0
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f04f 0000 	mov.w	r0, #0
 8002d86:	f380 8811 	msr	BASEPRI, r0
 8002d8a:	4770      	bx	lr
 8002d8c:	f3af 8000 	nop.w

08002d90 <pxCurrentTCBConst2>:
 8002d90:	200000e4 	.word	0x200000e4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop

08002d98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002d98:	4808      	ldr	r0, [pc, #32]	; (8002dbc <prvPortStartFirstTask+0x24>)
 8002d9a:	6800      	ldr	r0, [r0, #0]
 8002d9c:	6800      	ldr	r0, [r0, #0]
 8002d9e:	f380 8808 	msr	MSP, r0
 8002da2:	f04f 0000 	mov.w	r0, #0
 8002da6:	f380 8814 	msr	CONTROL, r0
 8002daa:	b662      	cpsie	i
 8002dac:	b661      	cpsie	f
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	df00      	svc	0
 8002db8:	bf00      	nop
 8002dba:	0000      	.short	0x0000
 8002dbc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop

08002dc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002dca:	4b46      	ldr	r3, [pc, #280]	; (8002ee4 <xPortStartScheduler+0x120>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a46      	ldr	r2, [pc, #280]	; (8002ee8 <xPortStartScheduler+0x124>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d10a      	bne.n	8002dea <xPortStartScheduler+0x26>
        __asm volatile
 8002dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	613b      	str	r3, [r7, #16]
    }
 8002de6:	bf00      	nop
 8002de8:	e7fe      	b.n	8002de8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002dea:	4b3e      	ldr	r3, [pc, #248]	; (8002ee4 <xPortStartScheduler+0x120>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a3f      	ldr	r2, [pc, #252]	; (8002eec <xPortStartScheduler+0x128>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d10a      	bne.n	8002e0a <xPortStartScheduler+0x46>
        __asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	60fb      	str	r3, [r7, #12]
    }
 8002e06:	bf00      	nop
 8002e08:	e7fe      	b.n	8002e08 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e0a:	4b39      	ldr	r3, [pc, #228]	; (8002ef0 <xPortStartScheduler+0x12c>)
 8002e0c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	22ff      	movs	r2, #255	; 0xff
 8002e1a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	4b31      	ldr	r3, [pc, #196]	; (8002ef4 <xPortStartScheduler+0x130>)
 8002e30:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e32:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <xPortStartScheduler+0x134>)
 8002e34:	2207      	movs	r2, #7
 8002e36:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e38:	e009      	b.n	8002e4e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002e3a:	4b2f      	ldr	r3, [pc, #188]	; (8002ef8 <xPortStartScheduler+0x134>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	4a2d      	ldr	r2, [pc, #180]	; (8002ef8 <xPortStartScheduler+0x134>)
 8002e42:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e56:	2b80      	cmp	r3, #128	; 0x80
 8002e58:	d0ef      	beq.n	8002e3a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e5a:	4b27      	ldr	r3, [pc, #156]	; (8002ef8 <xPortStartScheduler+0x134>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f1c3 0307 	rsb	r3, r3, #7
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d00a      	beq.n	8002e7c <xPortStartScheduler+0xb8>
        __asm volatile
 8002e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6a:	f383 8811 	msr	BASEPRI, r3
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	60bb      	str	r3, [r7, #8]
    }
 8002e78:	bf00      	nop
 8002e7a:	e7fe      	b.n	8002e7a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e7c:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <xPortStartScheduler+0x134>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <xPortStartScheduler+0x134>)
 8002e84:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e86:	4b1c      	ldr	r3, [pc, #112]	; (8002ef8 <xPortStartScheduler+0x134>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e8e:	4a1a      	ldr	r2, [pc, #104]	; (8002ef8 <xPortStartScheduler+0x134>)
 8002e90:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002e9a:	4b18      	ldr	r3, [pc, #96]	; (8002efc <xPortStartScheduler+0x138>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a17      	ldr	r2, [pc, #92]	; (8002efc <xPortStartScheduler+0x138>)
 8002ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ea4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002ea6:	4b15      	ldr	r3, [pc, #84]	; (8002efc <xPortStartScheduler+0x138>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a14      	ldr	r2, [pc, #80]	; (8002efc <xPortStartScheduler+0x138>)
 8002eac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002eb0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002eb2:	f000 f963 	bl	800317c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002eb6:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <xPortStartScheduler+0x13c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002ebc:	f000 f982 	bl	80031c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002ec0:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <xPortStartScheduler+0x140>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a0f      	ldr	r2, [pc, #60]	; (8002f04 <xPortStartScheduler+0x140>)
 8002ec6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002eca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002ecc:	f7ff ff64 	bl	8002d98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002ed0:	f7ff fdd2 	bl	8002a78 <vTaskSwitchContext>
    prvTaskExitError();
 8002ed4:	f7ff ff1a 	bl	8002d0c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	e000ed00 	.word	0xe000ed00
 8002ee8:	410fc271 	.word	0x410fc271
 8002eec:	410fc270 	.word	0x410fc270
 8002ef0:	e000e400 	.word	0xe000e400
 8002ef4:	200001e8 	.word	0x200001e8
 8002ef8:	200001ec 	.word	0x200001ec
 8002efc:	e000ed20 	.word	0xe000ed20
 8002f00:	20000010 	.word	0x20000010
 8002f04:	e000ef34 	.word	0xe000ef34

08002f08 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f0e:	4b37      	ldr	r3, [pc, #220]	; (8002fec <vInitPrioGroupValue+0xe4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a37      	ldr	r2, [pc, #220]	; (8002ff0 <vInitPrioGroupValue+0xe8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d10a      	bne.n	8002f2e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	613b      	str	r3, [r7, #16]
    }
 8002f2a:	bf00      	nop
 8002f2c:	e7fe      	b.n	8002f2c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f2e:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <vInitPrioGroupValue+0xe4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a30      	ldr	r2, [pc, #192]	; (8002ff4 <vInitPrioGroupValue+0xec>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d10a      	bne.n	8002f4e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	60fb      	str	r3, [r7, #12]
    }
 8002f4a:	bf00      	nop
 8002f4c:	e7fe      	b.n	8002f4c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f4e:	4b2a      	ldr	r3, [pc, #168]	; (8002ff8 <vInitPrioGroupValue+0xf0>)
 8002f50:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	22ff      	movs	r2, #255	; 0xff
 8002f5e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	4b22      	ldr	r3, [pc, #136]	; (8002ffc <vInitPrioGroupValue+0xf4>)
 8002f74:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f76:	4b22      	ldr	r3, [pc, #136]	; (8003000 <vInitPrioGroupValue+0xf8>)
 8002f78:	2207      	movs	r2, #7
 8002f7a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f7c:	e009      	b.n	8002f92 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002f7e:	4b20      	ldr	r3, [pc, #128]	; (8003000 <vInitPrioGroupValue+0xf8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	4a1e      	ldr	r2, [pc, #120]	; (8003000 <vInitPrioGroupValue+0xf8>)
 8002f86:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9a:	2b80      	cmp	r3, #128	; 0x80
 8002f9c:	d0ef      	beq.n	8002f7e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f9e:	4b18      	ldr	r3, [pc, #96]	; (8003000 <vInitPrioGroupValue+0xf8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f1c3 0307 	rsb	r3, r3, #7
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d00a      	beq.n	8002fc0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fae:	f383 8811 	msr	BASEPRI, r3
 8002fb2:	f3bf 8f6f 	isb	sy
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	60bb      	str	r3, [r7, #8]
    }
 8002fbc:	bf00      	nop
 8002fbe:	e7fe      	b.n	8002fbe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <vInitPrioGroupValue+0xf8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	021b      	lsls	r3, r3, #8
 8002fc6:	4a0e      	ldr	r2, [pc, #56]	; (8003000 <vInitPrioGroupValue+0xf8>)
 8002fc8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002fca:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <vInitPrioGroupValue+0xf8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fd2:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <vInitPrioGroupValue+0xf8>)
 8002fd4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002fde:	bf00      	nop
 8002fe0:	371c      	adds	r7, #28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	e000ed00 	.word	0xe000ed00
 8002ff0:	410fc271 	.word	0x410fc271
 8002ff4:	410fc270 	.word	0x410fc270
 8002ff8:	e000e400 	.word	0xe000e400
 8002ffc:	200001e8 	.word	0x200001e8
 8003000:	200001ec 	.word	0x200001ec

08003004 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
        __asm volatile
 800300a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	607b      	str	r3, [r7, #4]
    }
 800301c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800301e:	4b0f      	ldr	r3, [pc, #60]	; (800305c <vPortEnterCritical+0x58>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3301      	adds	r3, #1
 8003024:	4a0d      	ldr	r2, [pc, #52]	; (800305c <vPortEnterCritical+0x58>)
 8003026:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <vPortEnterCritical+0x58>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d10f      	bne.n	8003050 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <vPortEnterCritical+0x5c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <vPortEnterCritical+0x4c>
        __asm volatile
 800303a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	603b      	str	r3, [r7, #0]
    }
 800304c:	bf00      	nop
 800304e:	e7fe      	b.n	800304e <vPortEnterCritical+0x4a>
    }
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	20000010 	.word	0x20000010
 8003060:	e000ed04 	.word	0xe000ed04

08003064 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800306a:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <vPortExitCritical+0x50>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10a      	bne.n	8003088 <vPortExitCritical+0x24>
        __asm volatile
 8003072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003076:	f383 8811 	msr	BASEPRI, r3
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	607b      	str	r3, [r7, #4]
    }
 8003084:	bf00      	nop
 8003086:	e7fe      	b.n	8003086 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003088:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <vPortExitCritical+0x50>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3b01      	subs	r3, #1
 800308e:	4a09      	ldr	r2, [pc, #36]	; (80030b4 <vPortExitCritical+0x50>)
 8003090:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003092:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <vPortExitCritical+0x50>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d105      	bne.n	80030a6 <vPortExitCritical+0x42>
 800309a:	2300      	movs	r3, #0
 800309c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80030a4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20000010 	.word	0x20000010
	...

080030c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80030c0:	f3ef 8009 	mrs	r0, PSP
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	4b15      	ldr	r3, [pc, #84]	; (8003120 <pxCurrentTCBConst>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	f01e 0f10 	tst.w	lr, #16
 80030d0:	bf08      	it	eq
 80030d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80030d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030da:	6010      	str	r0, [r2, #0]
 80030dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80030e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80030e4:	f380 8811 	msr	BASEPRI, r0
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f7ff fcc2 	bl	8002a78 <vTaskSwitchContext>
 80030f4:	f04f 0000 	mov.w	r0, #0
 80030f8:	f380 8811 	msr	BASEPRI, r0
 80030fc:	bc09      	pop	{r0, r3}
 80030fe:	6819      	ldr	r1, [r3, #0]
 8003100:	6808      	ldr	r0, [r1, #0]
 8003102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003106:	f01e 0f10 	tst.w	lr, #16
 800310a:	bf08      	it	eq
 800310c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003110:	f380 8809 	msr	PSP, r0
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	f3af 8000 	nop.w

08003120 <pxCurrentTCBConst>:
 8003120:	200000e4 	.word	0x200000e4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003124:	bf00      	nop
 8003126:	bf00      	nop

08003128 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
        __asm volatile
 800312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	607b      	str	r3, [r7, #4]
    }
 8003140:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003142:	f002 f8cf 	bl	80052e4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003146:	f7ff fbfd 	bl	8002944 <xTaskIncrementTick>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d006      	beq.n	800315e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003150:	f002 f926 	bl	80053a0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003154:	4b08      	ldr	r3, [pc, #32]	; (8003178 <SysTick_Handler+0x50>)
 8003156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	e001      	b.n	8003162 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800315e:	f002 f903 	bl	8005368 <SEGGER_SYSVIEW_RecordExitISR>
 8003162:	2300      	movs	r3, #0
 8003164:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	f383 8811 	msr	BASEPRI, r3
    }
 800316c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	e000ed04 	.word	0xe000ed04

0800317c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <vPortSetupTimerInterrupt+0x34>)
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003186:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <vPortSetupTimerInterrupt+0x38>)
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800318c:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <vPortSetupTimerInterrupt+0x3c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <vPortSetupTimerInterrupt+0x40>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	099b      	lsrs	r3, r3, #6
 8003198:	4a09      	ldr	r2, [pc, #36]	; (80031c0 <vPortSetupTimerInterrupt+0x44>)
 800319a:	3b01      	subs	r3, #1
 800319c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800319e:	4b04      	ldr	r3, [pc, #16]	; (80031b0 <vPortSetupTimerInterrupt+0x34>)
 80031a0:	2207      	movs	r2, #7
 80031a2:	601a      	str	r2, [r3, #0]
}
 80031a4:	bf00      	nop
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	e000e010 	.word	0xe000e010
 80031b4:	e000e018 	.word	0xe000e018
 80031b8:	20000000 	.word	0x20000000
 80031bc:	10624dd3 	.word	0x10624dd3
 80031c0:	e000e014 	.word	0xe000e014

080031c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80031c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80031d4 <vPortEnableVFP+0x10>
 80031c8:	6801      	ldr	r1, [r0, #0]
 80031ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80031ce:	6001      	str	r1, [r0, #0]
 80031d0:	4770      	bx	lr
 80031d2:	0000      	.short	0x0000
 80031d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80031d8:	bf00      	nop
 80031da:	bf00      	nop

080031dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80031e2:	f3ef 8305 	mrs	r3, IPSR
 80031e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b0f      	cmp	r3, #15
 80031ec:	d914      	bls.n	8003218 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80031ee:	4a17      	ldr	r2, [pc, #92]	; (800324c <vPortValidateInterruptPriority+0x70>)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4413      	add	r3, r2
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80031f8:	4b15      	ldr	r3, [pc, #84]	; (8003250 <vPortValidateInterruptPriority+0x74>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	7afa      	ldrb	r2, [r7, #11]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d20a      	bcs.n	8003218 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003206:	f383 8811 	msr	BASEPRI, r3
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	607b      	str	r3, [r7, #4]
    }
 8003214:	bf00      	nop
 8003216:	e7fe      	b.n	8003216 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003218:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <vPortValidateInterruptPriority+0x78>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003220:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <vPortValidateInterruptPriority+0x7c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d90a      	bls.n	800323e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	603b      	str	r3, [r7, #0]
    }
 800323a:	bf00      	nop
 800323c:	e7fe      	b.n	800323c <vPortValidateInterruptPriority+0x60>
    }
 800323e:	bf00      	nop
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	e000e3f0 	.word	0xe000e3f0
 8003250:	200001e8 	.word	0x200001e8
 8003254:	e000ed0c 	.word	0xe000ed0c
 8003258:	200001ec 	.word	0x200001ec

0800325c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	; 0x28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003264:	2300      	movs	r3, #0
 8003266:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003268:	f7ff faba 	bl	80027e0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800326c:	4b65      	ldr	r3, [pc, #404]	; (8003404 <pvPortMalloc+0x1a8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003274:	f000 f934 	bl	80034e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003278:	4b63      	ldr	r3, [pc, #396]	; (8003408 <pvPortMalloc+0x1ac>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4013      	ands	r3, r2
 8003280:	2b00      	cmp	r3, #0
 8003282:	f040 80a7 	bne.w	80033d4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d02d      	beq.n	80032e8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800328c:	2208      	movs	r2, #8
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	429a      	cmp	r2, r3
 8003296:	d227      	bcs.n	80032e8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003298:	2208      	movs	r2, #8
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d021      	beq.n	80032ee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f023 0307 	bic.w	r3, r3, #7
 80032b0:	3308      	adds	r3, #8
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d214      	bcs.n	80032e2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f023 0307 	bic.w	r3, r3, #7
 80032be:	3308      	adds	r3, #8
 80032c0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d010      	beq.n	80032ee <pvPortMalloc+0x92>
        __asm volatile
 80032cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d0:	f383 8811 	msr	BASEPRI, r3
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	617b      	str	r3, [r7, #20]
    }
 80032de:	bf00      	nop
 80032e0:	e7fe      	b.n	80032e0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80032e6:	e002      	b.n	80032ee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	607b      	str	r3, [r7, #4]
 80032ec:	e000      	b.n	80032f0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80032ee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d06e      	beq.n	80033d4 <pvPortMalloc+0x178>
 80032f6:	4b45      	ldr	r3, [pc, #276]	; (800340c <pvPortMalloc+0x1b0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d869      	bhi.n	80033d4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003300:	4b43      	ldr	r3, [pc, #268]	; (8003410 <pvPortMalloc+0x1b4>)
 8003302:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003304:	4b42      	ldr	r3, [pc, #264]	; (8003410 <pvPortMalloc+0x1b4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800330a:	e004      	b.n	8003316 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	429a      	cmp	r2, r3
 800331e:	d903      	bls.n	8003328 <pvPortMalloc+0xcc>
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f1      	bne.n	800330c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003328:	4b36      	ldr	r3, [pc, #216]	; (8003404 <pvPortMalloc+0x1a8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332e:	429a      	cmp	r2, r3
 8003330:	d050      	beq.n	80033d4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2208      	movs	r2, #8
 8003338:	4413      	add	r3, r2
 800333a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	1ad2      	subs	r2, r2, r3
 800334c:	2308      	movs	r3, #8
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	429a      	cmp	r2, r3
 8003352:	d91f      	bls.n	8003394 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4413      	add	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <pvPortMalloc+0x120>
        __asm volatile
 8003366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	613b      	str	r3, [r7, #16]
    }
 8003378:	bf00      	nop
 800337a:	e7fe      	b.n	800337a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	1ad2      	subs	r2, r2, r3
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800338e:	69b8      	ldr	r0, [r7, #24]
 8003390:	f000 f908 	bl	80035a4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003394:	4b1d      	ldr	r3, [pc, #116]	; (800340c <pvPortMalloc+0x1b0>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	4a1b      	ldr	r2, [pc, #108]	; (800340c <pvPortMalloc+0x1b0>)
 80033a0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80033a2:	4b1a      	ldr	r3, [pc, #104]	; (800340c <pvPortMalloc+0x1b0>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <pvPortMalloc+0x1b8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d203      	bcs.n	80033b6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80033ae:	4b17      	ldr	r3, [pc, #92]	; (800340c <pvPortMalloc+0x1b0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a18      	ldr	r2, [pc, #96]	; (8003414 <pvPortMalloc+0x1b8>)
 80033b4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	4b13      	ldr	r3, [pc, #76]	; (8003408 <pvPortMalloc+0x1ac>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	431a      	orrs	r2, r3
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80033ca:	4b13      	ldr	r3, [pc, #76]	; (8003418 <pvPortMalloc+0x1bc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3301      	adds	r3, #1
 80033d0:	4a11      	ldr	r2, [pc, #68]	; (8003418 <pvPortMalloc+0x1bc>)
 80033d2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80033d4:	f7ff fa12 	bl	80027fc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <pvPortMalloc+0x19c>
        __asm volatile
 80033e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	60fb      	str	r3, [r7, #12]
    }
 80033f4:	bf00      	nop
 80033f6:	e7fe      	b.n	80033f6 <pvPortMalloc+0x19a>
    return pvReturn;
 80033f8:	69fb      	ldr	r3, [r7, #28]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3728      	adds	r7, #40	; 0x28
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20012df8 	.word	0x20012df8
 8003408:	20012e0c 	.word	0x20012e0c
 800340c:	20012dfc 	.word	0x20012dfc
 8003410:	20012df0 	.word	0x20012df0
 8003414:	20012e00 	.word	0x20012e00
 8003418:	20012e04 	.word	0x20012e04

0800341c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d04d      	beq.n	80034ca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800342e:	2308      	movs	r3, #8
 8003430:	425b      	negs	r3, r3
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4413      	add	r3, r2
 8003436:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	4b24      	ldr	r3, [pc, #144]	; (80034d4 <vPortFree+0xb8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10a      	bne.n	8003460 <vPortFree+0x44>
        __asm volatile
 800344a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	60fb      	str	r3, [r7, #12]
    }
 800345c:	bf00      	nop
 800345e:	e7fe      	b.n	800345e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <vPortFree+0x62>
        __asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	60bb      	str	r3, [r7, #8]
    }
 800347a:	bf00      	nop
 800347c:	e7fe      	b.n	800347c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <vPortFree+0xb8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01e      	beq.n	80034ca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d11a      	bne.n	80034ca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <vPortFree+0xb8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	43db      	mvns	r3, r3
 800349e:	401a      	ands	r2, r3
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80034a4:	f7ff f99c 	bl	80027e0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <vPortFree+0xbc>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4413      	add	r3, r2
 80034b2:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <vPortFree+0xbc>)
 80034b4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80034b6:	6938      	ldr	r0, [r7, #16]
 80034b8:	f000 f874 	bl	80035a4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80034bc:	4b07      	ldr	r3, [pc, #28]	; (80034dc <vPortFree+0xc0>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3301      	adds	r3, #1
 80034c2:	4a06      	ldr	r2, [pc, #24]	; (80034dc <vPortFree+0xc0>)
 80034c4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80034c6:	f7ff f999 	bl	80027fc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80034ca:	bf00      	nop
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20012e0c 	.word	0x20012e0c
 80034d8:	20012dfc 	.word	0x20012dfc
 80034dc:	20012e08 	.word	0x20012e08

080034e0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80034e6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80034ea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80034ec:	4b27      	ldr	r3, [pc, #156]	; (800358c <prvHeapInit+0xac>)
 80034ee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00c      	beq.n	8003514 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	3307      	adds	r3, #7
 80034fe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0307 	bic.w	r3, r3, #7
 8003506:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	4a1f      	ldr	r2, [pc, #124]	; (800358c <prvHeapInit+0xac>)
 8003510:	4413      	add	r3, r2
 8003512:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003518:	4a1d      	ldr	r2, [pc, #116]	; (8003590 <prvHeapInit+0xb0>)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800351e:	4b1c      	ldr	r3, [pc, #112]	; (8003590 <prvHeapInit+0xb0>)
 8003520:	2200      	movs	r2, #0
 8003522:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	4413      	add	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800352c:	2208      	movs	r2, #8
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0307 	bic.w	r3, r3, #7
 800353a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4a15      	ldr	r2, [pc, #84]	; (8003594 <prvHeapInit+0xb4>)
 8003540:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003542:	4b14      	ldr	r3, [pc, #80]	; (8003594 <prvHeapInit+0xb4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2200      	movs	r2, #0
 8003548:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800354a:	4b12      	ldr	r3, [pc, #72]	; (8003594 <prvHeapInit+0xb4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	1ad2      	subs	r2, r2, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003560:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <prvHeapInit+0xb4>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4a0a      	ldr	r2, [pc, #40]	; (8003598 <prvHeapInit+0xb8>)
 800356e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a09      	ldr	r2, [pc, #36]	; (800359c <prvHeapInit+0xbc>)
 8003576:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003578:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <prvHeapInit+0xc0>)
 800357a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800357e:	601a      	str	r2, [r3, #0]
}
 8003580:	bf00      	nop
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	200001f0 	.word	0x200001f0
 8003590:	20012df0 	.word	0x20012df0
 8003594:	20012df8 	.word	0x20012df8
 8003598:	20012e00 	.word	0x20012e00
 800359c:	20012dfc 	.word	0x20012dfc
 80035a0:	20012e0c 	.word	0x20012e0c

080035a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80035ac:	4b28      	ldr	r3, [pc, #160]	; (8003650 <prvInsertBlockIntoFreeList+0xac>)
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	e002      	b.n	80035b8 <prvInsertBlockIntoFreeList+0x14>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d8f7      	bhi.n	80035b2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	4413      	add	r3, r2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d108      	bne.n	80035e6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	441a      	add	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	441a      	add	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d118      	bne.n	800362c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	4b15      	ldr	r3, [pc, #84]	; (8003654 <prvInsertBlockIntoFreeList+0xb0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d00d      	beq.n	8003622 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	441a      	add	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	e008      	b.n	8003634 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003622:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <prvInsertBlockIntoFreeList+0xb0>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	e003      	b.n	8003634 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	429a      	cmp	r2, r3
 800363a:	d002      	beq.n	8003642 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003642:	bf00      	nop
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	20012df0 	.word	0x20012df0
 8003654:	20012df8 	.word	0x20012df8

08003658 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800365c:	4803      	ldr	r0, [pc, #12]	; (800366c <_cbSendSystemDesc+0x14>)
 800365e:	f001 fdeb 	bl	8005238 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003662:	4803      	ldr	r0, [pc, #12]	; (8003670 <_cbSendSystemDesc+0x18>)
 8003664:	f001 fde8 	bl	8005238 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003668:	bf00      	nop
 800366a:	bd80      	pop	{r7, pc}
 800366c:	08006d28 	.word	0x08006d28
 8003670:	08006d64 	.word	0x08006d64

08003674 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003678:	4b06      	ldr	r3, [pc, #24]	; (8003694 <SEGGER_SYSVIEW_Conf+0x20>)
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <SEGGER_SYSVIEW_Conf+0x20>)
 800367e:	6819      	ldr	r1, [r3, #0]
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <SEGGER_SYSVIEW_Conf+0x24>)
 8003682:	4a06      	ldr	r2, [pc, #24]	; (800369c <SEGGER_SYSVIEW_Conf+0x28>)
 8003684:	f001 fa5e 	bl	8004b44 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003688:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800368c:	f001 fa9e 	bl	8004bcc <SEGGER_SYSVIEW_SetRAMBase>
}
 8003690:	bf00      	nop
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000000 	.word	0x20000000
 8003698:	08003659 	.word	0x08003659
 800369c:	08006e00 	.word	0x08006e00

080036a0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80036a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80036a6:	2300      	movs	r3, #0
 80036a8:	607b      	str	r3, [r7, #4]
 80036aa:	e033      	b.n	8003714 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80036ac:	491e      	ldr	r1, [pc, #120]	; (8003728 <_cbSendTaskList+0x88>)
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	491a      	ldr	r1, [pc, #104]	; (8003728 <_cbSendTaskList+0x88>)
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	3304      	adds	r3, #4
 80036cc:	6819      	ldr	r1, [r3, #0]
 80036ce:	4c16      	ldr	r4, [pc, #88]	; (8003728 <_cbSendTaskList+0x88>)
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4423      	add	r3, r4
 80036dc:	3308      	adds	r3, #8
 80036de:	681c      	ldr	r4, [r3, #0]
 80036e0:	4d11      	ldr	r5, [pc, #68]	; (8003728 <_cbSendTaskList+0x88>)
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	442b      	add	r3, r5
 80036ee:	330c      	adds	r3, #12
 80036f0:	681d      	ldr	r5, [r3, #0]
 80036f2:	4e0d      	ldr	r6, [pc, #52]	; (8003728 <_cbSendTaskList+0x88>)
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4433      	add	r3, r6
 8003700:	3310      	adds	r3, #16
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	462b      	mov	r3, r5
 8003708:	4622      	mov	r2, r4
 800370a:	f000 f8bd 	bl	8003888 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3301      	adds	r3, #1
 8003712:	607b      	str	r3, [r7, #4]
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <_cbSendTaskList+0x8c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	429a      	cmp	r2, r3
 800371c:	d3c6      	bcc.n	80036ac <_cbSendTaskList+0xc>
  }
}
 800371e:	bf00      	nop
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003728:	20012e10 	.word	0x20012e10
 800372c:	20012eb0 	.word	0x20012eb0

08003730 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003738:	f7ff f8f2 	bl	8002920 <xTaskGetTickCountFromISR>
 800373c:	4603      	mov	r3, r0
 800373e:	2200      	movs	r2, #0
 8003740:	469a      	mov	sl, r3
 8003742:	4693      	mov	fp, r2
 8003744:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003748:	e9d7 0100 	ldrd	r0, r1, [r7]
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	f04f 0a00 	mov.w	sl, #0
 8003754:	f04f 0b00 	mov.w	fp, #0
 8003758:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800375c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003760:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003764:	4652      	mov	r2, sl
 8003766:	465b      	mov	r3, fp
 8003768:	1a14      	subs	r4, r2, r0
 800376a:	eb63 0501 	sbc.w	r5, r3, r1
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	00ab      	lsls	r3, r5, #2
 8003778:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800377c:	00a2      	lsls	r2, r4, #2
 800377e:	4614      	mov	r4, r2
 8003780:	461d      	mov	r5, r3
 8003782:	eb14 0800 	adds.w	r8, r4, r0
 8003786:	eb45 0901 	adc.w	r9, r5, r1
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003796:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800379a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800379e:	4690      	mov	r8, r2
 80037a0:	4699      	mov	r9, r3
 80037a2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80037a6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80037aa:	4610      	mov	r0, r2
 80037ac:	4619      	mov	r1, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080037b8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af02      	add	r7, sp, #8
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80037c6:	2205      	movs	r2, #5
 80037c8:	492b      	ldr	r1, [pc, #172]	; (8003878 <SYSVIEW_AddTask+0xc0>)
 80037ca:	68b8      	ldr	r0, [r7, #8]
 80037cc:	f002 f878 	bl	80058c0 <memcmp>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d04b      	beq.n	800386e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80037d6:	4b29      	ldr	r3, [pc, #164]	; (800387c <SYSVIEW_AddTask+0xc4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b07      	cmp	r3, #7
 80037dc:	d903      	bls.n	80037e6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80037de:	4828      	ldr	r0, [pc, #160]	; (8003880 <SYSVIEW_AddTask+0xc8>)
 80037e0:	f001 ffd6 	bl	8005790 <SEGGER_SYSVIEW_Warn>
    return;
 80037e4:	e044      	b.n	8003870 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80037e6:	4b25      	ldr	r3, [pc, #148]	; (800387c <SYSVIEW_AddTask+0xc4>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	4926      	ldr	r1, [pc, #152]	; (8003884 <SYSVIEW_AddTask+0xcc>)
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80037fa:	4b20      	ldr	r3, [pc, #128]	; (800387c <SYSVIEW_AddTask+0xc4>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	4921      	ldr	r1, [pc, #132]	; (8003884 <SYSVIEW_AddTask+0xcc>)
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	3304      	adds	r3, #4
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003810:	4b1a      	ldr	r3, [pc, #104]	; (800387c <SYSVIEW_AddTask+0xc4>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	491b      	ldr	r1, [pc, #108]	; (8003884 <SYSVIEW_AddTask+0xcc>)
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	3308      	adds	r3, #8
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003826:	4b15      	ldr	r3, [pc, #84]	; (800387c <SYSVIEW_AddTask+0xc4>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4916      	ldr	r1, [pc, #88]	; (8003884 <SYSVIEW_AddTask+0xcc>)
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	330c      	adds	r3, #12
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800383c:	4b0f      	ldr	r3, [pc, #60]	; (800387c <SYSVIEW_AddTask+0xc4>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4910      	ldr	r1, [pc, #64]	; (8003884 <SYSVIEW_AddTask+0xcc>)
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	3310      	adds	r3, #16
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003852:	4b0a      	ldr	r3, [pc, #40]	; (800387c <SYSVIEW_AddTask+0xc4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3301      	adds	r3, #1
 8003858:	4a08      	ldr	r2, [pc, #32]	; (800387c <SYSVIEW_AddTask+0xc4>)
 800385a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f80e 	bl	8003888 <SYSVIEW_SendTaskInfo>
 800386c:	e000      	b.n	8003870 <SYSVIEW_AddTask+0xb8>
    return;
 800386e:	bf00      	nop

}
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	08006d74 	.word	0x08006d74
 800387c:	20012eb0 	.word	0x20012eb0
 8003880:	08006d7c 	.word	0x08006d7c
 8003884:	20012e10 	.word	0x20012e10

08003888 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003888:	b580      	push	{r7, lr}
 800388a:	b08a      	sub	sp, #40	; 0x28
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003896:	f107 0314 	add.w	r3, r7, #20
 800389a:	2214      	movs	r2, #20
 800389c:	2100      	movs	r1, #0
 800389e:	4618      	mov	r0, r3
 80038a0:	f002 f82c 	bl	80058fc <memset>
  TaskInfo.TaskID     = TaskID;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80038b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80038b8:	f107 0314 	add.w	r3, r7, #20
 80038bc:	4618      	mov	r0, r3
 80038be:	f001 fbc3 	bl	8005048 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80038c2:	bf00      	nop
 80038c4:	3728      	adds	r7, #40	; 0x28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80038d2:	4b26      	ldr	r3, [pc, #152]	; (800396c <_DoInit+0xa0>)
 80038d4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80038d6:	22a8      	movs	r2, #168	; 0xa8
 80038d8:	2100      	movs	r1, #0
 80038da:	6838      	ldr	r0, [r7, #0]
 80038dc:	f002 f80e 	bl	80058fc <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2203      	movs	r2, #3
 80038e4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2203      	movs	r2, #3
 80038ea:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	4a20      	ldr	r2, [pc, #128]	; (8003970 <_DoInit+0xa4>)
 80038f0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	4a1f      	ldr	r2, [pc, #124]	; (8003974 <_DoInit+0xa8>)
 80038f6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038fe:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2200      	movs	r2, #0
 8003904:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2200      	movs	r2, #0
 800390a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2200      	movs	r2, #0
 8003910:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	4a16      	ldr	r2, [pc, #88]	; (8003970 <_DoInit+0xa4>)
 8003916:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	4a17      	ldr	r2, [pc, #92]	; (8003978 <_DoInit+0xac>)
 800391c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2210      	movs	r2, #16
 8003922:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2200      	movs	r2, #0
 8003928:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2200      	movs	r2, #0
 800392e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2200      	movs	r2, #0
 8003934:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003936:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800393a:	2300      	movs	r3, #0
 800393c:	607b      	str	r3, [r7, #4]
 800393e:	e00c      	b.n	800395a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f1c3 030f 	rsb	r3, r3, #15
 8003946:	4a0d      	ldr	r2, [pc, #52]	; (800397c <_DoInit+0xb0>)
 8003948:	5cd1      	ldrb	r1, [r2, r3]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4413      	add	r3, r2
 8003950:	460a      	mov	r2, r1
 8003952:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3301      	adds	r3, #1
 8003958:	607b      	str	r3, [r7, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b0f      	cmp	r3, #15
 800395e:	d9ef      	bls.n	8003940 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003960:	f3bf 8f5f 	dmb	sy
}
 8003964:	bf00      	nop
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	20012eb4 	.word	0x20012eb4
 8003970:	08006dcc 	.word	0x08006dcc
 8003974:	20012f5c 	.word	0x20012f5c
 8003978:	2001335c 	.word	0x2001335c
 800397c:	08006e08 	.word	0x08006e08

08003980 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b08a      	sub	sp, #40	; 0x28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800398c:	2300      	movs	r3, #0
 800398e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d905      	bls.n	80039b0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	3b01      	subs	r3, #1
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
 80039ae:	e007      	b.n	80039c0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	69b9      	ldr	r1, [r7, #24]
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	1acb      	subs	r3, r1, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	3b01      	subs	r3, #1
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ca:	4293      	cmp	r3, r2
 80039cc:	bf28      	it	cs
 80039ce:	4613      	movcs	r3, r2
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80039d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4293      	cmp	r3, r2
 80039d8:	bf28      	it	cs
 80039da:	4613      	movcs	r3, r2
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	4413      	add	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80039e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	6978      	ldr	r0, [r7, #20]
 80039ee:	f001 ff77 	bl	80058e0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80039f2:	6a3a      	ldr	r2, [r7, #32]
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	4413      	add	r3, r2
 80039f8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	4413      	add	r3, r2
 8003a00:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	4413      	add	r3, r2
 8003a10:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	69fa      	ldr	r2, [r7, #28]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d101      	bne.n	8003a20 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a20:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1b2      	bne.n	8003996 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003a30:	6a3b      	ldr	r3, [r7, #32]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3728      	adds	r7, #40	; 0x28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b088      	sub	sp, #32
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d911      	bls.n	8003a82 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	4413      	add	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	68b9      	ldr	r1, [r7, #8]
 8003a6c:	6938      	ldr	r0, [r7, #16]
 8003a6e:	f001 ff37 	bl	80058e0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a72:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	441a      	add	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003a80:	e01f      	b.n	8003ac2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	6938      	ldr	r0, [r7, #16]
 8003a96:	f001 ff23 	bl	80058e0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	4413      	add	r3, r2
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	6938      	ldr	r0, [r7, #16]
 8003ab4:	f001 ff14 	bl	80058e0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ab8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	60da      	str	r2, [r3, #12]
}
 8003ac2:	bf00      	nop
 8003ac4:	3720      	adds	r7, #32
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003aca:	b480      	push	{r7}
 8003acc:	b087      	sub	sp, #28
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d808      	bhi.n	8003af8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1ad2      	subs	r2, r2, r3
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4413      	add	r3, r2
 8003af2:	3b01      	subs	r3, #1
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	e004      	b.n	8003b02 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003b02:	697b      	ldr	r3, [r7, #20]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	371c      	adds	r7, #28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08c      	sub	sp, #48	; 0x30
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003b1c:	4b3e      	ldr	r3, [pc, #248]	; (8003c18 <SEGGER_RTT_ReadNoLock+0x108>)
 8003b1e:	623b      	str	r3, [r7, #32]
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <SEGGER_RTT_ReadNoLock+0x1e>
 8003b2a:	f7ff fecf 	bl	80038cc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4613      	mov	r3, r2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	4413      	add	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	3360      	adds	r3, #96	; 0x60
 8003b3a:	4a37      	ldr	r2, [pc, #220]	; (8003c18 <SEGGER_RTT_ReadNoLock+0x108>)
 8003b3c:	4413      	add	r3, r2
 8003b3e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003b50:	2300      	movs	r3, #0
 8003b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d92b      	bls.n	8003bb4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	bf28      	it	cs
 8003b6e:	4613      	movcs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b78:	4413      	add	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	6939      	ldr	r1, [r7, #16]
 8003b80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b82:	f001 fead 	bl	80058e0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	4413      	add	r3, r2
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d101      	bne.n	8003bb4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	bf28      	it	cs
 8003bc4:	4613      	movcs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d019      	beq.n	8003c02 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd4:	4413      	add	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	6939      	ldr	r1, [r7, #16]
 8003bdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bde:	f001 fe7f 	bl	80058e0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	4413      	add	r3, r2
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	4413      	add	r3, r2
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	4413      	add	r3, r2
 8003c00:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c0c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3730      	adds	r7, #48	; 0x30
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	20012eb4 	.word	0x20012eb4

08003c1c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	4613      	mov	r3, r2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	4413      	add	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4a1f      	ldr	r2, [pc, #124]	; (8003cb8 <SEGGER_RTT_WriteNoLock+0x9c>)
 8003c3a:	4413      	add	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d029      	beq.n	8003c9a <SEGGER_RTT_WriteNoLock+0x7e>
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d82e      	bhi.n	8003ca8 <SEGGER_RTT_WriteNoLock+0x8c>
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <SEGGER_RTT_WriteNoLock+0x38>
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d013      	beq.n	8003c7a <SEGGER_RTT_WriteNoLock+0x5e>
 8003c52:	e029      	b.n	8003ca8 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003c54:	6978      	ldr	r0, [r7, #20]
 8003c56:	f7ff ff38 	bl	8003aca <_GetAvailWriteSpace>
 8003c5a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d202      	bcs.n	8003c6a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8003c64:	2300      	movs	r3, #0
 8003c66:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003c68:	e021      	b.n	8003cae <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	69b9      	ldr	r1, [r7, #24]
 8003c72:	6978      	ldr	r0, [r7, #20]
 8003c74:	f7ff fee1 	bl	8003a3a <_WriteNoCheck>
    break;
 8003c78:	e019      	b.n	8003cae <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003c7a:	6978      	ldr	r0, [r7, #20]
 8003c7c:	f7ff ff25 	bl	8003aca <_GetAvailWriteSpace>
 8003c80:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4293      	cmp	r3, r2
 8003c88:	bf28      	it	cs
 8003c8a:	4613      	movcs	r3, r2
 8003c8c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	69b9      	ldr	r1, [r7, #24]
 8003c92:	6978      	ldr	r0, [r7, #20]
 8003c94:	f7ff fed1 	bl	8003a3a <_WriteNoCheck>
    break;
 8003c98:	e009      	b.n	8003cae <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	69b9      	ldr	r1, [r7, #24]
 8003c9e:	6978      	ldr	r0, [r7, #20]
 8003ca0:	f7ff fe6e 	bl	8003980 <_WriteBlocking>
 8003ca4:	61f8      	str	r0, [r7, #28]
    break;
 8003ca6:	e002      	b.n	8003cae <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61fb      	str	r3, [r7, #28]
    break;
 8003cac:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003cae:	69fb      	ldr	r3, [r7, #28]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3720      	adds	r7, #32
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20012eb4 	.word	0x20012eb4

08003cbc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003cc8:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <SEGGER_RTT_Write+0x48>)
 8003cca:	61fb      	str	r3, [r7, #28]
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <SEGGER_RTT_Write+0x1e>
 8003cd6:	f7ff fdf9 	bl	80038cc <_DoInit>
  SEGGER_RTT_LOCK();
 8003cda:	f3ef 8311 	mrs	r3, BASEPRI
 8003cde:	f04f 0120 	mov.w	r1, #32
 8003ce2:	f381 8811 	msr	BASEPRI, r1
 8003ce6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f7ff ff95 	bl	8003c1c <SEGGER_RTT_WriteNoLock>
 8003cf2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003cfa:	697b      	ldr	r3, [r7, #20]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3720      	adds	r7, #32
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	20012eb4 	.word	0x20012eb4

08003d08 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003d16:	4b3d      	ldr	r3, [pc, #244]	; (8003e0c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003d24:	f7ff fdd2 	bl	80038cc <_DoInit>
  SEGGER_RTT_LOCK();
 8003d28:	f3ef 8311 	mrs	r3, BASEPRI
 8003d2c:	f04f 0120 	mov.w	r1, #32
 8003d30:	f381 8811 	msr	BASEPRI, r1
 8003d34:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d36:	4b35      	ldr	r3, [pc, #212]	; (8003e0c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003d38:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003d3e:	6939      	ldr	r1, [r7, #16]
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	4613      	mov	r3, r2
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	4413      	add	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	440b      	add	r3, r1
 8003d4e:	3304      	adds	r3, #4
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d008      	beq.n	8003d68 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	dbeb      	blt.n	8003d3e <SEGGER_RTT_AllocUpBuffer+0x36>
 8003d66:	e000      	b.n	8003d6a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003d68:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	69fa      	ldr	r2, [r7, #28]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	da3f      	bge.n	8003df4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003d74:	6939      	ldr	r1, [r7, #16]
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	4413      	add	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	440b      	add	r3, r1
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003d88:	6939      	ldr	r1, [r7, #16]
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	4613      	mov	r3, r2
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	4413      	add	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	440b      	add	r3, r1
 8003d98:	3304      	adds	r3, #4
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003d9e:	6939      	ldr	r1, [r7, #16]
 8003da0:	69fa      	ldr	r2, [r7, #28]
 8003da2:	4613      	mov	r3, r2
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	4413      	add	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	440b      	add	r3, r1
 8003dac:	3320      	adds	r3, #32
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003db2:	6939      	ldr	r1, [r7, #16]
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	4613      	mov	r3, r2
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	4413      	add	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	440b      	add	r3, r1
 8003dc0:	3328      	adds	r3, #40	; 0x28
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003dc6:	6939      	ldr	r1, [r7, #16]
 8003dc8:	69fa      	ldr	r2, [r7, #28]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	4413      	add	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	440b      	add	r3, r1
 8003dd4:	3324      	adds	r3, #36	; 0x24
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003dda:	6939      	ldr	r1, [r7, #16]
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	4613      	mov	r3, r2
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	4413      	add	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	440b      	add	r3, r1
 8003de8:	332c      	adds	r3, #44	; 0x2c
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003dee:	f3bf 8f5f 	dmb	sy
 8003df2:	e002      	b.n	8003dfa <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003df4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003df8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003e00:	69fb      	ldr	r3, [r7, #28]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20012eb4 	.word	0x20012eb4

08003e10 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08a      	sub	sp, #40	; 0x28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003e1e:	4b21      	ldr	r3, [pc, #132]	; (8003ea4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003e20:	623b      	str	r3, [r7, #32]
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003e2c:	f7ff fd4e 	bl	80038cc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e30:	4b1c      	ldr	r3, [pc, #112]	; (8003ea4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003e32:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d82c      	bhi.n	8003e94 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003e3a:	f3ef 8311 	mrs	r3, BASEPRI
 8003e3e:	f04f 0120 	mov.w	r1, #32
 8003e42:	f381 8811 	msr	BASEPRI, r1
 8003e46:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	4413      	add	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	3360      	adds	r3, #96	; 0x60
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	4413      	add	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00e      	beq.n	8003e7e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2200      	movs	r2, #0
 8003e76:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e82:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e84:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
 8003e92:	e002      	b.n	8003e9a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3728      	adds	r7, #40	; 0x28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20012eb4 	.word	0x20012eb4

08003ea8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	60fa      	str	r2, [r7, #12]
 8003ebe:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b80      	cmp	r3, #128	; 0x80
 8003ec4:	d90a      	bls.n	8003edc <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8003ec6:	2380      	movs	r3, #128	; 0x80
 8003ec8:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003eca:	e007      	b.n	8003edc <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	1c53      	adds	r3, r2, #1
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1c59      	adds	r1, r3, #1
 8003ed6:	60f9      	str	r1, [r7, #12]
 8003ed8:	7812      	ldrb	r2, [r2, #0]
 8003eda:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	1e5a      	subs	r2, r3, #1
 8003ee0:	607a      	str	r2, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <_EncodeStr+0x46>
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1ee      	bne.n	8003ecc <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8003efa:	68fb      	ldr	r3, [r7, #12]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	371c      	adds	r7, #28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3307      	adds	r3, #7
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003f26:	4b35      	ldr	r3, [pc, #212]	; (8003ffc <_HandleIncomingPacket+0xdc>)
 8003f28:	7e1b      	ldrb	r3, [r3, #24]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	1cfb      	adds	r3, r7, #3
 8003f2e:	2201      	movs	r2, #1
 8003f30:	4619      	mov	r1, r3
 8003f32:	f7ff fded 	bl	8003b10 <SEGGER_RTT_ReadNoLock>
 8003f36:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d052      	beq.n	8003fe4 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8003f3e:	78fb      	ldrb	r3, [r7, #3]
 8003f40:	2b80      	cmp	r3, #128	; 0x80
 8003f42:	d031      	beq.n	8003fa8 <_HandleIncomingPacket+0x88>
 8003f44:	2b80      	cmp	r3, #128	; 0x80
 8003f46:	dc40      	bgt.n	8003fca <_HandleIncomingPacket+0xaa>
 8003f48:	2b07      	cmp	r3, #7
 8003f4a:	dc15      	bgt.n	8003f78 <_HandleIncomingPacket+0x58>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	dd3c      	ble.n	8003fca <_HandleIncomingPacket+0xaa>
 8003f50:	3b01      	subs	r3, #1
 8003f52:	2b06      	cmp	r3, #6
 8003f54:	d839      	bhi.n	8003fca <_HandleIncomingPacket+0xaa>
 8003f56:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <_HandleIncomingPacket+0x3c>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	08003f7f 	.word	0x08003f7f
 8003f60:	08003f85 	.word	0x08003f85
 8003f64:	08003f8b 	.word	0x08003f8b
 8003f68:	08003f91 	.word	0x08003f91
 8003f6c:	08003f97 	.word	0x08003f97
 8003f70:	08003f9d 	.word	0x08003f9d
 8003f74:	08003fa3 	.word	0x08003fa3
 8003f78:	2b7f      	cmp	r3, #127	; 0x7f
 8003f7a:	d035      	beq.n	8003fe8 <_HandleIncomingPacket+0xc8>
 8003f7c:	e025      	b.n	8003fca <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003f7e:	f000 fee9 	bl	8004d54 <SEGGER_SYSVIEW_Start>
      break;
 8003f82:	e036      	b.n	8003ff2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003f84:	f000 ffa0 	bl	8004ec8 <SEGGER_SYSVIEW_Stop>
      break;
 8003f88:	e033      	b.n	8003ff2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003f8a:	f001 f979 	bl	8005280 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003f8e:	e030      	b.n	8003ff2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003f90:	f001 f93e 	bl	8005210 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003f94:	e02d      	b.n	8003ff2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003f96:	f000 ffbd 	bl	8004f14 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003f9a:	e02a      	b.n	8003ff2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003f9c:	f001 fba6 	bl	80056ec <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003fa0:	e027      	b.n	8003ff2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003fa2:	f001 fb85 	bl	80056b0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003fa6:	e024      	b.n	8003ff2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003fa8:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <_HandleIncomingPacket+0xdc>)
 8003faa:	7e1b      	ldrb	r3, [r3, #24]
 8003fac:	4618      	mov	r0, r3
 8003fae:	1cfb      	adds	r3, r7, #3
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	f7ff fdac 	bl	8003b10 <SEGGER_RTT_ReadNoLock>
 8003fb8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d015      	beq.n	8003fec <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f001 faea 	bl	800559c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003fc8:	e010      	b.n	8003fec <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003fca:	78fb      	ldrb	r3, [r7, #3]
 8003fcc:	b25b      	sxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	da0e      	bge.n	8003ff0 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003fd2:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <_HandleIncomingPacket+0xdc>)
 8003fd4:	7e1b      	ldrb	r3, [r3, #24]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	1cfb      	adds	r3, r7, #3
 8003fda:	2201      	movs	r2, #1
 8003fdc:	4619      	mov	r1, r3
 8003fde:	f7ff fd97 	bl	8003b10 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003fe2:	e005      	b.n	8003ff0 <_HandleIncomingPacket+0xd0>
    }
  }
 8003fe4:	bf00      	nop
 8003fe6:	e004      	b.n	8003ff2 <_HandleIncomingPacket+0xd2>
      break;
 8003fe8:	bf00      	nop
 8003fea:	e002      	b.n	8003ff2 <_HandleIncomingPacket+0xd2>
      break;
 8003fec:	bf00      	nop
 8003fee:	e000      	b.n	8003ff2 <_HandleIncomingPacket+0xd2>
      break;
 8003ff0:	bf00      	nop
}
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20014374 	.word	0x20014374

08004000 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004000:	b580      	push	{r7, lr}
 8004002:	b08c      	sub	sp, #48	; 0x30
 8004004:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004006:	2301      	movs	r3, #1
 8004008:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800400a:	1d3b      	adds	r3, r7, #4
 800400c:	3301      	adds	r3, #1
 800400e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004014:	4b31      	ldr	r3, [pc, #196]	; (80040dc <_TrySendOverflowPacket+0xdc>)
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	62bb      	str	r3, [r7, #40]	; 0x28
 800401a:	e00b      	b.n	8004034 <_TrySendOverflowPacket+0x34>
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	b2da      	uxtb	r2, r3
 8004020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004022:	1c59      	adds	r1, r3, #1
 8004024:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004026:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]
 800402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004030:	09db      	lsrs	r3, r3, #7
 8004032:	62bb      	str	r3, [r7, #40]	; 0x28
 8004034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004036:	2b7f      	cmp	r3, #127	; 0x7f
 8004038:	d8f0      	bhi.n	800401c <_TrySendOverflowPacket+0x1c>
 800403a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004048:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800404a:	4b25      	ldr	r3, [pc, #148]	; (80040e0 <_TrySendOverflowPacket+0xe0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004050:	4b22      	ldr	r3, [pc, #136]	; (80040dc <_TrySendOverflowPacket+0xdc>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	623b      	str	r3, [r7, #32]
 8004062:	e00b      	b.n	800407c <_TrySendOverflowPacket+0x7c>
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	b2da      	uxtb	r2, r3
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	1c59      	adds	r1, r3, #1
 800406c:	6279      	str	r1, [r7, #36]	; 0x24
 800406e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	09db      	lsrs	r3, r3, #7
 800407a:	623b      	str	r3, [r7, #32]
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	2b7f      	cmp	r3, #127	; 0x7f
 8004080:	d8f0      	bhi.n	8004064 <_TrySendOverflowPacket+0x64>
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	627a      	str	r2, [r7, #36]	; 0x24
 8004088:	6a3a      	ldr	r2, [r7, #32]
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004092:	4b12      	ldr	r3, [pc, #72]	; (80040dc <_TrySendOverflowPacket+0xdc>)
 8004094:	785b      	ldrb	r3, [r3, #1]
 8004096:	4618      	mov	r0, r3
 8004098:	1d3b      	adds	r3, r7, #4
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	1d3b      	adds	r3, r7, #4
 80040a2:	4619      	mov	r1, r3
 80040a4:	f7fc f8b4 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80040a8:	4603      	mov	r3, r0
 80040aa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d009      	beq.n	80040c6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80040b2:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <_TrySendOverflowPacket+0xdc>)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80040b8:	4b08      	ldr	r3, [pc, #32]	; (80040dc <_TrySendOverflowPacket+0xdc>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	3b01      	subs	r3, #1
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	4b06      	ldr	r3, [pc, #24]	; (80040dc <_TrySendOverflowPacket+0xdc>)
 80040c2:	701a      	strb	r2, [r3, #0]
 80040c4:	e004      	b.n	80040d0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80040c6:	4b05      	ldr	r3, [pc, #20]	; (80040dc <_TrySendOverflowPacket+0xdc>)
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	3301      	adds	r3, #1
 80040cc:	4a03      	ldr	r2, [pc, #12]	; (80040dc <_TrySendOverflowPacket+0xdc>)
 80040ce:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80040d0:	693b      	ldr	r3, [r7, #16]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3730      	adds	r7, #48	; 0x30
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20014374 	.word	0x20014374
 80040e0:	e0001004 	.word	0xe0001004

080040e4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08a      	sub	sp, #40	; 0x28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80040f0:	4b98      	ldr	r3, [pc, #608]	; (8004354 <_SendPacket+0x270>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d010      	beq.n	800411a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80040f8:	4b96      	ldr	r3, [pc, #600]	; (8004354 <_SendPacket+0x270>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 812d 	beq.w	800435c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004102:	4b94      	ldr	r3, [pc, #592]	; (8004354 <_SendPacket+0x270>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b02      	cmp	r3, #2
 8004108:	d109      	bne.n	800411e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800410a:	f7ff ff79 	bl	8004000 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800410e:	4b91      	ldr	r3, [pc, #580]	; (8004354 <_SendPacket+0x270>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	f040 8124 	bne.w	8004360 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004118:	e001      	b.n	800411e <_SendPacket+0x3a>
    goto Send;
 800411a:	bf00      	nop
 800411c:	e000      	b.n	8004120 <_SendPacket+0x3c>
Send:
 800411e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b1f      	cmp	r3, #31
 8004124:	d809      	bhi.n	800413a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004126:	4b8b      	ldr	r3, [pc, #556]	; (8004354 <_SendPacket+0x270>)
 8004128:	69da      	ldr	r2, [r3, #28]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	fa22 f303 	lsr.w	r3, r2, r3
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	f040 8115 	bne.w	8004364 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b17      	cmp	r3, #23
 800413e:	d807      	bhi.n	8004150 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3b01      	subs	r3, #1
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	b2da      	uxtb	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	701a      	strb	r2, [r3, #0]
 800414e:	e0c4      	b.n	80042da <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	2b7f      	cmp	r3, #127	; 0x7f
 800415c:	d912      	bls.n	8004184 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	09da      	lsrs	r2, r3, #7
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3b01      	subs	r3, #1
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	3a01      	subs	r2, #1
 8004176:	60fa      	str	r2, [r7, #12]
 8004178:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800417c:	b2da      	uxtb	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	e006      	b.n	8004192 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	3b01      	subs	r3, #1
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	b2da      	uxtb	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b7e      	cmp	r3, #126	; 0x7e
 8004196:	d807      	bhi.n	80041a8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3b01      	subs	r3, #1
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	701a      	strb	r2, [r3, #0]
 80041a6:	e098      	b.n	80042da <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041ae:	d212      	bcs.n	80041d6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	09da      	lsrs	r2, r3, #7
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	3a01      	subs	r2, #1
 80041c8:	60fa      	str	r2, [r7, #12]
 80041ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	e081      	b.n	80042da <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041dc:	d21d      	bcs.n	800421a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	0b9a      	lsrs	r2, r3, #14
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3b01      	subs	r3, #1
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	09db      	lsrs	r3, r3, #7
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	3a01      	subs	r2, #1
 80041f8:	60fa      	str	r2, [r7, #12]
 80041fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	3a01      	subs	r2, #1
 800420c:	60fa      	str	r2, [r7, #12]
 800420e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004212:	b2da      	uxtb	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	701a      	strb	r2, [r3, #0]
 8004218:	e05f      	b.n	80042da <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004220:	d228      	bcs.n	8004274 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	0d5a      	lsrs	r2, r3, #21
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3b01      	subs	r3, #1
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	0b9b      	lsrs	r3, r3, #14
 8004236:	b2db      	uxtb	r3, r3
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	3a01      	subs	r2, #1
 800423c:	60fa      	str	r2, [r7, #12]
 800423e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004242:	b2da      	uxtb	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	09db      	lsrs	r3, r3, #7
 800424c:	b2db      	uxtb	r3, r3
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	3a01      	subs	r2, #1
 8004252:	60fa      	str	r2, [r7, #12]
 8004254:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004258:	b2da      	uxtb	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	3a01      	subs	r2, #1
 8004266:	60fa      	str	r2, [r7, #12]
 8004268:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800426c:	b2da      	uxtb	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	701a      	strb	r2, [r3, #0]
 8004272:	e032      	b.n	80042da <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	0f1a      	lsrs	r2, r3, #28
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	3b01      	subs	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	0d5b      	lsrs	r3, r3, #21
 8004288:	b2db      	uxtb	r3, r3
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	3a01      	subs	r2, #1
 800428e:	60fa      	str	r2, [r7, #12]
 8004290:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004294:	b2da      	uxtb	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	0b9b      	lsrs	r3, r3, #14
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	3a01      	subs	r2, #1
 80042a4:	60fa      	str	r2, [r7, #12]
 80042a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	09db      	lsrs	r3, r3, #7
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	3a01      	subs	r2, #1
 80042ba:	60fa      	str	r2, [r7, #12]
 80042bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	3a01      	subs	r2, #1
 80042ce:	60fa      	str	r2, [r7, #12]
 80042d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80042da:	4b1f      	ldr	r3, [pc, #124]	; (8004358 <_SendPacket+0x274>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80042e0:	4b1c      	ldr	r3, [pc, #112]	; (8004354 <_SendPacket+0x270>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	623b      	str	r3, [r7, #32]
 80042f2:	e00b      	b.n	800430c <_SendPacket+0x228>
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	1c59      	adds	r1, r3, #1
 80042fc:	6279      	str	r1, [r7, #36]	; 0x24
 80042fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	09db      	lsrs	r3, r3, #7
 800430a:	623b      	str	r3, [r7, #32]
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	2b7f      	cmp	r3, #127	; 0x7f
 8004310:	d8f0      	bhi.n	80042f4 <_SendPacket+0x210>
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	627a      	str	r2, [r7, #36]	; 0x24
 8004318:	6a3a      	ldr	r2, [r7, #32]
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004322:	4b0c      	ldr	r3, [pc, #48]	; (8004354 <_SendPacket+0x270>)
 8004324:	785b      	ldrb	r3, [r3, #1]
 8004326:	4618      	mov	r0, r3
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	461a      	mov	r2, r3
 8004330:	68f9      	ldr	r1, [r7, #12]
 8004332:	f7fb ff6d 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004336:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800433e:	4a05      	ldr	r2, [pc, #20]	; (8004354 <_SendPacket+0x270>)
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	60d3      	str	r3, [r2, #12]
 8004344:	e00f      	b.n	8004366 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004346:	4b03      	ldr	r3, [pc, #12]	; (8004354 <_SendPacket+0x270>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	3301      	adds	r3, #1
 800434c:	b2da      	uxtb	r2, r3
 800434e:	4b01      	ldr	r3, [pc, #4]	; (8004354 <_SendPacket+0x270>)
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	e008      	b.n	8004366 <_SendPacket+0x282>
 8004354:	20014374 	.word	0x20014374
 8004358:	e0001004 	.word	0xe0001004
    goto SendDone;
 800435c:	bf00      	nop
 800435e:	e002      	b.n	8004366 <_SendPacket+0x282>
      goto SendDone;
 8004360:	bf00      	nop
 8004362:	e000      	b.n	8004366 <_SendPacket+0x282>
      goto SendDone;
 8004364:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004366:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <_SendPacket+0x2d4>)
 8004368:	7e1b      	ldrb	r3, [r3, #24]
 800436a:	4619      	mov	r1, r3
 800436c:	4a13      	ldr	r2, [pc, #76]	; (80043bc <_SendPacket+0x2d8>)
 800436e:	460b      	mov	r3, r1
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	440b      	add	r3, r1
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4413      	add	r3, r2
 8004378:	336c      	adds	r3, #108	; 0x6c
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	4b0e      	ldr	r3, [pc, #56]	; (80043b8 <_SendPacket+0x2d4>)
 800437e:	7e1b      	ldrb	r3, [r3, #24]
 8004380:	4618      	mov	r0, r3
 8004382:	490e      	ldr	r1, [pc, #56]	; (80043bc <_SendPacket+0x2d8>)
 8004384:	4603      	mov	r3, r0
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	4403      	add	r3, r0
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	440b      	add	r3, r1
 800438e:	3370      	adds	r3, #112	; 0x70
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d00b      	beq.n	80043ae <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004396:	4b08      	ldr	r3, [pc, #32]	; (80043b8 <_SendPacket+0x2d4>)
 8004398:	789b      	ldrb	r3, [r3, #2]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d107      	bne.n	80043ae <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <_SendPacket+0x2d4>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80043a4:	f7ff fdbc 	bl	8003f20 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80043a8:	4b03      	ldr	r3, [pc, #12]	; (80043b8 <_SendPacket+0x2d4>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80043ae:	bf00      	nop
 80043b0:	3728      	adds	r7, #40	; 0x28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20014374 	.word	0x20014374
 80043bc:	20012eb4 	.word	0x20012eb4

080043c0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08a      	sub	sp, #40	; 0x28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	3301      	adds	r3, #1
 80043d6:	2b80      	cmp	r3, #128	; 0x80
 80043d8:	d80a      	bhi.n	80043f0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	1c59      	adds	r1, r3, #1
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6051      	str	r1, [r2, #4]
 80043e4:	78fa      	ldrb	r2, [r7, #3]
 80043e6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	2b80      	cmp	r3, #128	; 0x80
 80043f6:	d15a      	bne.n	80044ae <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	623b      	str	r3, [r7, #32]
 8004418:	e00b      	b.n	8004432 <_StoreChar+0x72>
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	b2da      	uxtb	r2, r3
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	1c59      	adds	r1, r3, #1
 8004422:	6279      	str	r1, [r7, #36]	; 0x24
 8004424:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	701a      	strb	r2, [r3, #0]
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	09db      	lsrs	r3, r3, #7
 8004430:	623b      	str	r3, [r7, #32]
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	2b7f      	cmp	r3, #127	; 0x7f
 8004436:	d8f0      	bhi.n	800441a <_StoreChar+0x5a>
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	627a      	str	r2, [r7, #36]	; 0x24
 800443e:	6a3a      	ldr	r2, [r7, #32]
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	701a      	strb	r2, [r3, #0]
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	61fb      	str	r3, [r7, #28]
 800444c:	2300      	movs	r3, #0
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	e00b      	b.n	800446a <_StoreChar+0xaa>
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	b2da      	uxtb	r2, r3
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	1c59      	adds	r1, r3, #1
 800445a:	61f9      	str	r1, [r7, #28]
 800445c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	701a      	strb	r2, [r3, #0]
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	09db      	lsrs	r3, r3, #7
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	2b7f      	cmp	r3, #127	; 0x7f
 800446e:	d8f0      	bhi.n	8004452 <_StoreChar+0x92>
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	61fa      	str	r2, [r7, #28]
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	701a      	strb	r2, [r3, #0]
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	221a      	movs	r2, #26
 8004486:	6939      	ldr	r1, [r7, #16]
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff fe2b 	bl	80040e4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff fd38 	bl	8003f08 <_PreparePacket>
 8004498:	4602      	mov	r2, r0
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	611a      	str	r2, [r3, #16]
  }
}
 80044ae:	bf00      	nop
 80044b0:	3728      	adds	r7, #40	; 0x28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08a      	sub	sp, #40	; 0x28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80044ca:	2301      	movs	r3, #1
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80044ce:	2301      	movs	r3, #1
 80044d0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80044d2:	e007      	b.n	80044e4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80044d4:	6a3a      	ldr	r2, [r7, #32]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044dc:	623b      	str	r3, [r7, #32]
    Width++;
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	3301      	adds	r3, #1
 80044e2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80044e4:	6a3a      	ldr	r2, [r7, #32]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d2f3      	bcs.n	80044d4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d901      	bls.n	80044f8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80044f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d11f      	bne.n	8004542 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01c      	beq.n	8004542 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <_PrintUnsigned+0x66>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d102      	bne.n	800451e <_PrintUnsigned+0x66>
        c = '0';
 8004518:	2330      	movs	r3, #48	; 0x30
 800451a:	76fb      	strb	r3, [r7, #27]
 800451c:	e001      	b.n	8004522 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800451e:	2320      	movs	r3, #32
 8004520:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004522:	e007      	b.n	8004534 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004526:	3b01      	subs	r3, #1
 8004528:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800452a:	7efb      	ldrb	r3, [r7, #27]
 800452c:	4619      	mov	r1, r3
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f7ff ff46 	bl	80043c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <_PrintUnsigned+0x8a>
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453e:	429a      	cmp	r2, r3
 8004540:	d3f0      	bcc.n	8004524 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d903      	bls.n	8004550 <_PrintUnsigned+0x98>
      NumDigits--;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	3b01      	subs	r3, #1
 800454c:	603b      	str	r3, [r7, #0]
 800454e:	e009      	b.n	8004564 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	fbb2 f3f3 	udiv	r3, r2, r3
 8004558:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	429a      	cmp	r2, r3
 8004560:	d200      	bcs.n	8004564 <_PrintUnsigned+0xac>
        break;
 8004562:	e005      	b.n	8004570 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	fb02 f303 	mul.w	r3, r2, r3
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800456e:	e7e8      	b.n	8004542 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	fbb2 f3f3 	udiv	r3, r2, r3
 8004578:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800457e:	fb02 f303 	mul.w	r3, r2, r3
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004588:	4a15      	ldr	r2, [pc, #84]	; (80045e0 <_PrintUnsigned+0x128>)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	4413      	add	r3, r2
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	4619      	mov	r1, r3
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f7ff ff14 	bl	80043c0 <_StoreChar>
    Digit /= Base;
 8004598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e3      	bne.n	8004570 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80045a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d011      	beq.n	80045d6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00e      	beq.n	80045d6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045b8:	e006      	b.n	80045c8 <_PrintUnsigned+0x110>
        FieldWidth--;
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	3b01      	subs	r3, #1
 80045be:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80045c0:	2120      	movs	r1, #32
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f7ff fefc 	bl	80043c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <_PrintUnsigned+0x11e>
 80045ce:	69fa      	ldr	r2, [r7, #28]
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d3f1      	bcc.n	80045ba <_PrintUnsigned+0x102>
      }
    }
  }
}
 80045d6:	bf00      	nop
 80045d8:	3728      	adds	r7, #40	; 0x28
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	08006e28 	.word	0x08006e28

080045e4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	bfb8      	it	lt
 80045f8:	425b      	neglt	r3, r3
 80045fa:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80045fc:	2301      	movs	r3, #1
 80045fe:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004600:	e007      	b.n	8004612 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	fb92 f3f3 	sdiv	r3, r2, r3
 800460a:	613b      	str	r3, [r7, #16]
    Width++;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	3301      	adds	r3, #1
 8004610:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	429a      	cmp	r2, r3
 8004618:	daf3      	bge.n	8004602 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	429a      	cmp	r2, r3
 8004620:	d901      	bls.n	8004626 <_PrintInt+0x42>
    Width = NumDigits;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <_PrintInt+0x5e>
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	db04      	blt.n	800463c <_PrintInt+0x58>
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <_PrintInt+0x5e>
    FieldWidth--;
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	3b01      	subs	r3, #1
 8004640:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <_PrintInt+0x6e>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d016      	beq.n	8004680 <_PrintInt+0x9c>
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d111      	bne.n	8004680 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00e      	beq.n	8004680 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004662:	e006      	b.n	8004672 <_PrintInt+0x8e>
        FieldWidth--;
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	3b01      	subs	r3, #1
 8004668:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800466a:	2120      	movs	r1, #32
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f7ff fea7 	bl	80043c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <_PrintInt+0x9c>
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	429a      	cmp	r2, r3
 800467e:	d3f1      	bcc.n	8004664 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	da07      	bge.n	8004696 <_PrintInt+0xb2>
    v = -v;
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	425b      	negs	r3, r3
 800468a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800468c:	212d      	movs	r1, #45	; 0x2d
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f7ff fe96 	bl	80043c0 <_StoreChar>
 8004694:	e008      	b.n	80046a8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80046a0:	212b      	movs	r1, #43	; 0x2b
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f7ff fe8c 	bl	80043c0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d019      	beq.n	80046e6 <_PrintInt+0x102>
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d114      	bne.n	80046e6 <_PrintInt+0x102>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d111      	bne.n	80046e6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00e      	beq.n	80046e6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046c8:	e006      	b.n	80046d8 <_PrintInt+0xf4>
        FieldWidth--;
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	3b01      	subs	r3, #1
 80046ce:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80046d0:	2130      	movs	r1, #48	; 0x30
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f7ff fe74 	bl	80043c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <_PrintInt+0x102>
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d3f1      	bcc.n	80046ca <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80046e6:	68b9      	ldr	r1, [r7, #8]
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f7ff fedf 	bl	80044b8 <_PrintUnsigned>
}
 80046fa:	bf00      	nop
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004704:	b580      	push	{r7, lr}
 8004706:	b098      	sub	sp, #96	; 0x60
 8004708:	af02      	add	r7, sp, #8
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004710:	f3ef 8311 	mrs	r3, BASEPRI
 8004714:	f04f 0120 	mov.w	r1, #32
 8004718:	f381 8811 	msr	BASEPRI, r1
 800471c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800471e:	48b7      	ldr	r0, [pc, #732]	; (80049fc <_VPrintTarget+0x2f8>)
 8004720:	f7ff fbf2 	bl	8003f08 <_PreparePacket>
 8004724:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004726:	4bb5      	ldr	r3, [pc, #724]	; (80049fc <_VPrintTarget+0x2f8>)
 8004728:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 800472a:	2300      	movs	r3, #0
 800472c:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800472e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004730:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	3301      	adds	r3, #1
 8004736:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3301      	adds	r3, #1
 8004748:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800474a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 81a8 	beq.w	8004aa4 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8004754:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004758:	2b25      	cmp	r3, #37	; 0x25
 800475a:	f040 8195 	bne.w	8004a88 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800475e:	2300      	movs	r3, #0
 8004760:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004762:	2301      	movs	r3, #1
 8004764:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800476e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004772:	3b23      	subs	r3, #35	; 0x23
 8004774:	2b0d      	cmp	r3, #13
 8004776:	d83f      	bhi.n	80047f8 <_VPrintTarget+0xf4>
 8004778:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <_VPrintTarget+0x7c>)
 800477a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477e:	bf00      	nop
 8004780:	080047e9 	.word	0x080047e9
 8004784:	080047f9 	.word	0x080047f9
 8004788:	080047f9 	.word	0x080047f9
 800478c:	080047f9 	.word	0x080047f9
 8004790:	080047f9 	.word	0x080047f9
 8004794:	080047f9 	.word	0x080047f9
 8004798:	080047f9 	.word	0x080047f9
 800479c:	080047f9 	.word	0x080047f9
 80047a0:	080047d9 	.word	0x080047d9
 80047a4:	080047f9 	.word	0x080047f9
 80047a8:	080047b9 	.word	0x080047b9
 80047ac:	080047f9 	.word	0x080047f9
 80047b0:	080047f9 	.word	0x080047f9
 80047b4:	080047c9 	.word	0x080047c9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80047b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	64bb      	str	r3, [r7, #72]	; 0x48
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3301      	adds	r3, #1
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	e01a      	b.n	80047fe <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80047c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ca:	f043 0302 	orr.w	r3, r3, #2
 80047ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3301      	adds	r3, #1
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	e012      	b.n	80047fe <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80047d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047da:	f043 0304 	orr.w	r3, r3, #4
 80047de:	64bb      	str	r3, [r7, #72]	; 0x48
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3301      	adds	r3, #1
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	e00a      	b.n	80047fe <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80047e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ea:	f043 0308 	orr.w	r3, r3, #8
 80047ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	3301      	adds	r3, #1
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	e002      	b.n	80047fe <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80047f8:	2300      	movs	r3, #0
 80047fa:	653b      	str	r3, [r7, #80]	; 0x50
 80047fc:	bf00      	nop
        }
      } while (v);
 80047fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1b0      	bne.n	8004766 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004804:	2300      	movs	r3, #0
 8004806:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004810:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004814:	2b2f      	cmp	r3, #47	; 0x2f
 8004816:	d912      	bls.n	800483e <_VPrintTarget+0x13a>
 8004818:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800481c:	2b39      	cmp	r3, #57	; 0x39
 800481e:	d80e      	bhi.n	800483e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3301      	adds	r3, #1
 8004824:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004826:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	461a      	mov	r2, r3
 8004832:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004836:	4413      	add	r3, r2
 8004838:	3b30      	subs	r3, #48	; 0x30
 800483a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800483c:	e7e4      	b.n	8004808 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800483e:	2300      	movs	r3, #0
 8004840:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800484a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800484e:	2b2e      	cmp	r3, #46	; 0x2e
 8004850:	d11d      	bne.n	800488e <_VPrintTarget+0x18a>
        sFormat++;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	3301      	adds	r3, #1
 8004856:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004860:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004864:	2b2f      	cmp	r3, #47	; 0x2f
 8004866:	d912      	bls.n	800488e <_VPrintTarget+0x18a>
 8004868:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800486c:	2b39      	cmp	r3, #57	; 0x39
 800486e:	d80e      	bhi.n	800488e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3301      	adds	r3, #1
 8004874:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004876:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004878:	4613      	mov	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	461a      	mov	r2, r3
 8004882:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004886:	4413      	add	r3, r2
 8004888:	3b30      	subs	r3, #48	; 0x30
 800488a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800488c:	e7e4      	b.n	8004858 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004896:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800489a:	2b6c      	cmp	r3, #108	; 0x6c
 800489c:	d003      	beq.n	80048a6 <_VPrintTarget+0x1a2>
 800489e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048a2:	2b68      	cmp	r3, #104	; 0x68
 80048a4:	d107      	bne.n	80048b6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3301      	adds	r3, #1
 80048b2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80048b4:	e7ef      	b.n	8004896 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80048b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048ba:	2b25      	cmp	r3, #37	; 0x25
 80048bc:	f000 80d8 	beq.w	8004a70 <_VPrintTarget+0x36c>
 80048c0:	2b25      	cmp	r3, #37	; 0x25
 80048c2:	f2c0 80dc 	blt.w	8004a7e <_VPrintTarget+0x37a>
 80048c6:	2b78      	cmp	r3, #120	; 0x78
 80048c8:	f300 80d9 	bgt.w	8004a7e <_VPrintTarget+0x37a>
 80048cc:	2b58      	cmp	r3, #88	; 0x58
 80048ce:	f2c0 80d6 	blt.w	8004a7e <_VPrintTarget+0x37a>
 80048d2:	3b58      	subs	r3, #88	; 0x58
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	f200 80d2 	bhi.w	8004a7e <_VPrintTarget+0x37a>
 80048da:	a201      	add	r2, pc, #4	; (adr r2, 80048e0 <_VPrintTarget+0x1dc>)
 80048dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e0:	080049d7 	.word	0x080049d7
 80048e4:	08004a7f 	.word	0x08004a7f
 80048e8:	08004a7f 	.word	0x08004a7f
 80048ec:	08004a7f 	.word	0x08004a7f
 80048f0:	08004a7f 	.word	0x08004a7f
 80048f4:	08004a7f 	.word	0x08004a7f
 80048f8:	08004a7f 	.word	0x08004a7f
 80048fc:	08004a7f 	.word	0x08004a7f
 8004900:	08004a7f 	.word	0x08004a7f
 8004904:	08004a7f 	.word	0x08004a7f
 8004908:	08004a7f 	.word	0x08004a7f
 800490c:	08004965 	.word	0x08004965
 8004910:	0800498b 	.word	0x0800498b
 8004914:	08004a7f 	.word	0x08004a7f
 8004918:	08004a7f 	.word	0x08004a7f
 800491c:	08004a7f 	.word	0x08004a7f
 8004920:	08004a7f 	.word	0x08004a7f
 8004924:	08004a7f 	.word	0x08004a7f
 8004928:	08004a7f 	.word	0x08004a7f
 800492c:	08004a7f 	.word	0x08004a7f
 8004930:	08004a7f 	.word	0x08004a7f
 8004934:	08004a7f 	.word	0x08004a7f
 8004938:	08004a7f 	.word	0x08004a7f
 800493c:	08004a7f 	.word	0x08004a7f
 8004940:	08004a4b 	.word	0x08004a4b
 8004944:	08004a7f 	.word	0x08004a7f
 8004948:	08004a7f 	.word	0x08004a7f
 800494c:	08004a01 	.word	0x08004a01
 8004950:	08004a7f 	.word	0x08004a7f
 8004954:	080049b1 	.word	0x080049b1
 8004958:	08004a7f 	.word	0x08004a7f
 800495c:	08004a7f 	.word	0x08004a7f
 8004960:	080049d7 	.word	0x080049d7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	1d19      	adds	r1, r3, #4
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6011      	str	r1, [r2, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8004978:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800497c:	f107 0310 	add.w	r3, r7, #16
 8004980:	4611      	mov	r1, r2
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff fd1c 	bl	80043c0 <_StoreChar>
        break;
 8004988:	e07a      	b.n	8004a80 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	1d19      	adds	r1, r3, #4
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6011      	str	r1, [r2, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004998:	f107 0010 	add.w	r0, r7, #16
 800499c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a6:	220a      	movs	r2, #10
 80049a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80049aa:	f7ff fe1b 	bl	80045e4 <_PrintInt>
        break;
 80049ae:	e067      	b.n	8004a80 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	1d19      	adds	r1, r3, #4
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6011      	str	r1, [r2, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80049be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80049c0:	f107 0010 	add.w	r0, r7, #16
 80049c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c6:	9301      	str	r3, [sp, #4]
 80049c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ce:	220a      	movs	r2, #10
 80049d0:	f7ff fd72 	bl	80044b8 <_PrintUnsigned>
        break;
 80049d4:	e054      	b.n	8004a80 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	1d19      	adds	r1, r3, #4
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6011      	str	r1, [r2, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80049e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80049e6:	f107 0010 	add.w	r0, r7, #16
 80049ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ec:	9301      	str	r3, [sp, #4]
 80049ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f4:	2210      	movs	r2, #16
 80049f6:	f7ff fd5f 	bl	80044b8 <_PrintUnsigned>
        break;
 80049fa:	e041      	b.n	8004a80 <_VPrintTarget+0x37c>
 80049fc:	200143a4 	.word	0x200143a4
      case 's':
        s = va_arg(*pParamList, const char*);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	1d19      	adds	r1, r3, #4
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6011      	str	r1, [r2, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8004a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <_VPrintTarget+0x314>
          s = "(null)";
 8004a14:	4b4a      	ldr	r3, [pc, #296]	; (8004b40 <_VPrintTarget+0x43c>)
 8004a16:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8004a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8004a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a22:	3301      	adds	r3, #1
 8004a24:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8004a26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8004a2e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004a32:	f107 0310 	add.w	r3, r7, #16
 8004a36:	4611      	mov	r1, r2
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff fcc1 	bl	80043c0 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	2b7f      	cmp	r3, #127	; 0x7f
 8004a42:	d9e9      	bls.n	8004a18 <_VPrintTarget+0x314>
        break;
 8004a44:	e01c      	b.n	8004a80 <_VPrintTarget+0x37c>
            break;
 8004a46:	bf00      	nop
        break;
 8004a48:	e01a      	b.n	8004a80 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	1d19      	adds	r1, r3, #4
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6011      	str	r1, [r2, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004a58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a5a:	f107 0010 	add.w	r0, r7, #16
 8004a5e:	2300      	movs	r3, #0
 8004a60:	9301      	str	r3, [sp, #4]
 8004a62:	2308      	movs	r3, #8
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	2308      	movs	r3, #8
 8004a68:	2210      	movs	r2, #16
 8004a6a:	f7ff fd25 	bl	80044b8 <_PrintUnsigned>
        break;
 8004a6e:	e007      	b.n	8004a80 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004a70:	f107 0310 	add.w	r3, r7, #16
 8004a74:	2125      	movs	r1, #37	; 0x25
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff fca2 	bl	80043c0 <_StoreChar>
        break;
 8004a7c:	e000      	b.n	8004a80 <_VPrintTarget+0x37c>
      default:
        break;
 8004a7e:	bf00      	nop
      }
      sFormat++;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3301      	adds	r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	e007      	b.n	8004a98 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8004a88:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004a8c:	f107 0310 	add.w	r3, r7, #16
 8004a90:	4611      	mov	r1, r2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff fc94 	bl	80043c0 <_StoreChar>
    }
  } while (*sFormat);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f47f ae4d 	bne.w	800473c <_VPrintTarget+0x38>
 8004aa2:	e000      	b.n	8004aa6 <_VPrintTarget+0x3a2>
      break;
 8004aa4:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d041      	beq.n	8004b30 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004aac:	6a3a      	ldr	r2, [r7, #32]
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	63bb      	str	r3, [r7, #56]	; 0x38
 8004abc:	e00b      	b.n	8004ad6 <_VPrintTarget+0x3d2>
 8004abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac4:	1c59      	adds	r1, r3, #1
 8004ac6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004ac8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	701a      	strb	r2, [r3, #0]
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad2:	09db      	lsrs	r3, r3, #7
 8004ad4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8004ada:	d8f0      	bhi.n	8004abe <_VPrintTarget+0x3ba>
 8004adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ae2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	701a      	strb	r2, [r3, #0]
 8004ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aea:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	637b      	str	r3, [r7, #52]	; 0x34
 8004af0:	2300      	movs	r3, #0
 8004af2:	633b      	str	r3, [r7, #48]	; 0x30
 8004af4:	e00b      	b.n	8004b0e <_VPrintTarget+0x40a>
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afc:	1c59      	adds	r1, r3, #1
 8004afe:	6379      	str	r1, [r7, #52]	; 0x34
 8004b00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	701a      	strb	r2, [r3, #0]
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	09db      	lsrs	r3, r3, #7
 8004b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	2b7f      	cmp	r3, #127	; 0x7f
 8004b12:	d8f0      	bhi.n	8004af6 <_VPrintTarget+0x3f2>
 8004b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	637a      	str	r2, [r7, #52]	; 0x34
 8004b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]
 8004b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b22:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	6979      	ldr	r1, [r7, #20]
 8004b28:	221a      	movs	r2, #26
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff fada 	bl	80040e4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b32:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004b36:	bf00      	nop
 8004b38:	3758      	adds	r7, #88	; 0x58
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	08006dd8 	.word	0x08006dd8

08004b44 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004b52:	2300      	movs	r3, #0
 8004b54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b58:	4917      	ldr	r1, [pc, #92]	; (8004bb8 <SEGGER_SYSVIEW_Init+0x74>)
 8004b5a:	4818      	ldr	r0, [pc, #96]	; (8004bbc <SEGGER_SYSVIEW_Init+0x78>)
 8004b5c:	f7ff f8d4 	bl	8003d08 <SEGGER_RTT_AllocUpBuffer>
 8004b60:	4603      	mov	r3, r0
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	4b16      	ldr	r3, [pc, #88]	; (8004bc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b66:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004b68:	4b15      	ldr	r3, [pc, #84]	; (8004bc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b6a:	785a      	ldrb	r2, [r3, #1]
 8004b6c:	4b14      	ldr	r3, [pc, #80]	; (8004bc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b6e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004b70:	4b13      	ldr	r3, [pc, #76]	; (8004bc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b72:	7e1b      	ldrb	r3, [r3, #24]
 8004b74:	4618      	mov	r0, r3
 8004b76:	2300      	movs	r3, #0
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	2308      	movs	r3, #8
 8004b7c:	4a11      	ldr	r2, [pc, #68]	; (8004bc4 <SEGGER_SYSVIEW_Init+0x80>)
 8004b7e:	490f      	ldr	r1, [pc, #60]	; (8004bbc <SEGGER_SYSVIEW_Init+0x78>)
 8004b80:	f7ff f946 	bl	8003e10 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004b84:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004b8a:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <SEGGER_SYSVIEW_Init+0x84>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a0c      	ldr	r2, [pc, #48]	; (8004bc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b90:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004b92:	4a0b      	ldr	r2, [pc, #44]	; (8004bc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004b98:	4a09      	ldr	r2, [pc, #36]	; (8004bc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004b9e:	4a08      	ldr	r2, [pc, #32]	; (8004bc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004ba4:	4a06      	ldr	r2, [pc, #24]	; (8004bc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004baa:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004bb0:	bf00      	nop
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	2001336c 	.word	0x2001336c
 8004bbc:	08006de0 	.word	0x08006de0
 8004bc0:	20014374 	.word	0x20014374
 8004bc4:	2001436c 	.word	0x2001436c
 8004bc8:	e0001004 	.word	0xe0001004

08004bcc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004bd4:	4a04      	ldr	r2, [pc, #16]	; (8004be8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6113      	str	r3, [r2, #16]
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	20014374 	.word	0x20014374

08004bec <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004bf4:	f3ef 8311 	mrs	r3, BASEPRI
 8004bf8:	f04f 0120 	mov.w	r1, #32
 8004bfc:	f381 8811 	msr	BASEPRI, r1
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	4808      	ldr	r0, [pc, #32]	; (8004c24 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004c04:	f7ff f980 	bl	8003f08 <_PreparePacket>
 8004c08:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	68b9      	ldr	r1, [r7, #8]
 8004c0e:	68b8      	ldr	r0, [r7, #8]
 8004c10:	f7ff fa68 	bl	80040e4 <_SendPacket>
  RECORD_END();
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f383 8811 	msr	BASEPRI, r3
}
 8004c1a:	bf00      	nop
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	200143a4 	.word	0x200143a4

08004c28 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c32:	f3ef 8311 	mrs	r3, BASEPRI
 8004c36:	f04f 0120 	mov.w	r1, #32
 8004c3a:	f381 8811 	msr	BASEPRI, r1
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	4816      	ldr	r0, [pc, #88]	; (8004c9c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004c42:	f7ff f961 	bl	8003f08 <_PreparePacket>
 8004c46:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	61fb      	str	r3, [r7, #28]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	61bb      	str	r3, [r7, #24]
 8004c54:	e00b      	b.n	8004c6e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	1c59      	adds	r1, r3, #1
 8004c5e:	61f9      	str	r1, [r7, #28]
 8004c60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	701a      	strb	r2, [r3, #0]
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	09db      	lsrs	r3, r3, #7
 8004c6c:	61bb      	str	r3, [r7, #24]
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	2b7f      	cmp	r3, #127	; 0x7f
 8004c72:	d8f0      	bhi.n	8004c56 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	61fa      	str	r2, [r7, #28]
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	701a      	strb	r2, [r3, #0]
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	68f9      	ldr	r1, [r7, #12]
 8004c88:	6938      	ldr	r0, [r7, #16]
 8004c8a:	f7ff fa2b 	bl	80040e4 <_SendPacket>
  RECORD_END();
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f383 8811 	msr	BASEPRI, r3
}
 8004c94:	bf00      	nop
 8004c96:	3720      	adds	r7, #32
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	200143a4 	.word	0x200143a4

08004ca0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08c      	sub	sp, #48	; 0x30
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004cac:	f3ef 8311 	mrs	r3, BASEPRI
 8004cb0:	f04f 0120 	mov.w	r1, #32
 8004cb4:	f381 8811 	msr	BASEPRI, r1
 8004cb8:	61fb      	str	r3, [r7, #28]
 8004cba:	4825      	ldr	r0, [pc, #148]	; (8004d50 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004cbc:	f7ff f924 	bl	8003f08 <_PreparePacket>
 8004cc0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cce:	e00b      	b.n	8004ce8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd6:	1c59      	adds	r1, r3, #1
 8004cd8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004cda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce4:	09db      	lsrs	r3, r3, #7
 8004ce6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	2b7f      	cmp	r3, #127	; 0x7f
 8004cec:	d8f0      	bhi.n	8004cd0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	623b      	str	r3, [r7, #32]
 8004d06:	e00b      	b.n	8004d20 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	1c59      	adds	r1, r3, #1
 8004d10:	6279      	str	r1, [r7, #36]	; 0x24
 8004d12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	09db      	lsrs	r3, r3, #7
 8004d1e:	623b      	str	r3, [r7, #32]
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	2b7f      	cmp	r3, #127	; 0x7f
 8004d24:	d8f0      	bhi.n	8004d08 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	627a      	str	r2, [r7, #36]	; 0x24
 8004d2c:	6a3a      	ldr	r2, [r7, #32]
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	701a      	strb	r2, [r3, #0]
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	6979      	ldr	r1, [r7, #20]
 8004d3a:	69b8      	ldr	r0, [r7, #24]
 8004d3c:	f7ff f9d2 	bl	80040e4 <_SendPacket>
  RECORD_END();
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	f383 8811 	msr	BASEPRI, r3
}
 8004d46:	bf00      	nop
 8004d48:	3730      	adds	r7, #48	; 0x30
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	200143a4 	.word	0x200143a4

08004d54 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08c      	sub	sp, #48	; 0x30
 8004d58:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004d5a:	4b58      	ldr	r3, [pc, #352]	; (8004ebc <SEGGER_SYSVIEW_Start+0x168>)
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004d60:	f3ef 8311 	mrs	r3, BASEPRI
 8004d64:	f04f 0120 	mov.w	r1, #32
 8004d68:	f381 8811 	msr	BASEPRI, r1
 8004d6c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004d6e:	4b53      	ldr	r3, [pc, #332]	; (8004ebc <SEGGER_SYSVIEW_Start+0x168>)
 8004d70:	785b      	ldrb	r3, [r3, #1]
 8004d72:	220a      	movs	r2, #10
 8004d74:	4952      	ldr	r1, [pc, #328]	; (8004ec0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fb fa4a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004d82:	200a      	movs	r0, #10
 8004d84:	f7ff ff32 	bl	8004bec <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d88:	f3ef 8311 	mrs	r3, BASEPRI
 8004d8c:	f04f 0120 	mov.w	r1, #32
 8004d90:	f381 8811 	msr	BASEPRI, r1
 8004d94:	60bb      	str	r3, [r7, #8]
 8004d96:	484b      	ldr	r0, [pc, #300]	; (8004ec4 <SEGGER_SYSVIEW_Start+0x170>)
 8004d98:	f7ff f8b6 	bl	8003f08 <_PreparePacket>
 8004d9c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004da6:	4b45      	ldr	r3, [pc, #276]	; (8004ebc <SEGGER_SYSVIEW_Start+0x168>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dac:	e00b      	b.n	8004dc6 <SEGGER_SYSVIEW_Start+0x72>
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	1c59      	adds	r1, r3, #1
 8004db6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004db8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	09db      	lsrs	r3, r3, #7
 8004dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8004dca:	d8f0      	bhi.n	8004dae <SEGGER_SYSVIEW_Start+0x5a>
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	701a      	strb	r2, [r3, #0]
 8004dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dda:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
 8004de0:	4b36      	ldr	r3, [pc, #216]	; (8004ebc <SEGGER_SYSVIEW_Start+0x168>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	623b      	str	r3, [r7, #32]
 8004de6:	e00b      	b.n	8004e00 <SEGGER_SYSVIEW_Start+0xac>
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	1c59      	adds	r1, r3, #1
 8004df0:	6279      	str	r1, [r7, #36]	; 0x24
 8004df2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	701a      	strb	r2, [r3, #0]
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	09db      	lsrs	r3, r3, #7
 8004dfe:	623b      	str	r3, [r7, #32]
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	2b7f      	cmp	r3, #127	; 0x7f
 8004e04:	d8f0      	bhi.n	8004de8 <SEGGER_SYSVIEW_Start+0x94>
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	627a      	str	r2, [r7, #36]	; 0x24
 8004e0c:	6a3a      	ldr	r2, [r7, #32]
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	701a      	strb	r2, [r3, #0]
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	61fb      	str	r3, [r7, #28]
 8004e1a:	4b28      	ldr	r3, [pc, #160]	; (8004ebc <SEGGER_SYSVIEW_Start+0x168>)
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	e00b      	b.n	8004e3a <SEGGER_SYSVIEW_Start+0xe6>
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	1c59      	adds	r1, r3, #1
 8004e2a:	61f9      	str	r1, [r7, #28]
 8004e2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e30:	b2d2      	uxtb	r2, r2
 8004e32:	701a      	strb	r2, [r3, #0]
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	09db      	lsrs	r3, r3, #7
 8004e38:	61bb      	str	r3, [r7, #24]
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e3e:	d8f0      	bhi.n	8004e22 <SEGGER_SYSVIEW_Start+0xce>
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	61fa      	str	r2, [r7, #28]
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	701a      	strb	r2, [r3, #0]
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	2300      	movs	r3, #0
 8004e56:	613b      	str	r3, [r7, #16]
 8004e58:	e00b      	b.n	8004e72 <SEGGER_SYSVIEW_Start+0x11e>
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	1c59      	adds	r1, r3, #1
 8004e62:	6179      	str	r1, [r7, #20]
 8004e64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	701a      	strb	r2, [r3, #0]
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	09db      	lsrs	r3, r3, #7
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	2b7f      	cmp	r3, #127	; 0x7f
 8004e76:	d8f0      	bhi.n	8004e5a <SEGGER_SYSVIEW_Start+0x106>
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	617a      	str	r2, [r7, #20]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004e88:	2218      	movs	r2, #24
 8004e8a:	6839      	ldr	r1, [r7, #0]
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff f929 	bl	80040e4 <_SendPacket>
      RECORD_END();
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004e98:	4b08      	ldr	r3, [pc, #32]	; (8004ebc <SEGGER_SYSVIEW_Start+0x168>)
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004ea0:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <SEGGER_SYSVIEW_Start+0x168>)
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004ea6:	f000 f9eb 	bl	8005280 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004eaa:	f000 f9b1 	bl	8005210 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004eae:	f000 fc1d 	bl	80056ec <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004eb2:	bf00      	nop
 8004eb4:	3730      	adds	r7, #48	; 0x30
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20014374 	.word	0x20014374
 8004ec0:	08006e1c 	.word	0x08006e1c
 8004ec4:	200143a4 	.word	0x200143a4

08004ec8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ece:	f3ef 8311 	mrs	r3, BASEPRI
 8004ed2:	f04f 0120 	mov.w	r1, #32
 8004ed6:	f381 8811 	msr	BASEPRI, r1
 8004eda:	607b      	str	r3, [r7, #4]
 8004edc:	480b      	ldr	r0, [pc, #44]	; (8004f0c <SEGGER_SYSVIEW_Stop+0x44>)
 8004ede:	f7ff f813 	bl	8003f08 <_PreparePacket>
 8004ee2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004ee4:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <SEGGER_SYSVIEW_Stop+0x48>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d007      	beq.n	8004efc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004eec:	220b      	movs	r2, #11
 8004eee:	6839      	ldr	r1, [r7, #0]
 8004ef0:	6838      	ldr	r0, [r7, #0]
 8004ef2:	f7ff f8f7 	bl	80040e4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004ef6:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <SEGGER_SYSVIEW_Stop+0x48>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f383 8811 	msr	BASEPRI, r3
}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	200143a4 	.word	0x200143a4
 8004f10:	20014374 	.word	0x20014374

08004f14 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08c      	sub	sp, #48	; 0x30
 8004f18:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f1a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f1e:	f04f 0120 	mov.w	r1, #32
 8004f22:	f381 8811 	msr	BASEPRI, r1
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	4845      	ldr	r0, [pc, #276]	; (8005040 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004f2a:	f7fe ffed 	bl	8003f08 <_PreparePacket>
 8004f2e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f38:	4b42      	ldr	r3, [pc, #264]	; (8005044 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f3e:	e00b      	b.n	8004f58 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f46:	1c59      	adds	r1, r3, #1
 8004f48:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	701a      	strb	r2, [r3, #0]
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	09db      	lsrs	r3, r3, #7
 8004f56:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f5c:	d8f0      	bhi.n	8004f40 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	701a      	strb	r2, [r3, #0]
 8004f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
 8004f72:	4b34      	ldr	r3, [pc, #208]	; (8005044 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	623b      	str	r3, [r7, #32]
 8004f78:	e00b      	b.n	8004f92 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	1c59      	adds	r1, r3, #1
 8004f82:	6279      	str	r1, [r7, #36]	; 0x24
 8004f84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	09db      	lsrs	r3, r3, #7
 8004f90:	623b      	str	r3, [r7, #32]
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	2b7f      	cmp	r3, #127	; 0x7f
 8004f96:	d8f0      	bhi.n	8004f7a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	627a      	str	r2, [r7, #36]	; 0x24
 8004f9e:	6a3a      	ldr	r2, [r7, #32]
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	61fb      	str	r3, [r7, #28]
 8004fac:	4b25      	ldr	r3, [pc, #148]	; (8005044 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	61bb      	str	r3, [r7, #24]
 8004fb2:	e00b      	b.n	8004fcc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	1c59      	adds	r1, r3, #1
 8004fbc:	61f9      	str	r1, [r7, #28]
 8004fbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	09db      	lsrs	r3, r3, #7
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	2b7f      	cmp	r3, #127	; 0x7f
 8004fd0:	d8f0      	bhi.n	8004fb4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	61fa      	str	r2, [r7, #28]
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	617b      	str	r3, [r7, #20]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	613b      	str	r3, [r7, #16]
 8004fea:	e00b      	b.n	8005004 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	1c59      	adds	r1, r3, #1
 8004ff4:	6179      	str	r1, [r7, #20]
 8004ff6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	09db      	lsrs	r3, r3, #7
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	2b7f      	cmp	r3, #127	; 0x7f
 8005008:	d8f0      	bhi.n	8004fec <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	617a      	str	r2, [r7, #20]
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800501a:	2218      	movs	r2, #24
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	68b8      	ldr	r0, [r7, #8]
 8005020:	f7ff f860 	bl	80040e4 <_SendPacket>
  RECORD_END();
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800502a:	4b06      	ldr	r3, [pc, #24]	; (8005044 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005032:	4b04      	ldr	r3, [pc, #16]	; (8005044 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	4798      	blx	r3
  }
}
 8005038:	bf00      	nop
 800503a:	3730      	adds	r7, #48	; 0x30
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	200143a4 	.word	0x200143a4
 8005044:	20014374 	.word	0x20014374

08005048 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005048:	b580      	push	{r7, lr}
 800504a:	b092      	sub	sp, #72	; 0x48
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005050:	f3ef 8311 	mrs	r3, BASEPRI
 8005054:	f04f 0120 	mov.w	r1, #32
 8005058:	f381 8811 	msr	BASEPRI, r1
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	486a      	ldr	r0, [pc, #424]	; (8005208 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005060:	f7fe ff52 	bl	8003f08 <_PreparePacket>
 8005064:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	647b      	str	r3, [r7, #68]	; 0x44
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	4b66      	ldr	r3, [pc, #408]	; (800520c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	643b      	str	r3, [r7, #64]	; 0x40
 800507a:	e00b      	b.n	8005094 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800507c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800507e:	b2da      	uxtb	r2, r3
 8005080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005082:	1c59      	adds	r1, r3, #1
 8005084:	6479      	str	r1, [r7, #68]	; 0x44
 8005086:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]
 800508e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005090:	09db      	lsrs	r3, r3, #7
 8005092:	643b      	str	r3, [r7, #64]	; 0x40
 8005094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005096:	2b7f      	cmp	r3, #127	; 0x7f
 8005098:	d8f0      	bhi.n	800507c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800509a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	647a      	str	r2, [r7, #68]	; 0x44
 80050a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050a2:	b2d2      	uxtb	r2, r2
 80050a4:	701a      	strb	r2, [r3, #0]
 80050a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80050b4:	e00b      	b.n	80050ce <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050bc:	1c59      	adds	r1, r3, #1
 80050be:	63f9      	str	r1, [r7, #60]	; 0x3c
 80050c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ca:	09db      	lsrs	r3, r3, #7
 80050cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80050ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d0:	2b7f      	cmp	r3, #127	; 0x7f
 80050d2:	d8f0      	bhi.n	80050b6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80050d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d6:	1c5a      	adds	r2, r3, #1
 80050d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]
 80050e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2220      	movs	r2, #32
 80050ea:	4619      	mov	r1, r3
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f7fe fedb 	bl	8003ea8 <_EncodeStr>
 80050f2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80050f4:	2209      	movs	r2, #9
 80050f6:	68f9      	ldr	r1, [r7, #12]
 80050f8:	6938      	ldr	r0, [r7, #16]
 80050fa:	f7fe fff3 	bl	80040e4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	637b      	str	r3, [r7, #52]	; 0x34
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	4b40      	ldr	r3, [pc, #256]	; (800520c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	633b      	str	r3, [r7, #48]	; 0x30
 8005112:	e00b      	b.n	800512c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	b2da      	uxtb	r2, r3
 8005118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511a:	1c59      	adds	r1, r3, #1
 800511c:	6379      	str	r1, [r7, #52]	; 0x34
 800511e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]
 8005126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005128:	09db      	lsrs	r3, r3, #7
 800512a:	633b      	str	r3, [r7, #48]	; 0x30
 800512c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512e:	2b7f      	cmp	r3, #127	; 0x7f
 8005130:	d8f0      	bhi.n	8005114 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	637a      	str	r2, [r7, #52]	; 0x34
 8005138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]
 800513e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005140:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	62bb      	str	r3, [r7, #40]	; 0x28
 800514c:	e00b      	b.n	8005166 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005150:	b2da      	uxtb	r2, r3
 8005152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005154:	1c59      	adds	r1, r3, #1
 8005156:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005158:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	701a      	strb	r2, [r3, #0]
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	09db      	lsrs	r3, r3, #7
 8005164:	62bb      	str	r3, [r7, #40]	; 0x28
 8005166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005168:	2b7f      	cmp	r3, #127	; 0x7f
 800516a:	d8f0      	bhi.n	800514e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800516c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	701a      	strb	r2, [r3, #0]
 8005178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	623b      	str	r3, [r7, #32]
 8005186:	e00b      	b.n	80051a0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	b2da      	uxtb	r2, r3
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	1c59      	adds	r1, r3, #1
 8005190:	6279      	str	r1, [r7, #36]	; 0x24
 8005192:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	09db      	lsrs	r3, r3, #7
 800519e:	623b      	str	r3, [r7, #32]
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	2b7f      	cmp	r3, #127	; 0x7f
 80051a4:	d8f0      	bhi.n	8005188 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	627a      	str	r2, [r7, #36]	; 0x24
 80051ac:	6a3a      	ldr	r2, [r7, #32]
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	61fb      	str	r3, [r7, #28]
 80051ba:	2300      	movs	r3, #0
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	e00b      	b.n	80051d8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	1c59      	adds	r1, r3, #1
 80051c8:	61f9      	str	r1, [r7, #28]
 80051ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	09db      	lsrs	r3, r3, #7
 80051d6:	61bb      	str	r3, [r7, #24]
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	2b7f      	cmp	r3, #127	; 0x7f
 80051dc:	d8f0      	bhi.n	80051c0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	61fa      	str	r2, [r7, #28]
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80051ee:	2215      	movs	r2, #21
 80051f0:	68f9      	ldr	r1, [r7, #12]
 80051f2:	6938      	ldr	r0, [r7, #16]
 80051f4:	f7fe ff76 	bl	80040e4 <_SendPacket>
  RECORD_END();
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f383 8811 	msr	BASEPRI, r3
}
 80051fe:	bf00      	nop
 8005200:	3748      	adds	r7, #72	; 0x48
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	200143a4 	.word	0x200143a4
 800520c:	20014374 	.word	0x20014374

08005210 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005214:	4b07      	ldr	r3, [pc, #28]	; (8005234 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d008      	beq.n	800522e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800521c:	4b05      	ldr	r3, [pc, #20]	; (8005234 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005226:	4b03      	ldr	r3, [pc, #12]	; (8005234 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	4798      	blx	r3
  }
}
 800522e:	bf00      	nop
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	20014374 	.word	0x20014374

08005238 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005240:	f3ef 8311 	mrs	r3, BASEPRI
 8005244:	f04f 0120 	mov.w	r1, #32
 8005248:	f381 8811 	msr	BASEPRI, r1
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	480b      	ldr	r0, [pc, #44]	; (800527c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005250:	f7fe fe5a 	bl	8003f08 <_PreparePacket>
 8005254:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005256:	2280      	movs	r2, #128	; 0x80
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	6938      	ldr	r0, [r7, #16]
 800525c:	f7fe fe24 	bl	8003ea8 <_EncodeStr>
 8005260:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005262:	220e      	movs	r2, #14
 8005264:	68f9      	ldr	r1, [r7, #12]
 8005266:	6938      	ldr	r0, [r7, #16]
 8005268:	f7fe ff3c 	bl	80040e4 <_SendPacket>
  RECORD_END();
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f383 8811 	msr	BASEPRI, r3
}
 8005272:	bf00      	nop
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	200143a4 	.word	0x200143a4

08005280 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005280:	b590      	push	{r4, r7, lr}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005286:	4b15      	ldr	r3, [pc, #84]	; (80052dc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01a      	beq.n	80052c4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800528e:	4b13      	ldr	r3, [pc, #76]	; (80052dc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d015      	beq.n	80052c4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005298:	4b10      	ldr	r3, [pc, #64]	; (80052dc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4798      	blx	r3
 80052a0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80052a4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80052a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052aa:	f04f 0200 	mov.w	r2, #0
 80052ae:	f04f 0300 	mov.w	r3, #0
 80052b2:	000a      	movs	r2, r1
 80052b4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80052b6:	4613      	mov	r3, r2
 80052b8:	461a      	mov	r2, r3
 80052ba:	4621      	mov	r1, r4
 80052bc:	200d      	movs	r0, #13
 80052be:	f7ff fcef 	bl	8004ca0 <SEGGER_SYSVIEW_RecordU32x2>
 80052c2:	e006      	b.n	80052d2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80052c4:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4619      	mov	r1, r3
 80052ca:	200c      	movs	r0, #12
 80052cc:	f7ff fcac 	bl	8004c28 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80052d0:	bf00      	nop
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd90      	pop	{r4, r7, pc}
 80052da:	bf00      	nop
 80052dc:	20014374 	.word	0x20014374
 80052e0:	e0001004 	.word	0xe0001004

080052e4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80052ea:	f3ef 8311 	mrs	r3, BASEPRI
 80052ee:	f04f 0120 	mov.w	r1, #32
 80052f2:	f381 8811 	msr	BASEPRI, r1
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	4819      	ldr	r0, [pc, #100]	; (8005360 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80052fa:	f7fe fe05 	bl	8003f08 <_PreparePacket>
 80052fe:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005304:	4b17      	ldr	r3, [pc, #92]	; (8005364 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	e00b      	b.n	8005330 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	b2da      	uxtb	r2, r3
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	1c59      	adds	r1, r3, #1
 8005320:	6179      	str	r1, [r7, #20]
 8005322:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	701a      	strb	r2, [r3, #0]
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	09db      	lsrs	r3, r3, #7
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b7f      	cmp	r3, #127	; 0x7f
 8005334:	d8f0      	bhi.n	8005318 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	617a      	str	r2, [r7, #20]
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	701a      	strb	r2, [r3, #0]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005346:	2202      	movs	r2, #2
 8005348:	6879      	ldr	r1, [r7, #4]
 800534a:	68b8      	ldr	r0, [r7, #8]
 800534c:	f7fe feca 	bl	80040e4 <_SendPacket>
  RECORD_END();
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f383 8811 	msr	BASEPRI, r3
}
 8005356:	bf00      	nop
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	200143a4 	.word	0x200143a4
 8005364:	e000ed04 	.word	0xe000ed04

08005368 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800536e:	f3ef 8311 	mrs	r3, BASEPRI
 8005372:	f04f 0120 	mov.w	r1, #32
 8005376:	f381 8811 	msr	BASEPRI, r1
 800537a:	607b      	str	r3, [r7, #4]
 800537c:	4807      	ldr	r0, [pc, #28]	; (800539c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800537e:	f7fe fdc3 	bl	8003f08 <_PreparePacket>
 8005382:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005384:	2203      	movs	r2, #3
 8005386:	6839      	ldr	r1, [r7, #0]
 8005388:	6838      	ldr	r0, [r7, #0]
 800538a:	f7fe feab 	bl	80040e4 <_SendPacket>
  RECORD_END();
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f383 8811 	msr	BASEPRI, r3
}
 8005394:	bf00      	nop
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	200143a4 	.word	0x200143a4

080053a0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80053a6:	f3ef 8311 	mrs	r3, BASEPRI
 80053aa:	f04f 0120 	mov.w	r1, #32
 80053ae:	f381 8811 	msr	BASEPRI, r1
 80053b2:	607b      	str	r3, [r7, #4]
 80053b4:	4807      	ldr	r0, [pc, #28]	; (80053d4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80053b6:	f7fe fda7 	bl	8003f08 <_PreparePacket>
 80053ba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80053bc:	2212      	movs	r2, #18
 80053be:	6839      	ldr	r1, [r7, #0]
 80053c0:	6838      	ldr	r0, [r7, #0]
 80053c2:	f7fe fe8f 	bl	80040e4 <_SendPacket>
  RECORD_END();
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f383 8811 	msr	BASEPRI, r3
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	200143a4 	.word	0x200143a4

080053d8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80053de:	f3ef 8311 	mrs	r3, BASEPRI
 80053e2:	f04f 0120 	mov.w	r1, #32
 80053e6:	f381 8811 	msr	BASEPRI, r1
 80053ea:	607b      	str	r3, [r7, #4]
 80053ec:	4807      	ldr	r0, [pc, #28]	; (800540c <SEGGER_SYSVIEW_OnIdle+0x34>)
 80053ee:	f7fe fd8b 	bl	8003f08 <_PreparePacket>
 80053f2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80053f4:	2211      	movs	r2, #17
 80053f6:	6839      	ldr	r1, [r7, #0]
 80053f8:	6838      	ldr	r0, [r7, #0]
 80053fa:	f7fe fe73 	bl	80040e4 <_SendPacket>
  RECORD_END();
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f383 8811 	msr	BASEPRI, r3
}
 8005404:	bf00      	nop
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	200143a4 	.word	0x200143a4

08005410 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005410:	b580      	push	{r7, lr}
 8005412:	b088      	sub	sp, #32
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005418:	f3ef 8311 	mrs	r3, BASEPRI
 800541c:	f04f 0120 	mov.w	r1, #32
 8005420:	f381 8811 	msr	BASEPRI, r1
 8005424:	617b      	str	r3, [r7, #20]
 8005426:	4819      	ldr	r0, [pc, #100]	; (800548c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005428:	f7fe fd6e 	bl	8003f08 <_PreparePacket>
 800542c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005432:	4b17      	ldr	r3, [pc, #92]	; (8005490 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	61fb      	str	r3, [r7, #28]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	61bb      	str	r3, [r7, #24]
 8005444:	e00b      	b.n	800545e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	b2da      	uxtb	r2, r3
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	1c59      	adds	r1, r3, #1
 800544e:	61f9      	str	r1, [r7, #28]
 8005450:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005454:	b2d2      	uxtb	r2, r2
 8005456:	701a      	strb	r2, [r3, #0]
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	09db      	lsrs	r3, r3, #7
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b7f      	cmp	r3, #127	; 0x7f
 8005462:	d8f0      	bhi.n	8005446 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	61fa      	str	r2, [r7, #28]
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	b2d2      	uxtb	r2, r2
 800546e:	701a      	strb	r2, [r3, #0]
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005474:	2208      	movs	r2, #8
 8005476:	68f9      	ldr	r1, [r7, #12]
 8005478:	6938      	ldr	r0, [r7, #16]
 800547a:	f7fe fe33 	bl	80040e4 <_SendPacket>
  RECORD_END();
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f383 8811 	msr	BASEPRI, r3
}
 8005484:	bf00      	nop
 8005486:	3720      	adds	r7, #32
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	200143a4 	.word	0x200143a4
 8005490:	20014374 	.word	0x20014374

08005494 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800549c:	f3ef 8311 	mrs	r3, BASEPRI
 80054a0:	f04f 0120 	mov.w	r1, #32
 80054a4:	f381 8811 	msr	BASEPRI, r1
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	4819      	ldr	r0, [pc, #100]	; (8005510 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80054ac:	f7fe fd2c 	bl	8003f08 <_PreparePacket>
 80054b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80054b6:	4b17      	ldr	r3, [pc, #92]	; (8005514 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	61fb      	str	r3, [r7, #28]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	61bb      	str	r3, [r7, #24]
 80054c8:	e00b      	b.n	80054e2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	1c59      	adds	r1, r3, #1
 80054d2:	61f9      	str	r1, [r7, #28]
 80054d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	701a      	strb	r2, [r3, #0]
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	09db      	lsrs	r3, r3, #7
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	2b7f      	cmp	r3, #127	; 0x7f
 80054e6:	d8f0      	bhi.n	80054ca <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	1c5a      	adds	r2, r3, #1
 80054ec:	61fa      	str	r2, [r7, #28]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	701a      	strb	r2, [r3, #0]
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80054f8:	2204      	movs	r2, #4
 80054fa:	68f9      	ldr	r1, [r7, #12]
 80054fc:	6938      	ldr	r0, [r7, #16]
 80054fe:	f7fe fdf1 	bl	80040e4 <_SendPacket>
  RECORD_END();
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f383 8811 	msr	BASEPRI, r3
}
 8005508:	bf00      	nop
 800550a:	3720      	adds	r7, #32
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	200143a4 	.word	0x200143a4
 8005514:	20014374 	.word	0x20014374

08005518 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005518:	b580      	push	{r7, lr}
 800551a:	b088      	sub	sp, #32
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005520:	f3ef 8311 	mrs	r3, BASEPRI
 8005524:	f04f 0120 	mov.w	r1, #32
 8005528:	f381 8811 	msr	BASEPRI, r1
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	4819      	ldr	r0, [pc, #100]	; (8005594 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005530:	f7fe fcea 	bl	8003f08 <_PreparePacket>
 8005534:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800553a:	4b17      	ldr	r3, [pc, #92]	; (8005598 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	61fb      	str	r3, [r7, #28]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	61bb      	str	r3, [r7, #24]
 800554c:	e00b      	b.n	8005566 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	b2da      	uxtb	r2, r3
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	1c59      	adds	r1, r3, #1
 8005556:	61f9      	str	r1, [r7, #28]
 8005558:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	701a      	strb	r2, [r3, #0]
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	09db      	lsrs	r3, r3, #7
 8005564:	61bb      	str	r3, [r7, #24]
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	2b7f      	cmp	r3, #127	; 0x7f
 800556a:	d8f0      	bhi.n	800554e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	61fa      	str	r2, [r7, #28]
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	b2d2      	uxtb	r2, r2
 8005576:	701a      	strb	r2, [r3, #0]
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800557c:	2206      	movs	r2, #6
 800557e:	68f9      	ldr	r1, [r7, #12]
 8005580:	6938      	ldr	r0, [r7, #16]
 8005582:	f7fe fdaf 	bl	80040e4 <_SendPacket>
  RECORD_END();
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f383 8811 	msr	BASEPRI, r3
}
 800558c:	bf00      	nop
 800558e:	3720      	adds	r7, #32
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	200143a4 	.word	0x200143a4
 8005598:	20014374 	.word	0x20014374

0800559c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b08c      	sub	sp, #48	; 0x30
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	4603      	mov	r3, r0
 80055a4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80055a6:	4b40      	ldr	r3, [pc, #256]	; (80056a8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d077      	beq.n	800569e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80055ae:	4b3e      	ldr	r3, [pc, #248]	; (80056a8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80055b4:	2300      	movs	r3, #0
 80055b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055b8:	e008      	b.n	80055cc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80055ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80055c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c8:	3301      	adds	r3, #1
 80055ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d3f2      	bcc.n	80055ba <SEGGER_SYSVIEW_SendModule+0x1e>
 80055d4:	e000      	b.n	80055d8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80055d6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80055d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d055      	beq.n	800568a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80055de:	f3ef 8311 	mrs	r3, BASEPRI
 80055e2:	f04f 0120 	mov.w	r1, #32
 80055e6:	f381 8811 	msr	BASEPRI, r1
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	482f      	ldr	r0, [pc, #188]	; (80056ac <SEGGER_SYSVIEW_SendModule+0x110>)
 80055ee:	f7fe fc8b 	bl	8003f08 <_PreparePacket>
 80055f2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
 80055fc:	79fb      	ldrb	r3, [r7, #7]
 80055fe:	623b      	str	r3, [r7, #32]
 8005600:	e00b      	b.n	800561a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	b2da      	uxtb	r2, r3
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	1c59      	adds	r1, r3, #1
 800560a:	6279      	str	r1, [r7, #36]	; 0x24
 800560c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	701a      	strb	r2, [r3, #0]
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	09db      	lsrs	r3, r3, #7
 8005618:	623b      	str	r3, [r7, #32]
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	2b7f      	cmp	r3, #127	; 0x7f
 800561e:	d8f0      	bhi.n	8005602 <SEGGER_SYSVIEW_SendModule+0x66>
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	627a      	str	r2, [r7, #36]	; 0x24
 8005626:	6a3a      	ldr	r2, [r7, #32]
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	701a      	strb	r2, [r3, #0]
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	61bb      	str	r3, [r7, #24]
 800563a:	e00b      	b.n	8005654 <SEGGER_SYSVIEW_SendModule+0xb8>
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	b2da      	uxtb	r2, r3
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	1c59      	adds	r1, r3, #1
 8005644:	61f9      	str	r1, [r7, #28]
 8005646:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	701a      	strb	r2, [r3, #0]
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	09db      	lsrs	r3, r3, #7
 8005652:	61bb      	str	r3, [r7, #24]
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	2b7f      	cmp	r3, #127	; 0x7f
 8005658:	d8f0      	bhi.n	800563c <SEGGER_SYSVIEW_SendModule+0xa0>
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	61fa      	str	r2, [r7, #28]
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	701a      	strb	r2, [r3, #0]
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2280      	movs	r2, #128	; 0x80
 8005670:	4619      	mov	r1, r3
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f7fe fc18 	bl	8003ea8 <_EncodeStr>
 8005678:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800567a:	2216      	movs	r2, #22
 800567c:	68f9      	ldr	r1, [r7, #12]
 800567e:	6938      	ldr	r0, [r7, #16]
 8005680:	f7fe fd30 	bl	80040e4 <_SendPacket>
      RECORD_END();
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800568a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568c:	2b00      	cmp	r3, #0
 800568e:	d006      	beq.n	800569e <SEGGER_SYSVIEW_SendModule+0x102>
 8005690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	4798      	blx	r3
    }
  }
}
 800569e:	bf00      	nop
 80056a0:	3730      	adds	r7, #48	; 0x30
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	2001439c 	.word	0x2001439c
 80056ac:	200143a4 	.word	0x200143a4

080056b0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80056b6:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00f      	beq.n	80056de <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80056be:	4b0a      	ldr	r3, [pc, #40]	; (80056e8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1f2      	bne.n	80056c4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80056de:	bf00      	nop
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	2001439c 	.word	0x2001439c

080056ec <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80056f2:	f3ef 8311 	mrs	r3, BASEPRI
 80056f6:	f04f 0120 	mov.w	r1, #32
 80056fa:	f381 8811 	msr	BASEPRI, r1
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	4817      	ldr	r0, [pc, #92]	; (8005760 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005702:	f7fe fc01 	bl	8003f08 <_PreparePacket>
 8005706:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	4b14      	ldr	r3, [pc, #80]	; (8005764 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	e00b      	b.n	8005730 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	b2da      	uxtb	r2, r3
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	1c59      	adds	r1, r3, #1
 8005720:	6179      	str	r1, [r7, #20]
 8005722:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	09db      	lsrs	r3, r3, #7
 800572e:	613b      	str	r3, [r7, #16]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	2b7f      	cmp	r3, #127	; 0x7f
 8005734:	d8f0      	bhi.n	8005718 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	617a      	str	r2, [r7, #20]
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005746:	221b      	movs	r2, #27
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	68b8      	ldr	r0, [r7, #8]
 800574c:	f7fe fcca 	bl	80040e4 <_SendPacket>
  RECORD_END();
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f383 8811 	msr	BASEPRI, r3
}
 8005756:	bf00      	nop
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	200143a4 	.word	0x200143a4
 8005764:	200143a0 	.word	0x200143a0

08005768 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005768:	b40f      	push	{r0, r1, r2, r3}
 800576a:	b580      	push	{r7, lr}
 800576c:	b082      	sub	sp, #8
 800576e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005770:	f107 0314 	add.w	r3, r7, #20
 8005774:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005776:	1d3b      	adds	r3, r7, #4
 8005778:	461a      	mov	r2, r3
 800577a:	2100      	movs	r1, #0
 800577c:	6938      	ldr	r0, [r7, #16]
 800577e:	f7fe ffc1 	bl	8004704 <_VPrintTarget>
  va_end(ParamList);
}
 8005782:	bf00      	nop
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800578c:	b004      	add	sp, #16
 800578e:	4770      	bx	lr

08005790 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005790:	b580      	push	{r7, lr}
 8005792:	b08a      	sub	sp, #40	; 0x28
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005798:	f3ef 8311 	mrs	r3, BASEPRI
 800579c:	f04f 0120 	mov.w	r1, #32
 80057a0:	f381 8811 	msr	BASEPRI, r1
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	4827      	ldr	r0, [pc, #156]	; (8005844 <SEGGER_SYSVIEW_Warn+0xb4>)
 80057a8:	f7fe fbae 	bl	8003f08 <_PreparePacket>
 80057ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057ae:	2280      	movs	r2, #128	; 0x80
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	6938      	ldr	r0, [r7, #16]
 80057b4:	f7fe fb78 	bl	8003ea8 <_EncodeStr>
 80057b8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
 80057be:	2301      	movs	r3, #1
 80057c0:	623b      	str	r3, [r7, #32]
 80057c2:	e00b      	b.n	80057dc <SEGGER_SYSVIEW_Warn+0x4c>
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	1c59      	adds	r1, r3, #1
 80057cc:	6279      	str	r1, [r7, #36]	; 0x24
 80057ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	701a      	strb	r2, [r3, #0]
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	09db      	lsrs	r3, r3, #7
 80057da:	623b      	str	r3, [r7, #32]
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	2b7f      	cmp	r3, #127	; 0x7f
 80057e0:	d8f0      	bhi.n	80057c4 <SEGGER_SYSVIEW_Warn+0x34>
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	627a      	str	r2, [r7, #36]	; 0x24
 80057e8:	6a3a      	ldr	r2, [r7, #32]
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	61fb      	str	r3, [r7, #28]
 80057f6:	2300      	movs	r3, #0
 80057f8:	61bb      	str	r3, [r7, #24]
 80057fa:	e00b      	b.n	8005814 <SEGGER_SYSVIEW_Warn+0x84>
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	1c59      	adds	r1, r3, #1
 8005804:	61f9      	str	r1, [r7, #28]
 8005806:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	701a      	strb	r2, [r3, #0]
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	09db      	lsrs	r3, r3, #7
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	2b7f      	cmp	r3, #127	; 0x7f
 8005818:	d8f0      	bhi.n	80057fc <SEGGER_SYSVIEW_Warn+0x6c>
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	61fa      	str	r2, [r7, #28]
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	701a      	strb	r2, [r3, #0]
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800582a:	221a      	movs	r2, #26
 800582c:	68f9      	ldr	r1, [r7, #12]
 800582e:	6938      	ldr	r0, [r7, #16]
 8005830:	f7fe fc58 	bl	80040e4 <_SendPacket>
  RECORD_END();
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f383 8811 	msr	BASEPRI, r3
}
 800583a:	bf00      	nop
 800583c:	3728      	adds	r7, #40	; 0x28
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	200143a4 	.word	0x200143a4

08005848 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	2000      	movs	r0, #0
 800585c:	f7fe fa2e 	bl	8003cbc <SEGGER_RTT_Write>
  return len;
 8005860:	683b      	ldr	r3, [r7, #0]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <__errno>:
 800586c:	4b01      	ldr	r3, [pc, #4]	; (8005874 <__errno+0x8>)
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20000014 	.word	0x20000014

08005878 <__libc_init_array>:
 8005878:	b570      	push	{r4, r5, r6, lr}
 800587a:	4d0d      	ldr	r5, [pc, #52]	; (80058b0 <__libc_init_array+0x38>)
 800587c:	4c0d      	ldr	r4, [pc, #52]	; (80058b4 <__libc_init_array+0x3c>)
 800587e:	1b64      	subs	r4, r4, r5
 8005880:	10a4      	asrs	r4, r4, #2
 8005882:	2600      	movs	r6, #0
 8005884:	42a6      	cmp	r6, r4
 8005886:	d109      	bne.n	800589c <__libc_init_array+0x24>
 8005888:	4d0b      	ldr	r5, [pc, #44]	; (80058b8 <__libc_init_array+0x40>)
 800588a:	4c0c      	ldr	r4, [pc, #48]	; (80058bc <__libc_init_array+0x44>)
 800588c:	f001 fa12 	bl	8006cb4 <_init>
 8005890:	1b64      	subs	r4, r4, r5
 8005892:	10a4      	asrs	r4, r4, #2
 8005894:	2600      	movs	r6, #0
 8005896:	42a6      	cmp	r6, r4
 8005898:	d105      	bne.n	80058a6 <__libc_init_array+0x2e>
 800589a:	bd70      	pop	{r4, r5, r6, pc}
 800589c:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a0:	4798      	blx	r3
 80058a2:	3601      	adds	r6, #1
 80058a4:	e7ee      	b.n	8005884 <__libc_init_array+0xc>
 80058a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058aa:	4798      	blx	r3
 80058ac:	3601      	adds	r6, #1
 80058ae:	e7f2      	b.n	8005896 <__libc_init_array+0x1e>
 80058b0:	08006ed8 	.word	0x08006ed8
 80058b4:	08006ed8 	.word	0x08006ed8
 80058b8:	08006ed8 	.word	0x08006ed8
 80058bc:	08006edc 	.word	0x08006edc

080058c0 <memcmp>:
 80058c0:	b510      	push	{r4, lr}
 80058c2:	3901      	subs	r1, #1
 80058c4:	4402      	add	r2, r0
 80058c6:	4290      	cmp	r0, r2
 80058c8:	d101      	bne.n	80058ce <memcmp+0xe>
 80058ca:	2000      	movs	r0, #0
 80058cc:	e005      	b.n	80058da <memcmp+0x1a>
 80058ce:	7803      	ldrb	r3, [r0, #0]
 80058d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80058d4:	42a3      	cmp	r3, r4
 80058d6:	d001      	beq.n	80058dc <memcmp+0x1c>
 80058d8:	1b18      	subs	r0, r3, r4
 80058da:	bd10      	pop	{r4, pc}
 80058dc:	3001      	adds	r0, #1
 80058de:	e7f2      	b.n	80058c6 <memcmp+0x6>

080058e0 <memcpy>:
 80058e0:	440a      	add	r2, r1
 80058e2:	4291      	cmp	r1, r2
 80058e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80058e8:	d100      	bne.n	80058ec <memcpy+0xc>
 80058ea:	4770      	bx	lr
 80058ec:	b510      	push	{r4, lr}
 80058ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058f6:	4291      	cmp	r1, r2
 80058f8:	d1f9      	bne.n	80058ee <memcpy+0xe>
 80058fa:	bd10      	pop	{r4, pc}

080058fc <memset>:
 80058fc:	4402      	add	r2, r0
 80058fe:	4603      	mov	r3, r0
 8005900:	4293      	cmp	r3, r2
 8005902:	d100      	bne.n	8005906 <memset+0xa>
 8005904:	4770      	bx	lr
 8005906:	f803 1b01 	strb.w	r1, [r3], #1
 800590a:	e7f9      	b.n	8005900 <memset+0x4>

0800590c <iprintf>:
 800590c:	b40f      	push	{r0, r1, r2, r3}
 800590e:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <iprintf+0x2c>)
 8005910:	b513      	push	{r0, r1, r4, lr}
 8005912:	681c      	ldr	r4, [r3, #0]
 8005914:	b124      	cbz	r4, 8005920 <iprintf+0x14>
 8005916:	69a3      	ldr	r3, [r4, #24]
 8005918:	b913      	cbnz	r3, 8005920 <iprintf+0x14>
 800591a:	4620      	mov	r0, r4
 800591c:	f000 fa92 	bl	8005e44 <__sinit>
 8005920:	ab05      	add	r3, sp, #20
 8005922:	9a04      	ldr	r2, [sp, #16]
 8005924:	68a1      	ldr	r1, [r4, #8]
 8005926:	9301      	str	r3, [sp, #4]
 8005928:	4620      	mov	r0, r4
 800592a:	f000 fdf7 	bl	800651c <_vfiprintf_r>
 800592e:	b002      	add	sp, #8
 8005930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005934:	b004      	add	sp, #16
 8005936:	4770      	bx	lr
 8005938:	20000014 	.word	0x20000014

0800593c <_puts_r>:
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	460e      	mov	r6, r1
 8005940:	4605      	mov	r5, r0
 8005942:	b118      	cbz	r0, 800594c <_puts_r+0x10>
 8005944:	6983      	ldr	r3, [r0, #24]
 8005946:	b90b      	cbnz	r3, 800594c <_puts_r+0x10>
 8005948:	f000 fa7c 	bl	8005e44 <__sinit>
 800594c:	69ab      	ldr	r3, [r5, #24]
 800594e:	68ac      	ldr	r4, [r5, #8]
 8005950:	b913      	cbnz	r3, 8005958 <_puts_r+0x1c>
 8005952:	4628      	mov	r0, r5
 8005954:	f000 fa76 	bl	8005e44 <__sinit>
 8005958:	4b2c      	ldr	r3, [pc, #176]	; (8005a0c <_puts_r+0xd0>)
 800595a:	429c      	cmp	r4, r3
 800595c:	d120      	bne.n	80059a0 <_puts_r+0x64>
 800595e:	686c      	ldr	r4, [r5, #4]
 8005960:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005962:	07db      	lsls	r3, r3, #31
 8005964:	d405      	bmi.n	8005972 <_puts_r+0x36>
 8005966:	89a3      	ldrh	r3, [r4, #12]
 8005968:	0598      	lsls	r0, r3, #22
 800596a:	d402      	bmi.n	8005972 <_puts_r+0x36>
 800596c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800596e:	f000 fb07 	bl	8005f80 <__retarget_lock_acquire_recursive>
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	0719      	lsls	r1, r3, #28
 8005976:	d51d      	bpl.n	80059b4 <_puts_r+0x78>
 8005978:	6923      	ldr	r3, [r4, #16]
 800597a:	b1db      	cbz	r3, 80059b4 <_puts_r+0x78>
 800597c:	3e01      	subs	r6, #1
 800597e:	68a3      	ldr	r3, [r4, #8]
 8005980:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005984:	3b01      	subs	r3, #1
 8005986:	60a3      	str	r3, [r4, #8]
 8005988:	bb39      	cbnz	r1, 80059da <_puts_r+0x9e>
 800598a:	2b00      	cmp	r3, #0
 800598c:	da38      	bge.n	8005a00 <_puts_r+0xc4>
 800598e:	4622      	mov	r2, r4
 8005990:	210a      	movs	r1, #10
 8005992:	4628      	mov	r0, r5
 8005994:	f000 f87c 	bl	8005a90 <__swbuf_r>
 8005998:	3001      	adds	r0, #1
 800599a:	d011      	beq.n	80059c0 <_puts_r+0x84>
 800599c:	250a      	movs	r5, #10
 800599e:	e011      	b.n	80059c4 <_puts_r+0x88>
 80059a0:	4b1b      	ldr	r3, [pc, #108]	; (8005a10 <_puts_r+0xd4>)
 80059a2:	429c      	cmp	r4, r3
 80059a4:	d101      	bne.n	80059aa <_puts_r+0x6e>
 80059a6:	68ac      	ldr	r4, [r5, #8]
 80059a8:	e7da      	b.n	8005960 <_puts_r+0x24>
 80059aa:	4b1a      	ldr	r3, [pc, #104]	; (8005a14 <_puts_r+0xd8>)
 80059ac:	429c      	cmp	r4, r3
 80059ae:	bf08      	it	eq
 80059b0:	68ec      	ldreq	r4, [r5, #12]
 80059b2:	e7d5      	b.n	8005960 <_puts_r+0x24>
 80059b4:	4621      	mov	r1, r4
 80059b6:	4628      	mov	r0, r5
 80059b8:	f000 f8bc 	bl	8005b34 <__swsetup_r>
 80059bc:	2800      	cmp	r0, #0
 80059be:	d0dd      	beq.n	800597c <_puts_r+0x40>
 80059c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80059c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059c6:	07da      	lsls	r2, r3, #31
 80059c8:	d405      	bmi.n	80059d6 <_puts_r+0x9a>
 80059ca:	89a3      	ldrh	r3, [r4, #12]
 80059cc:	059b      	lsls	r3, r3, #22
 80059ce:	d402      	bmi.n	80059d6 <_puts_r+0x9a>
 80059d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059d2:	f000 fad6 	bl	8005f82 <__retarget_lock_release_recursive>
 80059d6:	4628      	mov	r0, r5
 80059d8:	bd70      	pop	{r4, r5, r6, pc}
 80059da:	2b00      	cmp	r3, #0
 80059dc:	da04      	bge.n	80059e8 <_puts_r+0xac>
 80059de:	69a2      	ldr	r2, [r4, #24]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	dc06      	bgt.n	80059f2 <_puts_r+0xb6>
 80059e4:	290a      	cmp	r1, #10
 80059e6:	d004      	beq.n	80059f2 <_puts_r+0xb6>
 80059e8:	6823      	ldr	r3, [r4, #0]
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	6022      	str	r2, [r4, #0]
 80059ee:	7019      	strb	r1, [r3, #0]
 80059f0:	e7c5      	b.n	800597e <_puts_r+0x42>
 80059f2:	4622      	mov	r2, r4
 80059f4:	4628      	mov	r0, r5
 80059f6:	f000 f84b 	bl	8005a90 <__swbuf_r>
 80059fa:	3001      	adds	r0, #1
 80059fc:	d1bf      	bne.n	800597e <_puts_r+0x42>
 80059fe:	e7df      	b.n	80059c0 <_puts_r+0x84>
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	250a      	movs	r5, #10
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	6022      	str	r2, [r4, #0]
 8005a08:	701d      	strb	r5, [r3, #0]
 8005a0a:	e7db      	b.n	80059c4 <_puts_r+0x88>
 8005a0c:	08006e5c 	.word	0x08006e5c
 8005a10:	08006e7c 	.word	0x08006e7c
 8005a14:	08006e3c 	.word	0x08006e3c

08005a18 <puts>:
 8005a18:	4b02      	ldr	r3, [pc, #8]	; (8005a24 <puts+0xc>)
 8005a1a:	4601      	mov	r1, r0
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	f7ff bf8d 	b.w	800593c <_puts_r>
 8005a22:	bf00      	nop
 8005a24:	20000014 	.word	0x20000014

08005a28 <sniprintf>:
 8005a28:	b40c      	push	{r2, r3}
 8005a2a:	b530      	push	{r4, r5, lr}
 8005a2c:	4b17      	ldr	r3, [pc, #92]	; (8005a8c <sniprintf+0x64>)
 8005a2e:	1e0c      	subs	r4, r1, #0
 8005a30:	681d      	ldr	r5, [r3, #0]
 8005a32:	b09d      	sub	sp, #116	; 0x74
 8005a34:	da08      	bge.n	8005a48 <sniprintf+0x20>
 8005a36:	238b      	movs	r3, #139	; 0x8b
 8005a38:	602b      	str	r3, [r5, #0]
 8005a3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a3e:	b01d      	add	sp, #116	; 0x74
 8005a40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a44:	b002      	add	sp, #8
 8005a46:	4770      	bx	lr
 8005a48:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005a4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005a50:	bf14      	ite	ne
 8005a52:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005a56:	4623      	moveq	r3, r4
 8005a58:	9304      	str	r3, [sp, #16]
 8005a5a:	9307      	str	r3, [sp, #28]
 8005a5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a60:	9002      	str	r0, [sp, #8]
 8005a62:	9006      	str	r0, [sp, #24]
 8005a64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a6a:	ab21      	add	r3, sp, #132	; 0x84
 8005a6c:	a902      	add	r1, sp, #8
 8005a6e:	4628      	mov	r0, r5
 8005a70:	9301      	str	r3, [sp, #4]
 8005a72:	f000 fc29 	bl	80062c8 <_svfiprintf_r>
 8005a76:	1c43      	adds	r3, r0, #1
 8005a78:	bfbc      	itt	lt
 8005a7a:	238b      	movlt	r3, #139	; 0x8b
 8005a7c:	602b      	strlt	r3, [r5, #0]
 8005a7e:	2c00      	cmp	r4, #0
 8005a80:	d0dd      	beq.n	8005a3e <sniprintf+0x16>
 8005a82:	9b02      	ldr	r3, [sp, #8]
 8005a84:	2200      	movs	r2, #0
 8005a86:	701a      	strb	r2, [r3, #0]
 8005a88:	e7d9      	b.n	8005a3e <sniprintf+0x16>
 8005a8a:	bf00      	nop
 8005a8c:	20000014 	.word	0x20000014

08005a90 <__swbuf_r>:
 8005a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a92:	460e      	mov	r6, r1
 8005a94:	4614      	mov	r4, r2
 8005a96:	4605      	mov	r5, r0
 8005a98:	b118      	cbz	r0, 8005aa2 <__swbuf_r+0x12>
 8005a9a:	6983      	ldr	r3, [r0, #24]
 8005a9c:	b90b      	cbnz	r3, 8005aa2 <__swbuf_r+0x12>
 8005a9e:	f000 f9d1 	bl	8005e44 <__sinit>
 8005aa2:	4b21      	ldr	r3, [pc, #132]	; (8005b28 <__swbuf_r+0x98>)
 8005aa4:	429c      	cmp	r4, r3
 8005aa6:	d12b      	bne.n	8005b00 <__swbuf_r+0x70>
 8005aa8:	686c      	ldr	r4, [r5, #4]
 8005aaa:	69a3      	ldr	r3, [r4, #24]
 8005aac:	60a3      	str	r3, [r4, #8]
 8005aae:	89a3      	ldrh	r3, [r4, #12]
 8005ab0:	071a      	lsls	r2, r3, #28
 8005ab2:	d52f      	bpl.n	8005b14 <__swbuf_r+0x84>
 8005ab4:	6923      	ldr	r3, [r4, #16]
 8005ab6:	b36b      	cbz	r3, 8005b14 <__swbuf_r+0x84>
 8005ab8:	6923      	ldr	r3, [r4, #16]
 8005aba:	6820      	ldr	r0, [r4, #0]
 8005abc:	1ac0      	subs	r0, r0, r3
 8005abe:	6963      	ldr	r3, [r4, #20]
 8005ac0:	b2f6      	uxtb	r6, r6
 8005ac2:	4283      	cmp	r3, r0
 8005ac4:	4637      	mov	r7, r6
 8005ac6:	dc04      	bgt.n	8005ad2 <__swbuf_r+0x42>
 8005ac8:	4621      	mov	r1, r4
 8005aca:	4628      	mov	r0, r5
 8005acc:	f000 f926 	bl	8005d1c <_fflush_r>
 8005ad0:	bb30      	cbnz	r0, 8005b20 <__swbuf_r+0x90>
 8005ad2:	68a3      	ldr	r3, [r4, #8]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	60a3      	str	r3, [r4, #8]
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	6022      	str	r2, [r4, #0]
 8005ade:	701e      	strb	r6, [r3, #0]
 8005ae0:	6963      	ldr	r3, [r4, #20]
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	4283      	cmp	r3, r0
 8005ae6:	d004      	beq.n	8005af2 <__swbuf_r+0x62>
 8005ae8:	89a3      	ldrh	r3, [r4, #12]
 8005aea:	07db      	lsls	r3, r3, #31
 8005aec:	d506      	bpl.n	8005afc <__swbuf_r+0x6c>
 8005aee:	2e0a      	cmp	r6, #10
 8005af0:	d104      	bne.n	8005afc <__swbuf_r+0x6c>
 8005af2:	4621      	mov	r1, r4
 8005af4:	4628      	mov	r0, r5
 8005af6:	f000 f911 	bl	8005d1c <_fflush_r>
 8005afa:	b988      	cbnz	r0, 8005b20 <__swbuf_r+0x90>
 8005afc:	4638      	mov	r0, r7
 8005afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b00:	4b0a      	ldr	r3, [pc, #40]	; (8005b2c <__swbuf_r+0x9c>)
 8005b02:	429c      	cmp	r4, r3
 8005b04:	d101      	bne.n	8005b0a <__swbuf_r+0x7a>
 8005b06:	68ac      	ldr	r4, [r5, #8]
 8005b08:	e7cf      	b.n	8005aaa <__swbuf_r+0x1a>
 8005b0a:	4b09      	ldr	r3, [pc, #36]	; (8005b30 <__swbuf_r+0xa0>)
 8005b0c:	429c      	cmp	r4, r3
 8005b0e:	bf08      	it	eq
 8005b10:	68ec      	ldreq	r4, [r5, #12]
 8005b12:	e7ca      	b.n	8005aaa <__swbuf_r+0x1a>
 8005b14:	4621      	mov	r1, r4
 8005b16:	4628      	mov	r0, r5
 8005b18:	f000 f80c 	bl	8005b34 <__swsetup_r>
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	d0cb      	beq.n	8005ab8 <__swbuf_r+0x28>
 8005b20:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005b24:	e7ea      	b.n	8005afc <__swbuf_r+0x6c>
 8005b26:	bf00      	nop
 8005b28:	08006e5c 	.word	0x08006e5c
 8005b2c:	08006e7c 	.word	0x08006e7c
 8005b30:	08006e3c 	.word	0x08006e3c

08005b34 <__swsetup_r>:
 8005b34:	4b32      	ldr	r3, [pc, #200]	; (8005c00 <__swsetup_r+0xcc>)
 8005b36:	b570      	push	{r4, r5, r6, lr}
 8005b38:	681d      	ldr	r5, [r3, #0]
 8005b3a:	4606      	mov	r6, r0
 8005b3c:	460c      	mov	r4, r1
 8005b3e:	b125      	cbz	r5, 8005b4a <__swsetup_r+0x16>
 8005b40:	69ab      	ldr	r3, [r5, #24]
 8005b42:	b913      	cbnz	r3, 8005b4a <__swsetup_r+0x16>
 8005b44:	4628      	mov	r0, r5
 8005b46:	f000 f97d 	bl	8005e44 <__sinit>
 8005b4a:	4b2e      	ldr	r3, [pc, #184]	; (8005c04 <__swsetup_r+0xd0>)
 8005b4c:	429c      	cmp	r4, r3
 8005b4e:	d10f      	bne.n	8005b70 <__swsetup_r+0x3c>
 8005b50:	686c      	ldr	r4, [r5, #4]
 8005b52:	89a3      	ldrh	r3, [r4, #12]
 8005b54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b58:	0719      	lsls	r1, r3, #28
 8005b5a:	d42c      	bmi.n	8005bb6 <__swsetup_r+0x82>
 8005b5c:	06dd      	lsls	r5, r3, #27
 8005b5e:	d411      	bmi.n	8005b84 <__swsetup_r+0x50>
 8005b60:	2309      	movs	r3, #9
 8005b62:	6033      	str	r3, [r6, #0]
 8005b64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b68:	81a3      	strh	r3, [r4, #12]
 8005b6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b6e:	e03e      	b.n	8005bee <__swsetup_r+0xba>
 8005b70:	4b25      	ldr	r3, [pc, #148]	; (8005c08 <__swsetup_r+0xd4>)
 8005b72:	429c      	cmp	r4, r3
 8005b74:	d101      	bne.n	8005b7a <__swsetup_r+0x46>
 8005b76:	68ac      	ldr	r4, [r5, #8]
 8005b78:	e7eb      	b.n	8005b52 <__swsetup_r+0x1e>
 8005b7a:	4b24      	ldr	r3, [pc, #144]	; (8005c0c <__swsetup_r+0xd8>)
 8005b7c:	429c      	cmp	r4, r3
 8005b7e:	bf08      	it	eq
 8005b80:	68ec      	ldreq	r4, [r5, #12]
 8005b82:	e7e6      	b.n	8005b52 <__swsetup_r+0x1e>
 8005b84:	0758      	lsls	r0, r3, #29
 8005b86:	d512      	bpl.n	8005bae <__swsetup_r+0x7a>
 8005b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b8a:	b141      	cbz	r1, 8005b9e <__swsetup_r+0x6a>
 8005b8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b90:	4299      	cmp	r1, r3
 8005b92:	d002      	beq.n	8005b9a <__swsetup_r+0x66>
 8005b94:	4630      	mov	r0, r6
 8005b96:	f000 fa5b 	bl	8006050 <_free_r>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	6363      	str	r3, [r4, #52]	; 0x34
 8005b9e:	89a3      	ldrh	r3, [r4, #12]
 8005ba0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ba4:	81a3      	strh	r3, [r4, #12]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	6063      	str	r3, [r4, #4]
 8005baa:	6923      	ldr	r3, [r4, #16]
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	89a3      	ldrh	r3, [r4, #12]
 8005bb0:	f043 0308 	orr.w	r3, r3, #8
 8005bb4:	81a3      	strh	r3, [r4, #12]
 8005bb6:	6923      	ldr	r3, [r4, #16]
 8005bb8:	b94b      	cbnz	r3, 8005bce <__swsetup_r+0x9a>
 8005bba:	89a3      	ldrh	r3, [r4, #12]
 8005bbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bc4:	d003      	beq.n	8005bce <__swsetup_r+0x9a>
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	4630      	mov	r0, r6
 8005bca:	f000 fa01 	bl	8005fd0 <__smakebuf_r>
 8005bce:	89a0      	ldrh	r0, [r4, #12]
 8005bd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bd4:	f010 0301 	ands.w	r3, r0, #1
 8005bd8:	d00a      	beq.n	8005bf0 <__swsetup_r+0xbc>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60a3      	str	r3, [r4, #8]
 8005bde:	6963      	ldr	r3, [r4, #20]
 8005be0:	425b      	negs	r3, r3
 8005be2:	61a3      	str	r3, [r4, #24]
 8005be4:	6923      	ldr	r3, [r4, #16]
 8005be6:	b943      	cbnz	r3, 8005bfa <__swsetup_r+0xc6>
 8005be8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005bec:	d1ba      	bne.n	8005b64 <__swsetup_r+0x30>
 8005bee:	bd70      	pop	{r4, r5, r6, pc}
 8005bf0:	0781      	lsls	r1, r0, #30
 8005bf2:	bf58      	it	pl
 8005bf4:	6963      	ldrpl	r3, [r4, #20]
 8005bf6:	60a3      	str	r3, [r4, #8]
 8005bf8:	e7f4      	b.n	8005be4 <__swsetup_r+0xb0>
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	e7f7      	b.n	8005bee <__swsetup_r+0xba>
 8005bfe:	bf00      	nop
 8005c00:	20000014 	.word	0x20000014
 8005c04:	08006e5c 	.word	0x08006e5c
 8005c08:	08006e7c 	.word	0x08006e7c
 8005c0c:	08006e3c 	.word	0x08006e3c

08005c10 <__sflush_r>:
 8005c10:	898a      	ldrh	r2, [r1, #12]
 8005c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c16:	4605      	mov	r5, r0
 8005c18:	0710      	lsls	r0, r2, #28
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	d458      	bmi.n	8005cd0 <__sflush_r+0xc0>
 8005c1e:	684b      	ldr	r3, [r1, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	dc05      	bgt.n	8005c30 <__sflush_r+0x20>
 8005c24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	dc02      	bgt.n	8005c30 <__sflush_r+0x20>
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c32:	2e00      	cmp	r6, #0
 8005c34:	d0f9      	beq.n	8005c2a <__sflush_r+0x1a>
 8005c36:	2300      	movs	r3, #0
 8005c38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c3c:	682f      	ldr	r7, [r5, #0]
 8005c3e:	602b      	str	r3, [r5, #0]
 8005c40:	d032      	beq.n	8005ca8 <__sflush_r+0x98>
 8005c42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c44:	89a3      	ldrh	r3, [r4, #12]
 8005c46:	075a      	lsls	r2, r3, #29
 8005c48:	d505      	bpl.n	8005c56 <__sflush_r+0x46>
 8005c4a:	6863      	ldr	r3, [r4, #4]
 8005c4c:	1ac0      	subs	r0, r0, r3
 8005c4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c50:	b10b      	cbz	r3, 8005c56 <__sflush_r+0x46>
 8005c52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c54:	1ac0      	subs	r0, r0, r3
 8005c56:	2300      	movs	r3, #0
 8005c58:	4602      	mov	r2, r0
 8005c5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c5c:	6a21      	ldr	r1, [r4, #32]
 8005c5e:	4628      	mov	r0, r5
 8005c60:	47b0      	blx	r6
 8005c62:	1c43      	adds	r3, r0, #1
 8005c64:	89a3      	ldrh	r3, [r4, #12]
 8005c66:	d106      	bne.n	8005c76 <__sflush_r+0x66>
 8005c68:	6829      	ldr	r1, [r5, #0]
 8005c6a:	291d      	cmp	r1, #29
 8005c6c:	d82c      	bhi.n	8005cc8 <__sflush_r+0xb8>
 8005c6e:	4a2a      	ldr	r2, [pc, #168]	; (8005d18 <__sflush_r+0x108>)
 8005c70:	40ca      	lsrs	r2, r1
 8005c72:	07d6      	lsls	r6, r2, #31
 8005c74:	d528      	bpl.n	8005cc8 <__sflush_r+0xb8>
 8005c76:	2200      	movs	r2, #0
 8005c78:	6062      	str	r2, [r4, #4]
 8005c7a:	04d9      	lsls	r1, r3, #19
 8005c7c:	6922      	ldr	r2, [r4, #16]
 8005c7e:	6022      	str	r2, [r4, #0]
 8005c80:	d504      	bpl.n	8005c8c <__sflush_r+0x7c>
 8005c82:	1c42      	adds	r2, r0, #1
 8005c84:	d101      	bne.n	8005c8a <__sflush_r+0x7a>
 8005c86:	682b      	ldr	r3, [r5, #0]
 8005c88:	b903      	cbnz	r3, 8005c8c <__sflush_r+0x7c>
 8005c8a:	6560      	str	r0, [r4, #84]	; 0x54
 8005c8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c8e:	602f      	str	r7, [r5, #0]
 8005c90:	2900      	cmp	r1, #0
 8005c92:	d0ca      	beq.n	8005c2a <__sflush_r+0x1a>
 8005c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c98:	4299      	cmp	r1, r3
 8005c9a:	d002      	beq.n	8005ca2 <__sflush_r+0x92>
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	f000 f9d7 	bl	8006050 <_free_r>
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	6360      	str	r0, [r4, #52]	; 0x34
 8005ca6:	e7c1      	b.n	8005c2c <__sflush_r+0x1c>
 8005ca8:	6a21      	ldr	r1, [r4, #32]
 8005caa:	2301      	movs	r3, #1
 8005cac:	4628      	mov	r0, r5
 8005cae:	47b0      	blx	r6
 8005cb0:	1c41      	adds	r1, r0, #1
 8005cb2:	d1c7      	bne.n	8005c44 <__sflush_r+0x34>
 8005cb4:	682b      	ldr	r3, [r5, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d0c4      	beq.n	8005c44 <__sflush_r+0x34>
 8005cba:	2b1d      	cmp	r3, #29
 8005cbc:	d001      	beq.n	8005cc2 <__sflush_r+0xb2>
 8005cbe:	2b16      	cmp	r3, #22
 8005cc0:	d101      	bne.n	8005cc6 <__sflush_r+0xb6>
 8005cc2:	602f      	str	r7, [r5, #0]
 8005cc4:	e7b1      	b.n	8005c2a <__sflush_r+0x1a>
 8005cc6:	89a3      	ldrh	r3, [r4, #12]
 8005cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ccc:	81a3      	strh	r3, [r4, #12]
 8005cce:	e7ad      	b.n	8005c2c <__sflush_r+0x1c>
 8005cd0:	690f      	ldr	r7, [r1, #16]
 8005cd2:	2f00      	cmp	r7, #0
 8005cd4:	d0a9      	beq.n	8005c2a <__sflush_r+0x1a>
 8005cd6:	0793      	lsls	r3, r2, #30
 8005cd8:	680e      	ldr	r6, [r1, #0]
 8005cda:	bf08      	it	eq
 8005cdc:	694b      	ldreq	r3, [r1, #20]
 8005cde:	600f      	str	r7, [r1, #0]
 8005ce0:	bf18      	it	ne
 8005ce2:	2300      	movne	r3, #0
 8005ce4:	eba6 0807 	sub.w	r8, r6, r7
 8005ce8:	608b      	str	r3, [r1, #8]
 8005cea:	f1b8 0f00 	cmp.w	r8, #0
 8005cee:	dd9c      	ble.n	8005c2a <__sflush_r+0x1a>
 8005cf0:	6a21      	ldr	r1, [r4, #32]
 8005cf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005cf4:	4643      	mov	r3, r8
 8005cf6:	463a      	mov	r2, r7
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	47b0      	blx	r6
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	dc06      	bgt.n	8005d0e <__sflush_r+0xfe>
 8005d00:	89a3      	ldrh	r3, [r4, #12]
 8005d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d06:	81a3      	strh	r3, [r4, #12]
 8005d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d0c:	e78e      	b.n	8005c2c <__sflush_r+0x1c>
 8005d0e:	4407      	add	r7, r0
 8005d10:	eba8 0800 	sub.w	r8, r8, r0
 8005d14:	e7e9      	b.n	8005cea <__sflush_r+0xda>
 8005d16:	bf00      	nop
 8005d18:	20400001 	.word	0x20400001

08005d1c <_fflush_r>:
 8005d1c:	b538      	push	{r3, r4, r5, lr}
 8005d1e:	690b      	ldr	r3, [r1, #16]
 8005d20:	4605      	mov	r5, r0
 8005d22:	460c      	mov	r4, r1
 8005d24:	b913      	cbnz	r3, 8005d2c <_fflush_r+0x10>
 8005d26:	2500      	movs	r5, #0
 8005d28:	4628      	mov	r0, r5
 8005d2a:	bd38      	pop	{r3, r4, r5, pc}
 8005d2c:	b118      	cbz	r0, 8005d36 <_fflush_r+0x1a>
 8005d2e:	6983      	ldr	r3, [r0, #24]
 8005d30:	b90b      	cbnz	r3, 8005d36 <_fflush_r+0x1a>
 8005d32:	f000 f887 	bl	8005e44 <__sinit>
 8005d36:	4b14      	ldr	r3, [pc, #80]	; (8005d88 <_fflush_r+0x6c>)
 8005d38:	429c      	cmp	r4, r3
 8005d3a:	d11b      	bne.n	8005d74 <_fflush_r+0x58>
 8005d3c:	686c      	ldr	r4, [r5, #4]
 8005d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d0ef      	beq.n	8005d26 <_fflush_r+0xa>
 8005d46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d48:	07d0      	lsls	r0, r2, #31
 8005d4a:	d404      	bmi.n	8005d56 <_fflush_r+0x3a>
 8005d4c:	0599      	lsls	r1, r3, #22
 8005d4e:	d402      	bmi.n	8005d56 <_fflush_r+0x3a>
 8005d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d52:	f000 f915 	bl	8005f80 <__retarget_lock_acquire_recursive>
 8005d56:	4628      	mov	r0, r5
 8005d58:	4621      	mov	r1, r4
 8005d5a:	f7ff ff59 	bl	8005c10 <__sflush_r>
 8005d5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d60:	07da      	lsls	r2, r3, #31
 8005d62:	4605      	mov	r5, r0
 8005d64:	d4e0      	bmi.n	8005d28 <_fflush_r+0xc>
 8005d66:	89a3      	ldrh	r3, [r4, #12]
 8005d68:	059b      	lsls	r3, r3, #22
 8005d6a:	d4dd      	bmi.n	8005d28 <_fflush_r+0xc>
 8005d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d6e:	f000 f908 	bl	8005f82 <__retarget_lock_release_recursive>
 8005d72:	e7d9      	b.n	8005d28 <_fflush_r+0xc>
 8005d74:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <_fflush_r+0x70>)
 8005d76:	429c      	cmp	r4, r3
 8005d78:	d101      	bne.n	8005d7e <_fflush_r+0x62>
 8005d7a:	68ac      	ldr	r4, [r5, #8]
 8005d7c:	e7df      	b.n	8005d3e <_fflush_r+0x22>
 8005d7e:	4b04      	ldr	r3, [pc, #16]	; (8005d90 <_fflush_r+0x74>)
 8005d80:	429c      	cmp	r4, r3
 8005d82:	bf08      	it	eq
 8005d84:	68ec      	ldreq	r4, [r5, #12]
 8005d86:	e7da      	b.n	8005d3e <_fflush_r+0x22>
 8005d88:	08006e5c 	.word	0x08006e5c
 8005d8c:	08006e7c 	.word	0x08006e7c
 8005d90:	08006e3c 	.word	0x08006e3c

08005d94 <std>:
 8005d94:	2300      	movs	r3, #0
 8005d96:	b510      	push	{r4, lr}
 8005d98:	4604      	mov	r4, r0
 8005d9a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005da2:	6083      	str	r3, [r0, #8]
 8005da4:	8181      	strh	r1, [r0, #12]
 8005da6:	6643      	str	r3, [r0, #100]	; 0x64
 8005da8:	81c2      	strh	r2, [r0, #14]
 8005daa:	6183      	str	r3, [r0, #24]
 8005dac:	4619      	mov	r1, r3
 8005dae:	2208      	movs	r2, #8
 8005db0:	305c      	adds	r0, #92	; 0x5c
 8005db2:	f7ff fda3 	bl	80058fc <memset>
 8005db6:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <std+0x38>)
 8005db8:	6263      	str	r3, [r4, #36]	; 0x24
 8005dba:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <std+0x3c>)
 8005dbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8005dbe:	4b05      	ldr	r3, [pc, #20]	; (8005dd4 <std+0x40>)
 8005dc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005dc2:	4b05      	ldr	r3, [pc, #20]	; (8005dd8 <std+0x44>)
 8005dc4:	6224      	str	r4, [r4, #32]
 8005dc6:	6323      	str	r3, [r4, #48]	; 0x30
 8005dc8:	bd10      	pop	{r4, pc}
 8005dca:	bf00      	nop
 8005dcc:	08006ac5 	.word	0x08006ac5
 8005dd0:	08006ae7 	.word	0x08006ae7
 8005dd4:	08006b1f 	.word	0x08006b1f
 8005dd8:	08006b43 	.word	0x08006b43

08005ddc <_cleanup_r>:
 8005ddc:	4901      	ldr	r1, [pc, #4]	; (8005de4 <_cleanup_r+0x8>)
 8005dde:	f000 b8af 	b.w	8005f40 <_fwalk_reent>
 8005de2:	bf00      	nop
 8005de4:	08005d1d 	.word	0x08005d1d

08005de8 <__sfmoreglue>:
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	2268      	movs	r2, #104	; 0x68
 8005dec:	1e4d      	subs	r5, r1, #1
 8005dee:	4355      	muls	r5, r2
 8005df0:	460e      	mov	r6, r1
 8005df2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005df6:	f000 f997 	bl	8006128 <_malloc_r>
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	b140      	cbz	r0, 8005e10 <__sfmoreglue+0x28>
 8005dfe:	2100      	movs	r1, #0
 8005e00:	e9c0 1600 	strd	r1, r6, [r0]
 8005e04:	300c      	adds	r0, #12
 8005e06:	60a0      	str	r0, [r4, #8]
 8005e08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e0c:	f7ff fd76 	bl	80058fc <memset>
 8005e10:	4620      	mov	r0, r4
 8005e12:	bd70      	pop	{r4, r5, r6, pc}

08005e14 <__sfp_lock_acquire>:
 8005e14:	4801      	ldr	r0, [pc, #4]	; (8005e1c <__sfp_lock_acquire+0x8>)
 8005e16:	f000 b8b3 	b.w	8005f80 <__retarget_lock_acquire_recursive>
 8005e1a:	bf00      	nop
 8005e1c:	20014488 	.word	0x20014488

08005e20 <__sfp_lock_release>:
 8005e20:	4801      	ldr	r0, [pc, #4]	; (8005e28 <__sfp_lock_release+0x8>)
 8005e22:	f000 b8ae 	b.w	8005f82 <__retarget_lock_release_recursive>
 8005e26:	bf00      	nop
 8005e28:	20014488 	.word	0x20014488

08005e2c <__sinit_lock_acquire>:
 8005e2c:	4801      	ldr	r0, [pc, #4]	; (8005e34 <__sinit_lock_acquire+0x8>)
 8005e2e:	f000 b8a7 	b.w	8005f80 <__retarget_lock_acquire_recursive>
 8005e32:	bf00      	nop
 8005e34:	20014489 	.word	0x20014489

08005e38 <__sinit_lock_release>:
 8005e38:	4801      	ldr	r0, [pc, #4]	; (8005e40 <__sinit_lock_release+0x8>)
 8005e3a:	f000 b8a2 	b.w	8005f82 <__retarget_lock_release_recursive>
 8005e3e:	bf00      	nop
 8005e40:	20014489 	.word	0x20014489

08005e44 <__sinit>:
 8005e44:	b510      	push	{r4, lr}
 8005e46:	4604      	mov	r4, r0
 8005e48:	f7ff fff0 	bl	8005e2c <__sinit_lock_acquire>
 8005e4c:	69a3      	ldr	r3, [r4, #24]
 8005e4e:	b11b      	cbz	r3, 8005e58 <__sinit+0x14>
 8005e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e54:	f7ff bff0 	b.w	8005e38 <__sinit_lock_release>
 8005e58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e5c:	6523      	str	r3, [r4, #80]	; 0x50
 8005e5e:	4b13      	ldr	r3, [pc, #76]	; (8005eac <__sinit+0x68>)
 8005e60:	4a13      	ldr	r2, [pc, #76]	; (8005eb0 <__sinit+0x6c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e66:	42a3      	cmp	r3, r4
 8005e68:	bf04      	itt	eq
 8005e6a:	2301      	moveq	r3, #1
 8005e6c:	61a3      	streq	r3, [r4, #24]
 8005e6e:	4620      	mov	r0, r4
 8005e70:	f000 f820 	bl	8005eb4 <__sfp>
 8005e74:	6060      	str	r0, [r4, #4]
 8005e76:	4620      	mov	r0, r4
 8005e78:	f000 f81c 	bl	8005eb4 <__sfp>
 8005e7c:	60a0      	str	r0, [r4, #8]
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f000 f818 	bl	8005eb4 <__sfp>
 8005e84:	2200      	movs	r2, #0
 8005e86:	60e0      	str	r0, [r4, #12]
 8005e88:	2104      	movs	r1, #4
 8005e8a:	6860      	ldr	r0, [r4, #4]
 8005e8c:	f7ff ff82 	bl	8005d94 <std>
 8005e90:	68a0      	ldr	r0, [r4, #8]
 8005e92:	2201      	movs	r2, #1
 8005e94:	2109      	movs	r1, #9
 8005e96:	f7ff ff7d 	bl	8005d94 <std>
 8005e9a:	68e0      	ldr	r0, [r4, #12]
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	2112      	movs	r1, #18
 8005ea0:	f7ff ff78 	bl	8005d94 <std>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	61a3      	str	r3, [r4, #24]
 8005ea8:	e7d2      	b.n	8005e50 <__sinit+0xc>
 8005eaa:	bf00      	nop
 8005eac:	08006e38 	.word	0x08006e38
 8005eb0:	08005ddd 	.word	0x08005ddd

08005eb4 <__sfp>:
 8005eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb6:	4607      	mov	r7, r0
 8005eb8:	f7ff ffac 	bl	8005e14 <__sfp_lock_acquire>
 8005ebc:	4b1e      	ldr	r3, [pc, #120]	; (8005f38 <__sfp+0x84>)
 8005ebe:	681e      	ldr	r6, [r3, #0]
 8005ec0:	69b3      	ldr	r3, [r6, #24]
 8005ec2:	b913      	cbnz	r3, 8005eca <__sfp+0x16>
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	f7ff ffbd 	bl	8005e44 <__sinit>
 8005eca:	3648      	adds	r6, #72	; 0x48
 8005ecc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	d503      	bpl.n	8005edc <__sfp+0x28>
 8005ed4:	6833      	ldr	r3, [r6, #0]
 8005ed6:	b30b      	cbz	r3, 8005f1c <__sfp+0x68>
 8005ed8:	6836      	ldr	r6, [r6, #0]
 8005eda:	e7f7      	b.n	8005ecc <__sfp+0x18>
 8005edc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ee0:	b9d5      	cbnz	r5, 8005f18 <__sfp+0x64>
 8005ee2:	4b16      	ldr	r3, [pc, #88]	; (8005f3c <__sfp+0x88>)
 8005ee4:	60e3      	str	r3, [r4, #12]
 8005ee6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005eea:	6665      	str	r5, [r4, #100]	; 0x64
 8005eec:	f000 f847 	bl	8005f7e <__retarget_lock_init_recursive>
 8005ef0:	f7ff ff96 	bl	8005e20 <__sfp_lock_release>
 8005ef4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ef8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005efc:	6025      	str	r5, [r4, #0]
 8005efe:	61a5      	str	r5, [r4, #24]
 8005f00:	2208      	movs	r2, #8
 8005f02:	4629      	mov	r1, r5
 8005f04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f08:	f7ff fcf8 	bl	80058fc <memset>
 8005f0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f14:	4620      	mov	r0, r4
 8005f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f18:	3468      	adds	r4, #104	; 0x68
 8005f1a:	e7d9      	b.n	8005ed0 <__sfp+0x1c>
 8005f1c:	2104      	movs	r1, #4
 8005f1e:	4638      	mov	r0, r7
 8005f20:	f7ff ff62 	bl	8005de8 <__sfmoreglue>
 8005f24:	4604      	mov	r4, r0
 8005f26:	6030      	str	r0, [r6, #0]
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	d1d5      	bne.n	8005ed8 <__sfp+0x24>
 8005f2c:	f7ff ff78 	bl	8005e20 <__sfp_lock_release>
 8005f30:	230c      	movs	r3, #12
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	e7ee      	b.n	8005f14 <__sfp+0x60>
 8005f36:	bf00      	nop
 8005f38:	08006e38 	.word	0x08006e38
 8005f3c:	ffff0001 	.word	0xffff0001

08005f40 <_fwalk_reent>:
 8005f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f44:	4606      	mov	r6, r0
 8005f46:	4688      	mov	r8, r1
 8005f48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f4c:	2700      	movs	r7, #0
 8005f4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f52:	f1b9 0901 	subs.w	r9, r9, #1
 8005f56:	d505      	bpl.n	8005f64 <_fwalk_reent+0x24>
 8005f58:	6824      	ldr	r4, [r4, #0]
 8005f5a:	2c00      	cmp	r4, #0
 8005f5c:	d1f7      	bne.n	8005f4e <_fwalk_reent+0xe>
 8005f5e:	4638      	mov	r0, r7
 8005f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f64:	89ab      	ldrh	r3, [r5, #12]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d907      	bls.n	8005f7a <_fwalk_reent+0x3a>
 8005f6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	d003      	beq.n	8005f7a <_fwalk_reent+0x3a>
 8005f72:	4629      	mov	r1, r5
 8005f74:	4630      	mov	r0, r6
 8005f76:	47c0      	blx	r8
 8005f78:	4307      	orrs	r7, r0
 8005f7a:	3568      	adds	r5, #104	; 0x68
 8005f7c:	e7e9      	b.n	8005f52 <_fwalk_reent+0x12>

08005f7e <__retarget_lock_init_recursive>:
 8005f7e:	4770      	bx	lr

08005f80 <__retarget_lock_acquire_recursive>:
 8005f80:	4770      	bx	lr

08005f82 <__retarget_lock_release_recursive>:
 8005f82:	4770      	bx	lr

08005f84 <__swhatbuf_r>:
 8005f84:	b570      	push	{r4, r5, r6, lr}
 8005f86:	460e      	mov	r6, r1
 8005f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f8c:	2900      	cmp	r1, #0
 8005f8e:	b096      	sub	sp, #88	; 0x58
 8005f90:	4614      	mov	r4, r2
 8005f92:	461d      	mov	r5, r3
 8005f94:	da08      	bge.n	8005fa8 <__swhatbuf_r+0x24>
 8005f96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	602a      	str	r2, [r5, #0]
 8005f9e:	061a      	lsls	r2, r3, #24
 8005fa0:	d410      	bmi.n	8005fc4 <__swhatbuf_r+0x40>
 8005fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fa6:	e00e      	b.n	8005fc6 <__swhatbuf_r+0x42>
 8005fa8:	466a      	mov	r2, sp
 8005faa:	f000 fddf 	bl	8006b6c <_fstat_r>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	dbf1      	blt.n	8005f96 <__swhatbuf_r+0x12>
 8005fb2:	9a01      	ldr	r2, [sp, #4]
 8005fb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005fb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005fbc:	425a      	negs	r2, r3
 8005fbe:	415a      	adcs	r2, r3
 8005fc0:	602a      	str	r2, [r5, #0]
 8005fc2:	e7ee      	b.n	8005fa2 <__swhatbuf_r+0x1e>
 8005fc4:	2340      	movs	r3, #64	; 0x40
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	6023      	str	r3, [r4, #0]
 8005fca:	b016      	add	sp, #88	; 0x58
 8005fcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08005fd0 <__smakebuf_r>:
 8005fd0:	898b      	ldrh	r3, [r1, #12]
 8005fd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005fd4:	079d      	lsls	r5, r3, #30
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	460c      	mov	r4, r1
 8005fda:	d507      	bpl.n	8005fec <__smakebuf_r+0x1c>
 8005fdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	6123      	str	r3, [r4, #16]
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	6163      	str	r3, [r4, #20]
 8005fe8:	b002      	add	sp, #8
 8005fea:	bd70      	pop	{r4, r5, r6, pc}
 8005fec:	ab01      	add	r3, sp, #4
 8005fee:	466a      	mov	r2, sp
 8005ff0:	f7ff ffc8 	bl	8005f84 <__swhatbuf_r>
 8005ff4:	9900      	ldr	r1, [sp, #0]
 8005ff6:	4605      	mov	r5, r0
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	f000 f895 	bl	8006128 <_malloc_r>
 8005ffe:	b948      	cbnz	r0, 8006014 <__smakebuf_r+0x44>
 8006000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006004:	059a      	lsls	r2, r3, #22
 8006006:	d4ef      	bmi.n	8005fe8 <__smakebuf_r+0x18>
 8006008:	f023 0303 	bic.w	r3, r3, #3
 800600c:	f043 0302 	orr.w	r3, r3, #2
 8006010:	81a3      	strh	r3, [r4, #12]
 8006012:	e7e3      	b.n	8005fdc <__smakebuf_r+0xc>
 8006014:	4b0d      	ldr	r3, [pc, #52]	; (800604c <__smakebuf_r+0x7c>)
 8006016:	62b3      	str	r3, [r6, #40]	; 0x28
 8006018:	89a3      	ldrh	r3, [r4, #12]
 800601a:	6020      	str	r0, [r4, #0]
 800601c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006020:	81a3      	strh	r3, [r4, #12]
 8006022:	9b00      	ldr	r3, [sp, #0]
 8006024:	6163      	str	r3, [r4, #20]
 8006026:	9b01      	ldr	r3, [sp, #4]
 8006028:	6120      	str	r0, [r4, #16]
 800602a:	b15b      	cbz	r3, 8006044 <__smakebuf_r+0x74>
 800602c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006030:	4630      	mov	r0, r6
 8006032:	f000 fdad 	bl	8006b90 <_isatty_r>
 8006036:	b128      	cbz	r0, 8006044 <__smakebuf_r+0x74>
 8006038:	89a3      	ldrh	r3, [r4, #12]
 800603a:	f023 0303 	bic.w	r3, r3, #3
 800603e:	f043 0301 	orr.w	r3, r3, #1
 8006042:	81a3      	strh	r3, [r4, #12]
 8006044:	89a0      	ldrh	r0, [r4, #12]
 8006046:	4305      	orrs	r5, r0
 8006048:	81a5      	strh	r5, [r4, #12]
 800604a:	e7cd      	b.n	8005fe8 <__smakebuf_r+0x18>
 800604c:	08005ddd 	.word	0x08005ddd

08006050 <_free_r>:
 8006050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006052:	2900      	cmp	r1, #0
 8006054:	d044      	beq.n	80060e0 <_free_r+0x90>
 8006056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800605a:	9001      	str	r0, [sp, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	f1a1 0404 	sub.w	r4, r1, #4
 8006062:	bfb8      	it	lt
 8006064:	18e4      	addlt	r4, r4, r3
 8006066:	f000 fdcf 	bl	8006c08 <__malloc_lock>
 800606a:	4a1e      	ldr	r2, [pc, #120]	; (80060e4 <_free_r+0x94>)
 800606c:	9801      	ldr	r0, [sp, #4]
 800606e:	6813      	ldr	r3, [r2, #0]
 8006070:	b933      	cbnz	r3, 8006080 <_free_r+0x30>
 8006072:	6063      	str	r3, [r4, #4]
 8006074:	6014      	str	r4, [r2, #0]
 8006076:	b003      	add	sp, #12
 8006078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800607c:	f000 bdca 	b.w	8006c14 <__malloc_unlock>
 8006080:	42a3      	cmp	r3, r4
 8006082:	d908      	bls.n	8006096 <_free_r+0x46>
 8006084:	6825      	ldr	r5, [r4, #0]
 8006086:	1961      	adds	r1, r4, r5
 8006088:	428b      	cmp	r3, r1
 800608a:	bf01      	itttt	eq
 800608c:	6819      	ldreq	r1, [r3, #0]
 800608e:	685b      	ldreq	r3, [r3, #4]
 8006090:	1949      	addeq	r1, r1, r5
 8006092:	6021      	streq	r1, [r4, #0]
 8006094:	e7ed      	b.n	8006072 <_free_r+0x22>
 8006096:	461a      	mov	r2, r3
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	b10b      	cbz	r3, 80060a0 <_free_r+0x50>
 800609c:	42a3      	cmp	r3, r4
 800609e:	d9fa      	bls.n	8006096 <_free_r+0x46>
 80060a0:	6811      	ldr	r1, [r2, #0]
 80060a2:	1855      	adds	r5, r2, r1
 80060a4:	42a5      	cmp	r5, r4
 80060a6:	d10b      	bne.n	80060c0 <_free_r+0x70>
 80060a8:	6824      	ldr	r4, [r4, #0]
 80060aa:	4421      	add	r1, r4
 80060ac:	1854      	adds	r4, r2, r1
 80060ae:	42a3      	cmp	r3, r4
 80060b0:	6011      	str	r1, [r2, #0]
 80060b2:	d1e0      	bne.n	8006076 <_free_r+0x26>
 80060b4:	681c      	ldr	r4, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	6053      	str	r3, [r2, #4]
 80060ba:	4421      	add	r1, r4
 80060bc:	6011      	str	r1, [r2, #0]
 80060be:	e7da      	b.n	8006076 <_free_r+0x26>
 80060c0:	d902      	bls.n	80060c8 <_free_r+0x78>
 80060c2:	230c      	movs	r3, #12
 80060c4:	6003      	str	r3, [r0, #0]
 80060c6:	e7d6      	b.n	8006076 <_free_r+0x26>
 80060c8:	6825      	ldr	r5, [r4, #0]
 80060ca:	1961      	adds	r1, r4, r5
 80060cc:	428b      	cmp	r3, r1
 80060ce:	bf04      	itt	eq
 80060d0:	6819      	ldreq	r1, [r3, #0]
 80060d2:	685b      	ldreq	r3, [r3, #4]
 80060d4:	6063      	str	r3, [r4, #4]
 80060d6:	bf04      	itt	eq
 80060d8:	1949      	addeq	r1, r1, r5
 80060da:	6021      	streq	r1, [r4, #0]
 80060dc:	6054      	str	r4, [r2, #4]
 80060de:	e7ca      	b.n	8006076 <_free_r+0x26>
 80060e0:	b003      	add	sp, #12
 80060e2:	bd30      	pop	{r4, r5, pc}
 80060e4:	2001448c 	.word	0x2001448c

080060e8 <sbrk_aligned>:
 80060e8:	b570      	push	{r4, r5, r6, lr}
 80060ea:	4e0e      	ldr	r6, [pc, #56]	; (8006124 <sbrk_aligned+0x3c>)
 80060ec:	460c      	mov	r4, r1
 80060ee:	6831      	ldr	r1, [r6, #0]
 80060f0:	4605      	mov	r5, r0
 80060f2:	b911      	cbnz	r1, 80060fa <sbrk_aligned+0x12>
 80060f4:	f000 fcd6 	bl	8006aa4 <_sbrk_r>
 80060f8:	6030      	str	r0, [r6, #0]
 80060fa:	4621      	mov	r1, r4
 80060fc:	4628      	mov	r0, r5
 80060fe:	f000 fcd1 	bl	8006aa4 <_sbrk_r>
 8006102:	1c43      	adds	r3, r0, #1
 8006104:	d00a      	beq.n	800611c <sbrk_aligned+0x34>
 8006106:	1cc4      	adds	r4, r0, #3
 8006108:	f024 0403 	bic.w	r4, r4, #3
 800610c:	42a0      	cmp	r0, r4
 800610e:	d007      	beq.n	8006120 <sbrk_aligned+0x38>
 8006110:	1a21      	subs	r1, r4, r0
 8006112:	4628      	mov	r0, r5
 8006114:	f000 fcc6 	bl	8006aa4 <_sbrk_r>
 8006118:	3001      	adds	r0, #1
 800611a:	d101      	bne.n	8006120 <sbrk_aligned+0x38>
 800611c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006120:	4620      	mov	r0, r4
 8006122:	bd70      	pop	{r4, r5, r6, pc}
 8006124:	20014490 	.word	0x20014490

08006128 <_malloc_r>:
 8006128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800612c:	1ccd      	adds	r5, r1, #3
 800612e:	f025 0503 	bic.w	r5, r5, #3
 8006132:	3508      	adds	r5, #8
 8006134:	2d0c      	cmp	r5, #12
 8006136:	bf38      	it	cc
 8006138:	250c      	movcc	r5, #12
 800613a:	2d00      	cmp	r5, #0
 800613c:	4607      	mov	r7, r0
 800613e:	db01      	blt.n	8006144 <_malloc_r+0x1c>
 8006140:	42a9      	cmp	r1, r5
 8006142:	d905      	bls.n	8006150 <_malloc_r+0x28>
 8006144:	230c      	movs	r3, #12
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	2600      	movs	r6, #0
 800614a:	4630      	mov	r0, r6
 800614c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006150:	4e2e      	ldr	r6, [pc, #184]	; (800620c <_malloc_r+0xe4>)
 8006152:	f000 fd59 	bl	8006c08 <__malloc_lock>
 8006156:	6833      	ldr	r3, [r6, #0]
 8006158:	461c      	mov	r4, r3
 800615a:	bb34      	cbnz	r4, 80061aa <_malloc_r+0x82>
 800615c:	4629      	mov	r1, r5
 800615e:	4638      	mov	r0, r7
 8006160:	f7ff ffc2 	bl	80060e8 <sbrk_aligned>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	4604      	mov	r4, r0
 8006168:	d14d      	bne.n	8006206 <_malloc_r+0xde>
 800616a:	6834      	ldr	r4, [r6, #0]
 800616c:	4626      	mov	r6, r4
 800616e:	2e00      	cmp	r6, #0
 8006170:	d140      	bne.n	80061f4 <_malloc_r+0xcc>
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	4631      	mov	r1, r6
 8006176:	4638      	mov	r0, r7
 8006178:	eb04 0803 	add.w	r8, r4, r3
 800617c:	f000 fc92 	bl	8006aa4 <_sbrk_r>
 8006180:	4580      	cmp	r8, r0
 8006182:	d13a      	bne.n	80061fa <_malloc_r+0xd2>
 8006184:	6821      	ldr	r1, [r4, #0]
 8006186:	3503      	adds	r5, #3
 8006188:	1a6d      	subs	r5, r5, r1
 800618a:	f025 0503 	bic.w	r5, r5, #3
 800618e:	3508      	adds	r5, #8
 8006190:	2d0c      	cmp	r5, #12
 8006192:	bf38      	it	cc
 8006194:	250c      	movcc	r5, #12
 8006196:	4629      	mov	r1, r5
 8006198:	4638      	mov	r0, r7
 800619a:	f7ff ffa5 	bl	80060e8 <sbrk_aligned>
 800619e:	3001      	adds	r0, #1
 80061a0:	d02b      	beq.n	80061fa <_malloc_r+0xd2>
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	442b      	add	r3, r5
 80061a6:	6023      	str	r3, [r4, #0]
 80061a8:	e00e      	b.n	80061c8 <_malloc_r+0xa0>
 80061aa:	6822      	ldr	r2, [r4, #0]
 80061ac:	1b52      	subs	r2, r2, r5
 80061ae:	d41e      	bmi.n	80061ee <_malloc_r+0xc6>
 80061b0:	2a0b      	cmp	r2, #11
 80061b2:	d916      	bls.n	80061e2 <_malloc_r+0xba>
 80061b4:	1961      	adds	r1, r4, r5
 80061b6:	42a3      	cmp	r3, r4
 80061b8:	6025      	str	r5, [r4, #0]
 80061ba:	bf18      	it	ne
 80061bc:	6059      	strne	r1, [r3, #4]
 80061be:	6863      	ldr	r3, [r4, #4]
 80061c0:	bf08      	it	eq
 80061c2:	6031      	streq	r1, [r6, #0]
 80061c4:	5162      	str	r2, [r4, r5]
 80061c6:	604b      	str	r3, [r1, #4]
 80061c8:	4638      	mov	r0, r7
 80061ca:	f104 060b 	add.w	r6, r4, #11
 80061ce:	f000 fd21 	bl	8006c14 <__malloc_unlock>
 80061d2:	f026 0607 	bic.w	r6, r6, #7
 80061d6:	1d23      	adds	r3, r4, #4
 80061d8:	1af2      	subs	r2, r6, r3
 80061da:	d0b6      	beq.n	800614a <_malloc_r+0x22>
 80061dc:	1b9b      	subs	r3, r3, r6
 80061de:	50a3      	str	r3, [r4, r2]
 80061e0:	e7b3      	b.n	800614a <_malloc_r+0x22>
 80061e2:	6862      	ldr	r2, [r4, #4]
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	bf0c      	ite	eq
 80061e8:	6032      	streq	r2, [r6, #0]
 80061ea:	605a      	strne	r2, [r3, #4]
 80061ec:	e7ec      	b.n	80061c8 <_malloc_r+0xa0>
 80061ee:	4623      	mov	r3, r4
 80061f0:	6864      	ldr	r4, [r4, #4]
 80061f2:	e7b2      	b.n	800615a <_malloc_r+0x32>
 80061f4:	4634      	mov	r4, r6
 80061f6:	6876      	ldr	r6, [r6, #4]
 80061f8:	e7b9      	b.n	800616e <_malloc_r+0x46>
 80061fa:	230c      	movs	r3, #12
 80061fc:	603b      	str	r3, [r7, #0]
 80061fe:	4638      	mov	r0, r7
 8006200:	f000 fd08 	bl	8006c14 <__malloc_unlock>
 8006204:	e7a1      	b.n	800614a <_malloc_r+0x22>
 8006206:	6025      	str	r5, [r4, #0]
 8006208:	e7de      	b.n	80061c8 <_malloc_r+0xa0>
 800620a:	bf00      	nop
 800620c:	2001448c 	.word	0x2001448c

08006210 <__ssputs_r>:
 8006210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006214:	688e      	ldr	r6, [r1, #8]
 8006216:	429e      	cmp	r6, r3
 8006218:	4682      	mov	sl, r0
 800621a:	460c      	mov	r4, r1
 800621c:	4690      	mov	r8, r2
 800621e:	461f      	mov	r7, r3
 8006220:	d838      	bhi.n	8006294 <__ssputs_r+0x84>
 8006222:	898a      	ldrh	r2, [r1, #12]
 8006224:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006228:	d032      	beq.n	8006290 <__ssputs_r+0x80>
 800622a:	6825      	ldr	r5, [r4, #0]
 800622c:	6909      	ldr	r1, [r1, #16]
 800622e:	eba5 0901 	sub.w	r9, r5, r1
 8006232:	6965      	ldr	r5, [r4, #20]
 8006234:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006238:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800623c:	3301      	adds	r3, #1
 800623e:	444b      	add	r3, r9
 8006240:	106d      	asrs	r5, r5, #1
 8006242:	429d      	cmp	r5, r3
 8006244:	bf38      	it	cc
 8006246:	461d      	movcc	r5, r3
 8006248:	0553      	lsls	r3, r2, #21
 800624a:	d531      	bpl.n	80062b0 <__ssputs_r+0xa0>
 800624c:	4629      	mov	r1, r5
 800624e:	f7ff ff6b 	bl	8006128 <_malloc_r>
 8006252:	4606      	mov	r6, r0
 8006254:	b950      	cbnz	r0, 800626c <__ssputs_r+0x5c>
 8006256:	230c      	movs	r3, #12
 8006258:	f8ca 3000 	str.w	r3, [sl]
 800625c:	89a3      	ldrh	r3, [r4, #12]
 800625e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006262:	81a3      	strh	r3, [r4, #12]
 8006264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626c:	6921      	ldr	r1, [r4, #16]
 800626e:	464a      	mov	r2, r9
 8006270:	f7ff fb36 	bl	80058e0 <memcpy>
 8006274:	89a3      	ldrh	r3, [r4, #12]
 8006276:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800627a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800627e:	81a3      	strh	r3, [r4, #12]
 8006280:	6126      	str	r6, [r4, #16]
 8006282:	6165      	str	r5, [r4, #20]
 8006284:	444e      	add	r6, r9
 8006286:	eba5 0509 	sub.w	r5, r5, r9
 800628a:	6026      	str	r6, [r4, #0]
 800628c:	60a5      	str	r5, [r4, #8]
 800628e:	463e      	mov	r6, r7
 8006290:	42be      	cmp	r6, r7
 8006292:	d900      	bls.n	8006296 <__ssputs_r+0x86>
 8006294:	463e      	mov	r6, r7
 8006296:	6820      	ldr	r0, [r4, #0]
 8006298:	4632      	mov	r2, r6
 800629a:	4641      	mov	r1, r8
 800629c:	f000 fc9a 	bl	8006bd4 <memmove>
 80062a0:	68a3      	ldr	r3, [r4, #8]
 80062a2:	1b9b      	subs	r3, r3, r6
 80062a4:	60a3      	str	r3, [r4, #8]
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	4433      	add	r3, r6
 80062aa:	6023      	str	r3, [r4, #0]
 80062ac:	2000      	movs	r0, #0
 80062ae:	e7db      	b.n	8006268 <__ssputs_r+0x58>
 80062b0:	462a      	mov	r2, r5
 80062b2:	f000 fcb5 	bl	8006c20 <_realloc_r>
 80062b6:	4606      	mov	r6, r0
 80062b8:	2800      	cmp	r0, #0
 80062ba:	d1e1      	bne.n	8006280 <__ssputs_r+0x70>
 80062bc:	6921      	ldr	r1, [r4, #16]
 80062be:	4650      	mov	r0, sl
 80062c0:	f7ff fec6 	bl	8006050 <_free_r>
 80062c4:	e7c7      	b.n	8006256 <__ssputs_r+0x46>
	...

080062c8 <_svfiprintf_r>:
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	4698      	mov	r8, r3
 80062ce:	898b      	ldrh	r3, [r1, #12]
 80062d0:	061b      	lsls	r3, r3, #24
 80062d2:	b09d      	sub	sp, #116	; 0x74
 80062d4:	4607      	mov	r7, r0
 80062d6:	460d      	mov	r5, r1
 80062d8:	4614      	mov	r4, r2
 80062da:	d50e      	bpl.n	80062fa <_svfiprintf_r+0x32>
 80062dc:	690b      	ldr	r3, [r1, #16]
 80062de:	b963      	cbnz	r3, 80062fa <_svfiprintf_r+0x32>
 80062e0:	2140      	movs	r1, #64	; 0x40
 80062e2:	f7ff ff21 	bl	8006128 <_malloc_r>
 80062e6:	6028      	str	r0, [r5, #0]
 80062e8:	6128      	str	r0, [r5, #16]
 80062ea:	b920      	cbnz	r0, 80062f6 <_svfiprintf_r+0x2e>
 80062ec:	230c      	movs	r3, #12
 80062ee:	603b      	str	r3, [r7, #0]
 80062f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062f4:	e0d1      	b.n	800649a <_svfiprintf_r+0x1d2>
 80062f6:	2340      	movs	r3, #64	; 0x40
 80062f8:	616b      	str	r3, [r5, #20]
 80062fa:	2300      	movs	r3, #0
 80062fc:	9309      	str	r3, [sp, #36]	; 0x24
 80062fe:	2320      	movs	r3, #32
 8006300:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006304:	f8cd 800c 	str.w	r8, [sp, #12]
 8006308:	2330      	movs	r3, #48	; 0x30
 800630a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80064b4 <_svfiprintf_r+0x1ec>
 800630e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006312:	f04f 0901 	mov.w	r9, #1
 8006316:	4623      	mov	r3, r4
 8006318:	469a      	mov	sl, r3
 800631a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800631e:	b10a      	cbz	r2, 8006324 <_svfiprintf_r+0x5c>
 8006320:	2a25      	cmp	r2, #37	; 0x25
 8006322:	d1f9      	bne.n	8006318 <_svfiprintf_r+0x50>
 8006324:	ebba 0b04 	subs.w	fp, sl, r4
 8006328:	d00b      	beq.n	8006342 <_svfiprintf_r+0x7a>
 800632a:	465b      	mov	r3, fp
 800632c:	4622      	mov	r2, r4
 800632e:	4629      	mov	r1, r5
 8006330:	4638      	mov	r0, r7
 8006332:	f7ff ff6d 	bl	8006210 <__ssputs_r>
 8006336:	3001      	adds	r0, #1
 8006338:	f000 80aa 	beq.w	8006490 <_svfiprintf_r+0x1c8>
 800633c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800633e:	445a      	add	r2, fp
 8006340:	9209      	str	r2, [sp, #36]	; 0x24
 8006342:	f89a 3000 	ldrb.w	r3, [sl]
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 80a2 	beq.w	8006490 <_svfiprintf_r+0x1c8>
 800634c:	2300      	movs	r3, #0
 800634e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006356:	f10a 0a01 	add.w	sl, sl, #1
 800635a:	9304      	str	r3, [sp, #16]
 800635c:	9307      	str	r3, [sp, #28]
 800635e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006362:	931a      	str	r3, [sp, #104]	; 0x68
 8006364:	4654      	mov	r4, sl
 8006366:	2205      	movs	r2, #5
 8006368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800636c:	4851      	ldr	r0, [pc, #324]	; (80064b4 <_svfiprintf_r+0x1ec>)
 800636e:	f7f9 ff9f 	bl	80002b0 <memchr>
 8006372:	9a04      	ldr	r2, [sp, #16]
 8006374:	b9d8      	cbnz	r0, 80063ae <_svfiprintf_r+0xe6>
 8006376:	06d0      	lsls	r0, r2, #27
 8006378:	bf44      	itt	mi
 800637a:	2320      	movmi	r3, #32
 800637c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006380:	0711      	lsls	r1, r2, #28
 8006382:	bf44      	itt	mi
 8006384:	232b      	movmi	r3, #43	; 0x2b
 8006386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800638a:	f89a 3000 	ldrb.w	r3, [sl]
 800638e:	2b2a      	cmp	r3, #42	; 0x2a
 8006390:	d015      	beq.n	80063be <_svfiprintf_r+0xf6>
 8006392:	9a07      	ldr	r2, [sp, #28]
 8006394:	4654      	mov	r4, sl
 8006396:	2000      	movs	r0, #0
 8006398:	f04f 0c0a 	mov.w	ip, #10
 800639c:	4621      	mov	r1, r4
 800639e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063a2:	3b30      	subs	r3, #48	; 0x30
 80063a4:	2b09      	cmp	r3, #9
 80063a6:	d94e      	bls.n	8006446 <_svfiprintf_r+0x17e>
 80063a8:	b1b0      	cbz	r0, 80063d8 <_svfiprintf_r+0x110>
 80063aa:	9207      	str	r2, [sp, #28]
 80063ac:	e014      	b.n	80063d8 <_svfiprintf_r+0x110>
 80063ae:	eba0 0308 	sub.w	r3, r0, r8
 80063b2:	fa09 f303 	lsl.w	r3, r9, r3
 80063b6:	4313      	orrs	r3, r2
 80063b8:	9304      	str	r3, [sp, #16]
 80063ba:	46a2      	mov	sl, r4
 80063bc:	e7d2      	b.n	8006364 <_svfiprintf_r+0x9c>
 80063be:	9b03      	ldr	r3, [sp, #12]
 80063c0:	1d19      	adds	r1, r3, #4
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	9103      	str	r1, [sp, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	bfbb      	ittet	lt
 80063ca:	425b      	neglt	r3, r3
 80063cc:	f042 0202 	orrlt.w	r2, r2, #2
 80063d0:	9307      	strge	r3, [sp, #28]
 80063d2:	9307      	strlt	r3, [sp, #28]
 80063d4:	bfb8      	it	lt
 80063d6:	9204      	strlt	r2, [sp, #16]
 80063d8:	7823      	ldrb	r3, [r4, #0]
 80063da:	2b2e      	cmp	r3, #46	; 0x2e
 80063dc:	d10c      	bne.n	80063f8 <_svfiprintf_r+0x130>
 80063de:	7863      	ldrb	r3, [r4, #1]
 80063e0:	2b2a      	cmp	r3, #42	; 0x2a
 80063e2:	d135      	bne.n	8006450 <_svfiprintf_r+0x188>
 80063e4:	9b03      	ldr	r3, [sp, #12]
 80063e6:	1d1a      	adds	r2, r3, #4
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	9203      	str	r2, [sp, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	bfb8      	it	lt
 80063f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80063f4:	3402      	adds	r4, #2
 80063f6:	9305      	str	r3, [sp, #20]
 80063f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80064c4 <_svfiprintf_r+0x1fc>
 80063fc:	7821      	ldrb	r1, [r4, #0]
 80063fe:	2203      	movs	r2, #3
 8006400:	4650      	mov	r0, sl
 8006402:	f7f9 ff55 	bl	80002b0 <memchr>
 8006406:	b140      	cbz	r0, 800641a <_svfiprintf_r+0x152>
 8006408:	2340      	movs	r3, #64	; 0x40
 800640a:	eba0 000a 	sub.w	r0, r0, sl
 800640e:	fa03 f000 	lsl.w	r0, r3, r0
 8006412:	9b04      	ldr	r3, [sp, #16]
 8006414:	4303      	orrs	r3, r0
 8006416:	3401      	adds	r4, #1
 8006418:	9304      	str	r3, [sp, #16]
 800641a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800641e:	4826      	ldr	r0, [pc, #152]	; (80064b8 <_svfiprintf_r+0x1f0>)
 8006420:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006424:	2206      	movs	r2, #6
 8006426:	f7f9 ff43 	bl	80002b0 <memchr>
 800642a:	2800      	cmp	r0, #0
 800642c:	d038      	beq.n	80064a0 <_svfiprintf_r+0x1d8>
 800642e:	4b23      	ldr	r3, [pc, #140]	; (80064bc <_svfiprintf_r+0x1f4>)
 8006430:	bb1b      	cbnz	r3, 800647a <_svfiprintf_r+0x1b2>
 8006432:	9b03      	ldr	r3, [sp, #12]
 8006434:	3307      	adds	r3, #7
 8006436:	f023 0307 	bic.w	r3, r3, #7
 800643a:	3308      	adds	r3, #8
 800643c:	9303      	str	r3, [sp, #12]
 800643e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006440:	4433      	add	r3, r6
 8006442:	9309      	str	r3, [sp, #36]	; 0x24
 8006444:	e767      	b.n	8006316 <_svfiprintf_r+0x4e>
 8006446:	fb0c 3202 	mla	r2, ip, r2, r3
 800644a:	460c      	mov	r4, r1
 800644c:	2001      	movs	r0, #1
 800644e:	e7a5      	b.n	800639c <_svfiprintf_r+0xd4>
 8006450:	2300      	movs	r3, #0
 8006452:	3401      	adds	r4, #1
 8006454:	9305      	str	r3, [sp, #20]
 8006456:	4619      	mov	r1, r3
 8006458:	f04f 0c0a 	mov.w	ip, #10
 800645c:	4620      	mov	r0, r4
 800645e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006462:	3a30      	subs	r2, #48	; 0x30
 8006464:	2a09      	cmp	r2, #9
 8006466:	d903      	bls.n	8006470 <_svfiprintf_r+0x1a8>
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0c5      	beq.n	80063f8 <_svfiprintf_r+0x130>
 800646c:	9105      	str	r1, [sp, #20]
 800646e:	e7c3      	b.n	80063f8 <_svfiprintf_r+0x130>
 8006470:	fb0c 2101 	mla	r1, ip, r1, r2
 8006474:	4604      	mov	r4, r0
 8006476:	2301      	movs	r3, #1
 8006478:	e7f0      	b.n	800645c <_svfiprintf_r+0x194>
 800647a:	ab03      	add	r3, sp, #12
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	462a      	mov	r2, r5
 8006480:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <_svfiprintf_r+0x1f8>)
 8006482:	a904      	add	r1, sp, #16
 8006484:	4638      	mov	r0, r7
 8006486:	f3af 8000 	nop.w
 800648a:	1c42      	adds	r2, r0, #1
 800648c:	4606      	mov	r6, r0
 800648e:	d1d6      	bne.n	800643e <_svfiprintf_r+0x176>
 8006490:	89ab      	ldrh	r3, [r5, #12]
 8006492:	065b      	lsls	r3, r3, #25
 8006494:	f53f af2c 	bmi.w	80062f0 <_svfiprintf_r+0x28>
 8006498:	9809      	ldr	r0, [sp, #36]	; 0x24
 800649a:	b01d      	add	sp, #116	; 0x74
 800649c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a0:	ab03      	add	r3, sp, #12
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	462a      	mov	r2, r5
 80064a6:	4b06      	ldr	r3, [pc, #24]	; (80064c0 <_svfiprintf_r+0x1f8>)
 80064a8:	a904      	add	r1, sp, #16
 80064aa:	4638      	mov	r0, r7
 80064ac:	f000 f9d4 	bl	8006858 <_printf_i>
 80064b0:	e7eb      	b.n	800648a <_svfiprintf_r+0x1c2>
 80064b2:	bf00      	nop
 80064b4:	08006e9c 	.word	0x08006e9c
 80064b8:	08006ea6 	.word	0x08006ea6
 80064bc:	00000000 	.word	0x00000000
 80064c0:	08006211 	.word	0x08006211
 80064c4:	08006ea2 	.word	0x08006ea2

080064c8 <__sfputc_r>:
 80064c8:	6893      	ldr	r3, [r2, #8]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	b410      	push	{r4}
 80064d0:	6093      	str	r3, [r2, #8]
 80064d2:	da08      	bge.n	80064e6 <__sfputc_r+0x1e>
 80064d4:	6994      	ldr	r4, [r2, #24]
 80064d6:	42a3      	cmp	r3, r4
 80064d8:	db01      	blt.n	80064de <__sfputc_r+0x16>
 80064da:	290a      	cmp	r1, #10
 80064dc:	d103      	bne.n	80064e6 <__sfputc_r+0x1e>
 80064de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064e2:	f7ff bad5 	b.w	8005a90 <__swbuf_r>
 80064e6:	6813      	ldr	r3, [r2, #0]
 80064e8:	1c58      	adds	r0, r3, #1
 80064ea:	6010      	str	r0, [r2, #0]
 80064ec:	7019      	strb	r1, [r3, #0]
 80064ee:	4608      	mov	r0, r1
 80064f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <__sfputs_r>:
 80064f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f8:	4606      	mov	r6, r0
 80064fa:	460f      	mov	r7, r1
 80064fc:	4614      	mov	r4, r2
 80064fe:	18d5      	adds	r5, r2, r3
 8006500:	42ac      	cmp	r4, r5
 8006502:	d101      	bne.n	8006508 <__sfputs_r+0x12>
 8006504:	2000      	movs	r0, #0
 8006506:	e007      	b.n	8006518 <__sfputs_r+0x22>
 8006508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800650c:	463a      	mov	r2, r7
 800650e:	4630      	mov	r0, r6
 8006510:	f7ff ffda 	bl	80064c8 <__sfputc_r>
 8006514:	1c43      	adds	r3, r0, #1
 8006516:	d1f3      	bne.n	8006500 <__sfputs_r+0xa>
 8006518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800651c <_vfiprintf_r>:
 800651c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006520:	460d      	mov	r5, r1
 8006522:	b09d      	sub	sp, #116	; 0x74
 8006524:	4614      	mov	r4, r2
 8006526:	4698      	mov	r8, r3
 8006528:	4606      	mov	r6, r0
 800652a:	b118      	cbz	r0, 8006534 <_vfiprintf_r+0x18>
 800652c:	6983      	ldr	r3, [r0, #24]
 800652e:	b90b      	cbnz	r3, 8006534 <_vfiprintf_r+0x18>
 8006530:	f7ff fc88 	bl	8005e44 <__sinit>
 8006534:	4b89      	ldr	r3, [pc, #548]	; (800675c <_vfiprintf_r+0x240>)
 8006536:	429d      	cmp	r5, r3
 8006538:	d11b      	bne.n	8006572 <_vfiprintf_r+0x56>
 800653a:	6875      	ldr	r5, [r6, #4]
 800653c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800653e:	07d9      	lsls	r1, r3, #31
 8006540:	d405      	bmi.n	800654e <_vfiprintf_r+0x32>
 8006542:	89ab      	ldrh	r3, [r5, #12]
 8006544:	059a      	lsls	r2, r3, #22
 8006546:	d402      	bmi.n	800654e <_vfiprintf_r+0x32>
 8006548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800654a:	f7ff fd19 	bl	8005f80 <__retarget_lock_acquire_recursive>
 800654e:	89ab      	ldrh	r3, [r5, #12]
 8006550:	071b      	lsls	r3, r3, #28
 8006552:	d501      	bpl.n	8006558 <_vfiprintf_r+0x3c>
 8006554:	692b      	ldr	r3, [r5, #16]
 8006556:	b9eb      	cbnz	r3, 8006594 <_vfiprintf_r+0x78>
 8006558:	4629      	mov	r1, r5
 800655a:	4630      	mov	r0, r6
 800655c:	f7ff faea 	bl	8005b34 <__swsetup_r>
 8006560:	b1c0      	cbz	r0, 8006594 <_vfiprintf_r+0x78>
 8006562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006564:	07dc      	lsls	r4, r3, #31
 8006566:	d50e      	bpl.n	8006586 <_vfiprintf_r+0x6a>
 8006568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800656c:	b01d      	add	sp, #116	; 0x74
 800656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006572:	4b7b      	ldr	r3, [pc, #492]	; (8006760 <_vfiprintf_r+0x244>)
 8006574:	429d      	cmp	r5, r3
 8006576:	d101      	bne.n	800657c <_vfiprintf_r+0x60>
 8006578:	68b5      	ldr	r5, [r6, #8]
 800657a:	e7df      	b.n	800653c <_vfiprintf_r+0x20>
 800657c:	4b79      	ldr	r3, [pc, #484]	; (8006764 <_vfiprintf_r+0x248>)
 800657e:	429d      	cmp	r5, r3
 8006580:	bf08      	it	eq
 8006582:	68f5      	ldreq	r5, [r6, #12]
 8006584:	e7da      	b.n	800653c <_vfiprintf_r+0x20>
 8006586:	89ab      	ldrh	r3, [r5, #12]
 8006588:	0598      	lsls	r0, r3, #22
 800658a:	d4ed      	bmi.n	8006568 <_vfiprintf_r+0x4c>
 800658c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800658e:	f7ff fcf8 	bl	8005f82 <__retarget_lock_release_recursive>
 8006592:	e7e9      	b.n	8006568 <_vfiprintf_r+0x4c>
 8006594:	2300      	movs	r3, #0
 8006596:	9309      	str	r3, [sp, #36]	; 0x24
 8006598:	2320      	movs	r3, #32
 800659a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800659e:	f8cd 800c 	str.w	r8, [sp, #12]
 80065a2:	2330      	movs	r3, #48	; 0x30
 80065a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006768 <_vfiprintf_r+0x24c>
 80065a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065ac:	f04f 0901 	mov.w	r9, #1
 80065b0:	4623      	mov	r3, r4
 80065b2:	469a      	mov	sl, r3
 80065b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065b8:	b10a      	cbz	r2, 80065be <_vfiprintf_r+0xa2>
 80065ba:	2a25      	cmp	r2, #37	; 0x25
 80065bc:	d1f9      	bne.n	80065b2 <_vfiprintf_r+0x96>
 80065be:	ebba 0b04 	subs.w	fp, sl, r4
 80065c2:	d00b      	beq.n	80065dc <_vfiprintf_r+0xc0>
 80065c4:	465b      	mov	r3, fp
 80065c6:	4622      	mov	r2, r4
 80065c8:	4629      	mov	r1, r5
 80065ca:	4630      	mov	r0, r6
 80065cc:	f7ff ff93 	bl	80064f6 <__sfputs_r>
 80065d0:	3001      	adds	r0, #1
 80065d2:	f000 80aa 	beq.w	800672a <_vfiprintf_r+0x20e>
 80065d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065d8:	445a      	add	r2, fp
 80065da:	9209      	str	r2, [sp, #36]	; 0x24
 80065dc:	f89a 3000 	ldrb.w	r3, [sl]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 80a2 	beq.w	800672a <_vfiprintf_r+0x20e>
 80065e6:	2300      	movs	r3, #0
 80065e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065f0:	f10a 0a01 	add.w	sl, sl, #1
 80065f4:	9304      	str	r3, [sp, #16]
 80065f6:	9307      	str	r3, [sp, #28]
 80065f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065fc:	931a      	str	r3, [sp, #104]	; 0x68
 80065fe:	4654      	mov	r4, sl
 8006600:	2205      	movs	r2, #5
 8006602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006606:	4858      	ldr	r0, [pc, #352]	; (8006768 <_vfiprintf_r+0x24c>)
 8006608:	f7f9 fe52 	bl	80002b0 <memchr>
 800660c:	9a04      	ldr	r2, [sp, #16]
 800660e:	b9d8      	cbnz	r0, 8006648 <_vfiprintf_r+0x12c>
 8006610:	06d1      	lsls	r1, r2, #27
 8006612:	bf44      	itt	mi
 8006614:	2320      	movmi	r3, #32
 8006616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800661a:	0713      	lsls	r3, r2, #28
 800661c:	bf44      	itt	mi
 800661e:	232b      	movmi	r3, #43	; 0x2b
 8006620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006624:	f89a 3000 	ldrb.w	r3, [sl]
 8006628:	2b2a      	cmp	r3, #42	; 0x2a
 800662a:	d015      	beq.n	8006658 <_vfiprintf_r+0x13c>
 800662c:	9a07      	ldr	r2, [sp, #28]
 800662e:	4654      	mov	r4, sl
 8006630:	2000      	movs	r0, #0
 8006632:	f04f 0c0a 	mov.w	ip, #10
 8006636:	4621      	mov	r1, r4
 8006638:	f811 3b01 	ldrb.w	r3, [r1], #1
 800663c:	3b30      	subs	r3, #48	; 0x30
 800663e:	2b09      	cmp	r3, #9
 8006640:	d94e      	bls.n	80066e0 <_vfiprintf_r+0x1c4>
 8006642:	b1b0      	cbz	r0, 8006672 <_vfiprintf_r+0x156>
 8006644:	9207      	str	r2, [sp, #28]
 8006646:	e014      	b.n	8006672 <_vfiprintf_r+0x156>
 8006648:	eba0 0308 	sub.w	r3, r0, r8
 800664c:	fa09 f303 	lsl.w	r3, r9, r3
 8006650:	4313      	orrs	r3, r2
 8006652:	9304      	str	r3, [sp, #16]
 8006654:	46a2      	mov	sl, r4
 8006656:	e7d2      	b.n	80065fe <_vfiprintf_r+0xe2>
 8006658:	9b03      	ldr	r3, [sp, #12]
 800665a:	1d19      	adds	r1, r3, #4
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	9103      	str	r1, [sp, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	bfbb      	ittet	lt
 8006664:	425b      	neglt	r3, r3
 8006666:	f042 0202 	orrlt.w	r2, r2, #2
 800666a:	9307      	strge	r3, [sp, #28]
 800666c:	9307      	strlt	r3, [sp, #28]
 800666e:	bfb8      	it	lt
 8006670:	9204      	strlt	r2, [sp, #16]
 8006672:	7823      	ldrb	r3, [r4, #0]
 8006674:	2b2e      	cmp	r3, #46	; 0x2e
 8006676:	d10c      	bne.n	8006692 <_vfiprintf_r+0x176>
 8006678:	7863      	ldrb	r3, [r4, #1]
 800667a:	2b2a      	cmp	r3, #42	; 0x2a
 800667c:	d135      	bne.n	80066ea <_vfiprintf_r+0x1ce>
 800667e:	9b03      	ldr	r3, [sp, #12]
 8006680:	1d1a      	adds	r2, r3, #4
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	9203      	str	r2, [sp, #12]
 8006686:	2b00      	cmp	r3, #0
 8006688:	bfb8      	it	lt
 800668a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800668e:	3402      	adds	r4, #2
 8006690:	9305      	str	r3, [sp, #20]
 8006692:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006778 <_vfiprintf_r+0x25c>
 8006696:	7821      	ldrb	r1, [r4, #0]
 8006698:	2203      	movs	r2, #3
 800669a:	4650      	mov	r0, sl
 800669c:	f7f9 fe08 	bl	80002b0 <memchr>
 80066a0:	b140      	cbz	r0, 80066b4 <_vfiprintf_r+0x198>
 80066a2:	2340      	movs	r3, #64	; 0x40
 80066a4:	eba0 000a 	sub.w	r0, r0, sl
 80066a8:	fa03 f000 	lsl.w	r0, r3, r0
 80066ac:	9b04      	ldr	r3, [sp, #16]
 80066ae:	4303      	orrs	r3, r0
 80066b0:	3401      	adds	r4, #1
 80066b2:	9304      	str	r3, [sp, #16]
 80066b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066b8:	482c      	ldr	r0, [pc, #176]	; (800676c <_vfiprintf_r+0x250>)
 80066ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066be:	2206      	movs	r2, #6
 80066c0:	f7f9 fdf6 	bl	80002b0 <memchr>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d03f      	beq.n	8006748 <_vfiprintf_r+0x22c>
 80066c8:	4b29      	ldr	r3, [pc, #164]	; (8006770 <_vfiprintf_r+0x254>)
 80066ca:	bb1b      	cbnz	r3, 8006714 <_vfiprintf_r+0x1f8>
 80066cc:	9b03      	ldr	r3, [sp, #12]
 80066ce:	3307      	adds	r3, #7
 80066d0:	f023 0307 	bic.w	r3, r3, #7
 80066d4:	3308      	adds	r3, #8
 80066d6:	9303      	str	r3, [sp, #12]
 80066d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066da:	443b      	add	r3, r7
 80066dc:	9309      	str	r3, [sp, #36]	; 0x24
 80066de:	e767      	b.n	80065b0 <_vfiprintf_r+0x94>
 80066e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80066e4:	460c      	mov	r4, r1
 80066e6:	2001      	movs	r0, #1
 80066e8:	e7a5      	b.n	8006636 <_vfiprintf_r+0x11a>
 80066ea:	2300      	movs	r3, #0
 80066ec:	3401      	adds	r4, #1
 80066ee:	9305      	str	r3, [sp, #20]
 80066f0:	4619      	mov	r1, r3
 80066f2:	f04f 0c0a 	mov.w	ip, #10
 80066f6:	4620      	mov	r0, r4
 80066f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066fc:	3a30      	subs	r2, #48	; 0x30
 80066fe:	2a09      	cmp	r2, #9
 8006700:	d903      	bls.n	800670a <_vfiprintf_r+0x1ee>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0c5      	beq.n	8006692 <_vfiprintf_r+0x176>
 8006706:	9105      	str	r1, [sp, #20]
 8006708:	e7c3      	b.n	8006692 <_vfiprintf_r+0x176>
 800670a:	fb0c 2101 	mla	r1, ip, r1, r2
 800670e:	4604      	mov	r4, r0
 8006710:	2301      	movs	r3, #1
 8006712:	e7f0      	b.n	80066f6 <_vfiprintf_r+0x1da>
 8006714:	ab03      	add	r3, sp, #12
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	462a      	mov	r2, r5
 800671a:	4b16      	ldr	r3, [pc, #88]	; (8006774 <_vfiprintf_r+0x258>)
 800671c:	a904      	add	r1, sp, #16
 800671e:	4630      	mov	r0, r6
 8006720:	f3af 8000 	nop.w
 8006724:	4607      	mov	r7, r0
 8006726:	1c78      	adds	r0, r7, #1
 8006728:	d1d6      	bne.n	80066d8 <_vfiprintf_r+0x1bc>
 800672a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800672c:	07d9      	lsls	r1, r3, #31
 800672e:	d405      	bmi.n	800673c <_vfiprintf_r+0x220>
 8006730:	89ab      	ldrh	r3, [r5, #12]
 8006732:	059a      	lsls	r2, r3, #22
 8006734:	d402      	bmi.n	800673c <_vfiprintf_r+0x220>
 8006736:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006738:	f7ff fc23 	bl	8005f82 <__retarget_lock_release_recursive>
 800673c:	89ab      	ldrh	r3, [r5, #12]
 800673e:	065b      	lsls	r3, r3, #25
 8006740:	f53f af12 	bmi.w	8006568 <_vfiprintf_r+0x4c>
 8006744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006746:	e711      	b.n	800656c <_vfiprintf_r+0x50>
 8006748:	ab03      	add	r3, sp, #12
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	462a      	mov	r2, r5
 800674e:	4b09      	ldr	r3, [pc, #36]	; (8006774 <_vfiprintf_r+0x258>)
 8006750:	a904      	add	r1, sp, #16
 8006752:	4630      	mov	r0, r6
 8006754:	f000 f880 	bl	8006858 <_printf_i>
 8006758:	e7e4      	b.n	8006724 <_vfiprintf_r+0x208>
 800675a:	bf00      	nop
 800675c:	08006e5c 	.word	0x08006e5c
 8006760:	08006e7c 	.word	0x08006e7c
 8006764:	08006e3c 	.word	0x08006e3c
 8006768:	08006e9c 	.word	0x08006e9c
 800676c:	08006ea6 	.word	0x08006ea6
 8006770:	00000000 	.word	0x00000000
 8006774:	080064f7 	.word	0x080064f7
 8006778:	08006ea2 	.word	0x08006ea2

0800677c <_printf_common>:
 800677c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006780:	4616      	mov	r6, r2
 8006782:	4699      	mov	r9, r3
 8006784:	688a      	ldr	r2, [r1, #8]
 8006786:	690b      	ldr	r3, [r1, #16]
 8006788:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800678c:	4293      	cmp	r3, r2
 800678e:	bfb8      	it	lt
 8006790:	4613      	movlt	r3, r2
 8006792:	6033      	str	r3, [r6, #0]
 8006794:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006798:	4607      	mov	r7, r0
 800679a:	460c      	mov	r4, r1
 800679c:	b10a      	cbz	r2, 80067a2 <_printf_common+0x26>
 800679e:	3301      	adds	r3, #1
 80067a0:	6033      	str	r3, [r6, #0]
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	0699      	lsls	r1, r3, #26
 80067a6:	bf42      	ittt	mi
 80067a8:	6833      	ldrmi	r3, [r6, #0]
 80067aa:	3302      	addmi	r3, #2
 80067ac:	6033      	strmi	r3, [r6, #0]
 80067ae:	6825      	ldr	r5, [r4, #0]
 80067b0:	f015 0506 	ands.w	r5, r5, #6
 80067b4:	d106      	bne.n	80067c4 <_printf_common+0x48>
 80067b6:	f104 0a19 	add.w	sl, r4, #25
 80067ba:	68e3      	ldr	r3, [r4, #12]
 80067bc:	6832      	ldr	r2, [r6, #0]
 80067be:	1a9b      	subs	r3, r3, r2
 80067c0:	42ab      	cmp	r3, r5
 80067c2:	dc26      	bgt.n	8006812 <_printf_common+0x96>
 80067c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067c8:	1e13      	subs	r3, r2, #0
 80067ca:	6822      	ldr	r2, [r4, #0]
 80067cc:	bf18      	it	ne
 80067ce:	2301      	movne	r3, #1
 80067d0:	0692      	lsls	r2, r2, #26
 80067d2:	d42b      	bmi.n	800682c <_printf_common+0xb0>
 80067d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067d8:	4649      	mov	r1, r9
 80067da:	4638      	mov	r0, r7
 80067dc:	47c0      	blx	r8
 80067de:	3001      	adds	r0, #1
 80067e0:	d01e      	beq.n	8006820 <_printf_common+0xa4>
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	68e5      	ldr	r5, [r4, #12]
 80067e6:	6832      	ldr	r2, [r6, #0]
 80067e8:	f003 0306 	and.w	r3, r3, #6
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	bf08      	it	eq
 80067f0:	1aad      	subeq	r5, r5, r2
 80067f2:	68a3      	ldr	r3, [r4, #8]
 80067f4:	6922      	ldr	r2, [r4, #16]
 80067f6:	bf0c      	ite	eq
 80067f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067fc:	2500      	movne	r5, #0
 80067fe:	4293      	cmp	r3, r2
 8006800:	bfc4      	itt	gt
 8006802:	1a9b      	subgt	r3, r3, r2
 8006804:	18ed      	addgt	r5, r5, r3
 8006806:	2600      	movs	r6, #0
 8006808:	341a      	adds	r4, #26
 800680a:	42b5      	cmp	r5, r6
 800680c:	d11a      	bne.n	8006844 <_printf_common+0xc8>
 800680e:	2000      	movs	r0, #0
 8006810:	e008      	b.n	8006824 <_printf_common+0xa8>
 8006812:	2301      	movs	r3, #1
 8006814:	4652      	mov	r2, sl
 8006816:	4649      	mov	r1, r9
 8006818:	4638      	mov	r0, r7
 800681a:	47c0      	blx	r8
 800681c:	3001      	adds	r0, #1
 800681e:	d103      	bne.n	8006828 <_printf_common+0xac>
 8006820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006828:	3501      	adds	r5, #1
 800682a:	e7c6      	b.n	80067ba <_printf_common+0x3e>
 800682c:	18e1      	adds	r1, r4, r3
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	2030      	movs	r0, #48	; 0x30
 8006832:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006836:	4422      	add	r2, r4
 8006838:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800683c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006840:	3302      	adds	r3, #2
 8006842:	e7c7      	b.n	80067d4 <_printf_common+0x58>
 8006844:	2301      	movs	r3, #1
 8006846:	4622      	mov	r2, r4
 8006848:	4649      	mov	r1, r9
 800684a:	4638      	mov	r0, r7
 800684c:	47c0      	blx	r8
 800684e:	3001      	adds	r0, #1
 8006850:	d0e6      	beq.n	8006820 <_printf_common+0xa4>
 8006852:	3601      	adds	r6, #1
 8006854:	e7d9      	b.n	800680a <_printf_common+0x8e>
	...

08006858 <_printf_i>:
 8006858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800685c:	7e0f      	ldrb	r7, [r1, #24]
 800685e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006860:	2f78      	cmp	r7, #120	; 0x78
 8006862:	4691      	mov	r9, r2
 8006864:	4680      	mov	r8, r0
 8006866:	460c      	mov	r4, r1
 8006868:	469a      	mov	sl, r3
 800686a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800686e:	d807      	bhi.n	8006880 <_printf_i+0x28>
 8006870:	2f62      	cmp	r7, #98	; 0x62
 8006872:	d80a      	bhi.n	800688a <_printf_i+0x32>
 8006874:	2f00      	cmp	r7, #0
 8006876:	f000 80d8 	beq.w	8006a2a <_printf_i+0x1d2>
 800687a:	2f58      	cmp	r7, #88	; 0x58
 800687c:	f000 80a3 	beq.w	80069c6 <_printf_i+0x16e>
 8006880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006884:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006888:	e03a      	b.n	8006900 <_printf_i+0xa8>
 800688a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800688e:	2b15      	cmp	r3, #21
 8006890:	d8f6      	bhi.n	8006880 <_printf_i+0x28>
 8006892:	a101      	add	r1, pc, #4	; (adr r1, 8006898 <_printf_i+0x40>)
 8006894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006898:	080068f1 	.word	0x080068f1
 800689c:	08006905 	.word	0x08006905
 80068a0:	08006881 	.word	0x08006881
 80068a4:	08006881 	.word	0x08006881
 80068a8:	08006881 	.word	0x08006881
 80068ac:	08006881 	.word	0x08006881
 80068b0:	08006905 	.word	0x08006905
 80068b4:	08006881 	.word	0x08006881
 80068b8:	08006881 	.word	0x08006881
 80068bc:	08006881 	.word	0x08006881
 80068c0:	08006881 	.word	0x08006881
 80068c4:	08006a11 	.word	0x08006a11
 80068c8:	08006935 	.word	0x08006935
 80068cc:	080069f3 	.word	0x080069f3
 80068d0:	08006881 	.word	0x08006881
 80068d4:	08006881 	.word	0x08006881
 80068d8:	08006a33 	.word	0x08006a33
 80068dc:	08006881 	.word	0x08006881
 80068e0:	08006935 	.word	0x08006935
 80068e4:	08006881 	.word	0x08006881
 80068e8:	08006881 	.word	0x08006881
 80068ec:	080069fb 	.word	0x080069fb
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	1d1a      	adds	r2, r3, #4
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	602a      	str	r2, [r5, #0]
 80068f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006900:	2301      	movs	r3, #1
 8006902:	e0a3      	b.n	8006a4c <_printf_i+0x1f4>
 8006904:	6820      	ldr	r0, [r4, #0]
 8006906:	6829      	ldr	r1, [r5, #0]
 8006908:	0606      	lsls	r6, r0, #24
 800690a:	f101 0304 	add.w	r3, r1, #4
 800690e:	d50a      	bpl.n	8006926 <_printf_i+0xce>
 8006910:	680e      	ldr	r6, [r1, #0]
 8006912:	602b      	str	r3, [r5, #0]
 8006914:	2e00      	cmp	r6, #0
 8006916:	da03      	bge.n	8006920 <_printf_i+0xc8>
 8006918:	232d      	movs	r3, #45	; 0x2d
 800691a:	4276      	negs	r6, r6
 800691c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006920:	485e      	ldr	r0, [pc, #376]	; (8006a9c <_printf_i+0x244>)
 8006922:	230a      	movs	r3, #10
 8006924:	e019      	b.n	800695a <_printf_i+0x102>
 8006926:	680e      	ldr	r6, [r1, #0]
 8006928:	602b      	str	r3, [r5, #0]
 800692a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800692e:	bf18      	it	ne
 8006930:	b236      	sxthne	r6, r6
 8006932:	e7ef      	b.n	8006914 <_printf_i+0xbc>
 8006934:	682b      	ldr	r3, [r5, #0]
 8006936:	6820      	ldr	r0, [r4, #0]
 8006938:	1d19      	adds	r1, r3, #4
 800693a:	6029      	str	r1, [r5, #0]
 800693c:	0601      	lsls	r1, r0, #24
 800693e:	d501      	bpl.n	8006944 <_printf_i+0xec>
 8006940:	681e      	ldr	r6, [r3, #0]
 8006942:	e002      	b.n	800694a <_printf_i+0xf2>
 8006944:	0646      	lsls	r6, r0, #25
 8006946:	d5fb      	bpl.n	8006940 <_printf_i+0xe8>
 8006948:	881e      	ldrh	r6, [r3, #0]
 800694a:	4854      	ldr	r0, [pc, #336]	; (8006a9c <_printf_i+0x244>)
 800694c:	2f6f      	cmp	r7, #111	; 0x6f
 800694e:	bf0c      	ite	eq
 8006950:	2308      	moveq	r3, #8
 8006952:	230a      	movne	r3, #10
 8006954:	2100      	movs	r1, #0
 8006956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800695a:	6865      	ldr	r5, [r4, #4]
 800695c:	60a5      	str	r5, [r4, #8]
 800695e:	2d00      	cmp	r5, #0
 8006960:	bfa2      	ittt	ge
 8006962:	6821      	ldrge	r1, [r4, #0]
 8006964:	f021 0104 	bicge.w	r1, r1, #4
 8006968:	6021      	strge	r1, [r4, #0]
 800696a:	b90e      	cbnz	r6, 8006970 <_printf_i+0x118>
 800696c:	2d00      	cmp	r5, #0
 800696e:	d04d      	beq.n	8006a0c <_printf_i+0x1b4>
 8006970:	4615      	mov	r5, r2
 8006972:	fbb6 f1f3 	udiv	r1, r6, r3
 8006976:	fb03 6711 	mls	r7, r3, r1, r6
 800697a:	5dc7      	ldrb	r7, [r0, r7]
 800697c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006980:	4637      	mov	r7, r6
 8006982:	42bb      	cmp	r3, r7
 8006984:	460e      	mov	r6, r1
 8006986:	d9f4      	bls.n	8006972 <_printf_i+0x11a>
 8006988:	2b08      	cmp	r3, #8
 800698a:	d10b      	bne.n	80069a4 <_printf_i+0x14c>
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	07de      	lsls	r6, r3, #31
 8006990:	d508      	bpl.n	80069a4 <_printf_i+0x14c>
 8006992:	6923      	ldr	r3, [r4, #16]
 8006994:	6861      	ldr	r1, [r4, #4]
 8006996:	4299      	cmp	r1, r3
 8006998:	bfde      	ittt	le
 800699a:	2330      	movle	r3, #48	; 0x30
 800699c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80069a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80069a4:	1b52      	subs	r2, r2, r5
 80069a6:	6122      	str	r2, [r4, #16]
 80069a8:	f8cd a000 	str.w	sl, [sp]
 80069ac:	464b      	mov	r3, r9
 80069ae:	aa03      	add	r2, sp, #12
 80069b0:	4621      	mov	r1, r4
 80069b2:	4640      	mov	r0, r8
 80069b4:	f7ff fee2 	bl	800677c <_printf_common>
 80069b8:	3001      	adds	r0, #1
 80069ba:	d14c      	bne.n	8006a56 <_printf_i+0x1fe>
 80069bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069c0:	b004      	add	sp, #16
 80069c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c6:	4835      	ldr	r0, [pc, #212]	; (8006a9c <_printf_i+0x244>)
 80069c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80069cc:	6829      	ldr	r1, [r5, #0]
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80069d4:	6029      	str	r1, [r5, #0]
 80069d6:	061d      	lsls	r5, r3, #24
 80069d8:	d514      	bpl.n	8006a04 <_printf_i+0x1ac>
 80069da:	07df      	lsls	r7, r3, #31
 80069dc:	bf44      	itt	mi
 80069de:	f043 0320 	orrmi.w	r3, r3, #32
 80069e2:	6023      	strmi	r3, [r4, #0]
 80069e4:	b91e      	cbnz	r6, 80069ee <_printf_i+0x196>
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	f023 0320 	bic.w	r3, r3, #32
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	2310      	movs	r3, #16
 80069f0:	e7b0      	b.n	8006954 <_printf_i+0xfc>
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	f043 0320 	orr.w	r3, r3, #32
 80069f8:	6023      	str	r3, [r4, #0]
 80069fa:	2378      	movs	r3, #120	; 0x78
 80069fc:	4828      	ldr	r0, [pc, #160]	; (8006aa0 <_printf_i+0x248>)
 80069fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a02:	e7e3      	b.n	80069cc <_printf_i+0x174>
 8006a04:	0659      	lsls	r1, r3, #25
 8006a06:	bf48      	it	mi
 8006a08:	b2b6      	uxthmi	r6, r6
 8006a0a:	e7e6      	b.n	80069da <_printf_i+0x182>
 8006a0c:	4615      	mov	r5, r2
 8006a0e:	e7bb      	b.n	8006988 <_printf_i+0x130>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	6826      	ldr	r6, [r4, #0]
 8006a14:	6961      	ldr	r1, [r4, #20]
 8006a16:	1d18      	adds	r0, r3, #4
 8006a18:	6028      	str	r0, [r5, #0]
 8006a1a:	0635      	lsls	r5, r6, #24
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	d501      	bpl.n	8006a24 <_printf_i+0x1cc>
 8006a20:	6019      	str	r1, [r3, #0]
 8006a22:	e002      	b.n	8006a2a <_printf_i+0x1d2>
 8006a24:	0670      	lsls	r0, r6, #25
 8006a26:	d5fb      	bpl.n	8006a20 <_printf_i+0x1c8>
 8006a28:	8019      	strh	r1, [r3, #0]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	6123      	str	r3, [r4, #16]
 8006a2e:	4615      	mov	r5, r2
 8006a30:	e7ba      	b.n	80069a8 <_printf_i+0x150>
 8006a32:	682b      	ldr	r3, [r5, #0]
 8006a34:	1d1a      	adds	r2, r3, #4
 8006a36:	602a      	str	r2, [r5, #0]
 8006a38:	681d      	ldr	r5, [r3, #0]
 8006a3a:	6862      	ldr	r2, [r4, #4]
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f7f9 fc36 	bl	80002b0 <memchr>
 8006a44:	b108      	cbz	r0, 8006a4a <_printf_i+0x1f2>
 8006a46:	1b40      	subs	r0, r0, r5
 8006a48:	6060      	str	r0, [r4, #4]
 8006a4a:	6863      	ldr	r3, [r4, #4]
 8006a4c:	6123      	str	r3, [r4, #16]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a54:	e7a8      	b.n	80069a8 <_printf_i+0x150>
 8006a56:	6923      	ldr	r3, [r4, #16]
 8006a58:	462a      	mov	r2, r5
 8006a5a:	4649      	mov	r1, r9
 8006a5c:	4640      	mov	r0, r8
 8006a5e:	47d0      	blx	sl
 8006a60:	3001      	adds	r0, #1
 8006a62:	d0ab      	beq.n	80069bc <_printf_i+0x164>
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	079b      	lsls	r3, r3, #30
 8006a68:	d413      	bmi.n	8006a92 <_printf_i+0x23a>
 8006a6a:	68e0      	ldr	r0, [r4, #12]
 8006a6c:	9b03      	ldr	r3, [sp, #12]
 8006a6e:	4298      	cmp	r0, r3
 8006a70:	bfb8      	it	lt
 8006a72:	4618      	movlt	r0, r3
 8006a74:	e7a4      	b.n	80069c0 <_printf_i+0x168>
 8006a76:	2301      	movs	r3, #1
 8006a78:	4632      	mov	r2, r6
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	47d0      	blx	sl
 8006a80:	3001      	adds	r0, #1
 8006a82:	d09b      	beq.n	80069bc <_printf_i+0x164>
 8006a84:	3501      	adds	r5, #1
 8006a86:	68e3      	ldr	r3, [r4, #12]
 8006a88:	9903      	ldr	r1, [sp, #12]
 8006a8a:	1a5b      	subs	r3, r3, r1
 8006a8c:	42ab      	cmp	r3, r5
 8006a8e:	dcf2      	bgt.n	8006a76 <_printf_i+0x21e>
 8006a90:	e7eb      	b.n	8006a6a <_printf_i+0x212>
 8006a92:	2500      	movs	r5, #0
 8006a94:	f104 0619 	add.w	r6, r4, #25
 8006a98:	e7f5      	b.n	8006a86 <_printf_i+0x22e>
 8006a9a:	bf00      	nop
 8006a9c:	08006ead 	.word	0x08006ead
 8006aa0:	08006ebe 	.word	0x08006ebe

08006aa4 <_sbrk_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	4d06      	ldr	r5, [pc, #24]	; (8006ac0 <_sbrk_r+0x1c>)
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	4604      	mov	r4, r0
 8006aac:	4608      	mov	r0, r1
 8006aae:	602b      	str	r3, [r5, #0]
 8006ab0:	f7fa f872 	bl	8000b98 <_sbrk>
 8006ab4:	1c43      	adds	r3, r0, #1
 8006ab6:	d102      	bne.n	8006abe <_sbrk_r+0x1a>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	b103      	cbz	r3, 8006abe <_sbrk_r+0x1a>
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	bd38      	pop	{r3, r4, r5, pc}
 8006ac0:	20014494 	.word	0x20014494

08006ac4 <__sread>:
 8006ac4:	b510      	push	{r4, lr}
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006acc:	f000 f8d8 	bl	8006c80 <_read_r>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	bfab      	itete	ge
 8006ad4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ad6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ad8:	181b      	addge	r3, r3, r0
 8006ada:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ade:	bfac      	ite	ge
 8006ae0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ae2:	81a3      	strhlt	r3, [r4, #12]
 8006ae4:	bd10      	pop	{r4, pc}

08006ae6 <__swrite>:
 8006ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aea:	461f      	mov	r7, r3
 8006aec:	898b      	ldrh	r3, [r1, #12]
 8006aee:	05db      	lsls	r3, r3, #23
 8006af0:	4605      	mov	r5, r0
 8006af2:	460c      	mov	r4, r1
 8006af4:	4616      	mov	r6, r2
 8006af6:	d505      	bpl.n	8006b04 <__swrite+0x1e>
 8006af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006afc:	2302      	movs	r3, #2
 8006afe:	2200      	movs	r2, #0
 8006b00:	f000 f856 	bl	8006bb0 <_lseek_r>
 8006b04:	89a3      	ldrh	r3, [r4, #12]
 8006b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b0e:	81a3      	strh	r3, [r4, #12]
 8006b10:	4632      	mov	r2, r6
 8006b12:	463b      	mov	r3, r7
 8006b14:	4628      	mov	r0, r5
 8006b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b1a:	f7fe be95 	b.w	8005848 <_write_r>

08006b1e <__sseek>:
 8006b1e:	b510      	push	{r4, lr}
 8006b20:	460c      	mov	r4, r1
 8006b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b26:	f000 f843 	bl	8006bb0 <_lseek_r>
 8006b2a:	1c43      	adds	r3, r0, #1
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	bf15      	itete	ne
 8006b30:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b3a:	81a3      	strheq	r3, [r4, #12]
 8006b3c:	bf18      	it	ne
 8006b3e:	81a3      	strhne	r3, [r4, #12]
 8006b40:	bd10      	pop	{r4, pc}

08006b42 <__sclose>:
 8006b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b46:	f000 b801 	b.w	8006b4c <_close_r>
	...

08006b4c <_close_r>:
 8006b4c:	b538      	push	{r3, r4, r5, lr}
 8006b4e:	4d06      	ldr	r5, [pc, #24]	; (8006b68 <_close_r+0x1c>)
 8006b50:	2300      	movs	r3, #0
 8006b52:	4604      	mov	r4, r0
 8006b54:	4608      	mov	r0, r1
 8006b56:	602b      	str	r3, [r5, #0]
 8006b58:	f7f9 ffe9 	bl	8000b2e <_close>
 8006b5c:	1c43      	adds	r3, r0, #1
 8006b5e:	d102      	bne.n	8006b66 <_close_r+0x1a>
 8006b60:	682b      	ldr	r3, [r5, #0]
 8006b62:	b103      	cbz	r3, 8006b66 <_close_r+0x1a>
 8006b64:	6023      	str	r3, [r4, #0]
 8006b66:	bd38      	pop	{r3, r4, r5, pc}
 8006b68:	20014494 	.word	0x20014494

08006b6c <_fstat_r>:
 8006b6c:	b538      	push	{r3, r4, r5, lr}
 8006b6e:	4d07      	ldr	r5, [pc, #28]	; (8006b8c <_fstat_r+0x20>)
 8006b70:	2300      	movs	r3, #0
 8006b72:	4604      	mov	r4, r0
 8006b74:	4608      	mov	r0, r1
 8006b76:	4611      	mov	r1, r2
 8006b78:	602b      	str	r3, [r5, #0]
 8006b7a:	f7f9 ffe4 	bl	8000b46 <_fstat>
 8006b7e:	1c43      	adds	r3, r0, #1
 8006b80:	d102      	bne.n	8006b88 <_fstat_r+0x1c>
 8006b82:	682b      	ldr	r3, [r5, #0]
 8006b84:	b103      	cbz	r3, 8006b88 <_fstat_r+0x1c>
 8006b86:	6023      	str	r3, [r4, #0]
 8006b88:	bd38      	pop	{r3, r4, r5, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20014494 	.word	0x20014494

08006b90 <_isatty_r>:
 8006b90:	b538      	push	{r3, r4, r5, lr}
 8006b92:	4d06      	ldr	r5, [pc, #24]	; (8006bac <_isatty_r+0x1c>)
 8006b94:	2300      	movs	r3, #0
 8006b96:	4604      	mov	r4, r0
 8006b98:	4608      	mov	r0, r1
 8006b9a:	602b      	str	r3, [r5, #0]
 8006b9c:	f7f9 ffe3 	bl	8000b66 <_isatty>
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	d102      	bne.n	8006baa <_isatty_r+0x1a>
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	b103      	cbz	r3, 8006baa <_isatty_r+0x1a>
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	20014494 	.word	0x20014494

08006bb0 <_lseek_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	4d07      	ldr	r5, [pc, #28]	; (8006bd0 <_lseek_r+0x20>)
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	4608      	mov	r0, r1
 8006bb8:	4611      	mov	r1, r2
 8006bba:	2200      	movs	r2, #0
 8006bbc:	602a      	str	r2, [r5, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f7f9 ffdc 	bl	8000b7c <_lseek>
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	d102      	bne.n	8006bce <_lseek_r+0x1e>
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	b103      	cbz	r3, 8006bce <_lseek_r+0x1e>
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	bd38      	pop	{r3, r4, r5, pc}
 8006bd0:	20014494 	.word	0x20014494

08006bd4 <memmove>:
 8006bd4:	4288      	cmp	r0, r1
 8006bd6:	b510      	push	{r4, lr}
 8006bd8:	eb01 0402 	add.w	r4, r1, r2
 8006bdc:	d902      	bls.n	8006be4 <memmove+0x10>
 8006bde:	4284      	cmp	r4, r0
 8006be0:	4623      	mov	r3, r4
 8006be2:	d807      	bhi.n	8006bf4 <memmove+0x20>
 8006be4:	1e43      	subs	r3, r0, #1
 8006be6:	42a1      	cmp	r1, r4
 8006be8:	d008      	beq.n	8006bfc <memmove+0x28>
 8006bea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bf2:	e7f8      	b.n	8006be6 <memmove+0x12>
 8006bf4:	4402      	add	r2, r0
 8006bf6:	4601      	mov	r1, r0
 8006bf8:	428a      	cmp	r2, r1
 8006bfa:	d100      	bne.n	8006bfe <memmove+0x2a>
 8006bfc:	bd10      	pop	{r4, pc}
 8006bfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c06:	e7f7      	b.n	8006bf8 <memmove+0x24>

08006c08 <__malloc_lock>:
 8006c08:	4801      	ldr	r0, [pc, #4]	; (8006c10 <__malloc_lock+0x8>)
 8006c0a:	f7ff b9b9 	b.w	8005f80 <__retarget_lock_acquire_recursive>
 8006c0e:	bf00      	nop
 8006c10:	20014487 	.word	0x20014487

08006c14 <__malloc_unlock>:
 8006c14:	4801      	ldr	r0, [pc, #4]	; (8006c1c <__malloc_unlock+0x8>)
 8006c16:	f7ff b9b4 	b.w	8005f82 <__retarget_lock_release_recursive>
 8006c1a:	bf00      	nop
 8006c1c:	20014487 	.word	0x20014487

08006c20 <_realloc_r>:
 8006c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c24:	4680      	mov	r8, r0
 8006c26:	4614      	mov	r4, r2
 8006c28:	460e      	mov	r6, r1
 8006c2a:	b921      	cbnz	r1, 8006c36 <_realloc_r+0x16>
 8006c2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c30:	4611      	mov	r1, r2
 8006c32:	f7ff ba79 	b.w	8006128 <_malloc_r>
 8006c36:	b92a      	cbnz	r2, 8006c44 <_realloc_r+0x24>
 8006c38:	f7ff fa0a 	bl	8006050 <_free_r>
 8006c3c:	4625      	mov	r5, r4
 8006c3e:	4628      	mov	r0, r5
 8006c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c44:	f000 f82e 	bl	8006ca4 <_malloc_usable_size_r>
 8006c48:	4284      	cmp	r4, r0
 8006c4a:	4607      	mov	r7, r0
 8006c4c:	d802      	bhi.n	8006c54 <_realloc_r+0x34>
 8006c4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c52:	d812      	bhi.n	8006c7a <_realloc_r+0x5a>
 8006c54:	4621      	mov	r1, r4
 8006c56:	4640      	mov	r0, r8
 8006c58:	f7ff fa66 	bl	8006128 <_malloc_r>
 8006c5c:	4605      	mov	r5, r0
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d0ed      	beq.n	8006c3e <_realloc_r+0x1e>
 8006c62:	42bc      	cmp	r4, r7
 8006c64:	4622      	mov	r2, r4
 8006c66:	4631      	mov	r1, r6
 8006c68:	bf28      	it	cs
 8006c6a:	463a      	movcs	r2, r7
 8006c6c:	f7fe fe38 	bl	80058e0 <memcpy>
 8006c70:	4631      	mov	r1, r6
 8006c72:	4640      	mov	r0, r8
 8006c74:	f7ff f9ec 	bl	8006050 <_free_r>
 8006c78:	e7e1      	b.n	8006c3e <_realloc_r+0x1e>
 8006c7a:	4635      	mov	r5, r6
 8006c7c:	e7df      	b.n	8006c3e <_realloc_r+0x1e>
	...

08006c80 <_read_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4d07      	ldr	r5, [pc, #28]	; (8006ca0 <_read_r+0x20>)
 8006c84:	4604      	mov	r4, r0
 8006c86:	4608      	mov	r0, r1
 8006c88:	4611      	mov	r1, r2
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	602a      	str	r2, [r5, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f7f9 ff30 	bl	8000af4 <_read>
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	d102      	bne.n	8006c9e <_read_r+0x1e>
 8006c98:	682b      	ldr	r3, [r5, #0]
 8006c9a:	b103      	cbz	r3, 8006c9e <_read_r+0x1e>
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ca0:	20014494 	.word	0x20014494

08006ca4 <_malloc_usable_size_r>:
 8006ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ca8:	1f18      	subs	r0, r3, #4
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	bfbc      	itt	lt
 8006cae:	580b      	ldrlt	r3, [r1, r0]
 8006cb0:	18c0      	addlt	r0, r0, r3
 8006cb2:	4770      	bx	lr

08006cb4 <_init>:
 8006cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb6:	bf00      	nop
 8006cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cba:	bc08      	pop	{r3}
 8006cbc:	469e      	mov	lr, r3
 8006cbe:	4770      	bx	lr

08006cc0 <_fini>:
 8006cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc2:	bf00      	nop
 8006cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cc6:	bc08      	pop	{r3}
 8006cc8:	469e      	mov	lr, r3
 8006cca:	4770      	bx	lr
