
AHT25_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008810  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  080089e0  080089e0  000189e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e14  08008e14  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008e14  08008e14  00018e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e1c  08008e1c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e1c  08008e1c  00018e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e20  08008e20  00018e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  200001e4  08009008  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08009008  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d24c  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e75  00000000  00000000  0002d460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0002f2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a20  00000000  00000000  0002fda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022428  00000000  00000000  000307c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7c4  00000000  00000000  00052bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc48c  00000000  00000000  000613b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012d840  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e0c  00000000  00000000  0012d890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080089c8 	.word	0x080089c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	080089c8 	.word	0x080089c8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <AHT25_init>:

float AHT25_relative_humidity = -100.0f, AHT25_temperature = -100.0f;
uint8_t measure_humidity = 0;

void AHT25_init()
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af02      	add	r7, sp, #8
	uint8_t init = AHT25_initialization;
 8000ef2:	23e1      	movs	r3, #225	; 0xe1
 8000ef4:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(25);//needs 20 ms for i2c to stabilize after power up
 8000ef6:	2019      	movs	r0, #25
 8000ef8:	f000 fd22 	bl	8001940 <HAL_Delay>
	LED_ON;
 8000efc:	2201      	movs	r2, #1
 8000efe:	2120      	movs	r1, #32
 8000f00:	4809      	ldr	r0, [pc, #36]	; (8000f28 <AHT25_init+0x3c>)
 8000f02:	f001 f817 	bl	8001f34 <HAL_GPIO_WritePin>
	HAL_I2C_Master_Transmit(&hi2c1, AHT25_device_address | I2C_write, &init, 1, 50);
 8000f06:	1dfa      	adds	r2, r7, #7
 8000f08:	2332      	movs	r3, #50	; 0x32
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	2170      	movs	r1, #112	; 0x70
 8000f10:	4806      	ldr	r0, [pc, #24]	; (8000f2c <AHT25_init+0x40>)
 8000f12:	f001 f96d 	bl	80021f0 <HAL_I2C_Master_Transmit>
	LED_OFF;
 8000f16:	2200      	movs	r2, #0
 8000f18:	2120      	movs	r1, #32
 8000f1a:	4803      	ldr	r0, [pc, #12]	; (8000f28 <AHT25_init+0x3c>)
 8000f1c:	f001 f80a 	bl	8001f34 <HAL_GPIO_WritePin>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	20000200 	.word	0x20000200

08000f30 <AHT25_reset>:

void AHT25_reset()
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af02      	add	r7, sp, #8
	uint8_t reset = AHT25_soft_reset;
 8000f36:	23ba      	movs	r3, #186	; 0xba
 8000f38:	71fb      	strb	r3, [r7, #7]
	LED_ON;
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2120      	movs	r1, #32
 8000f3e:	480b      	ldr	r0, [pc, #44]	; (8000f6c <AHT25_reset+0x3c>)
 8000f40:	f000 fff8 	bl	8001f34 <HAL_GPIO_WritePin>
	HAL_I2C_Master_Transmit(&hi2c1, AHT25_device_address | I2C_write, &reset, 1, 50);
 8000f44:	1dfa      	adds	r2, r7, #7
 8000f46:	2332      	movs	r3, #50	; 0x32
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	2170      	movs	r1, #112	; 0x70
 8000f4e:	4808      	ldr	r0, [pc, #32]	; (8000f70 <AHT25_reset+0x40>)
 8000f50:	f001 f94e 	bl	80021f0 <HAL_I2C_Master_Transmit>
	LED_OFF;
 8000f54:	2200      	movs	r2, #0
 8000f56:	2120      	movs	r1, #32
 8000f58:	4804      	ldr	r0, [pc, #16]	; (8000f6c <AHT25_reset+0x3c>)
 8000f5a:	f000 ffeb 	bl	8001f34 <HAL_GPIO_WritePin>
	HAL_Delay(25);//takes some time to reset
 8000f5e:	2019      	movs	r0, #25
 8000f60:	f000 fcee 	bl	8001940 <HAL_Delay>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	20000200 	.word	0x20000200

08000f74 <AHT25_read_data>:

void AHT25_read_data()
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af02      	add	r7, sp, #8
	uint8_t data[3] = { AHT25_measurement_trigger, 0b00110011, 0b00000000 };
 8000f7a:	4a48      	ldr	r2, [pc, #288]	; (800109c <AHT25_read_data+0x128>)
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	6812      	ldr	r2, [r2, #0]
 8000f82:	4611      	mov	r1, r2
 8000f84:	8019      	strh	r1, [r3, #0]
 8000f86:	3302      	adds	r3, #2
 8000f88:	0c12      	lsrs	r2, r2, #16
 8000f8a:	701a      	strb	r2, [r3, #0]
	uint8_t received_data[6];
	LED_ON;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2120      	movs	r1, #32
 8000f90:	4843      	ldr	r0, [pc, #268]	; (80010a0 <AHT25_read_data+0x12c>)
 8000f92:	f000 ffcf 	bl	8001f34 <HAL_GPIO_WritePin>
	HAL_I2C_Master_Transmit(&hi2c1, AHT25_device_address | I2C_write, &data[0], 3, 50);
 8000f96:	f107 020c 	add.w	r2, r7, #12
 8000f9a:	2332      	movs	r3, #50	; 0x32
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	2170      	movs	r1, #112	; 0x70
 8000fa2:	4840      	ldr	r0, [pc, #256]	; (80010a4 <AHT25_read_data+0x130>)
 8000fa4:	f001 f924 	bl	80021f0 <HAL_I2C_Master_Transmit>
	LED_OFF;
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2120      	movs	r1, #32
 8000fac:	483c      	ldr	r0, [pc, #240]	; (80010a0 <AHT25_read_data+0x12c>)
 8000fae:	f000 ffc1 	bl	8001f34 <HAL_GPIO_WritePin>
	uint8_t attempts = 5;
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	77fb      	strb	r3, [r7, #31]
	do{
		attempts--;
 8000fb6:	7ffb      	ldrb	r3, [r7, #31]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	77fb      	strb	r3, [r7, #31]
		HAL_Delay(200);//measurement takes 75 ms
 8000fbc:	20c8      	movs	r0, #200	; 0xc8
 8000fbe:	f000 fcbf 	bl	8001940 <HAL_Delay>
		LED_ON;
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2120      	movs	r1, #32
 8000fc6:	4836      	ldr	r0, [pc, #216]	; (80010a0 <AHT25_read_data+0x12c>)
 8000fc8:	f000 ffb4 	bl	8001f34 <HAL_GPIO_WritePin>
		HAL_I2C_Master_Receive(&hi2c1, AHT25_device_address | I2C_read, &received_data[0], 6, 50);
 8000fcc:	1d3a      	adds	r2, r7, #4
 8000fce:	2332      	movs	r3, #50	; 0x32
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	2171      	movs	r1, #113	; 0x71
 8000fd6:	4833      	ldr	r0, [pc, #204]	; (80010a4 <AHT25_read_data+0x130>)
 8000fd8:	f001 fa08 	bl	80023ec <HAL_I2C_Master_Receive>
		LED_OFF;
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2120      	movs	r1, #32
 8000fe0:	482f      	ldr	r0, [pc, #188]	; (80010a0 <AHT25_read_data+0x12c>)
 8000fe2:	f000 ffa7 	bl	8001f34 <HAL_GPIO_WritePin>
	}while((received_data[5] & 0b10000000) == 128 && attempts > 0);
 8000fe6:	7a7b      	ldrb	r3, [r7, #9]
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	da02      	bge.n	8000ff4 <AHT25_read_data+0x80>
 8000fee:	7ffb      	ldrb	r3, [r7, #31]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1e0      	bne.n	8000fb6 <AHT25_read_data+0x42>


	if((received_data[5] & 0b10000000) == 0)
 8000ff4:	7a7b      	ldrb	r3, [r7, #9]
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db40      	blt.n	800107e <AHT25_read_data+0x10a>
	{
		const uint32_t constant = 1400000;
 8000ffc:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <AHT25_read_data+0x134>)
 8000ffe:	61bb      	str	r3, [r7, #24]

		uint32_t humidity_bytes = (((uint32_t)received_data[4]) << 12) + (((uint32_t)received_data[3]) << 4) + (((uint32_t)received_data[2] & 0b11110000) >> 4);
 8001000:	7a3b      	ldrb	r3, [r7, #8]
 8001002:	031a      	lsls	r2, r3, #12
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	4413      	add	r3, r2
 800100a:	79ba      	ldrb	r2, [r7, #6]
 800100c:	0912      	lsrs	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	4413      	add	r3, r2
 8001012:	617b      	str	r3, [r7, #20]
		AHT25_relative_humidity = ((float)humidity_bytes / (float)constant) * 100.0f;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800102c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80010ac <AHT25_read_data+0x138>
 8001030:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001034:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <AHT25_read_data+0x13c>)
 8001036:	edc3 7a00 	vstr	s15, [r3]

		uint32_t temperature_bytes = ((uint32_t)(received_data[2] & 0b00001111) << 16) + ((uint32_t)received_data[1] << 8) + (uint32_t)received_data[0];
 800103a:	79bb      	ldrb	r3, [r7, #6]
 800103c:	041b      	lsls	r3, r3, #16
 800103e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001042:	797b      	ldrb	r3, [r7, #5]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	4413      	add	r3, r2
 8001048:	793a      	ldrb	r2, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
		AHT25_temperature = (((float)temperature_bytes / (float)constant ) * 200.0f) - 50.0f;
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	ee07 3a90 	vmov	s15, r3
 8001054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001066:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80010b4 <AHT25_read_data+0x140>
 800106a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800106e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80010b8 <AHT25_read_data+0x144>
 8001072:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <AHT25_read_data+0x148>)
 8001078:	edc3 7a00 	vstr	s15, [r3]
		  AHT25_reset();
		  HAL_Delay(100);
		  AHT25_init();
		  HAL_Delay(100);
	}
}
 800107c:	e009      	b.n	8001092 <AHT25_read_data+0x11e>
		  AHT25_reset();
 800107e:	f7ff ff57 	bl	8000f30 <AHT25_reset>
		  HAL_Delay(100);
 8001082:	2064      	movs	r0, #100	; 0x64
 8001084:	f000 fc5c 	bl	8001940 <HAL_Delay>
		  AHT25_init();
 8001088:	f7ff ff30 	bl	8000eec <AHT25_init>
		  HAL_Delay(100);
 800108c:	2064      	movs	r0, #100	; 0x64
 800108e:	f000 fc57 	bl	8001940 <HAL_Delay>
}
 8001092:	bf00      	nop
 8001094:	3720      	adds	r7, #32
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	080089e0 	.word	0x080089e0
 80010a0:	40020000 	.word	0x40020000
 80010a4:	20000200 	.word	0x20000200
 80010a8:	00155cc0 	.word	0x00155cc0
 80010ac:	42c80000 	.word	0x42c80000
 80010b0:	20000000 	.word	0x20000000
 80010b4:	43480000 	.word	0x43480000
 80010b8:	42480000 	.word	0x42480000
 80010bc:	20000004 	.word	0x20000004

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c4:	f000 fbca 	bl	800185c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c8:	f000 f886 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010cc:	f000 f94a 	bl	8001364 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010d0:	f000 f91e 	bl	8001310 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010d4:	f000 f8ee 	bl	80012b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  AHT25_reset();
 80010d8:	f7ff ff2a 	bl	8000f30 <AHT25_reset>
  HAL_Delay(100);
 80010dc:	2064      	movs	r0, #100	; 0x64
 80010de:	f000 fc2f 	bl	8001940 <HAL_Delay>
  AHT25_init();
 80010e2:	f7ff ff03 	bl	8000eec <AHT25_init>
  //AHT25_read_data();
  sprintf (buffer,"Interfacing AHT25\r\n");
 80010e6:	4932      	ldr	r1, [pc, #200]	; (80011b0 <main+0xf0>)
 80010e8:	4832      	ldr	r0, [pc, #200]	; (80011b4 <main+0xf4>)
 80010ea:	f005 f9f3 	bl	80064d4 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80010ee:	4831      	ldr	r0, [pc, #196]	; (80011b4 <main+0xf4>)
 80010f0:	f7ff f88e 	bl	8000210 <strlen>
 80010f4:	4603      	mov	r3, r0
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fc:	492d      	ldr	r1, [pc, #180]	; (80011b4 <main+0xf4>)
 80010fe:	482e      	ldr	r0, [pc, #184]	; (80011b8 <main+0xf8>)
 8001100:	f004 f9d7 	bl	80054b2 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		AHT25_read_data();
 8001104:	f7ff ff36 	bl	8000f74 <AHT25_read_data>

		buf1 = AHT25_temperature;
 8001108:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <main+0xfc>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a2c      	ldr	r2, [pc, #176]	; (80011c0 <main+0x100>)
 800110e:	6013      	str	r3, [r2, #0]
		buf2 = AHT25_relative_humidity;
 8001110:	4b2c      	ldr	r3, [pc, #176]	; (80011c4 <main+0x104>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a2c      	ldr	r2, [pc, #176]	; (80011c8 <main+0x108>)
 8001116:	6013      	str	r3, [r2, #0]

		sprintf (buffer,"HUMIDITY:---->");
 8001118:	492c      	ldr	r1, [pc, #176]	; (80011cc <main+0x10c>)
 800111a:	4826      	ldr	r0, [pc, #152]	; (80011b4 <main+0xf4>)
 800111c:	f005 f9da 	bl	80064d4 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001120:	4824      	ldr	r0, [pc, #144]	; (80011b4 <main+0xf4>)
 8001122:	f7ff f875 	bl	8000210 <strlen>
 8001126:	4603      	mov	r3, r0
 8001128:	b29a      	uxth	r2, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	4921      	ldr	r1, [pc, #132]	; (80011b4 <main+0xf4>)
 8001130:	4821      	ldr	r0, [pc, #132]	; (80011b8 <main+0xf8>)
 8001132:	f004 f9be 	bl	80054b2 <HAL_UART_Transmit>
			 sprintf (buffer, "%.2f\r\n",AHT25_relative_humidity);
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <main+0x104>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fa24 	bl	8000588 <__aeabi_f2d>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4922      	ldr	r1, [pc, #136]	; (80011d0 <main+0x110>)
 8001146:	481b      	ldr	r0, [pc, #108]	; (80011b4 <main+0xf4>)
 8001148:	f005 f9c4 	bl	80064d4 <siprintf>
			 HAL_UART_Transmit(&huart2, buffer , 8, 1000);
 800114c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001150:	2208      	movs	r2, #8
 8001152:	4918      	ldr	r1, [pc, #96]	; (80011b4 <main+0xf4>)
 8001154:	4818      	ldr	r0, [pc, #96]	; (80011b8 <main+0xf8>)
 8001156:	f004 f9ac 	bl	80054b2 <HAL_UART_Transmit>
			 HAL_Delay(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f000 fbef 	bl	8001940 <HAL_Delay>

			 sprintf (buffer,"TEMPERATURE:---->");
 8001162:	491c      	ldr	r1, [pc, #112]	; (80011d4 <main+0x114>)
 8001164:	4813      	ldr	r0, [pc, #76]	; (80011b4 <main+0xf4>)
 8001166:	f005 f9b5 	bl	80064d4 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800116a:	4812      	ldr	r0, [pc, #72]	; (80011b4 <main+0xf4>)
 800116c:	f7ff f850 	bl	8000210 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001178:	490e      	ldr	r1, [pc, #56]	; (80011b4 <main+0xf4>)
 800117a:	480f      	ldr	r0, [pc, #60]	; (80011b8 <main+0xf8>)
 800117c:	f004 f999 	bl	80054b2 <HAL_UART_Transmit>
			 sprintf (buffer, "%.2f\r\n",AHT25_temperature);
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <main+0xfc>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f9ff 	bl	8000588 <__aeabi_f2d>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4910      	ldr	r1, [pc, #64]	; (80011d0 <main+0x110>)
 8001190:	4808      	ldr	r0, [pc, #32]	; (80011b4 <main+0xf4>)
 8001192:	f005 f99f 	bl	80064d4 <siprintf>
			 HAL_UART_Transmit(&huart2, buffer , 8, 1000);
 8001196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119a:	2208      	movs	r2, #8
 800119c:	4905      	ldr	r1, [pc, #20]	; (80011b4 <main+0xf4>)
 800119e:	4806      	ldr	r0, [pc, #24]	; (80011b8 <main+0xf8>)
 80011a0:	f004 f987 	bl	80054b2 <HAL_UART_Transmit>
		 HAL_Delay(1000);
 80011a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011a8:	f000 fbca 	bl	8001940 <HAL_Delay>
		AHT25_read_data();
 80011ac:	e7aa      	b.n	8001104 <main+0x44>
 80011ae:	bf00      	nop
 80011b0:	080089e4 	.word	0x080089e4
 80011b4:	20000298 	.word	0x20000298
 80011b8:	20000254 	.word	0x20000254
 80011bc:	20000004 	.word	0x20000004
 80011c0:	20000318 	.word	0x20000318
 80011c4:	20000000 	.word	0x20000000
 80011c8:	2000031c 	.word	0x2000031c
 80011cc:	080089f8 	.word	0x080089f8
 80011d0:	08008a08 	.word	0x08008a08
 80011d4:	08008a10 	.word	0x08008a10

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b094      	sub	sp, #80	; 0x50
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	2234      	movs	r2, #52	; 0x34
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f004 fd02 	bl	8005bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <SystemClock_Config+0xd4>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	4a29      	ldr	r2, [pc, #164]	; (80012ac <SystemClock_Config+0xd4>)
 8001206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120a:	6413      	str	r3, [r2, #64]	; 0x40
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <SystemClock_Config+0xd4>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001218:	2300      	movs	r3, #0
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <SystemClock_Config+0xd8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001224:	4a22      	ldr	r2, [pc, #136]	; (80012b0 <SystemClock_Config+0xd8>)
 8001226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <SystemClock_Config+0xd8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001238:	2302      	movs	r3, #2
 800123a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123c:	2301      	movs	r3, #1
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001240:	2310      	movs	r3, #16
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001244:	2302      	movs	r3, #2
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001248:	2300      	movs	r3, #0
 800124a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800124c:	2310      	movs	r3, #16
 800124e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001250:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001254:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001256:	2304      	movs	r3, #4
 8001258:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800125a:	2302      	movs	r3, #2
 800125c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800125e:	2302      	movs	r3, #2
 8001260:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4618      	mov	r0, r3
 8001268:	f003 fe38 	bl	8004edc <HAL_RCC_OscConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001272:	f000 f8e5 	bl	8001440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001276:	230f      	movs	r3, #15
 8001278:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127a:	2302      	movs	r3, #2
 800127c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001286:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	2102      	movs	r1, #2
 8001292:	4618      	mov	r0, r3
 8001294:	f003 fad8 	bl	8004848 <HAL_RCC_ClockConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800129e:	f000 f8cf 	bl	8001440 <Error_Handler>
  }
}
 80012a2:	bf00      	nop
 80012a4:	3750      	adds	r7, #80	; 0x50
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40007000 	.word	0x40007000

080012b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <MX_I2C1_Init+0x50>)
 80012ba:	4a13      	ldr	r2, [pc, #76]	; (8001308 <MX_I2C1_Init+0x54>)
 80012bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_I2C1_Init+0x50>)
 80012c0:	4a12      	ldr	r2, [pc, #72]	; (800130c <MX_I2C1_Init+0x58>)
 80012c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_I2C1_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_I2C1_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_I2C1_Init+0x50>)
 80012d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <MX_I2C1_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_I2C1_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <MX_I2C1_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_I2C1_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_I2C1_Init+0x50>)
 80012f2:	f000 fe39 	bl	8001f68 <HAL_I2C_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012fc:	f000 f8a0 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000200 	.word	0x20000200
 8001308:	40005400 	.word	0x40005400
 800130c:	00061a80 	.word	0x00061a80

08001310 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_USART2_UART_Init+0x4c>)
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <MX_USART2_UART_Init+0x50>)
 8001318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <MX_USART2_UART_Init+0x4c>)
 800131c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_USART2_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_USART2_UART_Init+0x4c>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <MX_USART2_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_USART2_UART_Init+0x4c>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <MX_USART2_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_USART2_UART_Init+0x4c>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_USART2_UART_Init+0x4c>)
 8001348:	f004 f866 	bl	8005418 <HAL_UART_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001352:	f000 f875 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000254 	.word	0x20000254
 8001360:	40004400 	.word	0x40004400

08001364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <MX_GPIO_Init+0xd0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a2c      	ldr	r2, [pc, #176]	; (8001434 <MX_GPIO_Init+0xd0>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <MX_GPIO_Init+0xd0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b26      	ldr	r3, [pc, #152]	; (8001434 <MX_GPIO_Init+0xd0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a25      	ldr	r2, [pc, #148]	; (8001434 <MX_GPIO_Init+0xd0>)
 80013a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b23      	ldr	r3, [pc, #140]	; (8001434 <MX_GPIO_Init+0xd0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <MX_GPIO_Init+0xd0>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a1e      	ldr	r2, [pc, #120]	; (8001434 <MX_GPIO_Init+0xd0>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <MX_GPIO_Init+0xd0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <MX_GPIO_Init+0xd0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a17      	ldr	r2, [pc, #92]	; (8001434 <MX_GPIO_Init+0xd0>)
 80013d8:	f043 0302 	orr.w	r3, r3, #2
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <MX_GPIO_Init+0xd0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2120      	movs	r1, #32
 80013ee:	4812      	ldr	r0, [pc, #72]	; (8001438 <MX_GPIO_Init+0xd4>)
 80013f0:	f000 fda0 	bl	8001f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	480c      	ldr	r0, [pc, #48]	; (800143c <MX_GPIO_Init+0xd8>)
 800140c:	f000 fbfe 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001410:	2320      	movs	r3, #32
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_GPIO_Init+0xd4>)
 8001428:	f000 fbf0 	bl	8001c0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800142c:	bf00      	nop
 800142e:	3728      	adds	r7, #40	; 0x28
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800
 8001438:	40020000 	.word	0x40020000
 800143c:	40020800 	.word	0x40020800

08001440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
}
 8001446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001448:	e7fe      	b.n	8001448 <Error_Handler+0x8>
	...

0800144c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_MspInit+0x4c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	4a0f      	ldr	r2, [pc, #60]	; (8001498 <HAL_MspInit+0x4c>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001460:	6453      	str	r3, [r2, #68]	; 0x44
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <HAL_MspInit+0x4c>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_MspInit+0x4c>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <HAL_MspInit+0x4c>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147c:	6413      	str	r3, [r2, #64]	; 0x40
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_MspInit+0x4c>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800148a:	2007      	movs	r0, #7
 800148c:	f000 fb4c 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800

0800149c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a21      	ldr	r2, [pc, #132]	; (8001540 <HAL_I2C_MspInit+0xa4>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d13c      	bne.n	8001538 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	4b20      	ldr	r3, [pc, #128]	; (8001544 <HAL_I2C_MspInit+0xa8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a1f      	ldr	r2, [pc, #124]	; (8001544 <HAL_I2C_MspInit+0xa8>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <HAL_I2C_MspInit+0xa8>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e0:	2312      	movs	r3, #18
 80014e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ec:	2304      	movs	r3, #4
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4814      	ldr	r0, [pc, #80]	; (8001548 <HAL_I2C_MspInit+0xac>)
 80014f8:	f000 fb88 	bl	8001c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	4b10      	ldr	r3, [pc, #64]	; (8001544 <HAL_I2C_MspInit+0xa8>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <HAL_I2C_MspInit+0xa8>)
 8001506:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800150a:	6413      	str	r3, [r2, #64]	; 0x40
 800150c:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <HAL_I2C_MspInit+0xa8>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	201f      	movs	r0, #31
 800151e:	f000 fb0e 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001522:	201f      	movs	r0, #31
 8001524:	f000 fb27 	bl	8001b76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2100      	movs	r1, #0
 800152c:	2020      	movs	r0, #32
 800152e:	f000 fb06 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001532:	2020      	movs	r0, #32
 8001534:	f000 fb1f 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001538:	bf00      	nop
 800153a:	3728      	adds	r7, #40	; 0x28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40005400 	.word	0x40005400
 8001544:	40023800 	.word	0x40023800
 8001548:	40020400 	.word	0x40020400

0800154c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_UART_MspInit+0x84>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d12b      	bne.n	80015c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <HAL_UART_MspInit+0x88>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <HAL_UART_MspInit+0x88>)
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_UART_MspInit+0x88>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_UART_MspInit+0x88>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a10      	ldr	r2, [pc, #64]	; (80015d4 <HAL_UART_MspInit+0x88>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <HAL_UART_MspInit+0x88>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015a6:	230c      	movs	r3, #12
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b6:	2307      	movs	r3, #7
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	; (80015d8 <HAL_UART_MspInit+0x8c>)
 80015c2:	f000 fb23 	bl	8001c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	; 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40004400 	.word	0x40004400
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <NMI_Handler+0x4>

080015e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <HardFault_Handler+0x4>

080015e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <MemManage_Handler+0x4>

080015ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001628:	f000 f96a 	bl	8001900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}

08001630 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <I2C1_EV_IRQHandler+0x10>)
 8001636:	f001 f8ff 	bl	8002838 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000200 	.word	0x20000200

08001644 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <I2C1_ER_IRQHandler+0x10>)
 800164a:	f001 fa66 	bl	8002b1a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000200 	.word	0x20000200

08001658 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return 1;
 800165c:	2301      	movs	r3, #1
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <_kill>:

int _kill(int pid, int sig)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001672:	f004 fa93 	bl	8005b9c <__errno>
 8001676:	4603      	mov	r3, r0
 8001678:	2216      	movs	r2, #22
 800167a:	601a      	str	r2, [r3, #0]
  return -1;
 800167c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <_exit>:

void _exit (int status)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001690:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ffe7 	bl	8001668 <_kill>
  while (1) {}    /* Make sure we hang here */
 800169a:	e7fe      	b.n	800169a <_exit+0x12>

0800169c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	e00a      	b.n	80016c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016ae:	f3af 8000 	nop.w
 80016b2:	4601      	mov	r1, r0
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	60ba      	str	r2, [r7, #8]
 80016ba:	b2ca      	uxtb	r2, r1
 80016bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	3301      	adds	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	dbf0      	blt.n	80016ae <_read+0x12>
  }

  return len;
 80016cc:	687b      	ldr	r3, [r7, #4]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	e009      	b.n	80016fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	1c5a      	adds	r2, r3, #1
 80016ec:	60ba      	str	r2, [r7, #8]
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	3301      	adds	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	429a      	cmp	r2, r3
 8001702:	dbf1      	blt.n	80016e8 <_write+0x12>
  }
  return len;
 8001704:	687b      	ldr	r3, [r7, #4]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <_close>:

int _close(int file)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001736:	605a      	str	r2, [r3, #4]
  return 0;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <_isatty>:

int _isatty(int file)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001780:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <_sbrk+0x5c>)
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <_sbrk+0x60>)
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800178c:	4b13      	ldr	r3, [pc, #76]	; (80017dc <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <_sbrk+0x64>)
 8001796:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <_sbrk+0x68>)
 8001798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d207      	bcs.n	80017b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a8:	f004 f9f8 	bl	8005b9c <__errno>
 80017ac:	4603      	mov	r3, r0
 80017ae:	220c      	movs	r2, #12
 80017b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017b6:	e009      	b.n	80017cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <_sbrk+0x64>)
 80017c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ca:	68fb      	ldr	r3, [r7, #12]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20020000 	.word	0x20020000
 80017d8:	00000400 	.word	0x00000400
 80017dc:	20000320 	.word	0x20000320
 80017e0:	20000338 	.word	0x20000338

080017e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <SystemInit+0x20>)
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <SystemInit+0x20>)
 80017f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001840 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800180c:	480d      	ldr	r0, [pc, #52]	; (8001844 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800180e:	490e      	ldr	r1, [pc, #56]	; (8001848 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001810:	4a0e      	ldr	r2, [pc, #56]	; (800184c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001814:	e002      	b.n	800181c <LoopCopyDataInit>

08001816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181a:	3304      	adds	r3, #4

0800181c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800181c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001820:	d3f9      	bcc.n	8001816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001822:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001824:	4c0b      	ldr	r4, [pc, #44]	; (8001854 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001828:	e001      	b.n	800182e <LoopFillZerobss>

0800182a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800182c:	3204      	adds	r2, #4

0800182e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001830:	d3fb      	bcc.n	800182a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001832:	f7ff ffd7 	bl	80017e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001836:	f004 f9b7 	bl	8005ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800183a:	f7ff fc41 	bl	80010c0 <main>
  bx  lr    
 800183e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001840:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800184c:	08008e24 	.word	0x08008e24
  ldr r2, =_sbss
 8001850:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001854:	20000338 	.word	0x20000338

08001858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC_IRQHandler>
	...

0800185c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <HAL_Init+0x40>)
 8001866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800186a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0a      	ldr	r2, [pc, #40]	; (800189c <HAL_Init+0x40>)
 8001872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a07      	ldr	r2, [pc, #28]	; (800189c <HAL_Init+0x40>)
 800187e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001884:	2003      	movs	r0, #3
 8001886:	f000 f94f 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188a:	2000      	movs	r0, #0
 800188c:	f000 f808 	bl	80018a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001890:	f7ff fddc 	bl	800144c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023c00 	.word	0x40023c00

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_InitTick+0x54>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_InitTick+0x58>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 f967 	bl	8001b92 <HAL_SYSTICK_Config>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00e      	b.n	80018ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b0f      	cmp	r3, #15
 80018d2:	d80a      	bhi.n	80018ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d4:	2200      	movs	r2, #0
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018dc:	f000 f92f 	bl	8001b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e0:	4a06      	ldr	r2, [pc, #24]	; (80018fc <HAL_InitTick+0x5c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000008 	.word	0x20000008
 80018f8:	20000010 	.word	0x20000010
 80018fc:	2000000c 	.word	0x2000000c

08001900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_IncTick+0x20>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_IncTick+0x24>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <HAL_IncTick+0x24>)
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000010 	.word	0x20000010
 8001924:	20000324 	.word	0x20000324

08001928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTick;
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <HAL_GetTick+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000324 	.word	0x20000324

08001940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001948:	f7ff ffee 	bl	8001928 <HAL_GetTick>
 800194c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001958:	d005      	beq.n	8001966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_Delay+0x44>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001966:	bf00      	nop
 8001968:	f7ff ffde 	bl	8001928 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	429a      	cmp	r2, r3
 8001976:	d8f7      	bhi.n	8001968 <HAL_Delay+0x28>
  {
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000010 	.word	0x20000010

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4907      	ldr	r1, [pc, #28]	; (8001a24 <__NVIC_EnableIRQ+0x38>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	; (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	; (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	4313      	orrs	r3, r2
         );
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	; 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b08:	f7ff ff8e 	bl	8001a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff29 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b50:	f7ff ff3e 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	6978      	ldr	r0, [r7, #20]
 8001b5c:	f7ff ff8e 	bl	8001a7c <NVIC_EncodePriority>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff5d 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff31 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffa2 	bl	8001ae4 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d004      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2280      	movs	r2, #128	; 0x80
 8001bc2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e00c      	b.n	8001be2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2205      	movs	r2, #5
 8001bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bfc:	b2db      	uxtb	r3, r3
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	e165      	b.n	8001ef4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	f040 8154 	bne.w	8001eee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d005      	beq.n	8001c5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d130      	bne.n	8001cc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	2203      	movs	r2, #3
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c94:	2201      	movs	r2, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 0201 	and.w	r2, r3, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d017      	beq.n	8001cfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d123      	bne.n	8001d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	08da      	lsrs	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3208      	adds	r2, #8
 8001d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	08da      	lsrs	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3208      	adds	r2, #8
 8001d4a:	69b9      	ldr	r1, [r7, #24]
 8001d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0203 	and.w	r2, r3, #3
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80ae 	beq.w	8001eee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b5d      	ldr	r3, [pc, #372]	; (8001f0c <HAL_GPIO_Init+0x300>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	4a5c      	ldr	r2, [pc, #368]	; (8001f0c <HAL_GPIO_Init+0x300>)
 8001d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da0:	6453      	str	r3, [r2, #68]	; 0x44
 8001da2:	4b5a      	ldr	r3, [pc, #360]	; (8001f0c <HAL_GPIO_Init+0x300>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dae:	4a58      	ldr	r2, [pc, #352]	; (8001f10 <HAL_GPIO_Init+0x304>)
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	089b      	lsrs	r3, r3, #2
 8001db4:	3302      	adds	r3, #2
 8001db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	220f      	movs	r2, #15
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4f      	ldr	r2, [pc, #316]	; (8001f14 <HAL_GPIO_Init+0x308>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d025      	beq.n	8001e26 <HAL_GPIO_Init+0x21a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4e      	ldr	r2, [pc, #312]	; (8001f18 <HAL_GPIO_Init+0x30c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d01f      	beq.n	8001e22 <HAL_GPIO_Init+0x216>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4d      	ldr	r2, [pc, #308]	; (8001f1c <HAL_GPIO_Init+0x310>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d019      	beq.n	8001e1e <HAL_GPIO_Init+0x212>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4c      	ldr	r2, [pc, #304]	; (8001f20 <HAL_GPIO_Init+0x314>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d013      	beq.n	8001e1a <HAL_GPIO_Init+0x20e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4b      	ldr	r2, [pc, #300]	; (8001f24 <HAL_GPIO_Init+0x318>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00d      	beq.n	8001e16 <HAL_GPIO_Init+0x20a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4a      	ldr	r2, [pc, #296]	; (8001f28 <HAL_GPIO_Init+0x31c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d007      	beq.n	8001e12 <HAL_GPIO_Init+0x206>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a49      	ldr	r2, [pc, #292]	; (8001f2c <HAL_GPIO_Init+0x320>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d101      	bne.n	8001e0e <HAL_GPIO_Init+0x202>
 8001e0a:	2306      	movs	r3, #6
 8001e0c:	e00c      	b.n	8001e28 <HAL_GPIO_Init+0x21c>
 8001e0e:	2307      	movs	r3, #7
 8001e10:	e00a      	b.n	8001e28 <HAL_GPIO_Init+0x21c>
 8001e12:	2305      	movs	r3, #5
 8001e14:	e008      	b.n	8001e28 <HAL_GPIO_Init+0x21c>
 8001e16:	2304      	movs	r3, #4
 8001e18:	e006      	b.n	8001e28 <HAL_GPIO_Init+0x21c>
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e004      	b.n	8001e28 <HAL_GPIO_Init+0x21c>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e002      	b.n	8001e28 <HAL_GPIO_Init+0x21c>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <HAL_GPIO_Init+0x21c>
 8001e26:	2300      	movs	r3, #0
 8001e28:	69fa      	ldr	r2, [r7, #28]
 8001e2a:	f002 0203 	and.w	r2, r2, #3
 8001e2e:	0092      	lsls	r2, r2, #2
 8001e30:	4093      	lsls	r3, r2
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e38:	4935      	ldr	r1, [pc, #212]	; (8001f10 <HAL_GPIO_Init+0x304>)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	3302      	adds	r3, #2
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e46:	4b3a      	ldr	r3, [pc, #232]	; (8001f30 <HAL_GPIO_Init+0x324>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e6a:	4a31      	ldr	r2, [pc, #196]	; (8001f30 <HAL_GPIO_Init+0x324>)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e70:	4b2f      	ldr	r3, [pc, #188]	; (8001f30 <HAL_GPIO_Init+0x324>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e94:	4a26      	ldr	r2, [pc, #152]	; (8001f30 <HAL_GPIO_Init+0x324>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e9a:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <HAL_GPIO_Init+0x324>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ebe:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <HAL_GPIO_Init+0x324>)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_GPIO_Init+0x324>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee8:	4a11      	ldr	r2, [pc, #68]	; (8001f30 <HAL_GPIO_Init+0x324>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	61fb      	str	r3, [r7, #28]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	2b0f      	cmp	r3, #15
 8001ef8:	f67f ae96 	bls.w	8001c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3724      	adds	r7, #36	; 0x24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40013800 	.word	0x40013800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	40020400 	.word	0x40020400
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	40020c00 	.word	0x40020c00
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40021400 	.word	0x40021400
 8001f2c:	40021800 	.word	0x40021800
 8001f30:	40013c00 	.word	0x40013c00

08001f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
 8001f40:	4613      	mov	r3, r2
 8001f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f44:	787b      	ldrb	r3, [r7, #1]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f50:	e003      	b.n	8001f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f52:	887b      	ldrh	r3, [r7, #2]
 8001f54:	041a      	lsls	r2, r3, #16
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	619a      	str	r2, [r3, #24]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e12b      	b.n	80021d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d106      	bne.n	8001f94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff fa84 	bl	800149c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2224      	movs	r2, #36	; 0x24
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0201 	bic.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fcc:	f002 fd2e 	bl	8004a2c <HAL_RCC_GetPCLK1Freq>
 8001fd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4a81      	ldr	r2, [pc, #516]	; (80021dc <HAL_I2C_Init+0x274>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d807      	bhi.n	8001fec <HAL_I2C_Init+0x84>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4a80      	ldr	r2, [pc, #512]	; (80021e0 <HAL_I2C_Init+0x278>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	bf94      	ite	ls
 8001fe4:	2301      	movls	r3, #1
 8001fe6:	2300      	movhi	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	e006      	b.n	8001ffa <HAL_I2C_Init+0x92>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4a7d      	ldr	r2, [pc, #500]	; (80021e4 <HAL_I2C_Init+0x27c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	bf94      	ite	ls
 8001ff4:	2301      	movls	r3, #1
 8001ff6:	2300      	movhi	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0e7      	b.n	80021d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4a78      	ldr	r2, [pc, #480]	; (80021e8 <HAL_I2C_Init+0x280>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0c9b      	lsrs	r3, r3, #18
 800200c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	430a      	orrs	r2, r1
 8002020:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4a6a      	ldr	r2, [pc, #424]	; (80021dc <HAL_I2C_Init+0x274>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d802      	bhi.n	800203c <HAL_I2C_Init+0xd4>
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	3301      	adds	r3, #1
 800203a:	e009      	b.n	8002050 <HAL_I2C_Init+0xe8>
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002042:	fb02 f303 	mul.w	r3, r2, r3
 8002046:	4a69      	ldr	r2, [pc, #420]	; (80021ec <HAL_I2C_Init+0x284>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	099b      	lsrs	r3, r3, #6
 800204e:	3301      	adds	r3, #1
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	430b      	orrs	r3, r1
 8002056:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002062:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	495c      	ldr	r1, [pc, #368]	; (80021dc <HAL_I2C_Init+0x274>)
 800206c:	428b      	cmp	r3, r1
 800206e:	d819      	bhi.n	80020a4 <HAL_I2C_Init+0x13c>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	1e59      	subs	r1, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	fbb1 f3f3 	udiv	r3, r1, r3
 800207e:	1c59      	adds	r1, r3, #1
 8002080:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002084:	400b      	ands	r3, r1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_I2C_Init+0x138>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1e59      	subs	r1, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	fbb1 f3f3 	udiv	r3, r1, r3
 8002098:	3301      	adds	r3, #1
 800209a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209e:	e051      	b.n	8002144 <HAL_I2C_Init+0x1dc>
 80020a0:	2304      	movs	r3, #4
 80020a2:	e04f      	b.n	8002144 <HAL_I2C_Init+0x1dc>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d111      	bne.n	80020d0 <HAL_I2C_Init+0x168>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1e58      	subs	r0, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	440b      	add	r3, r1
 80020ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80020be:	3301      	adds	r3, #1
 80020c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	e012      	b.n	80020f6 <HAL_I2C_Init+0x18e>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1e58      	subs	r0, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6859      	ldr	r1, [r3, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	0099      	lsls	r1, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e6:	3301      	adds	r3, #1
 80020e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bf0c      	ite	eq
 80020f0:	2301      	moveq	r3, #1
 80020f2:	2300      	movne	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2C_Init+0x196>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e022      	b.n	8002144 <HAL_I2C_Init+0x1dc>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10e      	bne.n	8002124 <HAL_I2C_Init+0x1bc>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1e58      	subs	r0, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6859      	ldr	r1, [r3, #4]
 800210e:	460b      	mov	r3, r1
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	440b      	add	r3, r1
 8002114:	fbb0 f3f3 	udiv	r3, r0, r3
 8002118:	3301      	adds	r3, #1
 800211a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002122:	e00f      	b.n	8002144 <HAL_I2C_Init+0x1dc>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1e58      	subs	r0, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6859      	ldr	r1, [r3, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	0099      	lsls	r1, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	fbb0 f3f3 	udiv	r3, r0, r3
 800213a:	3301      	adds	r3, #1
 800213c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002140:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	6809      	ldr	r1, [r1, #0]
 8002148:	4313      	orrs	r3, r2
 800214a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69da      	ldr	r2, [r3, #28]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002172:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6911      	ldr	r1, [r2, #16]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68d2      	ldr	r2, [r2, #12]
 800217e:	4311      	orrs	r1, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	430b      	orrs	r3, r1
 8002186:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2220      	movs	r2, #32
 80021be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	000186a0 	.word	0x000186a0
 80021e0:	001e847f 	.word	0x001e847f
 80021e4:	003d08ff 	.word	0x003d08ff
 80021e8:	431bde83 	.word	0x431bde83
 80021ec:	10624dd3 	.word	0x10624dd3

080021f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	461a      	mov	r2, r3
 80021fc:	460b      	mov	r3, r1
 80021fe:	817b      	strh	r3, [r7, #10]
 8002200:	4613      	mov	r3, r2
 8002202:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002204:	f7ff fb90 	bl	8001928 <HAL_GetTick>
 8002208:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b20      	cmp	r3, #32
 8002214:	f040 80e0 	bne.w	80023d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	2319      	movs	r3, #25
 800221e:	2201      	movs	r2, #1
 8002220:	4970      	ldr	r1, [pc, #448]	; (80023e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f002 f8e6 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800222e:	2302      	movs	r3, #2
 8002230:	e0d3      	b.n	80023da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <HAL_I2C_Master_Transmit+0x50>
 800223c:	2302      	movs	r3, #2
 800223e:	e0cc      	b.n	80023da <HAL_I2C_Master_Transmit+0x1ea>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b01      	cmp	r3, #1
 8002254:	d007      	beq.n	8002266 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002274:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2221      	movs	r2, #33	; 0x21
 800227a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2210      	movs	r2, #16
 8002282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	893a      	ldrh	r2, [r7, #8]
 8002296:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4a50      	ldr	r2, [pc, #320]	; (80023e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80022a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022a8:	8979      	ldrh	r1, [r7, #10]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	6a3a      	ldr	r2, [r7, #32]
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f001 fea8 	bl	8004004 <I2C_MasterRequestWrite>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e08d      	b.n	80023da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022d4:	e066      	b.n	80023a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	6a39      	ldr	r1, [r7, #32]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f002 f960 	bl	80045a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00d      	beq.n	8002302 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d107      	bne.n	80022fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e06b      	b.n	80023da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	781a      	ldrb	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b04      	cmp	r3, #4
 800233e:	d11b      	bne.n	8002378 <HAL_I2C_Master_Transmit+0x188>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	2b00      	cmp	r3, #0
 8002346:	d017      	beq.n	8002378 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	781a      	ldrb	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002362:	b29b      	uxth	r3, r3
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	6a39      	ldr	r1, [r7, #32]
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f002 f950 	bl	8004622 <I2C_WaitOnBTFFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00d      	beq.n	80023a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	2b04      	cmp	r3, #4
 800238e:	d107      	bne.n	80023a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e01a      	b.n	80023da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d194      	bne.n	80022d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	e000      	b.n	80023da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023d8:	2302      	movs	r3, #2
  }
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	00100002 	.word	0x00100002
 80023e8:	ffff0000 	.word	0xffff0000

080023ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08c      	sub	sp, #48	; 0x30
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	461a      	mov	r2, r3
 80023f8:	460b      	mov	r3, r1
 80023fa:	817b      	strh	r3, [r7, #10]
 80023fc:	4613      	mov	r3, r2
 80023fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002400:	f7ff fa92 	bl	8001928 <HAL_GetTick>
 8002404:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b20      	cmp	r3, #32
 8002410:	f040 820b 	bne.w	800282a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	2319      	movs	r3, #25
 800241a:	2201      	movs	r2, #1
 800241c:	497c      	ldr	r1, [pc, #496]	; (8002610 <HAL_I2C_Master_Receive+0x224>)
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f001 ffe8 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800242a:	2302      	movs	r3, #2
 800242c:	e1fe      	b.n	800282c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_I2C_Master_Receive+0x50>
 8002438:	2302      	movs	r3, #2
 800243a:	e1f7      	b.n	800282c <HAL_I2C_Master_Receive+0x440>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b01      	cmp	r3, #1
 8002450:	d007      	beq.n	8002462 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002470:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2222      	movs	r2, #34	; 0x22
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2210      	movs	r2, #16
 800247e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	893a      	ldrh	r2, [r7, #8]
 8002492:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4a5c      	ldr	r2, [pc, #368]	; (8002614 <HAL_I2C_Master_Receive+0x228>)
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024a4:	8979      	ldrh	r1, [r7, #10]
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f001 fe2c 	bl	8004108 <I2C_MasterRequestRead>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e1b8      	b.n	800282c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d113      	bne.n	80024ea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c2:	2300      	movs	r3, #0
 80024c4:	623b      	str	r3, [r7, #32]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	623b      	str	r3, [r7, #32]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	623b      	str	r3, [r7, #32]
 80024d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	e18c      	b.n	8002804 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d11b      	bne.n	800252a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002500:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	61fb      	str	r3, [r7, #28]
 8002516:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	e16c      	b.n	8002804 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252e:	2b02      	cmp	r3, #2
 8002530:	d11b      	bne.n	800256a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002540:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002550:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	61bb      	str	r3, [r7, #24]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	e14c      	b.n	8002804 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002578:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002590:	e138      	b.n	8002804 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002596:	2b03      	cmp	r3, #3
 8002598:	f200 80f1 	bhi.w	800277e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d123      	bne.n	80025ec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f002 f8ad 	bl	8004708 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e139      	b.n	800282c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025ea:	e10b      	b.n	8002804 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d14e      	bne.n	8002692 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fa:	2200      	movs	r2, #0
 80025fc:	4906      	ldr	r1, [pc, #24]	; (8002618 <HAL_I2C_Master_Receive+0x22c>)
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f001 fef8 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e10e      	b.n	800282c <HAL_I2C_Master_Receive+0x440>
 800260e:	bf00      	nop
 8002610:	00100002 	.word	0x00100002
 8002614:	ffff0000 	.word	0xffff0000
 8002618:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267a:	3b01      	subs	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002690:	e0b8      	b.n	8002804 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002698:	2200      	movs	r2, #0
 800269a:	4966      	ldr	r1, [pc, #408]	; (8002834 <HAL_I2C_Master_Receive+0x448>)
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f001 fea9 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0bf      	b.n	800282c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f4:	2200      	movs	r2, #0
 80026f6:	494f      	ldr	r1, [pc, #316]	; (8002834 <HAL_I2C_Master_Receive+0x448>)
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f001 fe7b 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e091      	b.n	800282c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002716:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800277c:	e042      	b.n	8002804 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800277e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002780:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f001 ffc0 	bl	8004708 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e04c      	b.n	800282c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d118      	bne.n	8002804 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002808:	2b00      	cmp	r3, #0
 800280a:	f47f aec2 	bne.w	8002592 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2220      	movs	r2, #32
 8002812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	e000      	b.n	800282c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800282a:	2302      	movs	r3, #2
  }
}
 800282c:	4618      	mov	r0, r3
 800282e:	3728      	adds	r7, #40	; 0x28
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	00010004 	.word	0x00010004

08002838 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002858:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002860:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	2b10      	cmp	r3, #16
 8002866:	d003      	beq.n	8002870 <HAL_I2C_EV_IRQHandler+0x38>
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	f040 80c1 	bne.w	80029f2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10d      	bne.n	80028a6 <HAL_I2C_EV_IRQHandler+0x6e>
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002890:	d003      	beq.n	800289a <HAL_I2C_EV_IRQHandler+0x62>
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002898:	d101      	bne.n	800289e <HAL_I2C_EV_IRQHandler+0x66>
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <HAL_I2C_EV_IRQHandler+0x68>
 800289e:	2300      	movs	r3, #0
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	f000 8132 	beq.w	8002b0a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00c      	beq.n	80028ca <HAL_I2C_EV_IRQHandler+0x92>
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	0a5b      	lsrs	r3, r3, #9
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d006      	beq.n	80028ca <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f001 ffa8 	bl	8004812 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 fd83 	bl	80033ce <I2C_Master_SB>
 80028c8:	e092      	b.n	80029f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	08db      	lsrs	r3, r3, #3
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d009      	beq.n	80028ea <HAL_I2C_EV_IRQHandler+0xb2>
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	0a5b      	lsrs	r3, r3, #9
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fdf9 	bl	80034da <I2C_Master_ADD10>
 80028e8:	e082      	b.n	80029f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	085b      	lsrs	r3, r3, #1
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d009      	beq.n	800290a <HAL_I2C_EV_IRQHandler+0xd2>
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	0a5b      	lsrs	r3, r3, #9
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fe13 	bl	800352e <I2C_Master_ADDR>
 8002908:	e072      	b.n	80029f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d03b      	beq.n	800298e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002924:	f000 80f3 	beq.w	8002b0e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	09db      	lsrs	r3, r3, #7
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00f      	beq.n	8002954 <HAL_I2C_EV_IRQHandler+0x11c>
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	0a9b      	lsrs	r3, r3, #10
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d009      	beq.n	8002954 <HAL_I2C_EV_IRQHandler+0x11c>
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	089b      	lsrs	r3, r3, #2
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d103      	bne.n	8002954 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f9f3 	bl	8002d38 <I2C_MasterTransmit_TXE>
 8002952:	e04d      	b.n	80029f0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 80d6 	beq.w	8002b0e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	0a5b      	lsrs	r3, r3, #9
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 80cf 	beq.w	8002b0e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002970:	7bbb      	ldrb	r3, [r7, #14]
 8002972:	2b21      	cmp	r3, #33	; 0x21
 8002974:	d103      	bne.n	800297e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fa7a 	bl	8002e70 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800297c:	e0c7      	b.n	8002b0e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	2b40      	cmp	r3, #64	; 0x40
 8002982:	f040 80c4 	bne.w	8002b0e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fae8 	bl	8002f5c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800298c:	e0bf      	b.n	8002b0e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800299c:	f000 80b7 	beq.w	8002b0e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	099b      	lsrs	r3, r3, #6
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00f      	beq.n	80029cc <HAL_I2C_EV_IRQHandler+0x194>
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	0a9b      	lsrs	r3, r3, #10
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d009      	beq.n	80029cc <HAL_I2C_EV_IRQHandler+0x194>
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d103      	bne.n	80029cc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 fb5d 	bl	8003084 <I2C_MasterReceive_RXNE>
 80029ca:	e011      	b.n	80029f0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 809a 	beq.w	8002b0e <HAL_I2C_EV_IRQHandler+0x2d6>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	0a5b      	lsrs	r3, r3, #9
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8093 	beq.w	8002b0e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fc06 	bl	80031fa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029ee:	e08e      	b.n	8002b0e <HAL_I2C_EV_IRQHandler+0x2d6>
 80029f0:	e08d      	b.n	8002b0e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d004      	beq.n	8002a04 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	e007      	b.n	8002a14 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	085b      	lsrs	r3, r3, #1
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d012      	beq.n	8002a46 <HAL_I2C_EV_IRQHandler+0x20e>
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	0a5b      	lsrs	r3, r3, #9
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00c      	beq.n	8002a46 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002a3c:	69b9      	ldr	r1, [r7, #24]
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 ffc4 	bl	80039cc <I2C_Slave_ADDR>
 8002a44:	e066      	b.n	8002b14 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	091b      	lsrs	r3, r3, #4
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <HAL_I2C_EV_IRQHandler+0x22e>
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	0a5b      	lsrs	r3, r3, #9
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fffe 	bl	8003a60 <I2C_Slave_STOPF>
 8002a64:	e056      	b.n	8002b14 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a66:	7bbb      	ldrb	r3, [r7, #14]
 8002a68:	2b21      	cmp	r3, #33	; 0x21
 8002a6a:	d002      	beq.n	8002a72 <HAL_I2C_EV_IRQHandler+0x23a>
 8002a6c:	7bbb      	ldrb	r3, [r7, #14]
 8002a6e:	2b29      	cmp	r3, #41	; 0x29
 8002a70:	d125      	bne.n	8002abe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	09db      	lsrs	r3, r3, #7
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00f      	beq.n	8002a9e <HAL_I2C_EV_IRQHandler+0x266>
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	0a9b      	lsrs	r3, r3, #10
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d009      	beq.n	8002a9e <HAL_I2C_EV_IRQHandler+0x266>
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	089b      	lsrs	r3, r3, #2
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d103      	bne.n	8002a9e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 feda 	bl	8003850 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a9c:	e039      	b.n	8002b12 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	089b      	lsrs	r3, r3, #2
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d033      	beq.n	8002b12 <HAL_I2C_EV_IRQHandler+0x2da>
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	0a5b      	lsrs	r3, r3, #9
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d02d      	beq.n	8002b12 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 ff07 	bl	80038ca <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002abc:	e029      	b.n	8002b12 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	099b      	lsrs	r3, r3, #6
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00f      	beq.n	8002aea <HAL_I2C_EV_IRQHandler+0x2b2>
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	0a9b      	lsrs	r3, r3, #10
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <HAL_I2C_EV_IRQHandler+0x2b2>
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	089b      	lsrs	r3, r3, #2
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d103      	bne.n	8002aea <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 ff12 	bl	800390c <I2C_SlaveReceive_RXNE>
 8002ae8:	e014      	b.n	8002b14 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	089b      	lsrs	r3, r3, #2
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00e      	beq.n	8002b14 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	0a5b      	lsrs	r3, r3, #9
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d008      	beq.n	8002b14 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 ff40 	bl	8003988 <I2C_SlaveReceive_BTF>
 8002b08:	e004      	b.n	8002b14 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002b0a:	bf00      	nop
 8002b0c:	e002      	b.n	8002b14 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b0e:	bf00      	nop
 8002b10:	e000      	b.n	8002b14 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b12:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002b14:	3720      	adds	r7, #32
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b08a      	sub	sp, #40	; 0x28
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002b32:	2300      	movs	r3, #0
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b3c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00e      	beq.n	8002b68 <HAL_I2C_ER_IRQHandler+0x4e>
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	0a1b      	lsrs	r3, r3, #8
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d008      	beq.n	8002b68 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b66:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	0a5b      	lsrs	r3, r3, #9
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00e      	beq.n	8002b92 <HAL_I2C_ER_IRQHandler+0x78>
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	0a1b      	lsrs	r3, r3, #8
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	f043 0302 	orr.w	r3, r3, #2
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002b90:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	0a9b      	lsrs	r3, r3, #10
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d03f      	beq.n	8002c1e <HAL_I2C_ER_IRQHandler+0x104>
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	0a1b      	lsrs	r3, r3, #8
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d039      	beq.n	8002c1e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002baa:	7efb      	ldrb	r3, [r7, #27]
 8002bac:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bbc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002bc4:	7ebb      	ldrb	r3, [r7, #26]
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d112      	bne.n	8002bf0 <HAL_I2C_ER_IRQHandler+0xd6>
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10f      	bne.n	8002bf0 <HAL_I2C_ER_IRQHandler+0xd6>
 8002bd0:	7cfb      	ldrb	r3, [r7, #19]
 8002bd2:	2b21      	cmp	r3, #33	; 0x21
 8002bd4:	d008      	beq.n	8002be8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002bd6:	7cfb      	ldrb	r3, [r7, #19]
 8002bd8:	2b29      	cmp	r3, #41	; 0x29
 8002bda:	d005      	beq.n	8002be8 <HAL_I2C_ER_IRQHandler+0xce>
 8002bdc:	7cfb      	ldrb	r3, [r7, #19]
 8002bde:	2b28      	cmp	r3, #40	; 0x28
 8002be0:	d106      	bne.n	8002bf0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b21      	cmp	r3, #33	; 0x21
 8002be6:	d103      	bne.n	8002bf0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f001 f869 	bl	8003cc0 <I2C_Slave_AF>
 8002bee:	e016      	b.n	8002c1e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bf8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	f043 0304 	orr.w	r3, r3, #4
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c02:	7efb      	ldrb	r3, [r7, #27]
 8002c04:	2b10      	cmp	r3, #16
 8002c06:	d002      	beq.n	8002c0e <HAL_I2C_ER_IRQHandler+0xf4>
 8002c08:	7efb      	ldrb	r3, [r7, #27]
 8002c0a:	2b40      	cmp	r3, #64	; 0x40
 8002c0c:	d107      	bne.n	8002c1e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c1c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	0adb      	lsrs	r3, r3, #11
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00e      	beq.n	8002c48 <HAL_I2C_ER_IRQHandler+0x12e>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	0a1b      	lsrs	r3, r3, #8
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d008      	beq.n	8002c48 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	f043 0308 	orr.w	r3, r3, #8
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002c46:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	431a      	orrs	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f001 f8a0 	bl	8003da0 <I2C_ITError>
  }
}
 8002c60:	bf00      	nop
 8002c62:	3728      	adds	r7, #40	; 0x28
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	70fb      	strb	r3, [r7, #3]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d46:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d4e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d150      	bne.n	8002e00 <I2C_MasterTransmit_TXE+0xc8>
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	2b21      	cmp	r3, #33	; 0x21
 8002d62:	d14d      	bne.n	8002e00 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d01d      	beq.n	8002da6 <I2C_MasterTransmit_TXE+0x6e>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b20      	cmp	r3, #32
 8002d6e:	d01a      	beq.n	8002da6 <I2C_MasterTransmit_TXE+0x6e>
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d76:	d016      	beq.n	8002da6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d86:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2211      	movs	r2, #17
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff ff62 	bl	8002c68 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002da4:	e060      	b.n	8002e68 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002db4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b40      	cmp	r3, #64	; 0x40
 8002dde:	d107      	bne.n	8002df0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff ff7d 	bl	8002ce8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dee:	e03b      	b.n	8002e68 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff ff35 	bl	8002c68 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dfe:	e033      	b.n	8002e68 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	2b21      	cmp	r3, #33	; 0x21
 8002e04:	d005      	beq.n	8002e12 <I2C_MasterTransmit_TXE+0xda>
 8002e06:	7bbb      	ldrb	r3, [r7, #14]
 8002e08:	2b40      	cmp	r3, #64	; 0x40
 8002e0a:	d12d      	bne.n	8002e68 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	2b22      	cmp	r3, #34	; 0x22
 8002e10:	d12a      	bne.n	8002e68 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d108      	bne.n	8002e2e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002e2c:	e01c      	b.n	8002e68 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b40      	cmp	r3, #64	; 0x40
 8002e38:	d103      	bne.n	8002e42 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f88e 	bl	8002f5c <I2C_MemoryTransmit_TXE_BTF>
}
 8002e40:	e012      	b.n	8002e68 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e66:	e7ff      	b.n	8002e68 <I2C_MasterTransmit_TXE+0x130>
 8002e68:	bf00      	nop
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b21      	cmp	r3, #33	; 0x21
 8002e88:	d164      	bne.n	8002f54 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d012      	beq.n	8002eba <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	781a      	ldrb	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002eb8:	e04c      	b.n	8002f54 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d01d      	beq.n	8002efc <I2C_MasterTransmit_BTF+0x8c>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b20      	cmp	r3, #32
 8002ec4:	d01a      	beq.n	8002efc <I2C_MasterTransmit_BTF+0x8c>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ecc:	d016      	beq.n	8002efc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002edc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2211      	movs	r2, #17
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff feb7 	bl	8002c68 <HAL_I2C_MasterTxCpltCallback>
}
 8002efa:	e02b      	b.n	8002f54 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f0a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b40      	cmp	r3, #64	; 0x40
 8002f34:	d107      	bne.n	8002f46 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff fed2 	bl	8002ce8 <HAL_I2C_MemTxCpltCallback>
}
 8002f44:	e006      	b.n	8002f54 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff fe8a 	bl	8002c68 <HAL_I2C_MasterTxCpltCallback>
}
 8002f54:	bf00      	nop
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d11d      	bne.n	8002fb0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d10b      	bne.n	8002f94 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f8c:	1c9a      	adds	r2, r3, #2
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002f92:	e073      	b.n	800307c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	121b      	asrs	r3, r3, #8
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002fae:	e065      	b.n	800307c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d10b      	bne.n	8002fd0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002fce:	e055      	b.n	800307c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d151      	bne.n	800307c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	2b22      	cmp	r3, #34	; 0x22
 8002fdc:	d10d      	bne.n	8002ffa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fec:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ff8:	e040      	b.n	800307c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d015      	beq.n	8003030 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	2b21      	cmp	r3, #33	; 0x21
 8003008:	d112      	bne.n	8003030 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	781a      	ldrb	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800302e:	e025      	b.n	800307c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d120      	bne.n	800307c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	2b21      	cmp	r3, #33	; 0x21
 800303e:	d11d      	bne.n	800307c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800304e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff fe36 	bl	8002ce8 <HAL_I2C_MemTxCpltCallback>
}
 800307c:	bf00      	nop
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b22      	cmp	r3, #34	; 0x22
 8003096:	f040 80ac 	bne.w	80031f2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309e:	b29b      	uxth	r3, r3
 80030a0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d921      	bls.n	80030ec <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	f040 808c 	bne.w	80031f2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80030ea:	e082      	b.n	80031f2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d075      	beq.n	80031e0 <I2C_MasterReceive_RXNE+0x15c>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d002      	beq.n	8003100 <I2C_MasterReceive_RXNE+0x7c>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d16f      	bne.n	80031e0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f001 facf 	bl	80046a4 <I2C_WaitOnSTOPRequestThroughIT>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d142      	bne.n	8003192 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800312a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b40      	cmp	r3, #64	; 0x40
 8003164:	d10a      	bne.n	800317c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff fdc1 	bl	8002cfc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800317a:	e03a      	b.n	80031f2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2212      	movs	r2, #18
 8003188:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7ff fd76 	bl	8002c7c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003190:	e02f      	b.n	80031f2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031a0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7ff fd99 	bl	8002d10 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80031de:	e008      	b.n	80031f2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ee:	605a      	str	r2, [r3, #4]
}
 80031f0:	e7ff      	b.n	80031f2 <I2C_MasterReceive_RXNE+0x16e>
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b04      	cmp	r3, #4
 8003210:	d11b      	bne.n	800324a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003220:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003248:	e0bd      	b.n	80033c6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b03      	cmp	r3, #3
 8003252:	d129      	bne.n	80032a8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003262:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b04      	cmp	r3, #4
 8003268:	d00a      	beq.n	8003280 <I2C_MasterReceive_BTF+0x86>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d007      	beq.n	8003280 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80032a6:	e08e      	b.n	80033c6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d176      	bne.n	80033a0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d002      	beq.n	80032be <I2C_MasterReceive_BTF+0xc4>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b10      	cmp	r3, #16
 80032bc:	d108      	bne.n	80032d0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	e019      	b.n	8003304 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d002      	beq.n	80032dc <I2C_MasterReceive_BTF+0xe2>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d108      	bne.n	80032ee <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e00a      	b.n	8003304 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b10      	cmp	r3, #16
 80032f2:	d007      	beq.n	8003304 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003302:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691a      	ldr	r2, [r3, #16]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800335e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b40      	cmp	r3, #64	; 0x40
 8003372:	d10a      	bne.n	800338a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff fcba 	bl	8002cfc <HAL_I2C_MemRxCpltCallback>
}
 8003388:	e01d      	b.n	80033c6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2212      	movs	r2, #18
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff fc6f 	bl	8002c7c <HAL_I2C_MasterRxCpltCallback>
}
 800339e:	e012      	b.n	80033c6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80033c6:	bf00      	nop
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b40      	cmp	r3, #64	; 0x40
 80033e0:	d117      	bne.n	8003412 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033fa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80033fc:	e067      	b.n	80034ce <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	b2da      	uxtb	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	611a      	str	r2, [r3, #16]
}
 8003410:	e05d      	b.n	80034ce <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800341a:	d133      	bne.n	8003484 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b21      	cmp	r3, #33	; 0x21
 8003426:	d109      	bne.n	800343c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342c:	b2db      	uxtb	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003438:	611a      	str	r2, [r3, #16]
 800343a:	e008      	b.n	800344e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003440:	b2db      	uxtb	r3, r3
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	b2da      	uxtb	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003452:	2b00      	cmp	r3, #0
 8003454:	d004      	beq.n	8003460 <I2C_Master_SB+0x92>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345c:	2b00      	cmp	r3, #0
 800345e:	d108      	bne.n	8003472 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	2b00      	cmp	r3, #0
 8003466:	d032      	beq.n	80034ce <I2C_Master_SB+0x100>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346e:	2b00      	cmp	r3, #0
 8003470:	d02d      	beq.n	80034ce <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003480:	605a      	str	r2, [r3, #4]
}
 8003482:	e024      	b.n	80034ce <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10e      	bne.n	80034aa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003490:	b29b      	uxth	r3, r3
 8003492:	11db      	asrs	r3, r3, #7
 8003494:	b2db      	uxtb	r3, r3
 8003496:	f003 0306 	and.w	r3, r3, #6
 800349a:	b2db      	uxtb	r3, r3
 800349c:	f063 030f 	orn	r3, r3, #15
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	611a      	str	r2, [r3, #16]
}
 80034a8:	e011      	b.n	80034ce <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d10d      	bne.n	80034ce <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	11db      	asrs	r3, r3, #7
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	f003 0306 	and.w	r3, r3, #6
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	f063 030e 	orn	r3, r3, #14
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	611a      	str	r2, [r3, #16]
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d004      	beq.n	8003500 <I2C_Master_ADD10+0x26>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d108      	bne.n	8003512 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00c      	beq.n	8003522 <I2C_Master_ADD10+0x48>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003520:	605a      	str	r2, [r3, #4]
  }
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800352e:	b480      	push	{r7}
 8003530:	b091      	sub	sp, #68	; 0x44
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800353c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b22      	cmp	r3, #34	; 0x22
 8003556:	f040 8169 	bne.w	800382c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10f      	bne.n	8003582 <I2C_Master_ADDR+0x54>
 8003562:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003566:	2b40      	cmp	r3, #64	; 0x40
 8003568:	d10b      	bne.n	8003582 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800356a:	2300      	movs	r3, #0
 800356c:	633b      	str	r3, [r7, #48]	; 0x30
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	633b      	str	r3, [r7, #48]	; 0x30
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	633b      	str	r3, [r7, #48]	; 0x30
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	e160      	b.n	8003844 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003586:	2b00      	cmp	r3, #0
 8003588:	d11d      	bne.n	80035c6 <I2C_Master_ADDR+0x98>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003592:	d118      	bne.n	80035c6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003594:	2300      	movs	r3, #0
 8003596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	651a      	str	r2, [r3, #80]	; 0x50
 80035c4:	e13e      	b.n	8003844 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d113      	bne.n	80035f8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d0:	2300      	movs	r3, #0
 80035d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	62bb      	str	r3, [r7, #40]	; 0x28
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	e115      	b.n	8003824 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	f040 808a 	bne.w	8003718 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003606:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800360a:	d137      	bne.n	800367c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800362a:	d113      	bne.n	8003654 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800363a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363c:	2300      	movs	r3, #0
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	e0e7      	b.n	8003824 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003654:	2300      	movs	r3, #0
 8003656:	623b      	str	r3, [r7, #32]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	623b      	str	r3, [r7, #32]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	623b      	str	r3, [r7, #32]
 8003668:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	e0d3      	b.n	8003824 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800367c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367e:	2b08      	cmp	r3, #8
 8003680:	d02e      	beq.n	80036e0 <I2C_Master_ADDR+0x1b2>
 8003682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003684:	2b20      	cmp	r3, #32
 8003686:	d02b      	beq.n	80036e0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368a:	2b12      	cmp	r3, #18
 800368c:	d102      	bne.n	8003694 <I2C_Master_ADDR+0x166>
 800368e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003690:	2b01      	cmp	r3, #1
 8003692:	d125      	bne.n	80036e0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003696:	2b04      	cmp	r3, #4
 8003698:	d00e      	beq.n	80036b8 <I2C_Master_ADDR+0x18a>
 800369a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369c:	2b02      	cmp	r3, #2
 800369e:	d00b      	beq.n	80036b8 <I2C_Master_ADDR+0x18a>
 80036a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a2:	2b10      	cmp	r3, #16
 80036a4:	d008      	beq.n	80036b8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	e007      	b.n	80036c8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036c6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c8:	2300      	movs	r3, #0
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	61fb      	str	r3, [r7, #28]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	61fb      	str	r3, [r7, #28]
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	e0a1      	b.n	8003824 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f0:	2300      	movs	r3, #0
 80036f2:	61bb      	str	r3, [r7, #24]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	61bb      	str	r3, [r7, #24]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	61bb      	str	r3, [r7, #24]
 8003704:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	e085      	b.n	8003824 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d14d      	bne.n	80037be <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003724:	2b04      	cmp	r3, #4
 8003726:	d016      	beq.n	8003756 <I2C_Master_ADDR+0x228>
 8003728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372a:	2b02      	cmp	r3, #2
 800372c:	d013      	beq.n	8003756 <I2C_Master_ADDR+0x228>
 800372e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003730:	2b10      	cmp	r3, #16
 8003732:	d010      	beq.n	8003756 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003742:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	e007      	b.n	8003766 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003764:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003774:	d117      	bne.n	80037a6 <I2C_Master_ADDR+0x278>
 8003776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003778:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800377c:	d00b      	beq.n	8003796 <I2C_Master_ADDR+0x268>
 800377e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003780:	2b01      	cmp	r3, #1
 8003782:	d008      	beq.n	8003796 <I2C_Master_ADDR+0x268>
 8003784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003786:	2b08      	cmp	r3, #8
 8003788:	d005      	beq.n	8003796 <I2C_Master_ADDR+0x268>
 800378a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378c:	2b10      	cmp	r3, #16
 800378e:	d002      	beq.n	8003796 <I2C_Master_ADDR+0x268>
 8003790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003792:	2b20      	cmp	r3, #32
 8003794:	d107      	bne.n	80037a6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	e032      	b.n	8003824 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037cc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037dc:	d117      	bne.n	800380e <I2C_Master_ADDR+0x2e0>
 80037de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037e4:	d00b      	beq.n	80037fe <I2C_Master_ADDR+0x2d0>
 80037e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d008      	beq.n	80037fe <I2C_Master_ADDR+0x2d0>
 80037ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d005      	beq.n	80037fe <I2C_Master_ADDR+0x2d0>
 80037f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f4:	2b10      	cmp	r3, #16
 80037f6:	d002      	beq.n	80037fe <I2C_Master_ADDR+0x2d0>
 80037f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	d107      	bne.n	800380e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800380c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800382a:	e00b      	b.n	8003844 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
}
 8003842:	e7ff      	b.n	8003844 <I2C_Master_ADDR+0x316>
 8003844:	bf00      	nop
 8003846:	3744      	adds	r7, #68	; 0x44
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d02b      	beq.n	80038c2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	781a      	ldrb	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d114      	bne.n	80038c2 <I2C_SlaveTransmit_TXE+0x72>
 8003898:	7bfb      	ldrb	r3, [r7, #15]
 800389a:	2b29      	cmp	r3, #41	; 0x29
 800389c:	d111      	bne.n	80038c2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2221      	movs	r2, #33	; 0x21
 80038b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2228      	movs	r2, #40	; 0x28
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff f9e7 	bl	8002c90 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80038c2:	bf00      	nop
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d011      	beq.n	8003900 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	781a      	ldrb	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d02c      	beq.n	8003980 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d114      	bne.n	8003980 <I2C_SlaveReceive_RXNE+0x74>
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	2b2a      	cmp	r3, #42	; 0x2a
 800395a:	d111      	bne.n	8003980 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800396a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2222      	movs	r2, #34	; 0x22
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2228      	movs	r2, #40	; 0x28
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff f992 	bl	8002ca4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003980:	bf00      	nop
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d012      	beq.n	80039c0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80039d6:	2300      	movs	r3, #0
 80039d8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039e6:	2b28      	cmp	r3, #40	; 0x28
 80039e8:	d127      	bne.n	8003a3a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	089b      	lsrs	r3, r3, #2
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003a06:	2301      	movs	r3, #1
 8003a08:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	09db      	lsrs	r3, r3, #7
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d103      	bne.n	8003a1e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	81bb      	strh	r3, [r7, #12]
 8003a1c:	e002      	b.n	8003a24 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003a2c:	89ba      	ldrh	r2, [r7, #12]
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	4619      	mov	r1, r3
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff f940 	bl	8002cb8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003a38:	e00e      	b.n	8003a58 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003a58:	bf00      	nop
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a7e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003a80:	2300      	movs	r3, #0
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aac:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003abc:	d172      	bne.n	8003ba4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	2b22      	cmp	r3, #34	; 0x22
 8003ac2:	d002      	beq.n	8003aca <I2C_Slave_STOPF+0x6a>
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ac8:	d135      	bne.n	8003b36 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	f043 0204 	orr.w	r2, r3, #4
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003afc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe f873 	bl	8001bee <HAL_DMA_GetState>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d049      	beq.n	8003ba2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b12:	4a69      	ldr	r2, [pc, #420]	; (8003cb8 <I2C_Slave_STOPF+0x258>)
 8003b14:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fe f845 	bl	8001baa <HAL_DMA_Abort_IT>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d03d      	beq.n	8003ba2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b30:	4610      	mov	r0, r2
 8003b32:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b34:	e035      	b.n	8003ba2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f043 0204 	orr.w	r2, r3, #4
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b68:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fe f83d 	bl	8001bee <HAL_DMA_GetState>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d014      	beq.n	8003ba4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7e:	4a4e      	ldr	r2, [pc, #312]	; (8003cb8 <I2C_Slave_STOPF+0x258>)
 8003b80:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fe f80f 	bl	8001baa <HAL_DMA_Abort_IT>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d008      	beq.n	8003ba4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4798      	blx	r3
 8003ba0:	e000      	b.n	8003ba4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ba2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d03e      	beq.n	8003c2c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d112      	bne.n	8003be2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bec:	2b40      	cmp	r3, #64	; 0x40
 8003bee:	d112      	bne.n	8003c16 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691a      	ldr	r2, [r3, #16]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	f043 0204 	orr.w	r2, r3, #4
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f8b3 	bl	8003da0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003c3a:	e039      	b.n	8003cb0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	2b2a      	cmp	r3, #42	; 0x2a
 8003c40:	d109      	bne.n	8003c56 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2228      	movs	r2, #40	; 0x28
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff f827 	bl	8002ca4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b28      	cmp	r3, #40	; 0x28
 8003c60:	d111      	bne.n	8003c86 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a15      	ldr	r2, [pc, #84]	; (8003cbc <I2C_Slave_STOPF+0x25c>)
 8003c66:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff f828 	bl	8002cd4 <HAL_I2C_ListenCpltCallback>
}
 8003c84:	e014      	b.n	8003cb0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	2b22      	cmp	r3, #34	; 0x22
 8003c8c:	d002      	beq.n	8003c94 <I2C_Slave_STOPF+0x234>
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	2b22      	cmp	r3, #34	; 0x22
 8003c92:	d10d      	bne.n	8003cb0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7fe fffa 	bl	8002ca4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003cb0:	bf00      	nop
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	080042a5 	.word	0x080042a5
 8003cbc:	ffff0000 	.word	0xffff0000

08003cc0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cce:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d002      	beq.n	8003ce2 <I2C_Slave_AF+0x22>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	d129      	bne.n	8003d36 <I2C_Slave_AF+0x76>
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
 8003ce4:	2b28      	cmp	r3, #40	; 0x28
 8003ce6:	d126      	bne.n	8003d36 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a2c      	ldr	r2, [pc, #176]	; (8003d9c <I2C_Slave_AF+0xdc>)
 8003cec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cfc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d06:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d16:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fe ffd0 	bl	8002cd4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003d34:	e02e      	b.n	8003d94 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	2b21      	cmp	r3, #33	; 0x21
 8003d3a:	d126      	bne.n	8003d8a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a17      	ldr	r2, [pc, #92]	; (8003d9c <I2C_Slave_AF+0xdc>)
 8003d40:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2221      	movs	r2, #33	; 0x21
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d66:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d70:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d80:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fe ff84 	bl	8002c90 <HAL_I2C_SlaveTxCpltCallback>
}
 8003d88:	e004      	b.n	8003d94 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d92:	615a      	str	r2, [r3, #20]
}
 8003d94:	bf00      	nop
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	ffff0000 	.word	0xffff0000

08003da0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003db6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003db8:	7bbb      	ldrb	r3, [r7, #14]
 8003dba:	2b10      	cmp	r3, #16
 8003dbc:	d002      	beq.n	8003dc4 <I2C_ITError+0x24>
 8003dbe:	7bbb      	ldrb	r3, [r7, #14]
 8003dc0:	2b40      	cmp	r3, #64	; 0x40
 8003dc2:	d10a      	bne.n	8003dda <I2C_ITError+0x3a>
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	2b22      	cmp	r3, #34	; 0x22
 8003dc8:	d107      	bne.n	8003dda <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dd8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003de0:	2b28      	cmp	r3, #40	; 0x28
 8003de2:	d107      	bne.n	8003df4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2228      	movs	r2, #40	; 0x28
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003df2:	e015      	b.n	8003e20 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e02:	d00a      	beq.n	8003e1a <I2C_ITError+0x7a>
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	2b60      	cmp	r3, #96	; 0x60
 8003e08:	d007      	beq.n	8003e1a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e2e:	d162      	bne.n	8003ef6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e3e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d020      	beq.n	8003e90 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e52:	4a6a      	ldr	r2, [pc, #424]	; (8003ffc <I2C_ITError+0x25c>)
 8003e54:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fd fea5 	bl	8001baa <HAL_DMA_Abort_IT>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 8089 	beq.w	8003f7a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0201 	bic.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	4798      	blx	r3
 8003e8e:	e074      	b.n	8003f7a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e94:	4a59      	ldr	r2, [pc, #356]	; (8003ffc <I2C_ITError+0x25c>)
 8003e96:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fd fe84 	bl	8001baa <HAL_DMA_Abort_IT>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d068      	beq.n	8003f7a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb2:	2b40      	cmp	r3, #64	; 0x40
 8003eb4:	d10b      	bne.n	8003ece <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0201 	bic.w	r2, r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	4798      	blx	r3
 8003ef4:	e041      	b.n	8003f7a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b60      	cmp	r3, #96	; 0x60
 8003f00:	d125      	bne.n	8003f4e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1a:	2b40      	cmp	r3, #64	; 0x40
 8003f1c:	d10b      	bne.n	8003f36 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0201 	bic.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7fe feec 	bl	8002d24 <HAL_I2C_AbortCpltCallback>
 8003f4c:	e015      	b.n	8003f7a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f58:	2b40      	cmp	r3, #64	; 0x40
 8003f5a:	d10b      	bne.n	8003f74 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691a      	ldr	r2, [r3, #16]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7fe fecb 	bl	8002d10 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10e      	bne.n	8003fa8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d109      	bne.n	8003fa8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d104      	bne.n	8003fa8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fb6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d113      	bne.n	8003ff4 <I2C_ITError+0x254>
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	2b28      	cmp	r3, #40	; 0x28
 8003fd0:	d110      	bne.n	8003ff4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a0a      	ldr	r2, [pc, #40]	; (8004000 <I2C_ITError+0x260>)
 8003fd6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fe fe70 	bl	8002cd4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	080042a5 	.word	0x080042a5
 8004000:	ffff0000 	.word	0xffff0000

08004004 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	607a      	str	r2, [r7, #4]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	460b      	mov	r3, r1
 8004012:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b08      	cmp	r3, #8
 800401e:	d006      	beq.n	800402e <I2C_MasterRequestWrite+0x2a>
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d003      	beq.n	800402e <I2C_MasterRequestWrite+0x2a>
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800402c:	d108      	bne.n	8004040 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e00b      	b.n	8004058 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	2b12      	cmp	r3, #18
 8004046:	d107      	bne.n	8004058 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004056:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 f9c5 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00d      	beq.n	800408c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407e:	d103      	bne.n	8004088 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004086:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e035      	b.n	80040f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004094:	d108      	bne.n	80040a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004096:	897b      	ldrh	r3, [r7, #10]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040a4:	611a      	str	r2, [r3, #16]
 80040a6:	e01b      	b.n	80040e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040a8:	897b      	ldrh	r3, [r7, #10]
 80040aa:	11db      	asrs	r3, r3, #7
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	f003 0306 	and.w	r3, r3, #6
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	f063 030f 	orn	r3, r3, #15
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	490e      	ldr	r1, [pc, #56]	; (8004100 <I2C_MasterRequestWrite+0xfc>)
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f9eb 	bl	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e010      	b.n	80040f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040d6:	897b      	ldrh	r3, [r7, #10]
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	4907      	ldr	r1, [pc, #28]	; (8004104 <I2C_MasterRequestWrite+0x100>)
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f9db 	bl	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	00010008 	.word	0x00010008
 8004104:	00010002 	.word	0x00010002

08004108 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	460b      	mov	r3, r1
 8004116:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800412c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b08      	cmp	r3, #8
 8004132:	d006      	beq.n	8004142 <I2C_MasterRequestRead+0x3a>
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d003      	beq.n	8004142 <I2C_MasterRequestRead+0x3a>
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004140:	d108      	bne.n	8004154 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	e00b      	b.n	800416c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	2b11      	cmp	r3, #17
 800415a:	d107      	bne.n	800416c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800416a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f93b 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00d      	beq.n	80041a0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004192:	d103      	bne.n	800419c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800419a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e079      	b.n	8004294 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041a8:	d108      	bne.n	80041bc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041aa:	897b      	ldrh	r3, [r7, #10]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	611a      	str	r2, [r3, #16]
 80041ba:	e05f      	b.n	800427c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041bc:	897b      	ldrh	r3, [r7, #10]
 80041be:	11db      	asrs	r3, r3, #7
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	f003 0306 	and.w	r3, r3, #6
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	f063 030f 	orn	r3, r3, #15
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	4930      	ldr	r1, [pc, #192]	; (800429c <I2C_MasterRequestRead+0x194>)
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f961 	bl	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e054      	b.n	8004294 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041ea:	897b      	ldrh	r3, [r7, #10]
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	4929      	ldr	r1, [pc, #164]	; (80042a0 <I2C_MasterRequestRead+0x198>)
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 f951 	bl	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e044      	b.n	8004294 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420a:	2300      	movs	r3, #0
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800422e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 f8d9 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00d      	beq.n	8004264 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004256:	d103      	bne.n	8004260 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800425e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e017      	b.n	8004294 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004264:	897b      	ldrh	r3, [r7, #10]
 8004266:	11db      	asrs	r3, r3, #7
 8004268:	b2db      	uxtb	r3, r3
 800426a:	f003 0306 	and.w	r3, r3, #6
 800426e:	b2db      	uxtb	r3, r3
 8004270:	f063 030e 	orn	r3, r3, #14
 8004274:	b2da      	uxtb	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	4907      	ldr	r1, [pc, #28]	; (80042a0 <I2C_MasterRequestRead+0x198>)
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f90d 	bl	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	00010008 	.word	0x00010008
 80042a0:	00010002 	.word	0x00010002

080042a4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042bc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80042be:	4b4b      	ldr	r3, [pc, #300]	; (80043ec <I2C_DMAAbort+0x148>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	08db      	lsrs	r3, r3, #3
 80042c4:	4a4a      	ldr	r2, [pc, #296]	; (80043f0 <I2C_DMAAbort+0x14c>)
 80042c6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ca:	0a1a      	lsrs	r2, r3, #8
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	00da      	lsls	r2, r3, #3
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f043 0220 	orr.w	r2, r3, #32
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80042ea:	e00a      	b.n	8004302 <I2C_DMAAbort+0x5e>
    }
    count--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004300:	d0ea      	beq.n	80042d8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430e:	2200      	movs	r2, #0
 8004310:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	2200      	movs	r2, #0
 8004320:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004330:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2200      	movs	r2, #0
 8004336:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004344:	2200      	movs	r2, #0
 8004346:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	2200      	movs	r2, #0
 8004356:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0201 	bic.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b60      	cmp	r3, #96	; 0x60
 8004372:	d10e      	bne.n	8004392 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2200      	movs	r2, #0
 8004388:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800438a:	6978      	ldr	r0, [r7, #20]
 800438c:	f7fe fcca 	bl	8002d24 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004390:	e027      	b.n	80043e2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004392:	7cfb      	ldrb	r3, [r7, #19]
 8004394:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004398:	2b28      	cmp	r3, #40	; 0x28
 800439a:	d117      	bne.n	80043cc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	2200      	movs	r2, #0
 80043c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2228      	movs	r2, #40	; 0x28
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80043ca:	e007      	b.n	80043dc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80043dc:	6978      	ldr	r0, [r7, #20]
 80043de:	f7fe fc97 	bl	8002d10 <HAL_I2C_ErrorCallback>
}
 80043e2:	bf00      	nop
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000008 	.word	0x20000008
 80043f0:	14f8b589 	.word	0x14f8b589

080043f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004404:	e025      	b.n	8004452 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800440c:	d021      	beq.n	8004452 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440e:	f7fd fa8b 	bl	8001928 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d302      	bcc.n	8004424 <I2C_WaitOnFlagUntilTimeout+0x30>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d116      	bne.n	8004452 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	f043 0220 	orr.w	r2, r3, #32
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e023      	b.n	800449a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	0c1b      	lsrs	r3, r3, #16
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b01      	cmp	r3, #1
 800445a:	d10d      	bne.n	8004478 <I2C_WaitOnFlagUntilTimeout+0x84>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	43da      	mvns	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4013      	ands	r3, r2
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	bf0c      	ite	eq
 800446e:	2301      	moveq	r3, #1
 8004470:	2300      	movne	r3, #0
 8004472:	b2db      	uxtb	r3, r3
 8004474:	461a      	mov	r2, r3
 8004476:	e00c      	b.n	8004492 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	43da      	mvns	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4013      	ands	r3, r2
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	429a      	cmp	r2, r3
 8004496:	d0b6      	beq.n	8004406 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	607a      	str	r2, [r7, #4]
 80044ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044b0:	e051      	b.n	8004556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c0:	d123      	bne.n	800450a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f043 0204 	orr.w	r2, r3, #4
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e046      	b.n	8004598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004510:	d021      	beq.n	8004556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004512:	f7fd fa09 	bl	8001928 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	429a      	cmp	r2, r3
 8004520:	d302      	bcc.n	8004528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d116      	bne.n	8004556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f043 0220 	orr.w	r2, r3, #32
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e020      	b.n	8004598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	0c1b      	lsrs	r3, r3, #16
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b01      	cmp	r3, #1
 800455e:	d10c      	bne.n	800457a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	43da      	mvns	r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4013      	ands	r3, r2
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	bf14      	ite	ne
 8004572:	2301      	movne	r3, #1
 8004574:	2300      	moveq	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	e00b      	b.n	8004592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	43da      	mvns	r2, r3
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	4013      	ands	r3, r2
 8004586:	b29b      	uxth	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	bf14      	ite	ne
 800458c:	2301      	movne	r3, #1
 800458e:	2300      	moveq	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d18d      	bne.n	80044b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ac:	e02d      	b.n	800460a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f900 	bl	80047b4 <I2C_IsAcknowledgeFailed>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e02d      	b.n	800461a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045c4:	d021      	beq.n	800460a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c6:	f7fd f9af 	bl	8001928 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d302      	bcc.n	80045dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d116      	bne.n	800460a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f043 0220 	orr.w	r2, r3, #32
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e007      	b.n	800461a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004614:	2b80      	cmp	r3, #128	; 0x80
 8004616:	d1ca      	bne.n	80045ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b084      	sub	sp, #16
 8004626:	af00      	add	r7, sp, #0
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800462e:	e02d      	b.n	800468c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f8bf 	bl	80047b4 <I2C_IsAcknowledgeFailed>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e02d      	b.n	800469c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004646:	d021      	beq.n	800468c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004648:	f7fd f96e 	bl	8001928 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	429a      	cmp	r2, r3
 8004656:	d302      	bcc.n	800465e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d116      	bne.n	800468c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	f043 0220 	orr.w	r2, r3, #32
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e007      	b.n	800469c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b04      	cmp	r3, #4
 8004698:	d1ca      	bne.n	8004630 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80046b0:	4b13      	ldr	r3, [pc, #76]	; (8004700 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	08db      	lsrs	r3, r3, #3
 80046b6:	4a13      	ldr	r2, [pc, #76]	; (8004704 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80046b8:	fba2 2303 	umull	r2, r3, r2, r3
 80046bc:	0a1a      	lsrs	r2, r3, #8
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3b01      	subs	r3, #1
 80046ca:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d107      	bne.n	80046e2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f043 0220 	orr.w	r2, r3, #32
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e008      	b.n	80046f4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f0:	d0e9      	beq.n	80046c6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	20000008 	.word	0x20000008
 8004704:	14f8b589 	.word	0x14f8b589

08004708 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004714:	e042      	b.n	800479c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	f003 0310 	and.w	r3, r3, #16
 8004720:	2b10      	cmp	r3, #16
 8004722:	d119      	bne.n	8004758 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f06f 0210 	mvn.w	r2, #16
 800472c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e029      	b.n	80047ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004758:	f7fd f8e6 	bl	8001928 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	429a      	cmp	r2, r3
 8004766:	d302      	bcc.n	800476e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d116      	bne.n	800479c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	f043 0220 	orr.w	r2, r3, #32
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e007      	b.n	80047ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a6:	2b40      	cmp	r3, #64	; 0x40
 80047a8:	d1b5      	bne.n	8004716 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ca:	d11b      	bne.n	8004804 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f0:	f043 0204 	orr.w	r2, r3, #4
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004822:	d103      	bne.n	800482c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800482a:	e007      	b.n	800483c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004834:	d102      	bne.n	800483c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2208      	movs	r2, #8
 800483a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0cc      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800485c:	4b68      	ldr	r3, [pc, #416]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d90c      	bls.n	8004884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486a:	4b65      	ldr	r3, [pc, #404]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004872:	4b63      	ldr	r3, [pc, #396]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d001      	beq.n	8004884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0b8      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d020      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800489c:	4b59      	ldr	r3, [pc, #356]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	4a58      	ldr	r2, [pc, #352]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048b4:	4b53      	ldr	r3, [pc, #332]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	4a52      	ldr	r2, [pc, #328]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c0:	4b50      	ldr	r3, [pc, #320]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	494d      	ldr	r1, [pc, #308]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d044      	beq.n	8004968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d107      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e6:	4b47      	ldr	r3, [pc, #284]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d119      	bne.n	8004926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e07f      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d003      	beq.n	8004906 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004902:	2b03      	cmp	r3, #3
 8004904:	d107      	bne.n	8004916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004906:	4b3f      	ldr	r3, [pc, #252]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e06f      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004916:	4b3b      	ldr	r3, [pc, #236]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e067      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004926:	4b37      	ldr	r3, [pc, #220]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f023 0203 	bic.w	r2, r3, #3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	4934      	ldr	r1, [pc, #208]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	4313      	orrs	r3, r2
 8004936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004938:	f7fc fff6 	bl	8001928 <HAL_GetTick>
 800493c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493e:	e00a      	b.n	8004956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004940:	f7fc fff2 	bl	8001928 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	f241 3288 	movw	r2, #5000	; 0x1388
 800494e:	4293      	cmp	r3, r2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e04f      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004956:	4b2b      	ldr	r3, [pc, #172]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 020c 	and.w	r2, r3, #12
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	429a      	cmp	r2, r3
 8004966:	d1eb      	bne.n	8004940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004968:	4b25      	ldr	r3, [pc, #148]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d20c      	bcs.n	8004990 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004976:	4b22      	ldr	r3, [pc, #136]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800497e:	4b20      	ldr	r3, [pc, #128]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d001      	beq.n	8004990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e032      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800499c:	4b19      	ldr	r3, [pc, #100]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	4916      	ldr	r1, [pc, #88]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d009      	beq.n	80049ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ba:	4b12      	ldr	r3, [pc, #72]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	490e      	ldr	r1, [pc, #56]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ce:	f000 f855 	bl	8004a7c <HAL_RCC_GetSysClockFreq>
 80049d2:	4602      	mov	r2, r0
 80049d4:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	091b      	lsrs	r3, r3, #4
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	490a      	ldr	r1, [pc, #40]	; (8004a08 <HAL_RCC_ClockConfig+0x1c0>)
 80049e0:	5ccb      	ldrb	r3, [r1, r3]
 80049e2:	fa22 f303 	lsr.w	r3, r2, r3
 80049e6:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <HAL_RCC_ClockConfig+0x1c4>)
 80049e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049ea:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <HAL_RCC_ClockConfig+0x1c8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fc ff56 	bl	80018a0 <HAL_InitTick>

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40023c00 	.word	0x40023c00
 8004a04:	40023800 	.word	0x40023800
 8004a08:	08008a24 	.word	0x08008a24
 8004a0c:	20000008 	.word	0x20000008
 8004a10:	2000000c 	.word	0x2000000c

08004a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a18:	4b03      	ldr	r3, [pc, #12]	; (8004a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	20000008 	.word	0x20000008

08004a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a30:	f7ff fff0 	bl	8004a14 <HAL_RCC_GetHCLKFreq>
 8004a34:	4602      	mov	r2, r0
 8004a36:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	0a9b      	lsrs	r3, r3, #10
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	4903      	ldr	r1, [pc, #12]	; (8004a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a42:	5ccb      	ldrb	r3, [r1, r3]
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	08008a34 	.word	0x08008a34

08004a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a58:	f7ff ffdc 	bl	8004a14 <HAL_RCC_GetHCLKFreq>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	0b5b      	lsrs	r3, r3, #13
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	4903      	ldr	r1, [pc, #12]	; (8004a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a6a:	5ccb      	ldrb	r3, [r1, r3]
 8004a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40023800 	.word	0x40023800
 8004a78:	08008a34 	.word	0x08008a34

08004a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a80:	b0ae      	sub	sp, #184	; 0xb8
 8004a82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aa2:	4bcb      	ldr	r3, [pc, #812]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 030c 	and.w	r3, r3, #12
 8004aaa:	2b0c      	cmp	r3, #12
 8004aac:	f200 8206 	bhi.w	8004ebc <HAL_RCC_GetSysClockFreq+0x440>
 8004ab0:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab6:	bf00      	nop
 8004ab8:	08004aed 	.word	0x08004aed
 8004abc:	08004ebd 	.word	0x08004ebd
 8004ac0:	08004ebd 	.word	0x08004ebd
 8004ac4:	08004ebd 	.word	0x08004ebd
 8004ac8:	08004af5 	.word	0x08004af5
 8004acc:	08004ebd 	.word	0x08004ebd
 8004ad0:	08004ebd 	.word	0x08004ebd
 8004ad4:	08004ebd 	.word	0x08004ebd
 8004ad8:	08004afd 	.word	0x08004afd
 8004adc:	08004ebd 	.word	0x08004ebd
 8004ae0:	08004ebd 	.word	0x08004ebd
 8004ae4:	08004ebd 	.word	0x08004ebd
 8004ae8:	08004ced 	.word	0x08004ced
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004aec:	4bb9      	ldr	r3, [pc, #740]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004aee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004af2:	e1e7      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004af4:	4bb8      	ldr	r3, [pc, #736]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004af6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004afa:	e1e3      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004afc:	4bb4      	ldr	r3, [pc, #720]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b08:	4bb1      	ldr	r3, [pc, #708]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d071      	beq.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b14:	4bae      	ldr	r3, [pc, #696]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	099b      	lsrs	r3, r3, #6
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b20:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b30:	2300      	movs	r3, #0
 8004b32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b3a:	4622      	mov	r2, r4
 8004b3c:	462b      	mov	r3, r5
 8004b3e:	f04f 0000 	mov.w	r0, #0
 8004b42:	f04f 0100 	mov.w	r1, #0
 8004b46:	0159      	lsls	r1, r3, #5
 8004b48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b4c:	0150      	lsls	r0, r2, #5
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4621      	mov	r1, r4
 8004b54:	1a51      	subs	r1, r2, r1
 8004b56:	6439      	str	r1, [r7, #64]	; 0x40
 8004b58:	4629      	mov	r1, r5
 8004b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004b6c:	4649      	mov	r1, r9
 8004b6e:	018b      	lsls	r3, r1, #6
 8004b70:	4641      	mov	r1, r8
 8004b72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b76:	4641      	mov	r1, r8
 8004b78:	018a      	lsls	r2, r1, #6
 8004b7a:	4641      	mov	r1, r8
 8004b7c:	1a51      	subs	r1, r2, r1
 8004b7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b80:	4649      	mov	r1, r9
 8004b82:	eb63 0301 	sbc.w	r3, r3, r1
 8004b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004b94:	4649      	mov	r1, r9
 8004b96:	00cb      	lsls	r3, r1, #3
 8004b98:	4641      	mov	r1, r8
 8004b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b9e:	4641      	mov	r1, r8
 8004ba0:	00ca      	lsls	r2, r1, #3
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	4622      	mov	r2, r4
 8004baa:	189b      	adds	r3, r3, r2
 8004bac:	633b      	str	r3, [r7, #48]	; 0x30
 8004bae:	462b      	mov	r3, r5
 8004bb0:	460a      	mov	r2, r1
 8004bb2:	eb42 0303 	adc.w	r3, r2, r3
 8004bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	024b      	lsls	r3, r1, #9
 8004bc8:	4621      	mov	r1, r4
 8004bca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bce:	4621      	mov	r1, r4
 8004bd0:	024a      	lsls	r2, r1, #9
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004be0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004be4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004be8:	f7fb fffe 	bl	8000be8 <__aeabi_uldivmod>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bf6:	e067      	b.n	8004cc8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bf8:	4b75      	ldr	r3, [pc, #468]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	099b      	lsrs	r3, r3, #6
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c04:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004c08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c10:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c12:	2300      	movs	r3, #0
 8004c14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c16:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004c1a:	4622      	mov	r2, r4
 8004c1c:	462b      	mov	r3, r5
 8004c1e:	f04f 0000 	mov.w	r0, #0
 8004c22:	f04f 0100 	mov.w	r1, #0
 8004c26:	0159      	lsls	r1, r3, #5
 8004c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c2c:	0150      	lsls	r0, r2, #5
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4621      	mov	r1, r4
 8004c34:	1a51      	subs	r1, r2, r1
 8004c36:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c38:	4629      	mov	r1, r5
 8004c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004c4c:	4649      	mov	r1, r9
 8004c4e:	018b      	lsls	r3, r1, #6
 8004c50:	4641      	mov	r1, r8
 8004c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c56:	4641      	mov	r1, r8
 8004c58:	018a      	lsls	r2, r1, #6
 8004c5a:	4641      	mov	r1, r8
 8004c5c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c60:	4649      	mov	r1, r9
 8004c62:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c72:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c7a:	4692      	mov	sl, r2
 8004c7c:	469b      	mov	fp, r3
 8004c7e:	4623      	mov	r3, r4
 8004c80:	eb1a 0303 	adds.w	r3, sl, r3
 8004c84:	623b      	str	r3, [r7, #32]
 8004c86:	462b      	mov	r3, r5
 8004c88:	eb4b 0303 	adc.w	r3, fp, r3
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	028b      	lsls	r3, r1, #10
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	028a      	lsls	r2, r1, #10
 8004ca8:	4610      	mov	r0, r2
 8004caa:	4619      	mov	r1, r3
 8004cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	673b      	str	r3, [r7, #112]	; 0x70
 8004cb4:	677a      	str	r2, [r7, #116]	; 0x74
 8004cb6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004cba:	f7fb ff95 	bl	8000be8 <__aeabi_uldivmod>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cc8:	4b41      	ldr	r3, [pc, #260]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	0c1b      	lsrs	r3, r3, #16
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004cda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004cde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004cea:	e0eb      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cec:	4b38      	ldr	r3, [pc, #224]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cf8:	4b35      	ldr	r3, [pc, #212]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d06b      	beq.n	8004ddc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d04:	4b32      	ldr	r3, [pc, #200]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	099b      	lsrs	r3, r3, #6
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d16:	663b      	str	r3, [r7, #96]	; 0x60
 8004d18:	2300      	movs	r3, #0
 8004d1a:	667b      	str	r3, [r7, #100]	; 0x64
 8004d1c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004d20:	4622      	mov	r2, r4
 8004d22:	462b      	mov	r3, r5
 8004d24:	f04f 0000 	mov.w	r0, #0
 8004d28:	f04f 0100 	mov.w	r1, #0
 8004d2c:	0159      	lsls	r1, r3, #5
 8004d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d32:	0150      	lsls	r0, r2, #5
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4621      	mov	r1, r4
 8004d3a:	1a51      	subs	r1, r2, r1
 8004d3c:	61b9      	str	r1, [r7, #24]
 8004d3e:	4629      	mov	r1, r5
 8004d40:	eb63 0301 	sbc.w	r3, r3, r1
 8004d44:	61fb      	str	r3, [r7, #28]
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	f04f 0300 	mov.w	r3, #0
 8004d4e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004d52:	4659      	mov	r1, fp
 8004d54:	018b      	lsls	r3, r1, #6
 8004d56:	4651      	mov	r1, sl
 8004d58:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d5c:	4651      	mov	r1, sl
 8004d5e:	018a      	lsls	r2, r1, #6
 8004d60:	4651      	mov	r1, sl
 8004d62:	ebb2 0801 	subs.w	r8, r2, r1
 8004d66:	4659      	mov	r1, fp
 8004d68:	eb63 0901 	sbc.w	r9, r3, r1
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d80:	4690      	mov	r8, r2
 8004d82:	4699      	mov	r9, r3
 8004d84:	4623      	mov	r3, r4
 8004d86:	eb18 0303 	adds.w	r3, r8, r3
 8004d8a:	613b      	str	r3, [r7, #16]
 8004d8c:	462b      	mov	r3, r5
 8004d8e:	eb49 0303 	adc.w	r3, r9, r3
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004da0:	4629      	mov	r1, r5
 8004da2:	024b      	lsls	r3, r1, #9
 8004da4:	4621      	mov	r1, r4
 8004da6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004daa:	4621      	mov	r1, r4
 8004dac:	024a      	lsls	r2, r1, #9
 8004dae:	4610      	mov	r0, r2
 8004db0:	4619      	mov	r1, r3
 8004db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004db6:	2200      	movs	r2, #0
 8004db8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dba:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004dbc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004dc0:	f7fb ff12 	bl	8000be8 <__aeabi_uldivmod>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4613      	mov	r3, r2
 8004dca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dce:	e065      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0x420>
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	00f42400 	.word	0x00f42400
 8004dd8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ddc:	4b3d      	ldr	r3, [pc, #244]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	099b      	lsrs	r3, r3, #6
 8004de2:	2200      	movs	r2, #0
 8004de4:	4618      	mov	r0, r3
 8004de6:	4611      	mov	r1, r2
 8004de8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004dec:	653b      	str	r3, [r7, #80]	; 0x50
 8004dee:	2300      	movs	r3, #0
 8004df0:	657b      	str	r3, [r7, #84]	; 0x54
 8004df2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004df6:	4642      	mov	r2, r8
 8004df8:	464b      	mov	r3, r9
 8004dfa:	f04f 0000 	mov.w	r0, #0
 8004dfe:	f04f 0100 	mov.w	r1, #0
 8004e02:	0159      	lsls	r1, r3, #5
 8004e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e08:	0150      	lsls	r0, r2, #5
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4641      	mov	r1, r8
 8004e10:	1a51      	subs	r1, r2, r1
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	4649      	mov	r1, r9
 8004e16:	eb63 0301 	sbc.w	r3, r3, r1
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	f04f 0200 	mov.w	r2, #0
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004e28:	4659      	mov	r1, fp
 8004e2a:	018b      	lsls	r3, r1, #6
 8004e2c:	4651      	mov	r1, sl
 8004e2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e32:	4651      	mov	r1, sl
 8004e34:	018a      	lsls	r2, r1, #6
 8004e36:	4651      	mov	r1, sl
 8004e38:	1a54      	subs	r4, r2, r1
 8004e3a:	4659      	mov	r1, fp
 8004e3c:	eb63 0501 	sbc.w	r5, r3, r1
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	00eb      	lsls	r3, r5, #3
 8004e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e4e:	00e2      	lsls	r2, r4, #3
 8004e50:	4614      	mov	r4, r2
 8004e52:	461d      	mov	r5, r3
 8004e54:	4643      	mov	r3, r8
 8004e56:	18e3      	adds	r3, r4, r3
 8004e58:	603b      	str	r3, [r7, #0]
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	eb45 0303 	adc.w	r3, r5, r3
 8004e60:	607b      	str	r3, [r7, #4]
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e6e:	4629      	mov	r1, r5
 8004e70:	028b      	lsls	r3, r1, #10
 8004e72:	4621      	mov	r1, r4
 8004e74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e78:	4621      	mov	r1, r4
 8004e7a:	028a      	lsls	r2, r1, #10
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	4619      	mov	r1, r3
 8004e80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e84:	2200      	movs	r2, #0
 8004e86:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e88:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004e8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e8e:	f7fb feab 	bl	8000be8 <__aeabi_uldivmod>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4613      	mov	r3, r2
 8004e98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e9c:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	0f1b      	lsrs	r3, r3, #28
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004eaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004eae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004eba:	e003      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ebc:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004ec2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	37b8      	adds	r7, #184	; 0xb8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	00f42400 	.word	0x00f42400

08004edc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e28d      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 8083 	beq.w	8005002 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004efc:	4b94      	ldr	r3, [pc, #592]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f003 030c 	and.w	r3, r3, #12
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d019      	beq.n	8004f3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f08:	4b91      	ldr	r3, [pc, #580]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d106      	bne.n	8004f22 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f14:	4b8e      	ldr	r3, [pc, #568]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f20:	d00c      	beq.n	8004f3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f22:	4b8b      	ldr	r3, [pc, #556]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f2a:	2b0c      	cmp	r3, #12
 8004f2c:	d112      	bne.n	8004f54 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f2e:	4b88      	ldr	r3, [pc, #544]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f3a:	d10b      	bne.n	8004f54 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f3c:	4b84      	ldr	r3, [pc, #528]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d05b      	beq.n	8005000 <HAL_RCC_OscConfig+0x124>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d157      	bne.n	8005000 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e25a      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f5c:	d106      	bne.n	8004f6c <HAL_RCC_OscConfig+0x90>
 8004f5e:	4b7c      	ldr	r3, [pc, #496]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a7b      	ldr	r2, [pc, #492]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	e01d      	b.n	8004fa8 <HAL_RCC_OscConfig+0xcc>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f74:	d10c      	bne.n	8004f90 <HAL_RCC_OscConfig+0xb4>
 8004f76:	4b76      	ldr	r3, [pc, #472]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a75      	ldr	r2, [pc, #468]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	4b73      	ldr	r3, [pc, #460]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a72      	ldr	r2, [pc, #456]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	e00b      	b.n	8004fa8 <HAL_RCC_OscConfig+0xcc>
 8004f90:	4b6f      	ldr	r3, [pc, #444]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a6e      	ldr	r2, [pc, #440]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	4b6c      	ldr	r3, [pc, #432]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a6b      	ldr	r2, [pc, #428]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8004fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d013      	beq.n	8004fd8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb0:	f7fc fcba 	bl	8001928 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fb8:	f7fc fcb6 	bl	8001928 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b64      	cmp	r3, #100	; 0x64
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e21f      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fca:	4b61      	ldr	r3, [pc, #388]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0f0      	beq.n	8004fb8 <HAL_RCC_OscConfig+0xdc>
 8004fd6:	e014      	b.n	8005002 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd8:	f7fc fca6 	bl	8001928 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fe0:	f7fc fca2 	bl	8001928 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b64      	cmp	r3, #100	; 0x64
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e20b      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ff2:	4b57      	ldr	r3, [pc, #348]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x104>
 8004ffe:	e000      	b.n	8005002 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d06f      	beq.n	80050ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800500e:	4b50      	ldr	r3, [pc, #320]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 030c 	and.w	r3, r3, #12
 8005016:	2b00      	cmp	r3, #0
 8005018:	d017      	beq.n	800504a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800501a:	4b4d      	ldr	r3, [pc, #308]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005022:	2b08      	cmp	r3, #8
 8005024:	d105      	bne.n	8005032 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005026:	4b4a      	ldr	r3, [pc, #296]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00b      	beq.n	800504a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005032:	4b47      	ldr	r3, [pc, #284]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800503a:	2b0c      	cmp	r3, #12
 800503c:	d11c      	bne.n	8005078 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800503e:	4b44      	ldr	r3, [pc, #272]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d116      	bne.n	8005078 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800504a:	4b41      	ldr	r3, [pc, #260]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_RCC_OscConfig+0x186>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d001      	beq.n	8005062 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e1d3      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005062:	4b3b      	ldr	r3, [pc, #236]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	4937      	ldr	r1, [pc, #220]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8005072:	4313      	orrs	r3, r2
 8005074:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005076:	e03a      	b.n	80050ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d020      	beq.n	80050c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005080:	4b34      	ldr	r3, [pc, #208]	; (8005154 <HAL_RCC_OscConfig+0x278>)
 8005082:	2201      	movs	r2, #1
 8005084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005086:	f7fc fc4f 	bl	8001928 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800508e:	f7fc fc4b 	bl	8001928 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e1b4      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a0:	4b2b      	ldr	r3, [pc, #172]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0f0      	beq.n	800508e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ac:	4b28      	ldr	r3, [pc, #160]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	4925      	ldr	r1, [pc, #148]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	600b      	str	r3, [r1, #0]
 80050c0:	e015      	b.n	80050ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050c2:	4b24      	ldr	r3, [pc, #144]	; (8005154 <HAL_RCC_OscConfig+0x278>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c8:	f7fc fc2e 	bl	8001928 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050d0:	f7fc fc2a 	bl	8001928 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e193      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e2:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d036      	beq.n	8005168 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d016      	beq.n	8005130 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005102:	4b15      	ldr	r3, [pc, #84]	; (8005158 <HAL_RCC_OscConfig+0x27c>)
 8005104:	2201      	movs	r2, #1
 8005106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005108:	f7fc fc0e 	bl	8001928 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005110:	f7fc fc0a 	bl	8001928 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e173      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005122:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <HAL_RCC_OscConfig+0x274>)
 8005124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0f0      	beq.n	8005110 <HAL_RCC_OscConfig+0x234>
 800512e:	e01b      	b.n	8005168 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005130:	4b09      	ldr	r3, [pc, #36]	; (8005158 <HAL_RCC_OscConfig+0x27c>)
 8005132:	2200      	movs	r2, #0
 8005134:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005136:	f7fc fbf7 	bl	8001928 <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800513c:	e00e      	b.n	800515c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800513e:	f7fc fbf3 	bl	8001928 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d907      	bls.n	800515c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e15c      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
 8005150:	40023800 	.word	0x40023800
 8005154:	42470000 	.word	0x42470000
 8005158:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800515c:	4b8a      	ldr	r3, [pc, #552]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 800515e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1ea      	bne.n	800513e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 8097 	beq.w	80052a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005176:	2300      	movs	r3, #0
 8005178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800517a:	4b83      	ldr	r3, [pc, #524]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10f      	bne.n	80051a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005186:	2300      	movs	r3, #0
 8005188:	60bb      	str	r3, [r7, #8]
 800518a:	4b7f      	ldr	r3, [pc, #508]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	4a7e      	ldr	r2, [pc, #504]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 8005190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005194:	6413      	str	r3, [r2, #64]	; 0x40
 8005196:	4b7c      	ldr	r3, [pc, #496]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519e:	60bb      	str	r3, [r7, #8]
 80051a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051a2:	2301      	movs	r3, #1
 80051a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a6:	4b79      	ldr	r3, [pc, #484]	; (800538c <HAL_RCC_OscConfig+0x4b0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d118      	bne.n	80051e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051b2:	4b76      	ldr	r3, [pc, #472]	; (800538c <HAL_RCC_OscConfig+0x4b0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a75      	ldr	r2, [pc, #468]	; (800538c <HAL_RCC_OscConfig+0x4b0>)
 80051b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051be:	f7fc fbb3 	bl	8001928 <HAL_GetTick>
 80051c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c4:	e008      	b.n	80051d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c6:	f7fc fbaf 	bl	8001928 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e118      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d8:	4b6c      	ldr	r3, [pc, #432]	; (800538c <HAL_RCC_OscConfig+0x4b0>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d0f0      	beq.n	80051c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d106      	bne.n	80051fa <HAL_RCC_OscConfig+0x31e>
 80051ec:	4b66      	ldr	r3, [pc, #408]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 80051ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f0:	4a65      	ldr	r2, [pc, #404]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 80051f2:	f043 0301 	orr.w	r3, r3, #1
 80051f6:	6713      	str	r3, [r2, #112]	; 0x70
 80051f8:	e01c      	b.n	8005234 <HAL_RCC_OscConfig+0x358>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	2b05      	cmp	r3, #5
 8005200:	d10c      	bne.n	800521c <HAL_RCC_OscConfig+0x340>
 8005202:	4b61      	ldr	r3, [pc, #388]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 8005204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005206:	4a60      	ldr	r2, [pc, #384]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 8005208:	f043 0304 	orr.w	r3, r3, #4
 800520c:	6713      	str	r3, [r2, #112]	; 0x70
 800520e:	4b5e      	ldr	r3, [pc, #376]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005212:	4a5d      	ldr	r2, [pc, #372]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 8005214:	f043 0301 	orr.w	r3, r3, #1
 8005218:	6713      	str	r3, [r2, #112]	; 0x70
 800521a:	e00b      	b.n	8005234 <HAL_RCC_OscConfig+0x358>
 800521c:	4b5a      	ldr	r3, [pc, #360]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 800521e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005220:	4a59      	ldr	r2, [pc, #356]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 8005222:	f023 0301 	bic.w	r3, r3, #1
 8005226:	6713      	str	r3, [r2, #112]	; 0x70
 8005228:	4b57      	ldr	r3, [pc, #348]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 800522a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522c:	4a56      	ldr	r2, [pc, #344]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 800522e:	f023 0304 	bic.w	r3, r3, #4
 8005232:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d015      	beq.n	8005268 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523c:	f7fc fb74 	bl	8001928 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005242:	e00a      	b.n	800525a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005244:	f7fc fb70 	bl	8001928 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005252:	4293      	cmp	r3, r2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e0d7      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800525a:	4b4b      	ldr	r3, [pc, #300]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 800525c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0ee      	beq.n	8005244 <HAL_RCC_OscConfig+0x368>
 8005266:	e014      	b.n	8005292 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005268:	f7fc fb5e 	bl	8001928 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800526e:	e00a      	b.n	8005286 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005270:	f7fc fb5a 	bl	8001928 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	f241 3288 	movw	r2, #5000	; 0x1388
 800527e:	4293      	cmp	r3, r2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e0c1      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005286:	4b40      	ldr	r3, [pc, #256]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1ee      	bne.n	8005270 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005292:	7dfb      	ldrb	r3, [r7, #23]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d105      	bne.n	80052a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005298:	4b3b      	ldr	r3, [pc, #236]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	4a3a      	ldr	r2, [pc, #232]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 800529e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 80ad 	beq.w	8005408 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052ae:	4b36      	ldr	r3, [pc, #216]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 030c 	and.w	r3, r3, #12
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d060      	beq.n	800537c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d145      	bne.n	800534e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c2:	4b33      	ldr	r3, [pc, #204]	; (8005390 <HAL_RCC_OscConfig+0x4b4>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c8:	f7fc fb2e 	bl	8001928 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052d0:	f7fc fb2a 	bl	8001928 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e093      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e2:	4b29      	ldr	r3, [pc, #164]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f0      	bne.n	80052d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69da      	ldr	r2, [r3, #28]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	019b      	lsls	r3, r3, #6
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005304:	085b      	lsrs	r3, r3, #1
 8005306:	3b01      	subs	r3, #1
 8005308:	041b      	lsls	r3, r3, #16
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	061b      	lsls	r3, r3, #24
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	071b      	lsls	r3, r3, #28
 800531a:	491b      	ldr	r1, [pc, #108]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 800531c:	4313      	orrs	r3, r2
 800531e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005320:	4b1b      	ldr	r3, [pc, #108]	; (8005390 <HAL_RCC_OscConfig+0x4b4>)
 8005322:	2201      	movs	r2, #1
 8005324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005326:	f7fc faff 	bl	8001928 <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800532e:	f7fc fafb 	bl	8001928 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e064      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005340:	4b11      	ldr	r3, [pc, #68]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0f0      	beq.n	800532e <HAL_RCC_OscConfig+0x452>
 800534c:	e05c      	b.n	8005408 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800534e:	4b10      	ldr	r3, [pc, #64]	; (8005390 <HAL_RCC_OscConfig+0x4b4>)
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005354:	f7fc fae8 	bl	8001928 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800535c:	f7fc fae4 	bl	8001928 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e04d      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800536e:	4b06      	ldr	r3, [pc, #24]	; (8005388 <HAL_RCC_OscConfig+0x4ac>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f0      	bne.n	800535c <HAL_RCC_OscConfig+0x480>
 800537a:	e045      	b.n	8005408 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d107      	bne.n	8005394 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e040      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
 8005388:	40023800 	.word	0x40023800
 800538c:	40007000 	.word	0x40007000
 8005390:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005394:	4b1f      	ldr	r3, [pc, #124]	; (8005414 <HAL_RCC_OscConfig+0x538>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d030      	beq.n	8005404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d129      	bne.n	8005404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d122      	bne.n	8005404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053c4:	4013      	ands	r3, r2
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d119      	bne.n	8005404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053da:	085b      	lsrs	r3, r3, #1
 80053dc:	3b01      	subs	r3, #1
 80053de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d10f      	bne.n	8005404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d107      	bne.n	8005404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005400:	429a      	cmp	r2, r3
 8005402:	d001      	beq.n	8005408 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40023800 	.word	0x40023800

08005418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e03f      	b.n	80054aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fc f884 	bl	800154c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2224      	movs	r2, #36	; 0x24
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800545a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f929 	bl	80056b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695a      	ldr	r2, [r3, #20]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b08a      	sub	sp, #40	; 0x28
 80054b6:	af02      	add	r7, sp, #8
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	603b      	str	r3, [r7, #0]
 80054be:	4613      	mov	r3, r2
 80054c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	d17c      	bne.n	80055cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <HAL_UART_Transmit+0x2c>
 80054d8:	88fb      	ldrh	r3, [r7, #6]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e075      	b.n	80055ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_UART_Transmit+0x3e>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e06e      	b.n	80055ce <HAL_UART_Transmit+0x11c>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2221      	movs	r2, #33	; 0x21
 8005502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005506:	f7fc fa0f 	bl	8001928 <HAL_GetTick>
 800550a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	88fa      	ldrh	r2, [r7, #6]
 8005510:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	88fa      	ldrh	r2, [r7, #6]
 8005516:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005520:	d108      	bne.n	8005534 <HAL_UART_Transmit+0x82>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d104      	bne.n	8005534 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800552a:	2300      	movs	r3, #0
 800552c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	e003      	b.n	800553c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005538:	2300      	movs	r3, #0
 800553a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005544:	e02a      	b.n	800559c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2200      	movs	r2, #0
 800554e:	2180      	movs	r1, #128	; 0x80
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 f840 	bl	80055d6 <UART_WaitOnFlagUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e036      	b.n	80055ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10b      	bne.n	800557e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005574:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	3302      	adds	r3, #2
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	e007      	b.n	800558e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	781a      	ldrb	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	3301      	adds	r3, #1
 800558c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005592:	b29b      	uxth	r3, r3
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1cf      	bne.n	8005546 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2200      	movs	r2, #0
 80055ae:	2140      	movs	r1, #64	; 0x40
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 f810 	bl	80055d6 <UART_WaitOnFlagUntilTimeout>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e006      	b.n	80055ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e000      	b.n	80055ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80055cc:	2302      	movs	r3, #2
  }
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3720      	adds	r7, #32
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b090      	sub	sp, #64	; 0x40
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	603b      	str	r3, [r7, #0]
 80055e2:	4613      	mov	r3, r2
 80055e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e6:	e050      	b.n	800568a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055ee:	d04c      	beq.n	800568a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d007      	beq.n	8005606 <UART_WaitOnFlagUntilTimeout+0x30>
 80055f6:	f7fc f997 	bl	8001928 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005602:	429a      	cmp	r2, r3
 8005604:	d241      	bcs.n	800568a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	330c      	adds	r3, #12
 800560c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800561c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	330c      	adds	r3, #12
 8005624:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005626:	637a      	str	r2, [r7, #52]	; 0x34
 8005628:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800562c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e5      	bne.n	8005606 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3314      	adds	r3, #20
 8005640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	e853 3f00 	ldrex	r3, [r3]
 8005648:	613b      	str	r3, [r7, #16]
   return(result);
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f023 0301 	bic.w	r3, r3, #1
 8005650:	63bb      	str	r3, [r7, #56]	; 0x38
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3314      	adds	r3, #20
 8005658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800565a:	623a      	str	r2, [r7, #32]
 800565c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565e:	69f9      	ldr	r1, [r7, #28]
 8005660:	6a3a      	ldr	r2, [r7, #32]
 8005662:	e841 2300 	strex	r3, r2, [r1]
 8005666:	61bb      	str	r3, [r7, #24]
   return(result);
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1e5      	bne.n	800563a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2220      	movs	r2, #32
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e00f      	b.n	80056aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4013      	ands	r3, r2
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	429a      	cmp	r2, r3
 8005698:	bf0c      	ite	eq
 800569a:	2301      	moveq	r3, #1
 800569c:	2300      	movne	r3, #0
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	461a      	mov	r2, r3
 80056a2:	79fb      	ldrb	r3, [r7, #7]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d09f      	beq.n	80055e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3740      	adds	r7, #64	; 0x40
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056b8:	b0c0      	sub	sp, #256	; 0x100
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d0:	68d9      	ldr	r1, [r3, #12]
 80056d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	ea40 0301 	orr.w	r3, r0, r1
 80056dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	431a      	orrs	r2, r3
 80056f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800570c:	f021 010c 	bic.w	r1, r1, #12
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800571a:	430b      	orrs	r3, r1
 800571c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800571e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800572a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800572e:	6999      	ldr	r1, [r3, #24]
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	ea40 0301 	orr.w	r3, r0, r1
 800573a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800573c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	4b8f      	ldr	r3, [pc, #572]	; (8005980 <UART_SetConfig+0x2cc>)
 8005744:	429a      	cmp	r2, r3
 8005746:	d005      	beq.n	8005754 <UART_SetConfig+0xa0>
 8005748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	4b8d      	ldr	r3, [pc, #564]	; (8005984 <UART_SetConfig+0x2d0>)
 8005750:	429a      	cmp	r2, r3
 8005752:	d104      	bne.n	800575e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005754:	f7ff f97e 	bl	8004a54 <HAL_RCC_GetPCLK2Freq>
 8005758:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800575c:	e003      	b.n	8005766 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800575e:	f7ff f965 	bl	8004a2c <HAL_RCC_GetPCLK1Freq>
 8005762:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005770:	f040 810c 	bne.w	800598c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005778:	2200      	movs	r2, #0
 800577a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800577e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005782:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005786:	4622      	mov	r2, r4
 8005788:	462b      	mov	r3, r5
 800578a:	1891      	adds	r1, r2, r2
 800578c:	65b9      	str	r1, [r7, #88]	; 0x58
 800578e:	415b      	adcs	r3, r3
 8005790:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005792:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005796:	4621      	mov	r1, r4
 8005798:	eb12 0801 	adds.w	r8, r2, r1
 800579c:	4629      	mov	r1, r5
 800579e:	eb43 0901 	adc.w	r9, r3, r1
 80057a2:	f04f 0200 	mov.w	r2, #0
 80057a6:	f04f 0300 	mov.w	r3, #0
 80057aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057b6:	4690      	mov	r8, r2
 80057b8:	4699      	mov	r9, r3
 80057ba:	4623      	mov	r3, r4
 80057bc:	eb18 0303 	adds.w	r3, r8, r3
 80057c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057c4:	462b      	mov	r3, r5
 80057c6:	eb49 0303 	adc.w	r3, r9, r3
 80057ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80057de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80057e2:	460b      	mov	r3, r1
 80057e4:	18db      	adds	r3, r3, r3
 80057e6:	653b      	str	r3, [r7, #80]	; 0x50
 80057e8:	4613      	mov	r3, r2
 80057ea:	eb42 0303 	adc.w	r3, r2, r3
 80057ee:	657b      	str	r3, [r7, #84]	; 0x54
 80057f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80057f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80057f8:	f7fb f9f6 	bl	8000be8 <__aeabi_uldivmod>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4b61      	ldr	r3, [pc, #388]	; (8005988 <UART_SetConfig+0x2d4>)
 8005802:	fba3 2302 	umull	r2, r3, r3, r2
 8005806:	095b      	lsrs	r3, r3, #5
 8005808:	011c      	lsls	r4, r3, #4
 800580a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800580e:	2200      	movs	r2, #0
 8005810:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005814:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005818:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800581c:	4642      	mov	r2, r8
 800581e:	464b      	mov	r3, r9
 8005820:	1891      	adds	r1, r2, r2
 8005822:	64b9      	str	r1, [r7, #72]	; 0x48
 8005824:	415b      	adcs	r3, r3
 8005826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005828:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800582c:	4641      	mov	r1, r8
 800582e:	eb12 0a01 	adds.w	sl, r2, r1
 8005832:	4649      	mov	r1, r9
 8005834:	eb43 0b01 	adc.w	fp, r3, r1
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005844:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800584c:	4692      	mov	sl, r2
 800584e:	469b      	mov	fp, r3
 8005850:	4643      	mov	r3, r8
 8005852:	eb1a 0303 	adds.w	r3, sl, r3
 8005856:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800585a:	464b      	mov	r3, r9
 800585c:	eb4b 0303 	adc.w	r3, fp, r3
 8005860:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005870:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005874:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005878:	460b      	mov	r3, r1
 800587a:	18db      	adds	r3, r3, r3
 800587c:	643b      	str	r3, [r7, #64]	; 0x40
 800587e:	4613      	mov	r3, r2
 8005880:	eb42 0303 	adc.w	r3, r2, r3
 8005884:	647b      	str	r3, [r7, #68]	; 0x44
 8005886:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800588a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800588e:	f7fb f9ab 	bl	8000be8 <__aeabi_uldivmod>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	4611      	mov	r1, r2
 8005898:	4b3b      	ldr	r3, [pc, #236]	; (8005988 <UART_SetConfig+0x2d4>)
 800589a:	fba3 2301 	umull	r2, r3, r3, r1
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	2264      	movs	r2, #100	; 0x64
 80058a2:	fb02 f303 	mul.w	r3, r2, r3
 80058a6:	1acb      	subs	r3, r1, r3
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80058ae:	4b36      	ldr	r3, [pc, #216]	; (8005988 <UART_SetConfig+0x2d4>)
 80058b0:	fba3 2302 	umull	r2, r3, r3, r2
 80058b4:	095b      	lsrs	r3, r3, #5
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058bc:	441c      	add	r4, r3
 80058be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80058cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80058d0:	4642      	mov	r2, r8
 80058d2:	464b      	mov	r3, r9
 80058d4:	1891      	adds	r1, r2, r2
 80058d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80058d8:	415b      	adcs	r3, r3
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80058e0:	4641      	mov	r1, r8
 80058e2:	1851      	adds	r1, r2, r1
 80058e4:	6339      	str	r1, [r7, #48]	; 0x30
 80058e6:	4649      	mov	r1, r9
 80058e8:	414b      	adcs	r3, r1
 80058ea:	637b      	str	r3, [r7, #52]	; 0x34
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80058f8:	4659      	mov	r1, fp
 80058fa:	00cb      	lsls	r3, r1, #3
 80058fc:	4651      	mov	r1, sl
 80058fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005902:	4651      	mov	r1, sl
 8005904:	00ca      	lsls	r2, r1, #3
 8005906:	4610      	mov	r0, r2
 8005908:	4619      	mov	r1, r3
 800590a:	4603      	mov	r3, r0
 800590c:	4642      	mov	r2, r8
 800590e:	189b      	adds	r3, r3, r2
 8005910:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005914:	464b      	mov	r3, r9
 8005916:	460a      	mov	r2, r1
 8005918:	eb42 0303 	adc.w	r3, r2, r3
 800591c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800592c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005930:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005934:	460b      	mov	r3, r1
 8005936:	18db      	adds	r3, r3, r3
 8005938:	62bb      	str	r3, [r7, #40]	; 0x28
 800593a:	4613      	mov	r3, r2
 800593c:	eb42 0303 	adc.w	r3, r2, r3
 8005940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005942:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005946:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800594a:	f7fb f94d 	bl	8000be8 <__aeabi_uldivmod>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	4b0d      	ldr	r3, [pc, #52]	; (8005988 <UART_SetConfig+0x2d4>)
 8005954:	fba3 1302 	umull	r1, r3, r3, r2
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	2164      	movs	r1, #100	; 0x64
 800595c:	fb01 f303 	mul.w	r3, r1, r3
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	3332      	adds	r3, #50	; 0x32
 8005966:	4a08      	ldr	r2, [pc, #32]	; (8005988 <UART_SetConfig+0x2d4>)
 8005968:	fba2 2303 	umull	r2, r3, r2, r3
 800596c:	095b      	lsrs	r3, r3, #5
 800596e:	f003 0207 	and.w	r2, r3, #7
 8005972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4422      	add	r2, r4
 800597a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800597c:	e105      	b.n	8005b8a <UART_SetConfig+0x4d6>
 800597e:	bf00      	nop
 8005980:	40011000 	.word	0x40011000
 8005984:	40011400 	.word	0x40011400
 8005988:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800598c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005990:	2200      	movs	r2, #0
 8005992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005996:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800599a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800599e:	4642      	mov	r2, r8
 80059a0:	464b      	mov	r3, r9
 80059a2:	1891      	adds	r1, r2, r2
 80059a4:	6239      	str	r1, [r7, #32]
 80059a6:	415b      	adcs	r3, r3
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
 80059aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059ae:	4641      	mov	r1, r8
 80059b0:	1854      	adds	r4, r2, r1
 80059b2:	4649      	mov	r1, r9
 80059b4:	eb43 0501 	adc.w	r5, r3, r1
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	00eb      	lsls	r3, r5, #3
 80059c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059c6:	00e2      	lsls	r2, r4, #3
 80059c8:	4614      	mov	r4, r2
 80059ca:	461d      	mov	r5, r3
 80059cc:	4643      	mov	r3, r8
 80059ce:	18e3      	adds	r3, r4, r3
 80059d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059d4:	464b      	mov	r3, r9
 80059d6:	eb45 0303 	adc.w	r3, r5, r3
 80059da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059ee:	f04f 0200 	mov.w	r2, #0
 80059f2:	f04f 0300 	mov.w	r3, #0
 80059f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80059fa:	4629      	mov	r1, r5
 80059fc:	008b      	lsls	r3, r1, #2
 80059fe:	4621      	mov	r1, r4
 8005a00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a04:	4621      	mov	r1, r4
 8005a06:	008a      	lsls	r2, r1, #2
 8005a08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a0c:	f7fb f8ec 	bl	8000be8 <__aeabi_uldivmod>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4b60      	ldr	r3, [pc, #384]	; (8005b98 <UART_SetConfig+0x4e4>)
 8005a16:	fba3 2302 	umull	r2, r3, r3, r2
 8005a1a:	095b      	lsrs	r3, r3, #5
 8005a1c:	011c      	lsls	r4, r3, #4
 8005a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a30:	4642      	mov	r2, r8
 8005a32:	464b      	mov	r3, r9
 8005a34:	1891      	adds	r1, r2, r2
 8005a36:	61b9      	str	r1, [r7, #24]
 8005a38:	415b      	adcs	r3, r3
 8005a3a:	61fb      	str	r3, [r7, #28]
 8005a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a40:	4641      	mov	r1, r8
 8005a42:	1851      	adds	r1, r2, r1
 8005a44:	6139      	str	r1, [r7, #16]
 8005a46:	4649      	mov	r1, r9
 8005a48:	414b      	adcs	r3, r1
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a58:	4659      	mov	r1, fp
 8005a5a:	00cb      	lsls	r3, r1, #3
 8005a5c:	4651      	mov	r1, sl
 8005a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a62:	4651      	mov	r1, sl
 8005a64:	00ca      	lsls	r2, r1, #3
 8005a66:	4610      	mov	r0, r2
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4642      	mov	r2, r8
 8005a6e:	189b      	adds	r3, r3, r2
 8005a70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a74:	464b      	mov	r3, r9
 8005a76:	460a      	mov	r2, r1
 8005a78:	eb42 0303 	adc.w	r3, r2, r3
 8005a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a98:	4649      	mov	r1, r9
 8005a9a:	008b      	lsls	r3, r1, #2
 8005a9c:	4641      	mov	r1, r8
 8005a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005aa2:	4641      	mov	r1, r8
 8005aa4:	008a      	lsls	r2, r1, #2
 8005aa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005aaa:	f7fb f89d 	bl	8000be8 <__aeabi_uldivmod>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4b39      	ldr	r3, [pc, #228]	; (8005b98 <UART_SetConfig+0x4e4>)
 8005ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab8:	095b      	lsrs	r3, r3, #5
 8005aba:	2164      	movs	r1, #100	; 0x64
 8005abc:	fb01 f303 	mul.w	r3, r1, r3
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	3332      	adds	r3, #50	; 0x32
 8005ac6:	4a34      	ldr	r2, [pc, #208]	; (8005b98 <UART_SetConfig+0x4e4>)
 8005ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ad2:	441c      	add	r4, r3
 8005ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ad8:	2200      	movs	r2, #0
 8005ada:	673b      	str	r3, [r7, #112]	; 0x70
 8005adc:	677a      	str	r2, [r7, #116]	; 0x74
 8005ade:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ae2:	4642      	mov	r2, r8
 8005ae4:	464b      	mov	r3, r9
 8005ae6:	1891      	adds	r1, r2, r2
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	415b      	adcs	r3, r3
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005af2:	4641      	mov	r1, r8
 8005af4:	1851      	adds	r1, r2, r1
 8005af6:	6039      	str	r1, [r7, #0]
 8005af8:	4649      	mov	r1, r9
 8005afa:	414b      	adcs	r3, r1
 8005afc:	607b      	str	r3, [r7, #4]
 8005afe:	f04f 0200 	mov.w	r2, #0
 8005b02:	f04f 0300 	mov.w	r3, #0
 8005b06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b0a:	4659      	mov	r1, fp
 8005b0c:	00cb      	lsls	r3, r1, #3
 8005b0e:	4651      	mov	r1, sl
 8005b10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b14:	4651      	mov	r1, sl
 8005b16:	00ca      	lsls	r2, r1, #3
 8005b18:	4610      	mov	r0, r2
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	4642      	mov	r2, r8
 8005b20:	189b      	adds	r3, r3, r2
 8005b22:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b24:	464b      	mov	r3, r9
 8005b26:	460a      	mov	r2, r1
 8005b28:	eb42 0303 	adc.w	r3, r2, r3
 8005b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	663b      	str	r3, [r7, #96]	; 0x60
 8005b38:	667a      	str	r2, [r7, #100]	; 0x64
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b46:	4649      	mov	r1, r9
 8005b48:	008b      	lsls	r3, r1, #2
 8005b4a:	4641      	mov	r1, r8
 8005b4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b50:	4641      	mov	r1, r8
 8005b52:	008a      	lsls	r2, r1, #2
 8005b54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b58:	f7fb f846 	bl	8000be8 <__aeabi_uldivmod>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4b0d      	ldr	r3, [pc, #52]	; (8005b98 <UART_SetConfig+0x4e4>)
 8005b62:	fba3 1302 	umull	r1, r3, r3, r2
 8005b66:	095b      	lsrs	r3, r3, #5
 8005b68:	2164      	movs	r1, #100	; 0x64
 8005b6a:	fb01 f303 	mul.w	r3, r1, r3
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	3332      	adds	r3, #50	; 0x32
 8005b74:	4a08      	ldr	r2, [pc, #32]	; (8005b98 <UART_SetConfig+0x4e4>)
 8005b76:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	f003 020f 	and.w	r2, r3, #15
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4422      	add	r2, r4
 8005b88:	609a      	str	r2, [r3, #8]
}
 8005b8a:	bf00      	nop
 8005b8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b90:	46bd      	mov	sp, r7
 8005b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b96:	bf00      	nop
 8005b98:	51eb851f 	.word	0x51eb851f

08005b9c <__errno>:
 8005b9c:	4b01      	ldr	r3, [pc, #4]	; (8005ba4 <__errno+0x8>)
 8005b9e:	6818      	ldr	r0, [r3, #0]
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	20000014 	.word	0x20000014

08005ba8 <__libc_init_array>:
 8005ba8:	b570      	push	{r4, r5, r6, lr}
 8005baa:	4d0d      	ldr	r5, [pc, #52]	; (8005be0 <__libc_init_array+0x38>)
 8005bac:	4c0d      	ldr	r4, [pc, #52]	; (8005be4 <__libc_init_array+0x3c>)
 8005bae:	1b64      	subs	r4, r4, r5
 8005bb0:	10a4      	asrs	r4, r4, #2
 8005bb2:	2600      	movs	r6, #0
 8005bb4:	42a6      	cmp	r6, r4
 8005bb6:	d109      	bne.n	8005bcc <__libc_init_array+0x24>
 8005bb8:	4d0b      	ldr	r5, [pc, #44]	; (8005be8 <__libc_init_array+0x40>)
 8005bba:	4c0c      	ldr	r4, [pc, #48]	; (8005bec <__libc_init_array+0x44>)
 8005bbc:	f002 ff04 	bl	80089c8 <_init>
 8005bc0:	1b64      	subs	r4, r4, r5
 8005bc2:	10a4      	asrs	r4, r4, #2
 8005bc4:	2600      	movs	r6, #0
 8005bc6:	42a6      	cmp	r6, r4
 8005bc8:	d105      	bne.n	8005bd6 <__libc_init_array+0x2e>
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
 8005bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd0:	4798      	blx	r3
 8005bd2:	3601      	adds	r6, #1
 8005bd4:	e7ee      	b.n	8005bb4 <__libc_init_array+0xc>
 8005bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bda:	4798      	blx	r3
 8005bdc:	3601      	adds	r6, #1
 8005bde:	e7f2      	b.n	8005bc6 <__libc_init_array+0x1e>
 8005be0:	08008e1c 	.word	0x08008e1c
 8005be4:	08008e1c 	.word	0x08008e1c
 8005be8:	08008e1c 	.word	0x08008e1c
 8005bec:	08008e20 	.word	0x08008e20

08005bf0 <memset>:
 8005bf0:	4402      	add	r2, r0
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d100      	bne.n	8005bfa <memset+0xa>
 8005bf8:	4770      	bx	lr
 8005bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8005bfe:	e7f9      	b.n	8005bf4 <memset+0x4>

08005c00 <__cvt>:
 8005c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c04:	ec55 4b10 	vmov	r4, r5, d0
 8005c08:	2d00      	cmp	r5, #0
 8005c0a:	460e      	mov	r6, r1
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	462b      	mov	r3, r5
 8005c10:	bfbb      	ittet	lt
 8005c12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c16:	461d      	movlt	r5, r3
 8005c18:	2300      	movge	r3, #0
 8005c1a:	232d      	movlt	r3, #45	; 0x2d
 8005c1c:	700b      	strb	r3, [r1, #0]
 8005c1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005c24:	4691      	mov	r9, r2
 8005c26:	f023 0820 	bic.w	r8, r3, #32
 8005c2a:	bfbc      	itt	lt
 8005c2c:	4622      	movlt	r2, r4
 8005c2e:	4614      	movlt	r4, r2
 8005c30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c34:	d005      	beq.n	8005c42 <__cvt+0x42>
 8005c36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005c3a:	d100      	bne.n	8005c3e <__cvt+0x3e>
 8005c3c:	3601      	adds	r6, #1
 8005c3e:	2102      	movs	r1, #2
 8005c40:	e000      	b.n	8005c44 <__cvt+0x44>
 8005c42:	2103      	movs	r1, #3
 8005c44:	ab03      	add	r3, sp, #12
 8005c46:	9301      	str	r3, [sp, #4]
 8005c48:	ab02      	add	r3, sp, #8
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	ec45 4b10 	vmov	d0, r4, r5
 8005c50:	4653      	mov	r3, sl
 8005c52:	4632      	mov	r2, r6
 8005c54:	f000 fcec 	bl	8006630 <_dtoa_r>
 8005c58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c5c:	4607      	mov	r7, r0
 8005c5e:	d102      	bne.n	8005c66 <__cvt+0x66>
 8005c60:	f019 0f01 	tst.w	r9, #1
 8005c64:	d022      	beq.n	8005cac <__cvt+0xac>
 8005c66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c6a:	eb07 0906 	add.w	r9, r7, r6
 8005c6e:	d110      	bne.n	8005c92 <__cvt+0x92>
 8005c70:	783b      	ldrb	r3, [r7, #0]
 8005c72:	2b30      	cmp	r3, #48	; 0x30
 8005c74:	d10a      	bne.n	8005c8c <__cvt+0x8c>
 8005c76:	2200      	movs	r2, #0
 8005c78:	2300      	movs	r3, #0
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	f7fa ff43 	bl	8000b08 <__aeabi_dcmpeq>
 8005c82:	b918      	cbnz	r0, 8005c8c <__cvt+0x8c>
 8005c84:	f1c6 0601 	rsb	r6, r6, #1
 8005c88:	f8ca 6000 	str.w	r6, [sl]
 8005c8c:	f8da 3000 	ldr.w	r3, [sl]
 8005c90:	4499      	add	r9, r3
 8005c92:	2200      	movs	r2, #0
 8005c94:	2300      	movs	r3, #0
 8005c96:	4620      	mov	r0, r4
 8005c98:	4629      	mov	r1, r5
 8005c9a:	f7fa ff35 	bl	8000b08 <__aeabi_dcmpeq>
 8005c9e:	b108      	cbz	r0, 8005ca4 <__cvt+0xa4>
 8005ca0:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ca4:	2230      	movs	r2, #48	; 0x30
 8005ca6:	9b03      	ldr	r3, [sp, #12]
 8005ca8:	454b      	cmp	r3, r9
 8005caa:	d307      	bcc.n	8005cbc <__cvt+0xbc>
 8005cac:	9b03      	ldr	r3, [sp, #12]
 8005cae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cb0:	1bdb      	subs	r3, r3, r7
 8005cb2:	4638      	mov	r0, r7
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	b004      	add	sp, #16
 8005cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cbc:	1c59      	adds	r1, r3, #1
 8005cbe:	9103      	str	r1, [sp, #12]
 8005cc0:	701a      	strb	r2, [r3, #0]
 8005cc2:	e7f0      	b.n	8005ca6 <__cvt+0xa6>

08005cc4 <__exponent>:
 8005cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2900      	cmp	r1, #0
 8005cca:	bfb8      	it	lt
 8005ccc:	4249      	neglt	r1, r1
 8005cce:	f803 2b02 	strb.w	r2, [r3], #2
 8005cd2:	bfb4      	ite	lt
 8005cd4:	222d      	movlt	r2, #45	; 0x2d
 8005cd6:	222b      	movge	r2, #43	; 0x2b
 8005cd8:	2909      	cmp	r1, #9
 8005cda:	7042      	strb	r2, [r0, #1]
 8005cdc:	dd2a      	ble.n	8005d34 <__exponent+0x70>
 8005cde:	f10d 0407 	add.w	r4, sp, #7
 8005ce2:	46a4      	mov	ip, r4
 8005ce4:	270a      	movs	r7, #10
 8005ce6:	46a6      	mov	lr, r4
 8005ce8:	460a      	mov	r2, r1
 8005cea:	fb91 f6f7 	sdiv	r6, r1, r7
 8005cee:	fb07 1516 	mls	r5, r7, r6, r1
 8005cf2:	3530      	adds	r5, #48	; 0x30
 8005cf4:	2a63      	cmp	r2, #99	; 0x63
 8005cf6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005cfa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005cfe:	4631      	mov	r1, r6
 8005d00:	dcf1      	bgt.n	8005ce6 <__exponent+0x22>
 8005d02:	3130      	adds	r1, #48	; 0x30
 8005d04:	f1ae 0502 	sub.w	r5, lr, #2
 8005d08:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005d0c:	1c44      	adds	r4, r0, #1
 8005d0e:	4629      	mov	r1, r5
 8005d10:	4561      	cmp	r1, ip
 8005d12:	d30a      	bcc.n	8005d2a <__exponent+0x66>
 8005d14:	f10d 0209 	add.w	r2, sp, #9
 8005d18:	eba2 020e 	sub.w	r2, r2, lr
 8005d1c:	4565      	cmp	r5, ip
 8005d1e:	bf88      	it	hi
 8005d20:	2200      	movhi	r2, #0
 8005d22:	4413      	add	r3, r2
 8005d24:	1a18      	subs	r0, r3, r0
 8005d26:	b003      	add	sp, #12
 8005d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005d32:	e7ed      	b.n	8005d10 <__exponent+0x4c>
 8005d34:	2330      	movs	r3, #48	; 0x30
 8005d36:	3130      	adds	r1, #48	; 0x30
 8005d38:	7083      	strb	r3, [r0, #2]
 8005d3a:	70c1      	strb	r1, [r0, #3]
 8005d3c:	1d03      	adds	r3, r0, #4
 8005d3e:	e7f1      	b.n	8005d24 <__exponent+0x60>

08005d40 <_printf_float>:
 8005d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d44:	ed2d 8b02 	vpush	{d8}
 8005d48:	b08d      	sub	sp, #52	; 0x34
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005d50:	4616      	mov	r6, r2
 8005d52:	461f      	mov	r7, r3
 8005d54:	4605      	mov	r5, r0
 8005d56:	f001 fa59 	bl	800720c <_localeconv_r>
 8005d5a:	f8d0 a000 	ldr.w	sl, [r0]
 8005d5e:	4650      	mov	r0, sl
 8005d60:	f7fa fa56 	bl	8000210 <strlen>
 8005d64:	2300      	movs	r3, #0
 8005d66:	930a      	str	r3, [sp, #40]	; 0x28
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	9305      	str	r3, [sp, #20]
 8005d6c:	f8d8 3000 	ldr.w	r3, [r8]
 8005d70:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005d74:	3307      	adds	r3, #7
 8005d76:	f023 0307 	bic.w	r3, r3, #7
 8005d7a:	f103 0208 	add.w	r2, r3, #8
 8005d7e:	f8c8 2000 	str.w	r2, [r8]
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d8a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005d8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d92:	9307      	str	r3, [sp, #28]
 8005d94:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d98:	ee08 0a10 	vmov	s16, r0
 8005d9c:	4b9f      	ldr	r3, [pc, #636]	; (800601c <_printf_float+0x2dc>)
 8005d9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005da2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005da6:	f7fa fee1 	bl	8000b6c <__aeabi_dcmpun>
 8005daa:	bb88      	cbnz	r0, 8005e10 <_printf_float+0xd0>
 8005dac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005db0:	4b9a      	ldr	r3, [pc, #616]	; (800601c <_printf_float+0x2dc>)
 8005db2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005db6:	f7fa febb 	bl	8000b30 <__aeabi_dcmple>
 8005dba:	bb48      	cbnz	r0, 8005e10 <_printf_float+0xd0>
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	4640      	mov	r0, r8
 8005dc2:	4649      	mov	r1, r9
 8005dc4:	f7fa feaa 	bl	8000b1c <__aeabi_dcmplt>
 8005dc8:	b110      	cbz	r0, 8005dd0 <_printf_float+0x90>
 8005dca:	232d      	movs	r3, #45	; 0x2d
 8005dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dd0:	4b93      	ldr	r3, [pc, #588]	; (8006020 <_printf_float+0x2e0>)
 8005dd2:	4894      	ldr	r0, [pc, #592]	; (8006024 <_printf_float+0x2e4>)
 8005dd4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005dd8:	bf94      	ite	ls
 8005dda:	4698      	movls	r8, r3
 8005ddc:	4680      	movhi	r8, r0
 8005dde:	2303      	movs	r3, #3
 8005de0:	6123      	str	r3, [r4, #16]
 8005de2:	9b05      	ldr	r3, [sp, #20]
 8005de4:	f023 0204 	bic.w	r2, r3, #4
 8005de8:	6022      	str	r2, [r4, #0]
 8005dea:	f04f 0900 	mov.w	r9, #0
 8005dee:	9700      	str	r7, [sp, #0]
 8005df0:	4633      	mov	r3, r6
 8005df2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005df4:	4621      	mov	r1, r4
 8005df6:	4628      	mov	r0, r5
 8005df8:	f000 f9d8 	bl	80061ac <_printf_common>
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	f040 8090 	bne.w	8005f22 <_printf_float+0x1e2>
 8005e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e06:	b00d      	add	sp, #52	; 0x34
 8005e08:	ecbd 8b02 	vpop	{d8}
 8005e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e10:	4642      	mov	r2, r8
 8005e12:	464b      	mov	r3, r9
 8005e14:	4640      	mov	r0, r8
 8005e16:	4649      	mov	r1, r9
 8005e18:	f7fa fea8 	bl	8000b6c <__aeabi_dcmpun>
 8005e1c:	b140      	cbz	r0, 8005e30 <_printf_float+0xf0>
 8005e1e:	464b      	mov	r3, r9
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	bfbc      	itt	lt
 8005e24:	232d      	movlt	r3, #45	; 0x2d
 8005e26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e2a:	487f      	ldr	r0, [pc, #508]	; (8006028 <_printf_float+0x2e8>)
 8005e2c:	4b7f      	ldr	r3, [pc, #508]	; (800602c <_printf_float+0x2ec>)
 8005e2e:	e7d1      	b.n	8005dd4 <_printf_float+0x94>
 8005e30:	6863      	ldr	r3, [r4, #4]
 8005e32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005e36:	9206      	str	r2, [sp, #24]
 8005e38:	1c5a      	adds	r2, r3, #1
 8005e3a:	d13f      	bne.n	8005ebc <_printf_float+0x17c>
 8005e3c:	2306      	movs	r3, #6
 8005e3e:	6063      	str	r3, [r4, #4]
 8005e40:	9b05      	ldr	r3, [sp, #20]
 8005e42:	6861      	ldr	r1, [r4, #4]
 8005e44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e48:	2300      	movs	r3, #0
 8005e4a:	9303      	str	r3, [sp, #12]
 8005e4c:	ab0a      	add	r3, sp, #40	; 0x28
 8005e4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005e52:	ab09      	add	r3, sp, #36	; 0x24
 8005e54:	ec49 8b10 	vmov	d0, r8, r9
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	6022      	str	r2, [r4, #0]
 8005e5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e60:	4628      	mov	r0, r5
 8005e62:	f7ff fecd 	bl	8005c00 <__cvt>
 8005e66:	9b06      	ldr	r3, [sp, #24]
 8005e68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e6a:	2b47      	cmp	r3, #71	; 0x47
 8005e6c:	4680      	mov	r8, r0
 8005e6e:	d108      	bne.n	8005e82 <_printf_float+0x142>
 8005e70:	1cc8      	adds	r0, r1, #3
 8005e72:	db02      	blt.n	8005e7a <_printf_float+0x13a>
 8005e74:	6863      	ldr	r3, [r4, #4]
 8005e76:	4299      	cmp	r1, r3
 8005e78:	dd41      	ble.n	8005efe <_printf_float+0x1be>
 8005e7a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005e7e:	fa5f fb8b 	uxtb.w	fp, fp
 8005e82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e86:	d820      	bhi.n	8005eca <_printf_float+0x18a>
 8005e88:	3901      	subs	r1, #1
 8005e8a:	465a      	mov	r2, fp
 8005e8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e90:	9109      	str	r1, [sp, #36]	; 0x24
 8005e92:	f7ff ff17 	bl	8005cc4 <__exponent>
 8005e96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e98:	1813      	adds	r3, r2, r0
 8005e9a:	2a01      	cmp	r2, #1
 8005e9c:	4681      	mov	r9, r0
 8005e9e:	6123      	str	r3, [r4, #16]
 8005ea0:	dc02      	bgt.n	8005ea8 <_printf_float+0x168>
 8005ea2:	6822      	ldr	r2, [r4, #0]
 8005ea4:	07d2      	lsls	r2, r2, #31
 8005ea6:	d501      	bpl.n	8005eac <_printf_float+0x16c>
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	6123      	str	r3, [r4, #16]
 8005eac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d09c      	beq.n	8005dee <_printf_float+0xae>
 8005eb4:	232d      	movs	r3, #45	; 0x2d
 8005eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eba:	e798      	b.n	8005dee <_printf_float+0xae>
 8005ebc:	9a06      	ldr	r2, [sp, #24]
 8005ebe:	2a47      	cmp	r2, #71	; 0x47
 8005ec0:	d1be      	bne.n	8005e40 <_printf_float+0x100>
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1bc      	bne.n	8005e40 <_printf_float+0x100>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e7b9      	b.n	8005e3e <_printf_float+0xfe>
 8005eca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005ece:	d118      	bne.n	8005f02 <_printf_float+0x1c2>
 8005ed0:	2900      	cmp	r1, #0
 8005ed2:	6863      	ldr	r3, [r4, #4]
 8005ed4:	dd0b      	ble.n	8005eee <_printf_float+0x1ae>
 8005ed6:	6121      	str	r1, [r4, #16]
 8005ed8:	b913      	cbnz	r3, 8005ee0 <_printf_float+0x1a0>
 8005eda:	6822      	ldr	r2, [r4, #0]
 8005edc:	07d0      	lsls	r0, r2, #31
 8005ede:	d502      	bpl.n	8005ee6 <_printf_float+0x1a6>
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	440b      	add	r3, r1
 8005ee4:	6123      	str	r3, [r4, #16]
 8005ee6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ee8:	f04f 0900 	mov.w	r9, #0
 8005eec:	e7de      	b.n	8005eac <_printf_float+0x16c>
 8005eee:	b913      	cbnz	r3, 8005ef6 <_printf_float+0x1b6>
 8005ef0:	6822      	ldr	r2, [r4, #0]
 8005ef2:	07d2      	lsls	r2, r2, #31
 8005ef4:	d501      	bpl.n	8005efa <_printf_float+0x1ba>
 8005ef6:	3302      	adds	r3, #2
 8005ef8:	e7f4      	b.n	8005ee4 <_printf_float+0x1a4>
 8005efa:	2301      	movs	r3, #1
 8005efc:	e7f2      	b.n	8005ee4 <_printf_float+0x1a4>
 8005efe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f04:	4299      	cmp	r1, r3
 8005f06:	db05      	blt.n	8005f14 <_printf_float+0x1d4>
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	6121      	str	r1, [r4, #16]
 8005f0c:	07d8      	lsls	r0, r3, #31
 8005f0e:	d5ea      	bpl.n	8005ee6 <_printf_float+0x1a6>
 8005f10:	1c4b      	adds	r3, r1, #1
 8005f12:	e7e7      	b.n	8005ee4 <_printf_float+0x1a4>
 8005f14:	2900      	cmp	r1, #0
 8005f16:	bfd4      	ite	le
 8005f18:	f1c1 0202 	rsble	r2, r1, #2
 8005f1c:	2201      	movgt	r2, #1
 8005f1e:	4413      	add	r3, r2
 8005f20:	e7e0      	b.n	8005ee4 <_printf_float+0x1a4>
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	055a      	lsls	r2, r3, #21
 8005f26:	d407      	bmi.n	8005f38 <_printf_float+0x1f8>
 8005f28:	6923      	ldr	r3, [r4, #16]
 8005f2a:	4642      	mov	r2, r8
 8005f2c:	4631      	mov	r1, r6
 8005f2e:	4628      	mov	r0, r5
 8005f30:	47b8      	blx	r7
 8005f32:	3001      	adds	r0, #1
 8005f34:	d12c      	bne.n	8005f90 <_printf_float+0x250>
 8005f36:	e764      	b.n	8005e02 <_printf_float+0xc2>
 8005f38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f3c:	f240 80e0 	bls.w	8006100 <_printf_float+0x3c0>
 8005f40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f44:	2200      	movs	r2, #0
 8005f46:	2300      	movs	r3, #0
 8005f48:	f7fa fdde 	bl	8000b08 <__aeabi_dcmpeq>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d034      	beq.n	8005fba <_printf_float+0x27a>
 8005f50:	4a37      	ldr	r2, [pc, #220]	; (8006030 <_printf_float+0x2f0>)
 8005f52:	2301      	movs	r3, #1
 8005f54:	4631      	mov	r1, r6
 8005f56:	4628      	mov	r0, r5
 8005f58:	47b8      	blx	r7
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	f43f af51 	beq.w	8005e02 <_printf_float+0xc2>
 8005f60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f64:	429a      	cmp	r2, r3
 8005f66:	db02      	blt.n	8005f6e <_printf_float+0x22e>
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	07d8      	lsls	r0, r3, #31
 8005f6c:	d510      	bpl.n	8005f90 <_printf_float+0x250>
 8005f6e:	ee18 3a10 	vmov	r3, s16
 8005f72:	4652      	mov	r2, sl
 8005f74:	4631      	mov	r1, r6
 8005f76:	4628      	mov	r0, r5
 8005f78:	47b8      	blx	r7
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	f43f af41 	beq.w	8005e02 <_printf_float+0xc2>
 8005f80:	f04f 0800 	mov.w	r8, #0
 8005f84:	f104 091a 	add.w	r9, r4, #26
 8005f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	4543      	cmp	r3, r8
 8005f8e:	dc09      	bgt.n	8005fa4 <_printf_float+0x264>
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	079b      	lsls	r3, r3, #30
 8005f94:	f100 8105 	bmi.w	80061a2 <_printf_float+0x462>
 8005f98:	68e0      	ldr	r0, [r4, #12]
 8005f9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f9c:	4298      	cmp	r0, r3
 8005f9e:	bfb8      	it	lt
 8005fa0:	4618      	movlt	r0, r3
 8005fa2:	e730      	b.n	8005e06 <_printf_float+0xc6>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	464a      	mov	r2, r9
 8005fa8:	4631      	mov	r1, r6
 8005faa:	4628      	mov	r0, r5
 8005fac:	47b8      	blx	r7
 8005fae:	3001      	adds	r0, #1
 8005fb0:	f43f af27 	beq.w	8005e02 <_printf_float+0xc2>
 8005fb4:	f108 0801 	add.w	r8, r8, #1
 8005fb8:	e7e6      	b.n	8005f88 <_printf_float+0x248>
 8005fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	dc39      	bgt.n	8006034 <_printf_float+0x2f4>
 8005fc0:	4a1b      	ldr	r2, [pc, #108]	; (8006030 <_printf_float+0x2f0>)
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	4631      	mov	r1, r6
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	47b8      	blx	r7
 8005fca:	3001      	adds	r0, #1
 8005fcc:	f43f af19 	beq.w	8005e02 <_printf_float+0xc2>
 8005fd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	d102      	bne.n	8005fde <_printf_float+0x29e>
 8005fd8:	6823      	ldr	r3, [r4, #0]
 8005fda:	07d9      	lsls	r1, r3, #31
 8005fdc:	d5d8      	bpl.n	8005f90 <_printf_float+0x250>
 8005fde:	ee18 3a10 	vmov	r3, s16
 8005fe2:	4652      	mov	r2, sl
 8005fe4:	4631      	mov	r1, r6
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	47b8      	blx	r7
 8005fea:	3001      	adds	r0, #1
 8005fec:	f43f af09 	beq.w	8005e02 <_printf_float+0xc2>
 8005ff0:	f04f 0900 	mov.w	r9, #0
 8005ff4:	f104 0a1a 	add.w	sl, r4, #26
 8005ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ffa:	425b      	negs	r3, r3
 8005ffc:	454b      	cmp	r3, r9
 8005ffe:	dc01      	bgt.n	8006004 <_printf_float+0x2c4>
 8006000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006002:	e792      	b.n	8005f2a <_printf_float+0x1ea>
 8006004:	2301      	movs	r3, #1
 8006006:	4652      	mov	r2, sl
 8006008:	4631      	mov	r1, r6
 800600a:	4628      	mov	r0, r5
 800600c:	47b8      	blx	r7
 800600e:	3001      	adds	r0, #1
 8006010:	f43f aef7 	beq.w	8005e02 <_printf_float+0xc2>
 8006014:	f109 0901 	add.w	r9, r9, #1
 8006018:	e7ee      	b.n	8005ff8 <_printf_float+0x2b8>
 800601a:	bf00      	nop
 800601c:	7fefffff 	.word	0x7fefffff
 8006020:	08008a40 	.word	0x08008a40
 8006024:	08008a44 	.word	0x08008a44
 8006028:	08008a4c 	.word	0x08008a4c
 800602c:	08008a48 	.word	0x08008a48
 8006030:	08008a50 	.word	0x08008a50
 8006034:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006036:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006038:	429a      	cmp	r2, r3
 800603a:	bfa8      	it	ge
 800603c:	461a      	movge	r2, r3
 800603e:	2a00      	cmp	r2, #0
 8006040:	4691      	mov	r9, r2
 8006042:	dc37      	bgt.n	80060b4 <_printf_float+0x374>
 8006044:	f04f 0b00 	mov.w	fp, #0
 8006048:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800604c:	f104 021a 	add.w	r2, r4, #26
 8006050:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006052:	9305      	str	r3, [sp, #20]
 8006054:	eba3 0309 	sub.w	r3, r3, r9
 8006058:	455b      	cmp	r3, fp
 800605a:	dc33      	bgt.n	80060c4 <_printf_float+0x384>
 800605c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006060:	429a      	cmp	r2, r3
 8006062:	db3b      	blt.n	80060dc <_printf_float+0x39c>
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	07da      	lsls	r2, r3, #31
 8006068:	d438      	bmi.n	80060dc <_printf_float+0x39c>
 800606a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800606c:	9a05      	ldr	r2, [sp, #20]
 800606e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006070:	1a9a      	subs	r2, r3, r2
 8006072:	eba3 0901 	sub.w	r9, r3, r1
 8006076:	4591      	cmp	r9, r2
 8006078:	bfa8      	it	ge
 800607a:	4691      	movge	r9, r2
 800607c:	f1b9 0f00 	cmp.w	r9, #0
 8006080:	dc35      	bgt.n	80060ee <_printf_float+0x3ae>
 8006082:	f04f 0800 	mov.w	r8, #0
 8006086:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800608a:	f104 0a1a 	add.w	sl, r4, #26
 800608e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006092:	1a9b      	subs	r3, r3, r2
 8006094:	eba3 0309 	sub.w	r3, r3, r9
 8006098:	4543      	cmp	r3, r8
 800609a:	f77f af79 	ble.w	8005f90 <_printf_float+0x250>
 800609e:	2301      	movs	r3, #1
 80060a0:	4652      	mov	r2, sl
 80060a2:	4631      	mov	r1, r6
 80060a4:	4628      	mov	r0, r5
 80060a6:	47b8      	blx	r7
 80060a8:	3001      	adds	r0, #1
 80060aa:	f43f aeaa 	beq.w	8005e02 <_printf_float+0xc2>
 80060ae:	f108 0801 	add.w	r8, r8, #1
 80060b2:	e7ec      	b.n	800608e <_printf_float+0x34e>
 80060b4:	4613      	mov	r3, r2
 80060b6:	4631      	mov	r1, r6
 80060b8:	4642      	mov	r2, r8
 80060ba:	4628      	mov	r0, r5
 80060bc:	47b8      	blx	r7
 80060be:	3001      	adds	r0, #1
 80060c0:	d1c0      	bne.n	8006044 <_printf_float+0x304>
 80060c2:	e69e      	b.n	8005e02 <_printf_float+0xc2>
 80060c4:	2301      	movs	r3, #1
 80060c6:	4631      	mov	r1, r6
 80060c8:	4628      	mov	r0, r5
 80060ca:	9205      	str	r2, [sp, #20]
 80060cc:	47b8      	blx	r7
 80060ce:	3001      	adds	r0, #1
 80060d0:	f43f ae97 	beq.w	8005e02 <_printf_float+0xc2>
 80060d4:	9a05      	ldr	r2, [sp, #20]
 80060d6:	f10b 0b01 	add.w	fp, fp, #1
 80060da:	e7b9      	b.n	8006050 <_printf_float+0x310>
 80060dc:	ee18 3a10 	vmov	r3, s16
 80060e0:	4652      	mov	r2, sl
 80060e2:	4631      	mov	r1, r6
 80060e4:	4628      	mov	r0, r5
 80060e6:	47b8      	blx	r7
 80060e8:	3001      	adds	r0, #1
 80060ea:	d1be      	bne.n	800606a <_printf_float+0x32a>
 80060ec:	e689      	b.n	8005e02 <_printf_float+0xc2>
 80060ee:	9a05      	ldr	r2, [sp, #20]
 80060f0:	464b      	mov	r3, r9
 80060f2:	4442      	add	r2, r8
 80060f4:	4631      	mov	r1, r6
 80060f6:	4628      	mov	r0, r5
 80060f8:	47b8      	blx	r7
 80060fa:	3001      	adds	r0, #1
 80060fc:	d1c1      	bne.n	8006082 <_printf_float+0x342>
 80060fe:	e680      	b.n	8005e02 <_printf_float+0xc2>
 8006100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006102:	2a01      	cmp	r2, #1
 8006104:	dc01      	bgt.n	800610a <_printf_float+0x3ca>
 8006106:	07db      	lsls	r3, r3, #31
 8006108:	d538      	bpl.n	800617c <_printf_float+0x43c>
 800610a:	2301      	movs	r3, #1
 800610c:	4642      	mov	r2, r8
 800610e:	4631      	mov	r1, r6
 8006110:	4628      	mov	r0, r5
 8006112:	47b8      	blx	r7
 8006114:	3001      	adds	r0, #1
 8006116:	f43f ae74 	beq.w	8005e02 <_printf_float+0xc2>
 800611a:	ee18 3a10 	vmov	r3, s16
 800611e:	4652      	mov	r2, sl
 8006120:	4631      	mov	r1, r6
 8006122:	4628      	mov	r0, r5
 8006124:	47b8      	blx	r7
 8006126:	3001      	adds	r0, #1
 8006128:	f43f ae6b 	beq.w	8005e02 <_printf_float+0xc2>
 800612c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006130:	2200      	movs	r2, #0
 8006132:	2300      	movs	r3, #0
 8006134:	f7fa fce8 	bl	8000b08 <__aeabi_dcmpeq>
 8006138:	b9d8      	cbnz	r0, 8006172 <_printf_float+0x432>
 800613a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800613c:	f108 0201 	add.w	r2, r8, #1
 8006140:	3b01      	subs	r3, #1
 8006142:	4631      	mov	r1, r6
 8006144:	4628      	mov	r0, r5
 8006146:	47b8      	blx	r7
 8006148:	3001      	adds	r0, #1
 800614a:	d10e      	bne.n	800616a <_printf_float+0x42a>
 800614c:	e659      	b.n	8005e02 <_printf_float+0xc2>
 800614e:	2301      	movs	r3, #1
 8006150:	4652      	mov	r2, sl
 8006152:	4631      	mov	r1, r6
 8006154:	4628      	mov	r0, r5
 8006156:	47b8      	blx	r7
 8006158:	3001      	adds	r0, #1
 800615a:	f43f ae52 	beq.w	8005e02 <_printf_float+0xc2>
 800615e:	f108 0801 	add.w	r8, r8, #1
 8006162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006164:	3b01      	subs	r3, #1
 8006166:	4543      	cmp	r3, r8
 8006168:	dcf1      	bgt.n	800614e <_printf_float+0x40e>
 800616a:	464b      	mov	r3, r9
 800616c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006170:	e6dc      	b.n	8005f2c <_printf_float+0x1ec>
 8006172:	f04f 0800 	mov.w	r8, #0
 8006176:	f104 0a1a 	add.w	sl, r4, #26
 800617a:	e7f2      	b.n	8006162 <_printf_float+0x422>
 800617c:	2301      	movs	r3, #1
 800617e:	4642      	mov	r2, r8
 8006180:	e7df      	b.n	8006142 <_printf_float+0x402>
 8006182:	2301      	movs	r3, #1
 8006184:	464a      	mov	r2, r9
 8006186:	4631      	mov	r1, r6
 8006188:	4628      	mov	r0, r5
 800618a:	47b8      	blx	r7
 800618c:	3001      	adds	r0, #1
 800618e:	f43f ae38 	beq.w	8005e02 <_printf_float+0xc2>
 8006192:	f108 0801 	add.w	r8, r8, #1
 8006196:	68e3      	ldr	r3, [r4, #12]
 8006198:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800619a:	1a5b      	subs	r3, r3, r1
 800619c:	4543      	cmp	r3, r8
 800619e:	dcf0      	bgt.n	8006182 <_printf_float+0x442>
 80061a0:	e6fa      	b.n	8005f98 <_printf_float+0x258>
 80061a2:	f04f 0800 	mov.w	r8, #0
 80061a6:	f104 0919 	add.w	r9, r4, #25
 80061aa:	e7f4      	b.n	8006196 <_printf_float+0x456>

080061ac <_printf_common>:
 80061ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061b0:	4616      	mov	r6, r2
 80061b2:	4699      	mov	r9, r3
 80061b4:	688a      	ldr	r2, [r1, #8]
 80061b6:	690b      	ldr	r3, [r1, #16]
 80061b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061bc:	4293      	cmp	r3, r2
 80061be:	bfb8      	it	lt
 80061c0:	4613      	movlt	r3, r2
 80061c2:	6033      	str	r3, [r6, #0]
 80061c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061c8:	4607      	mov	r7, r0
 80061ca:	460c      	mov	r4, r1
 80061cc:	b10a      	cbz	r2, 80061d2 <_printf_common+0x26>
 80061ce:	3301      	adds	r3, #1
 80061d0:	6033      	str	r3, [r6, #0]
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	0699      	lsls	r1, r3, #26
 80061d6:	bf42      	ittt	mi
 80061d8:	6833      	ldrmi	r3, [r6, #0]
 80061da:	3302      	addmi	r3, #2
 80061dc:	6033      	strmi	r3, [r6, #0]
 80061de:	6825      	ldr	r5, [r4, #0]
 80061e0:	f015 0506 	ands.w	r5, r5, #6
 80061e4:	d106      	bne.n	80061f4 <_printf_common+0x48>
 80061e6:	f104 0a19 	add.w	sl, r4, #25
 80061ea:	68e3      	ldr	r3, [r4, #12]
 80061ec:	6832      	ldr	r2, [r6, #0]
 80061ee:	1a9b      	subs	r3, r3, r2
 80061f0:	42ab      	cmp	r3, r5
 80061f2:	dc26      	bgt.n	8006242 <_printf_common+0x96>
 80061f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061f8:	1e13      	subs	r3, r2, #0
 80061fa:	6822      	ldr	r2, [r4, #0]
 80061fc:	bf18      	it	ne
 80061fe:	2301      	movne	r3, #1
 8006200:	0692      	lsls	r2, r2, #26
 8006202:	d42b      	bmi.n	800625c <_printf_common+0xb0>
 8006204:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006208:	4649      	mov	r1, r9
 800620a:	4638      	mov	r0, r7
 800620c:	47c0      	blx	r8
 800620e:	3001      	adds	r0, #1
 8006210:	d01e      	beq.n	8006250 <_printf_common+0xa4>
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	68e5      	ldr	r5, [r4, #12]
 8006216:	6832      	ldr	r2, [r6, #0]
 8006218:	f003 0306 	and.w	r3, r3, #6
 800621c:	2b04      	cmp	r3, #4
 800621e:	bf08      	it	eq
 8006220:	1aad      	subeq	r5, r5, r2
 8006222:	68a3      	ldr	r3, [r4, #8]
 8006224:	6922      	ldr	r2, [r4, #16]
 8006226:	bf0c      	ite	eq
 8006228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800622c:	2500      	movne	r5, #0
 800622e:	4293      	cmp	r3, r2
 8006230:	bfc4      	itt	gt
 8006232:	1a9b      	subgt	r3, r3, r2
 8006234:	18ed      	addgt	r5, r5, r3
 8006236:	2600      	movs	r6, #0
 8006238:	341a      	adds	r4, #26
 800623a:	42b5      	cmp	r5, r6
 800623c:	d11a      	bne.n	8006274 <_printf_common+0xc8>
 800623e:	2000      	movs	r0, #0
 8006240:	e008      	b.n	8006254 <_printf_common+0xa8>
 8006242:	2301      	movs	r3, #1
 8006244:	4652      	mov	r2, sl
 8006246:	4649      	mov	r1, r9
 8006248:	4638      	mov	r0, r7
 800624a:	47c0      	blx	r8
 800624c:	3001      	adds	r0, #1
 800624e:	d103      	bne.n	8006258 <_printf_common+0xac>
 8006250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006258:	3501      	adds	r5, #1
 800625a:	e7c6      	b.n	80061ea <_printf_common+0x3e>
 800625c:	18e1      	adds	r1, r4, r3
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	2030      	movs	r0, #48	; 0x30
 8006262:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006266:	4422      	add	r2, r4
 8006268:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800626c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006270:	3302      	adds	r3, #2
 8006272:	e7c7      	b.n	8006204 <_printf_common+0x58>
 8006274:	2301      	movs	r3, #1
 8006276:	4622      	mov	r2, r4
 8006278:	4649      	mov	r1, r9
 800627a:	4638      	mov	r0, r7
 800627c:	47c0      	blx	r8
 800627e:	3001      	adds	r0, #1
 8006280:	d0e6      	beq.n	8006250 <_printf_common+0xa4>
 8006282:	3601      	adds	r6, #1
 8006284:	e7d9      	b.n	800623a <_printf_common+0x8e>
	...

08006288 <_printf_i>:
 8006288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800628c:	7e0f      	ldrb	r7, [r1, #24]
 800628e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006290:	2f78      	cmp	r7, #120	; 0x78
 8006292:	4691      	mov	r9, r2
 8006294:	4680      	mov	r8, r0
 8006296:	460c      	mov	r4, r1
 8006298:	469a      	mov	sl, r3
 800629a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800629e:	d807      	bhi.n	80062b0 <_printf_i+0x28>
 80062a0:	2f62      	cmp	r7, #98	; 0x62
 80062a2:	d80a      	bhi.n	80062ba <_printf_i+0x32>
 80062a4:	2f00      	cmp	r7, #0
 80062a6:	f000 80d8 	beq.w	800645a <_printf_i+0x1d2>
 80062aa:	2f58      	cmp	r7, #88	; 0x58
 80062ac:	f000 80a3 	beq.w	80063f6 <_printf_i+0x16e>
 80062b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062b8:	e03a      	b.n	8006330 <_printf_i+0xa8>
 80062ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062be:	2b15      	cmp	r3, #21
 80062c0:	d8f6      	bhi.n	80062b0 <_printf_i+0x28>
 80062c2:	a101      	add	r1, pc, #4	; (adr r1, 80062c8 <_printf_i+0x40>)
 80062c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062c8:	08006321 	.word	0x08006321
 80062cc:	08006335 	.word	0x08006335
 80062d0:	080062b1 	.word	0x080062b1
 80062d4:	080062b1 	.word	0x080062b1
 80062d8:	080062b1 	.word	0x080062b1
 80062dc:	080062b1 	.word	0x080062b1
 80062e0:	08006335 	.word	0x08006335
 80062e4:	080062b1 	.word	0x080062b1
 80062e8:	080062b1 	.word	0x080062b1
 80062ec:	080062b1 	.word	0x080062b1
 80062f0:	080062b1 	.word	0x080062b1
 80062f4:	08006441 	.word	0x08006441
 80062f8:	08006365 	.word	0x08006365
 80062fc:	08006423 	.word	0x08006423
 8006300:	080062b1 	.word	0x080062b1
 8006304:	080062b1 	.word	0x080062b1
 8006308:	08006463 	.word	0x08006463
 800630c:	080062b1 	.word	0x080062b1
 8006310:	08006365 	.word	0x08006365
 8006314:	080062b1 	.word	0x080062b1
 8006318:	080062b1 	.word	0x080062b1
 800631c:	0800642b 	.word	0x0800642b
 8006320:	682b      	ldr	r3, [r5, #0]
 8006322:	1d1a      	adds	r2, r3, #4
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	602a      	str	r2, [r5, #0]
 8006328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800632c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006330:	2301      	movs	r3, #1
 8006332:	e0a3      	b.n	800647c <_printf_i+0x1f4>
 8006334:	6820      	ldr	r0, [r4, #0]
 8006336:	6829      	ldr	r1, [r5, #0]
 8006338:	0606      	lsls	r6, r0, #24
 800633a:	f101 0304 	add.w	r3, r1, #4
 800633e:	d50a      	bpl.n	8006356 <_printf_i+0xce>
 8006340:	680e      	ldr	r6, [r1, #0]
 8006342:	602b      	str	r3, [r5, #0]
 8006344:	2e00      	cmp	r6, #0
 8006346:	da03      	bge.n	8006350 <_printf_i+0xc8>
 8006348:	232d      	movs	r3, #45	; 0x2d
 800634a:	4276      	negs	r6, r6
 800634c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006350:	485e      	ldr	r0, [pc, #376]	; (80064cc <_printf_i+0x244>)
 8006352:	230a      	movs	r3, #10
 8006354:	e019      	b.n	800638a <_printf_i+0x102>
 8006356:	680e      	ldr	r6, [r1, #0]
 8006358:	602b      	str	r3, [r5, #0]
 800635a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800635e:	bf18      	it	ne
 8006360:	b236      	sxthne	r6, r6
 8006362:	e7ef      	b.n	8006344 <_printf_i+0xbc>
 8006364:	682b      	ldr	r3, [r5, #0]
 8006366:	6820      	ldr	r0, [r4, #0]
 8006368:	1d19      	adds	r1, r3, #4
 800636a:	6029      	str	r1, [r5, #0]
 800636c:	0601      	lsls	r1, r0, #24
 800636e:	d501      	bpl.n	8006374 <_printf_i+0xec>
 8006370:	681e      	ldr	r6, [r3, #0]
 8006372:	e002      	b.n	800637a <_printf_i+0xf2>
 8006374:	0646      	lsls	r6, r0, #25
 8006376:	d5fb      	bpl.n	8006370 <_printf_i+0xe8>
 8006378:	881e      	ldrh	r6, [r3, #0]
 800637a:	4854      	ldr	r0, [pc, #336]	; (80064cc <_printf_i+0x244>)
 800637c:	2f6f      	cmp	r7, #111	; 0x6f
 800637e:	bf0c      	ite	eq
 8006380:	2308      	moveq	r3, #8
 8006382:	230a      	movne	r3, #10
 8006384:	2100      	movs	r1, #0
 8006386:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800638a:	6865      	ldr	r5, [r4, #4]
 800638c:	60a5      	str	r5, [r4, #8]
 800638e:	2d00      	cmp	r5, #0
 8006390:	bfa2      	ittt	ge
 8006392:	6821      	ldrge	r1, [r4, #0]
 8006394:	f021 0104 	bicge.w	r1, r1, #4
 8006398:	6021      	strge	r1, [r4, #0]
 800639a:	b90e      	cbnz	r6, 80063a0 <_printf_i+0x118>
 800639c:	2d00      	cmp	r5, #0
 800639e:	d04d      	beq.n	800643c <_printf_i+0x1b4>
 80063a0:	4615      	mov	r5, r2
 80063a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80063a6:	fb03 6711 	mls	r7, r3, r1, r6
 80063aa:	5dc7      	ldrb	r7, [r0, r7]
 80063ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063b0:	4637      	mov	r7, r6
 80063b2:	42bb      	cmp	r3, r7
 80063b4:	460e      	mov	r6, r1
 80063b6:	d9f4      	bls.n	80063a2 <_printf_i+0x11a>
 80063b8:	2b08      	cmp	r3, #8
 80063ba:	d10b      	bne.n	80063d4 <_printf_i+0x14c>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	07de      	lsls	r6, r3, #31
 80063c0:	d508      	bpl.n	80063d4 <_printf_i+0x14c>
 80063c2:	6923      	ldr	r3, [r4, #16]
 80063c4:	6861      	ldr	r1, [r4, #4]
 80063c6:	4299      	cmp	r1, r3
 80063c8:	bfde      	ittt	le
 80063ca:	2330      	movle	r3, #48	; 0x30
 80063cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80063d4:	1b52      	subs	r2, r2, r5
 80063d6:	6122      	str	r2, [r4, #16]
 80063d8:	f8cd a000 	str.w	sl, [sp]
 80063dc:	464b      	mov	r3, r9
 80063de:	aa03      	add	r2, sp, #12
 80063e0:	4621      	mov	r1, r4
 80063e2:	4640      	mov	r0, r8
 80063e4:	f7ff fee2 	bl	80061ac <_printf_common>
 80063e8:	3001      	adds	r0, #1
 80063ea:	d14c      	bne.n	8006486 <_printf_i+0x1fe>
 80063ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063f0:	b004      	add	sp, #16
 80063f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f6:	4835      	ldr	r0, [pc, #212]	; (80064cc <_printf_i+0x244>)
 80063f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80063fc:	6829      	ldr	r1, [r5, #0]
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	f851 6b04 	ldr.w	r6, [r1], #4
 8006404:	6029      	str	r1, [r5, #0]
 8006406:	061d      	lsls	r5, r3, #24
 8006408:	d514      	bpl.n	8006434 <_printf_i+0x1ac>
 800640a:	07df      	lsls	r7, r3, #31
 800640c:	bf44      	itt	mi
 800640e:	f043 0320 	orrmi.w	r3, r3, #32
 8006412:	6023      	strmi	r3, [r4, #0]
 8006414:	b91e      	cbnz	r6, 800641e <_printf_i+0x196>
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	f023 0320 	bic.w	r3, r3, #32
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	2310      	movs	r3, #16
 8006420:	e7b0      	b.n	8006384 <_printf_i+0xfc>
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	f043 0320 	orr.w	r3, r3, #32
 8006428:	6023      	str	r3, [r4, #0]
 800642a:	2378      	movs	r3, #120	; 0x78
 800642c:	4828      	ldr	r0, [pc, #160]	; (80064d0 <_printf_i+0x248>)
 800642e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006432:	e7e3      	b.n	80063fc <_printf_i+0x174>
 8006434:	0659      	lsls	r1, r3, #25
 8006436:	bf48      	it	mi
 8006438:	b2b6      	uxthmi	r6, r6
 800643a:	e7e6      	b.n	800640a <_printf_i+0x182>
 800643c:	4615      	mov	r5, r2
 800643e:	e7bb      	b.n	80063b8 <_printf_i+0x130>
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	6826      	ldr	r6, [r4, #0]
 8006444:	6961      	ldr	r1, [r4, #20]
 8006446:	1d18      	adds	r0, r3, #4
 8006448:	6028      	str	r0, [r5, #0]
 800644a:	0635      	lsls	r5, r6, #24
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	d501      	bpl.n	8006454 <_printf_i+0x1cc>
 8006450:	6019      	str	r1, [r3, #0]
 8006452:	e002      	b.n	800645a <_printf_i+0x1d2>
 8006454:	0670      	lsls	r0, r6, #25
 8006456:	d5fb      	bpl.n	8006450 <_printf_i+0x1c8>
 8006458:	8019      	strh	r1, [r3, #0]
 800645a:	2300      	movs	r3, #0
 800645c:	6123      	str	r3, [r4, #16]
 800645e:	4615      	mov	r5, r2
 8006460:	e7ba      	b.n	80063d8 <_printf_i+0x150>
 8006462:	682b      	ldr	r3, [r5, #0]
 8006464:	1d1a      	adds	r2, r3, #4
 8006466:	602a      	str	r2, [r5, #0]
 8006468:	681d      	ldr	r5, [r3, #0]
 800646a:	6862      	ldr	r2, [r4, #4]
 800646c:	2100      	movs	r1, #0
 800646e:	4628      	mov	r0, r5
 8006470:	f7f9 fed6 	bl	8000220 <memchr>
 8006474:	b108      	cbz	r0, 800647a <_printf_i+0x1f2>
 8006476:	1b40      	subs	r0, r0, r5
 8006478:	6060      	str	r0, [r4, #4]
 800647a:	6863      	ldr	r3, [r4, #4]
 800647c:	6123      	str	r3, [r4, #16]
 800647e:	2300      	movs	r3, #0
 8006480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006484:	e7a8      	b.n	80063d8 <_printf_i+0x150>
 8006486:	6923      	ldr	r3, [r4, #16]
 8006488:	462a      	mov	r2, r5
 800648a:	4649      	mov	r1, r9
 800648c:	4640      	mov	r0, r8
 800648e:	47d0      	blx	sl
 8006490:	3001      	adds	r0, #1
 8006492:	d0ab      	beq.n	80063ec <_printf_i+0x164>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	079b      	lsls	r3, r3, #30
 8006498:	d413      	bmi.n	80064c2 <_printf_i+0x23a>
 800649a:	68e0      	ldr	r0, [r4, #12]
 800649c:	9b03      	ldr	r3, [sp, #12]
 800649e:	4298      	cmp	r0, r3
 80064a0:	bfb8      	it	lt
 80064a2:	4618      	movlt	r0, r3
 80064a4:	e7a4      	b.n	80063f0 <_printf_i+0x168>
 80064a6:	2301      	movs	r3, #1
 80064a8:	4632      	mov	r2, r6
 80064aa:	4649      	mov	r1, r9
 80064ac:	4640      	mov	r0, r8
 80064ae:	47d0      	blx	sl
 80064b0:	3001      	adds	r0, #1
 80064b2:	d09b      	beq.n	80063ec <_printf_i+0x164>
 80064b4:	3501      	adds	r5, #1
 80064b6:	68e3      	ldr	r3, [r4, #12]
 80064b8:	9903      	ldr	r1, [sp, #12]
 80064ba:	1a5b      	subs	r3, r3, r1
 80064bc:	42ab      	cmp	r3, r5
 80064be:	dcf2      	bgt.n	80064a6 <_printf_i+0x21e>
 80064c0:	e7eb      	b.n	800649a <_printf_i+0x212>
 80064c2:	2500      	movs	r5, #0
 80064c4:	f104 0619 	add.w	r6, r4, #25
 80064c8:	e7f5      	b.n	80064b6 <_printf_i+0x22e>
 80064ca:	bf00      	nop
 80064cc:	08008a52 	.word	0x08008a52
 80064d0:	08008a63 	.word	0x08008a63

080064d4 <siprintf>:
 80064d4:	b40e      	push	{r1, r2, r3}
 80064d6:	b500      	push	{lr}
 80064d8:	b09c      	sub	sp, #112	; 0x70
 80064da:	ab1d      	add	r3, sp, #116	; 0x74
 80064dc:	9002      	str	r0, [sp, #8]
 80064de:	9006      	str	r0, [sp, #24]
 80064e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064e4:	4809      	ldr	r0, [pc, #36]	; (800650c <siprintf+0x38>)
 80064e6:	9107      	str	r1, [sp, #28]
 80064e8:	9104      	str	r1, [sp, #16]
 80064ea:	4909      	ldr	r1, [pc, #36]	; (8006510 <siprintf+0x3c>)
 80064ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80064f0:	9105      	str	r1, [sp, #20]
 80064f2:	6800      	ldr	r0, [r0, #0]
 80064f4:	9301      	str	r3, [sp, #4]
 80064f6:	a902      	add	r1, sp, #8
 80064f8:	f001 fb78 	bl	8007bec <_svfiprintf_r>
 80064fc:	9b02      	ldr	r3, [sp, #8]
 80064fe:	2200      	movs	r2, #0
 8006500:	701a      	strb	r2, [r3, #0]
 8006502:	b01c      	add	sp, #112	; 0x70
 8006504:	f85d eb04 	ldr.w	lr, [sp], #4
 8006508:	b003      	add	sp, #12
 800650a:	4770      	bx	lr
 800650c:	20000014 	.word	0x20000014
 8006510:	ffff0208 	.word	0xffff0208

08006514 <quorem>:
 8006514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006518:	6903      	ldr	r3, [r0, #16]
 800651a:	690c      	ldr	r4, [r1, #16]
 800651c:	42a3      	cmp	r3, r4
 800651e:	4607      	mov	r7, r0
 8006520:	f2c0 8081 	blt.w	8006626 <quorem+0x112>
 8006524:	3c01      	subs	r4, #1
 8006526:	f101 0814 	add.w	r8, r1, #20
 800652a:	f100 0514 	add.w	r5, r0, #20
 800652e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006532:	9301      	str	r3, [sp, #4]
 8006534:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006538:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800653c:	3301      	adds	r3, #1
 800653e:	429a      	cmp	r2, r3
 8006540:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006544:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006548:	fbb2 f6f3 	udiv	r6, r2, r3
 800654c:	d331      	bcc.n	80065b2 <quorem+0x9e>
 800654e:	f04f 0e00 	mov.w	lr, #0
 8006552:	4640      	mov	r0, r8
 8006554:	46ac      	mov	ip, r5
 8006556:	46f2      	mov	sl, lr
 8006558:	f850 2b04 	ldr.w	r2, [r0], #4
 800655c:	b293      	uxth	r3, r2
 800655e:	fb06 e303 	mla	r3, r6, r3, lr
 8006562:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006566:	b29b      	uxth	r3, r3
 8006568:	ebaa 0303 	sub.w	r3, sl, r3
 800656c:	f8dc a000 	ldr.w	sl, [ip]
 8006570:	0c12      	lsrs	r2, r2, #16
 8006572:	fa13 f38a 	uxtah	r3, r3, sl
 8006576:	fb06 e202 	mla	r2, r6, r2, lr
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	9b00      	ldr	r3, [sp, #0]
 800657e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006582:	b292      	uxth	r2, r2
 8006584:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006588:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800658c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006590:	4581      	cmp	r9, r0
 8006592:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006596:	f84c 3b04 	str.w	r3, [ip], #4
 800659a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800659e:	d2db      	bcs.n	8006558 <quorem+0x44>
 80065a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80065a4:	b92b      	cbnz	r3, 80065b2 <quorem+0x9e>
 80065a6:	9b01      	ldr	r3, [sp, #4]
 80065a8:	3b04      	subs	r3, #4
 80065aa:	429d      	cmp	r5, r3
 80065ac:	461a      	mov	r2, r3
 80065ae:	d32e      	bcc.n	800660e <quorem+0xfa>
 80065b0:	613c      	str	r4, [r7, #16]
 80065b2:	4638      	mov	r0, r7
 80065b4:	f001 f8c6 	bl	8007744 <__mcmp>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	db24      	blt.n	8006606 <quorem+0xf2>
 80065bc:	3601      	adds	r6, #1
 80065be:	4628      	mov	r0, r5
 80065c0:	f04f 0c00 	mov.w	ip, #0
 80065c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80065c8:	f8d0 e000 	ldr.w	lr, [r0]
 80065cc:	b293      	uxth	r3, r2
 80065ce:	ebac 0303 	sub.w	r3, ip, r3
 80065d2:	0c12      	lsrs	r2, r2, #16
 80065d4:	fa13 f38e 	uxtah	r3, r3, lr
 80065d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80065dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065e6:	45c1      	cmp	r9, r8
 80065e8:	f840 3b04 	str.w	r3, [r0], #4
 80065ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80065f0:	d2e8      	bcs.n	80065c4 <quorem+0xb0>
 80065f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065fa:	b922      	cbnz	r2, 8006606 <quorem+0xf2>
 80065fc:	3b04      	subs	r3, #4
 80065fe:	429d      	cmp	r5, r3
 8006600:	461a      	mov	r2, r3
 8006602:	d30a      	bcc.n	800661a <quorem+0x106>
 8006604:	613c      	str	r4, [r7, #16]
 8006606:	4630      	mov	r0, r6
 8006608:	b003      	add	sp, #12
 800660a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660e:	6812      	ldr	r2, [r2, #0]
 8006610:	3b04      	subs	r3, #4
 8006612:	2a00      	cmp	r2, #0
 8006614:	d1cc      	bne.n	80065b0 <quorem+0x9c>
 8006616:	3c01      	subs	r4, #1
 8006618:	e7c7      	b.n	80065aa <quorem+0x96>
 800661a:	6812      	ldr	r2, [r2, #0]
 800661c:	3b04      	subs	r3, #4
 800661e:	2a00      	cmp	r2, #0
 8006620:	d1f0      	bne.n	8006604 <quorem+0xf0>
 8006622:	3c01      	subs	r4, #1
 8006624:	e7eb      	b.n	80065fe <quorem+0xea>
 8006626:	2000      	movs	r0, #0
 8006628:	e7ee      	b.n	8006608 <quorem+0xf4>
 800662a:	0000      	movs	r0, r0
 800662c:	0000      	movs	r0, r0
	...

08006630 <_dtoa_r>:
 8006630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	ed2d 8b04 	vpush	{d8-d9}
 8006638:	ec57 6b10 	vmov	r6, r7, d0
 800663c:	b093      	sub	sp, #76	; 0x4c
 800663e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006640:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006644:	9106      	str	r1, [sp, #24]
 8006646:	ee10 aa10 	vmov	sl, s0
 800664a:	4604      	mov	r4, r0
 800664c:	9209      	str	r2, [sp, #36]	; 0x24
 800664e:	930c      	str	r3, [sp, #48]	; 0x30
 8006650:	46bb      	mov	fp, r7
 8006652:	b975      	cbnz	r5, 8006672 <_dtoa_r+0x42>
 8006654:	2010      	movs	r0, #16
 8006656:	f000 fddd 	bl	8007214 <malloc>
 800665a:	4602      	mov	r2, r0
 800665c:	6260      	str	r0, [r4, #36]	; 0x24
 800665e:	b920      	cbnz	r0, 800666a <_dtoa_r+0x3a>
 8006660:	4ba7      	ldr	r3, [pc, #668]	; (8006900 <_dtoa_r+0x2d0>)
 8006662:	21ea      	movs	r1, #234	; 0xea
 8006664:	48a7      	ldr	r0, [pc, #668]	; (8006904 <_dtoa_r+0x2d4>)
 8006666:	f001 fbd1 	bl	8007e0c <__assert_func>
 800666a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800666e:	6005      	str	r5, [r0, #0]
 8006670:	60c5      	str	r5, [r0, #12]
 8006672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006674:	6819      	ldr	r1, [r3, #0]
 8006676:	b151      	cbz	r1, 800668e <_dtoa_r+0x5e>
 8006678:	685a      	ldr	r2, [r3, #4]
 800667a:	604a      	str	r2, [r1, #4]
 800667c:	2301      	movs	r3, #1
 800667e:	4093      	lsls	r3, r2
 8006680:	608b      	str	r3, [r1, #8]
 8006682:	4620      	mov	r0, r4
 8006684:	f000 fe1c 	bl	80072c0 <_Bfree>
 8006688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800668a:	2200      	movs	r2, #0
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	1e3b      	subs	r3, r7, #0
 8006690:	bfaa      	itet	ge
 8006692:	2300      	movge	r3, #0
 8006694:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006698:	f8c8 3000 	strge.w	r3, [r8]
 800669c:	4b9a      	ldr	r3, [pc, #616]	; (8006908 <_dtoa_r+0x2d8>)
 800669e:	bfbc      	itt	lt
 80066a0:	2201      	movlt	r2, #1
 80066a2:	f8c8 2000 	strlt.w	r2, [r8]
 80066a6:	ea33 030b 	bics.w	r3, r3, fp
 80066aa:	d11b      	bne.n	80066e4 <_dtoa_r+0xb4>
 80066ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066b8:	4333      	orrs	r3, r6
 80066ba:	f000 8592 	beq.w	80071e2 <_dtoa_r+0xbb2>
 80066be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066c0:	b963      	cbnz	r3, 80066dc <_dtoa_r+0xac>
 80066c2:	4b92      	ldr	r3, [pc, #584]	; (800690c <_dtoa_r+0x2dc>)
 80066c4:	e022      	b.n	800670c <_dtoa_r+0xdc>
 80066c6:	4b92      	ldr	r3, [pc, #584]	; (8006910 <_dtoa_r+0x2e0>)
 80066c8:	9301      	str	r3, [sp, #4]
 80066ca:	3308      	adds	r3, #8
 80066cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066ce:	6013      	str	r3, [r2, #0]
 80066d0:	9801      	ldr	r0, [sp, #4]
 80066d2:	b013      	add	sp, #76	; 0x4c
 80066d4:	ecbd 8b04 	vpop	{d8-d9}
 80066d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066dc:	4b8b      	ldr	r3, [pc, #556]	; (800690c <_dtoa_r+0x2dc>)
 80066de:	9301      	str	r3, [sp, #4]
 80066e0:	3303      	adds	r3, #3
 80066e2:	e7f3      	b.n	80066cc <_dtoa_r+0x9c>
 80066e4:	2200      	movs	r2, #0
 80066e6:	2300      	movs	r3, #0
 80066e8:	4650      	mov	r0, sl
 80066ea:	4659      	mov	r1, fp
 80066ec:	f7fa fa0c 	bl	8000b08 <__aeabi_dcmpeq>
 80066f0:	ec4b ab19 	vmov	d9, sl, fp
 80066f4:	4680      	mov	r8, r0
 80066f6:	b158      	cbz	r0, 8006710 <_dtoa_r+0xe0>
 80066f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066fa:	2301      	movs	r3, #1
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 856b 	beq.w	80071dc <_dtoa_r+0xbac>
 8006706:	4883      	ldr	r0, [pc, #524]	; (8006914 <_dtoa_r+0x2e4>)
 8006708:	6018      	str	r0, [r3, #0]
 800670a:	1e43      	subs	r3, r0, #1
 800670c:	9301      	str	r3, [sp, #4]
 800670e:	e7df      	b.n	80066d0 <_dtoa_r+0xa0>
 8006710:	ec4b ab10 	vmov	d0, sl, fp
 8006714:	aa10      	add	r2, sp, #64	; 0x40
 8006716:	a911      	add	r1, sp, #68	; 0x44
 8006718:	4620      	mov	r0, r4
 800671a:	f001 f8b9 	bl	8007890 <__d2b>
 800671e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006722:	ee08 0a10 	vmov	s16, r0
 8006726:	2d00      	cmp	r5, #0
 8006728:	f000 8084 	beq.w	8006834 <_dtoa_r+0x204>
 800672c:	ee19 3a90 	vmov	r3, s19
 8006730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006734:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006738:	4656      	mov	r6, sl
 800673a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800673e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006742:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006746:	4b74      	ldr	r3, [pc, #464]	; (8006918 <_dtoa_r+0x2e8>)
 8006748:	2200      	movs	r2, #0
 800674a:	4630      	mov	r0, r6
 800674c:	4639      	mov	r1, r7
 800674e:	f7f9 fdbb 	bl	80002c8 <__aeabi_dsub>
 8006752:	a365      	add	r3, pc, #404	; (adr r3, 80068e8 <_dtoa_r+0x2b8>)
 8006754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006758:	f7f9 ff6e 	bl	8000638 <__aeabi_dmul>
 800675c:	a364      	add	r3, pc, #400	; (adr r3, 80068f0 <_dtoa_r+0x2c0>)
 800675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006762:	f7f9 fdb3 	bl	80002cc <__adddf3>
 8006766:	4606      	mov	r6, r0
 8006768:	4628      	mov	r0, r5
 800676a:	460f      	mov	r7, r1
 800676c:	f7f9 fefa 	bl	8000564 <__aeabi_i2d>
 8006770:	a361      	add	r3, pc, #388	; (adr r3, 80068f8 <_dtoa_r+0x2c8>)
 8006772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006776:	f7f9 ff5f 	bl	8000638 <__aeabi_dmul>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	4630      	mov	r0, r6
 8006780:	4639      	mov	r1, r7
 8006782:	f7f9 fda3 	bl	80002cc <__adddf3>
 8006786:	4606      	mov	r6, r0
 8006788:	460f      	mov	r7, r1
 800678a:	f7fa fa05 	bl	8000b98 <__aeabi_d2iz>
 800678e:	2200      	movs	r2, #0
 8006790:	9000      	str	r0, [sp, #0]
 8006792:	2300      	movs	r3, #0
 8006794:	4630      	mov	r0, r6
 8006796:	4639      	mov	r1, r7
 8006798:	f7fa f9c0 	bl	8000b1c <__aeabi_dcmplt>
 800679c:	b150      	cbz	r0, 80067b4 <_dtoa_r+0x184>
 800679e:	9800      	ldr	r0, [sp, #0]
 80067a0:	f7f9 fee0 	bl	8000564 <__aeabi_i2d>
 80067a4:	4632      	mov	r2, r6
 80067a6:	463b      	mov	r3, r7
 80067a8:	f7fa f9ae 	bl	8000b08 <__aeabi_dcmpeq>
 80067ac:	b910      	cbnz	r0, 80067b4 <_dtoa_r+0x184>
 80067ae:	9b00      	ldr	r3, [sp, #0]
 80067b0:	3b01      	subs	r3, #1
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	9b00      	ldr	r3, [sp, #0]
 80067b6:	2b16      	cmp	r3, #22
 80067b8:	d85a      	bhi.n	8006870 <_dtoa_r+0x240>
 80067ba:	9a00      	ldr	r2, [sp, #0]
 80067bc:	4b57      	ldr	r3, [pc, #348]	; (800691c <_dtoa_r+0x2ec>)
 80067be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c6:	ec51 0b19 	vmov	r0, r1, d9
 80067ca:	f7fa f9a7 	bl	8000b1c <__aeabi_dcmplt>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d050      	beq.n	8006874 <_dtoa_r+0x244>
 80067d2:	9b00      	ldr	r3, [sp, #0]
 80067d4:	3b01      	subs	r3, #1
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	2300      	movs	r3, #0
 80067da:	930b      	str	r3, [sp, #44]	; 0x2c
 80067dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067de:	1b5d      	subs	r5, r3, r5
 80067e0:	1e6b      	subs	r3, r5, #1
 80067e2:	9305      	str	r3, [sp, #20]
 80067e4:	bf45      	ittet	mi
 80067e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80067ea:	9304      	strmi	r3, [sp, #16]
 80067ec:	2300      	movpl	r3, #0
 80067ee:	2300      	movmi	r3, #0
 80067f0:	bf4c      	ite	mi
 80067f2:	9305      	strmi	r3, [sp, #20]
 80067f4:	9304      	strpl	r3, [sp, #16]
 80067f6:	9b00      	ldr	r3, [sp, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	db3d      	blt.n	8006878 <_dtoa_r+0x248>
 80067fc:	9b05      	ldr	r3, [sp, #20]
 80067fe:	9a00      	ldr	r2, [sp, #0]
 8006800:	920a      	str	r2, [sp, #40]	; 0x28
 8006802:	4413      	add	r3, r2
 8006804:	9305      	str	r3, [sp, #20]
 8006806:	2300      	movs	r3, #0
 8006808:	9307      	str	r3, [sp, #28]
 800680a:	9b06      	ldr	r3, [sp, #24]
 800680c:	2b09      	cmp	r3, #9
 800680e:	f200 8089 	bhi.w	8006924 <_dtoa_r+0x2f4>
 8006812:	2b05      	cmp	r3, #5
 8006814:	bfc4      	itt	gt
 8006816:	3b04      	subgt	r3, #4
 8006818:	9306      	strgt	r3, [sp, #24]
 800681a:	9b06      	ldr	r3, [sp, #24]
 800681c:	f1a3 0302 	sub.w	r3, r3, #2
 8006820:	bfcc      	ite	gt
 8006822:	2500      	movgt	r5, #0
 8006824:	2501      	movle	r5, #1
 8006826:	2b03      	cmp	r3, #3
 8006828:	f200 8087 	bhi.w	800693a <_dtoa_r+0x30a>
 800682c:	e8df f003 	tbb	[pc, r3]
 8006830:	59383a2d 	.word	0x59383a2d
 8006834:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006838:	441d      	add	r5, r3
 800683a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800683e:	2b20      	cmp	r3, #32
 8006840:	bfc1      	itttt	gt
 8006842:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006846:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800684a:	fa0b f303 	lslgt.w	r3, fp, r3
 800684e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006852:	bfda      	itte	le
 8006854:	f1c3 0320 	rsble	r3, r3, #32
 8006858:	fa06 f003 	lslle.w	r0, r6, r3
 800685c:	4318      	orrgt	r0, r3
 800685e:	f7f9 fe71 	bl	8000544 <__aeabi_ui2d>
 8006862:	2301      	movs	r3, #1
 8006864:	4606      	mov	r6, r0
 8006866:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800686a:	3d01      	subs	r5, #1
 800686c:	930e      	str	r3, [sp, #56]	; 0x38
 800686e:	e76a      	b.n	8006746 <_dtoa_r+0x116>
 8006870:	2301      	movs	r3, #1
 8006872:	e7b2      	b.n	80067da <_dtoa_r+0x1aa>
 8006874:	900b      	str	r0, [sp, #44]	; 0x2c
 8006876:	e7b1      	b.n	80067dc <_dtoa_r+0x1ac>
 8006878:	9b04      	ldr	r3, [sp, #16]
 800687a:	9a00      	ldr	r2, [sp, #0]
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	9304      	str	r3, [sp, #16]
 8006880:	4253      	negs	r3, r2
 8006882:	9307      	str	r3, [sp, #28]
 8006884:	2300      	movs	r3, #0
 8006886:	930a      	str	r3, [sp, #40]	; 0x28
 8006888:	e7bf      	b.n	800680a <_dtoa_r+0x1da>
 800688a:	2300      	movs	r3, #0
 800688c:	9308      	str	r3, [sp, #32]
 800688e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006890:	2b00      	cmp	r3, #0
 8006892:	dc55      	bgt.n	8006940 <_dtoa_r+0x310>
 8006894:	2301      	movs	r3, #1
 8006896:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800689a:	461a      	mov	r2, r3
 800689c:	9209      	str	r2, [sp, #36]	; 0x24
 800689e:	e00c      	b.n	80068ba <_dtoa_r+0x28a>
 80068a0:	2301      	movs	r3, #1
 80068a2:	e7f3      	b.n	800688c <_dtoa_r+0x25c>
 80068a4:	2300      	movs	r3, #0
 80068a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068a8:	9308      	str	r3, [sp, #32]
 80068aa:	9b00      	ldr	r3, [sp, #0]
 80068ac:	4413      	add	r3, r2
 80068ae:	9302      	str	r3, [sp, #8]
 80068b0:	3301      	adds	r3, #1
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	9303      	str	r3, [sp, #12]
 80068b6:	bfb8      	it	lt
 80068b8:	2301      	movlt	r3, #1
 80068ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80068bc:	2200      	movs	r2, #0
 80068be:	6042      	str	r2, [r0, #4]
 80068c0:	2204      	movs	r2, #4
 80068c2:	f102 0614 	add.w	r6, r2, #20
 80068c6:	429e      	cmp	r6, r3
 80068c8:	6841      	ldr	r1, [r0, #4]
 80068ca:	d93d      	bls.n	8006948 <_dtoa_r+0x318>
 80068cc:	4620      	mov	r0, r4
 80068ce:	f000 fcb7 	bl	8007240 <_Balloc>
 80068d2:	9001      	str	r0, [sp, #4]
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d13b      	bne.n	8006950 <_dtoa_r+0x320>
 80068d8:	4b11      	ldr	r3, [pc, #68]	; (8006920 <_dtoa_r+0x2f0>)
 80068da:	4602      	mov	r2, r0
 80068dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80068e0:	e6c0      	b.n	8006664 <_dtoa_r+0x34>
 80068e2:	2301      	movs	r3, #1
 80068e4:	e7df      	b.n	80068a6 <_dtoa_r+0x276>
 80068e6:	bf00      	nop
 80068e8:	636f4361 	.word	0x636f4361
 80068ec:	3fd287a7 	.word	0x3fd287a7
 80068f0:	8b60c8b3 	.word	0x8b60c8b3
 80068f4:	3fc68a28 	.word	0x3fc68a28
 80068f8:	509f79fb 	.word	0x509f79fb
 80068fc:	3fd34413 	.word	0x3fd34413
 8006900:	08008a81 	.word	0x08008a81
 8006904:	08008a98 	.word	0x08008a98
 8006908:	7ff00000 	.word	0x7ff00000
 800690c:	08008a7d 	.word	0x08008a7d
 8006910:	08008a74 	.word	0x08008a74
 8006914:	08008a51 	.word	0x08008a51
 8006918:	3ff80000 	.word	0x3ff80000
 800691c:	08008b88 	.word	0x08008b88
 8006920:	08008af3 	.word	0x08008af3
 8006924:	2501      	movs	r5, #1
 8006926:	2300      	movs	r3, #0
 8006928:	9306      	str	r3, [sp, #24]
 800692a:	9508      	str	r5, [sp, #32]
 800692c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006930:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006934:	2200      	movs	r2, #0
 8006936:	2312      	movs	r3, #18
 8006938:	e7b0      	b.n	800689c <_dtoa_r+0x26c>
 800693a:	2301      	movs	r3, #1
 800693c:	9308      	str	r3, [sp, #32]
 800693e:	e7f5      	b.n	800692c <_dtoa_r+0x2fc>
 8006940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006942:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006946:	e7b8      	b.n	80068ba <_dtoa_r+0x28a>
 8006948:	3101      	adds	r1, #1
 800694a:	6041      	str	r1, [r0, #4]
 800694c:	0052      	lsls	r2, r2, #1
 800694e:	e7b8      	b.n	80068c2 <_dtoa_r+0x292>
 8006950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006952:	9a01      	ldr	r2, [sp, #4]
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	9b03      	ldr	r3, [sp, #12]
 8006958:	2b0e      	cmp	r3, #14
 800695a:	f200 809d 	bhi.w	8006a98 <_dtoa_r+0x468>
 800695e:	2d00      	cmp	r5, #0
 8006960:	f000 809a 	beq.w	8006a98 <_dtoa_r+0x468>
 8006964:	9b00      	ldr	r3, [sp, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	dd32      	ble.n	80069d0 <_dtoa_r+0x3a0>
 800696a:	4ab7      	ldr	r2, [pc, #732]	; (8006c48 <_dtoa_r+0x618>)
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006974:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006978:	9b00      	ldr	r3, [sp, #0]
 800697a:	05d8      	lsls	r0, r3, #23
 800697c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006980:	d516      	bpl.n	80069b0 <_dtoa_r+0x380>
 8006982:	4bb2      	ldr	r3, [pc, #712]	; (8006c4c <_dtoa_r+0x61c>)
 8006984:	ec51 0b19 	vmov	r0, r1, d9
 8006988:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800698c:	f7f9 ff7e 	bl	800088c <__aeabi_ddiv>
 8006990:	f007 070f 	and.w	r7, r7, #15
 8006994:	4682      	mov	sl, r0
 8006996:	468b      	mov	fp, r1
 8006998:	2503      	movs	r5, #3
 800699a:	4eac      	ldr	r6, [pc, #688]	; (8006c4c <_dtoa_r+0x61c>)
 800699c:	b957      	cbnz	r7, 80069b4 <_dtoa_r+0x384>
 800699e:	4642      	mov	r2, r8
 80069a0:	464b      	mov	r3, r9
 80069a2:	4650      	mov	r0, sl
 80069a4:	4659      	mov	r1, fp
 80069a6:	f7f9 ff71 	bl	800088c <__aeabi_ddiv>
 80069aa:	4682      	mov	sl, r0
 80069ac:	468b      	mov	fp, r1
 80069ae:	e028      	b.n	8006a02 <_dtoa_r+0x3d2>
 80069b0:	2502      	movs	r5, #2
 80069b2:	e7f2      	b.n	800699a <_dtoa_r+0x36a>
 80069b4:	07f9      	lsls	r1, r7, #31
 80069b6:	d508      	bpl.n	80069ca <_dtoa_r+0x39a>
 80069b8:	4640      	mov	r0, r8
 80069ba:	4649      	mov	r1, r9
 80069bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069c0:	f7f9 fe3a 	bl	8000638 <__aeabi_dmul>
 80069c4:	3501      	adds	r5, #1
 80069c6:	4680      	mov	r8, r0
 80069c8:	4689      	mov	r9, r1
 80069ca:	107f      	asrs	r7, r7, #1
 80069cc:	3608      	adds	r6, #8
 80069ce:	e7e5      	b.n	800699c <_dtoa_r+0x36c>
 80069d0:	f000 809b 	beq.w	8006b0a <_dtoa_r+0x4da>
 80069d4:	9b00      	ldr	r3, [sp, #0]
 80069d6:	4f9d      	ldr	r7, [pc, #628]	; (8006c4c <_dtoa_r+0x61c>)
 80069d8:	425e      	negs	r6, r3
 80069da:	4b9b      	ldr	r3, [pc, #620]	; (8006c48 <_dtoa_r+0x618>)
 80069dc:	f006 020f 	and.w	r2, r6, #15
 80069e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e8:	ec51 0b19 	vmov	r0, r1, d9
 80069ec:	f7f9 fe24 	bl	8000638 <__aeabi_dmul>
 80069f0:	1136      	asrs	r6, r6, #4
 80069f2:	4682      	mov	sl, r0
 80069f4:	468b      	mov	fp, r1
 80069f6:	2300      	movs	r3, #0
 80069f8:	2502      	movs	r5, #2
 80069fa:	2e00      	cmp	r6, #0
 80069fc:	d17a      	bne.n	8006af4 <_dtoa_r+0x4c4>
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1d3      	bne.n	80069aa <_dtoa_r+0x37a>
 8006a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 8082 	beq.w	8006b0e <_dtoa_r+0x4de>
 8006a0a:	4b91      	ldr	r3, [pc, #580]	; (8006c50 <_dtoa_r+0x620>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	4650      	mov	r0, sl
 8006a10:	4659      	mov	r1, fp
 8006a12:	f7fa f883 	bl	8000b1c <__aeabi_dcmplt>
 8006a16:	2800      	cmp	r0, #0
 8006a18:	d079      	beq.n	8006b0e <_dtoa_r+0x4de>
 8006a1a:	9b03      	ldr	r3, [sp, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d076      	beq.n	8006b0e <_dtoa_r+0x4de>
 8006a20:	9b02      	ldr	r3, [sp, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	dd36      	ble.n	8006a94 <_dtoa_r+0x464>
 8006a26:	9b00      	ldr	r3, [sp, #0]
 8006a28:	4650      	mov	r0, sl
 8006a2a:	4659      	mov	r1, fp
 8006a2c:	1e5f      	subs	r7, r3, #1
 8006a2e:	2200      	movs	r2, #0
 8006a30:	4b88      	ldr	r3, [pc, #544]	; (8006c54 <_dtoa_r+0x624>)
 8006a32:	f7f9 fe01 	bl	8000638 <__aeabi_dmul>
 8006a36:	9e02      	ldr	r6, [sp, #8]
 8006a38:	4682      	mov	sl, r0
 8006a3a:	468b      	mov	fp, r1
 8006a3c:	3501      	adds	r5, #1
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f7f9 fd90 	bl	8000564 <__aeabi_i2d>
 8006a44:	4652      	mov	r2, sl
 8006a46:	465b      	mov	r3, fp
 8006a48:	f7f9 fdf6 	bl	8000638 <__aeabi_dmul>
 8006a4c:	4b82      	ldr	r3, [pc, #520]	; (8006c58 <_dtoa_r+0x628>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f7f9 fc3c 	bl	80002cc <__adddf3>
 8006a54:	46d0      	mov	r8, sl
 8006a56:	46d9      	mov	r9, fp
 8006a58:	4682      	mov	sl, r0
 8006a5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006a5e:	2e00      	cmp	r6, #0
 8006a60:	d158      	bne.n	8006b14 <_dtoa_r+0x4e4>
 8006a62:	4b7e      	ldr	r3, [pc, #504]	; (8006c5c <_dtoa_r+0x62c>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	4640      	mov	r0, r8
 8006a68:	4649      	mov	r1, r9
 8006a6a:	f7f9 fc2d 	bl	80002c8 <__aeabi_dsub>
 8006a6e:	4652      	mov	r2, sl
 8006a70:	465b      	mov	r3, fp
 8006a72:	4680      	mov	r8, r0
 8006a74:	4689      	mov	r9, r1
 8006a76:	f7fa f86f 	bl	8000b58 <__aeabi_dcmpgt>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	f040 8295 	bne.w	8006faa <_dtoa_r+0x97a>
 8006a80:	4652      	mov	r2, sl
 8006a82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006a86:	4640      	mov	r0, r8
 8006a88:	4649      	mov	r1, r9
 8006a8a:	f7fa f847 	bl	8000b1c <__aeabi_dcmplt>
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	f040 8289 	bne.w	8006fa6 <_dtoa_r+0x976>
 8006a94:	ec5b ab19 	vmov	sl, fp, d9
 8006a98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f2c0 8148 	blt.w	8006d30 <_dtoa_r+0x700>
 8006aa0:	9a00      	ldr	r2, [sp, #0]
 8006aa2:	2a0e      	cmp	r2, #14
 8006aa4:	f300 8144 	bgt.w	8006d30 <_dtoa_r+0x700>
 8006aa8:	4b67      	ldr	r3, [pc, #412]	; (8006c48 <_dtoa_r+0x618>)
 8006aaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f280 80d5 	bge.w	8006c64 <_dtoa_r+0x634>
 8006aba:	9b03      	ldr	r3, [sp, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f300 80d1 	bgt.w	8006c64 <_dtoa_r+0x634>
 8006ac2:	f040 826f 	bne.w	8006fa4 <_dtoa_r+0x974>
 8006ac6:	4b65      	ldr	r3, [pc, #404]	; (8006c5c <_dtoa_r+0x62c>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	4640      	mov	r0, r8
 8006acc:	4649      	mov	r1, r9
 8006ace:	f7f9 fdb3 	bl	8000638 <__aeabi_dmul>
 8006ad2:	4652      	mov	r2, sl
 8006ad4:	465b      	mov	r3, fp
 8006ad6:	f7fa f835 	bl	8000b44 <__aeabi_dcmpge>
 8006ada:	9e03      	ldr	r6, [sp, #12]
 8006adc:	4637      	mov	r7, r6
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	f040 8245 	bne.w	8006f6e <_dtoa_r+0x93e>
 8006ae4:	9d01      	ldr	r5, [sp, #4]
 8006ae6:	2331      	movs	r3, #49	; 0x31
 8006ae8:	f805 3b01 	strb.w	r3, [r5], #1
 8006aec:	9b00      	ldr	r3, [sp, #0]
 8006aee:	3301      	adds	r3, #1
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	e240      	b.n	8006f76 <_dtoa_r+0x946>
 8006af4:	07f2      	lsls	r2, r6, #31
 8006af6:	d505      	bpl.n	8006b04 <_dtoa_r+0x4d4>
 8006af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006afc:	f7f9 fd9c 	bl	8000638 <__aeabi_dmul>
 8006b00:	3501      	adds	r5, #1
 8006b02:	2301      	movs	r3, #1
 8006b04:	1076      	asrs	r6, r6, #1
 8006b06:	3708      	adds	r7, #8
 8006b08:	e777      	b.n	80069fa <_dtoa_r+0x3ca>
 8006b0a:	2502      	movs	r5, #2
 8006b0c:	e779      	b.n	8006a02 <_dtoa_r+0x3d2>
 8006b0e:	9f00      	ldr	r7, [sp, #0]
 8006b10:	9e03      	ldr	r6, [sp, #12]
 8006b12:	e794      	b.n	8006a3e <_dtoa_r+0x40e>
 8006b14:	9901      	ldr	r1, [sp, #4]
 8006b16:	4b4c      	ldr	r3, [pc, #304]	; (8006c48 <_dtoa_r+0x618>)
 8006b18:	4431      	add	r1, r6
 8006b1a:	910d      	str	r1, [sp, #52]	; 0x34
 8006b1c:	9908      	ldr	r1, [sp, #32]
 8006b1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b26:	2900      	cmp	r1, #0
 8006b28:	d043      	beq.n	8006bb2 <_dtoa_r+0x582>
 8006b2a:	494d      	ldr	r1, [pc, #308]	; (8006c60 <_dtoa_r+0x630>)
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	f7f9 fead 	bl	800088c <__aeabi_ddiv>
 8006b32:	4652      	mov	r2, sl
 8006b34:	465b      	mov	r3, fp
 8006b36:	f7f9 fbc7 	bl	80002c8 <__aeabi_dsub>
 8006b3a:	9d01      	ldr	r5, [sp, #4]
 8006b3c:	4682      	mov	sl, r0
 8006b3e:	468b      	mov	fp, r1
 8006b40:	4649      	mov	r1, r9
 8006b42:	4640      	mov	r0, r8
 8006b44:	f7fa f828 	bl	8000b98 <__aeabi_d2iz>
 8006b48:	4606      	mov	r6, r0
 8006b4a:	f7f9 fd0b 	bl	8000564 <__aeabi_i2d>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	4640      	mov	r0, r8
 8006b54:	4649      	mov	r1, r9
 8006b56:	f7f9 fbb7 	bl	80002c8 <__aeabi_dsub>
 8006b5a:	3630      	adds	r6, #48	; 0x30
 8006b5c:	f805 6b01 	strb.w	r6, [r5], #1
 8006b60:	4652      	mov	r2, sl
 8006b62:	465b      	mov	r3, fp
 8006b64:	4680      	mov	r8, r0
 8006b66:	4689      	mov	r9, r1
 8006b68:	f7f9 ffd8 	bl	8000b1c <__aeabi_dcmplt>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	d163      	bne.n	8006c38 <_dtoa_r+0x608>
 8006b70:	4642      	mov	r2, r8
 8006b72:	464b      	mov	r3, r9
 8006b74:	4936      	ldr	r1, [pc, #216]	; (8006c50 <_dtoa_r+0x620>)
 8006b76:	2000      	movs	r0, #0
 8006b78:	f7f9 fba6 	bl	80002c8 <__aeabi_dsub>
 8006b7c:	4652      	mov	r2, sl
 8006b7e:	465b      	mov	r3, fp
 8006b80:	f7f9 ffcc 	bl	8000b1c <__aeabi_dcmplt>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	f040 80b5 	bne.w	8006cf4 <_dtoa_r+0x6c4>
 8006b8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b8c:	429d      	cmp	r5, r3
 8006b8e:	d081      	beq.n	8006a94 <_dtoa_r+0x464>
 8006b90:	4b30      	ldr	r3, [pc, #192]	; (8006c54 <_dtoa_r+0x624>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	4650      	mov	r0, sl
 8006b96:	4659      	mov	r1, fp
 8006b98:	f7f9 fd4e 	bl	8000638 <__aeabi_dmul>
 8006b9c:	4b2d      	ldr	r3, [pc, #180]	; (8006c54 <_dtoa_r+0x624>)
 8006b9e:	4682      	mov	sl, r0
 8006ba0:	468b      	mov	fp, r1
 8006ba2:	4640      	mov	r0, r8
 8006ba4:	4649      	mov	r1, r9
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f7f9 fd46 	bl	8000638 <__aeabi_dmul>
 8006bac:	4680      	mov	r8, r0
 8006bae:	4689      	mov	r9, r1
 8006bb0:	e7c6      	b.n	8006b40 <_dtoa_r+0x510>
 8006bb2:	4650      	mov	r0, sl
 8006bb4:	4659      	mov	r1, fp
 8006bb6:	f7f9 fd3f 	bl	8000638 <__aeabi_dmul>
 8006bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bbc:	9d01      	ldr	r5, [sp, #4]
 8006bbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bc0:	4682      	mov	sl, r0
 8006bc2:	468b      	mov	fp, r1
 8006bc4:	4649      	mov	r1, r9
 8006bc6:	4640      	mov	r0, r8
 8006bc8:	f7f9 ffe6 	bl	8000b98 <__aeabi_d2iz>
 8006bcc:	4606      	mov	r6, r0
 8006bce:	f7f9 fcc9 	bl	8000564 <__aeabi_i2d>
 8006bd2:	3630      	adds	r6, #48	; 0x30
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4640      	mov	r0, r8
 8006bda:	4649      	mov	r1, r9
 8006bdc:	f7f9 fb74 	bl	80002c8 <__aeabi_dsub>
 8006be0:	f805 6b01 	strb.w	r6, [r5], #1
 8006be4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006be6:	429d      	cmp	r5, r3
 8006be8:	4680      	mov	r8, r0
 8006bea:	4689      	mov	r9, r1
 8006bec:	f04f 0200 	mov.w	r2, #0
 8006bf0:	d124      	bne.n	8006c3c <_dtoa_r+0x60c>
 8006bf2:	4b1b      	ldr	r3, [pc, #108]	; (8006c60 <_dtoa_r+0x630>)
 8006bf4:	4650      	mov	r0, sl
 8006bf6:	4659      	mov	r1, fp
 8006bf8:	f7f9 fb68 	bl	80002cc <__adddf3>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4640      	mov	r0, r8
 8006c02:	4649      	mov	r1, r9
 8006c04:	f7f9 ffa8 	bl	8000b58 <__aeabi_dcmpgt>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	d173      	bne.n	8006cf4 <_dtoa_r+0x6c4>
 8006c0c:	4652      	mov	r2, sl
 8006c0e:	465b      	mov	r3, fp
 8006c10:	4913      	ldr	r1, [pc, #76]	; (8006c60 <_dtoa_r+0x630>)
 8006c12:	2000      	movs	r0, #0
 8006c14:	f7f9 fb58 	bl	80002c8 <__aeabi_dsub>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	4640      	mov	r0, r8
 8006c1e:	4649      	mov	r1, r9
 8006c20:	f7f9 ff7c 	bl	8000b1c <__aeabi_dcmplt>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	f43f af35 	beq.w	8006a94 <_dtoa_r+0x464>
 8006c2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c2c:	1e6b      	subs	r3, r5, #1
 8006c2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c34:	2b30      	cmp	r3, #48	; 0x30
 8006c36:	d0f8      	beq.n	8006c2a <_dtoa_r+0x5fa>
 8006c38:	9700      	str	r7, [sp, #0]
 8006c3a:	e049      	b.n	8006cd0 <_dtoa_r+0x6a0>
 8006c3c:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <_dtoa_r+0x624>)
 8006c3e:	f7f9 fcfb 	bl	8000638 <__aeabi_dmul>
 8006c42:	4680      	mov	r8, r0
 8006c44:	4689      	mov	r9, r1
 8006c46:	e7bd      	b.n	8006bc4 <_dtoa_r+0x594>
 8006c48:	08008b88 	.word	0x08008b88
 8006c4c:	08008b60 	.word	0x08008b60
 8006c50:	3ff00000 	.word	0x3ff00000
 8006c54:	40240000 	.word	0x40240000
 8006c58:	401c0000 	.word	0x401c0000
 8006c5c:	40140000 	.word	0x40140000
 8006c60:	3fe00000 	.word	0x3fe00000
 8006c64:	9d01      	ldr	r5, [sp, #4]
 8006c66:	4656      	mov	r6, sl
 8006c68:	465f      	mov	r7, fp
 8006c6a:	4642      	mov	r2, r8
 8006c6c:	464b      	mov	r3, r9
 8006c6e:	4630      	mov	r0, r6
 8006c70:	4639      	mov	r1, r7
 8006c72:	f7f9 fe0b 	bl	800088c <__aeabi_ddiv>
 8006c76:	f7f9 ff8f 	bl	8000b98 <__aeabi_d2iz>
 8006c7a:	4682      	mov	sl, r0
 8006c7c:	f7f9 fc72 	bl	8000564 <__aeabi_i2d>
 8006c80:	4642      	mov	r2, r8
 8006c82:	464b      	mov	r3, r9
 8006c84:	f7f9 fcd8 	bl	8000638 <__aeabi_dmul>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	4639      	mov	r1, r7
 8006c90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006c94:	f7f9 fb18 	bl	80002c8 <__aeabi_dsub>
 8006c98:	f805 6b01 	strb.w	r6, [r5], #1
 8006c9c:	9e01      	ldr	r6, [sp, #4]
 8006c9e:	9f03      	ldr	r7, [sp, #12]
 8006ca0:	1bae      	subs	r6, r5, r6
 8006ca2:	42b7      	cmp	r7, r6
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	d135      	bne.n	8006d16 <_dtoa_r+0x6e6>
 8006caa:	f7f9 fb0f 	bl	80002cc <__adddf3>
 8006cae:	4642      	mov	r2, r8
 8006cb0:	464b      	mov	r3, r9
 8006cb2:	4606      	mov	r6, r0
 8006cb4:	460f      	mov	r7, r1
 8006cb6:	f7f9 ff4f 	bl	8000b58 <__aeabi_dcmpgt>
 8006cba:	b9d0      	cbnz	r0, 8006cf2 <_dtoa_r+0x6c2>
 8006cbc:	4642      	mov	r2, r8
 8006cbe:	464b      	mov	r3, r9
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	4639      	mov	r1, r7
 8006cc4:	f7f9 ff20 	bl	8000b08 <__aeabi_dcmpeq>
 8006cc8:	b110      	cbz	r0, 8006cd0 <_dtoa_r+0x6a0>
 8006cca:	f01a 0f01 	tst.w	sl, #1
 8006cce:	d110      	bne.n	8006cf2 <_dtoa_r+0x6c2>
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	ee18 1a10 	vmov	r1, s16
 8006cd6:	f000 faf3 	bl	80072c0 <_Bfree>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	9800      	ldr	r0, [sp, #0]
 8006cde:	702b      	strb	r3, [r5, #0]
 8006ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	6018      	str	r0, [r3, #0]
 8006ce6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f43f acf1 	beq.w	80066d0 <_dtoa_r+0xa0>
 8006cee:	601d      	str	r5, [r3, #0]
 8006cf0:	e4ee      	b.n	80066d0 <_dtoa_r+0xa0>
 8006cf2:	9f00      	ldr	r7, [sp, #0]
 8006cf4:	462b      	mov	r3, r5
 8006cf6:	461d      	mov	r5, r3
 8006cf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cfc:	2a39      	cmp	r2, #57	; 0x39
 8006cfe:	d106      	bne.n	8006d0e <_dtoa_r+0x6de>
 8006d00:	9a01      	ldr	r2, [sp, #4]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d1f7      	bne.n	8006cf6 <_dtoa_r+0x6c6>
 8006d06:	9901      	ldr	r1, [sp, #4]
 8006d08:	2230      	movs	r2, #48	; 0x30
 8006d0a:	3701      	adds	r7, #1
 8006d0c:	700a      	strb	r2, [r1, #0]
 8006d0e:	781a      	ldrb	r2, [r3, #0]
 8006d10:	3201      	adds	r2, #1
 8006d12:	701a      	strb	r2, [r3, #0]
 8006d14:	e790      	b.n	8006c38 <_dtoa_r+0x608>
 8006d16:	4ba6      	ldr	r3, [pc, #664]	; (8006fb0 <_dtoa_r+0x980>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f7f9 fc8d 	bl	8000638 <__aeabi_dmul>
 8006d1e:	2200      	movs	r2, #0
 8006d20:	2300      	movs	r3, #0
 8006d22:	4606      	mov	r6, r0
 8006d24:	460f      	mov	r7, r1
 8006d26:	f7f9 feef 	bl	8000b08 <__aeabi_dcmpeq>
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	d09d      	beq.n	8006c6a <_dtoa_r+0x63a>
 8006d2e:	e7cf      	b.n	8006cd0 <_dtoa_r+0x6a0>
 8006d30:	9a08      	ldr	r2, [sp, #32]
 8006d32:	2a00      	cmp	r2, #0
 8006d34:	f000 80d7 	beq.w	8006ee6 <_dtoa_r+0x8b6>
 8006d38:	9a06      	ldr	r2, [sp, #24]
 8006d3a:	2a01      	cmp	r2, #1
 8006d3c:	f300 80ba 	bgt.w	8006eb4 <_dtoa_r+0x884>
 8006d40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d42:	2a00      	cmp	r2, #0
 8006d44:	f000 80b2 	beq.w	8006eac <_dtoa_r+0x87c>
 8006d48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d4c:	9e07      	ldr	r6, [sp, #28]
 8006d4e:	9d04      	ldr	r5, [sp, #16]
 8006d50:	9a04      	ldr	r2, [sp, #16]
 8006d52:	441a      	add	r2, r3
 8006d54:	9204      	str	r2, [sp, #16]
 8006d56:	9a05      	ldr	r2, [sp, #20]
 8006d58:	2101      	movs	r1, #1
 8006d5a:	441a      	add	r2, r3
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	9205      	str	r2, [sp, #20]
 8006d60:	f000 fb66 	bl	8007430 <__i2b>
 8006d64:	4607      	mov	r7, r0
 8006d66:	2d00      	cmp	r5, #0
 8006d68:	dd0c      	ble.n	8006d84 <_dtoa_r+0x754>
 8006d6a:	9b05      	ldr	r3, [sp, #20]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	dd09      	ble.n	8006d84 <_dtoa_r+0x754>
 8006d70:	42ab      	cmp	r3, r5
 8006d72:	9a04      	ldr	r2, [sp, #16]
 8006d74:	bfa8      	it	ge
 8006d76:	462b      	movge	r3, r5
 8006d78:	1ad2      	subs	r2, r2, r3
 8006d7a:	9204      	str	r2, [sp, #16]
 8006d7c:	9a05      	ldr	r2, [sp, #20]
 8006d7e:	1aed      	subs	r5, r5, r3
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	9305      	str	r3, [sp, #20]
 8006d84:	9b07      	ldr	r3, [sp, #28]
 8006d86:	b31b      	cbz	r3, 8006dd0 <_dtoa_r+0x7a0>
 8006d88:	9b08      	ldr	r3, [sp, #32]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f000 80af 	beq.w	8006eee <_dtoa_r+0x8be>
 8006d90:	2e00      	cmp	r6, #0
 8006d92:	dd13      	ble.n	8006dbc <_dtoa_r+0x78c>
 8006d94:	4639      	mov	r1, r7
 8006d96:	4632      	mov	r2, r6
 8006d98:	4620      	mov	r0, r4
 8006d9a:	f000 fc09 	bl	80075b0 <__pow5mult>
 8006d9e:	ee18 2a10 	vmov	r2, s16
 8006da2:	4601      	mov	r1, r0
 8006da4:	4607      	mov	r7, r0
 8006da6:	4620      	mov	r0, r4
 8006da8:	f000 fb58 	bl	800745c <__multiply>
 8006dac:	ee18 1a10 	vmov	r1, s16
 8006db0:	4680      	mov	r8, r0
 8006db2:	4620      	mov	r0, r4
 8006db4:	f000 fa84 	bl	80072c0 <_Bfree>
 8006db8:	ee08 8a10 	vmov	s16, r8
 8006dbc:	9b07      	ldr	r3, [sp, #28]
 8006dbe:	1b9a      	subs	r2, r3, r6
 8006dc0:	d006      	beq.n	8006dd0 <_dtoa_r+0x7a0>
 8006dc2:	ee18 1a10 	vmov	r1, s16
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f000 fbf2 	bl	80075b0 <__pow5mult>
 8006dcc:	ee08 0a10 	vmov	s16, r0
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f000 fb2c 	bl	8007430 <__i2b>
 8006dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	4606      	mov	r6, r0
 8006dde:	f340 8088 	ble.w	8006ef2 <_dtoa_r+0x8c2>
 8006de2:	461a      	mov	r2, r3
 8006de4:	4601      	mov	r1, r0
 8006de6:	4620      	mov	r0, r4
 8006de8:	f000 fbe2 	bl	80075b0 <__pow5mult>
 8006dec:	9b06      	ldr	r3, [sp, #24]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	4606      	mov	r6, r0
 8006df2:	f340 8081 	ble.w	8006ef8 <_dtoa_r+0x8c8>
 8006df6:	f04f 0800 	mov.w	r8, #0
 8006dfa:	6933      	ldr	r3, [r6, #16]
 8006dfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e00:	6918      	ldr	r0, [r3, #16]
 8006e02:	f000 fac5 	bl	8007390 <__hi0bits>
 8006e06:	f1c0 0020 	rsb	r0, r0, #32
 8006e0a:	9b05      	ldr	r3, [sp, #20]
 8006e0c:	4418      	add	r0, r3
 8006e0e:	f010 001f 	ands.w	r0, r0, #31
 8006e12:	f000 8092 	beq.w	8006f3a <_dtoa_r+0x90a>
 8006e16:	f1c0 0320 	rsb	r3, r0, #32
 8006e1a:	2b04      	cmp	r3, #4
 8006e1c:	f340 808a 	ble.w	8006f34 <_dtoa_r+0x904>
 8006e20:	f1c0 001c 	rsb	r0, r0, #28
 8006e24:	9b04      	ldr	r3, [sp, #16]
 8006e26:	4403      	add	r3, r0
 8006e28:	9304      	str	r3, [sp, #16]
 8006e2a:	9b05      	ldr	r3, [sp, #20]
 8006e2c:	4403      	add	r3, r0
 8006e2e:	4405      	add	r5, r0
 8006e30:	9305      	str	r3, [sp, #20]
 8006e32:	9b04      	ldr	r3, [sp, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	dd07      	ble.n	8006e48 <_dtoa_r+0x818>
 8006e38:	ee18 1a10 	vmov	r1, s16
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	4620      	mov	r0, r4
 8006e40:	f000 fc10 	bl	8007664 <__lshift>
 8006e44:	ee08 0a10 	vmov	s16, r0
 8006e48:	9b05      	ldr	r3, [sp, #20]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	dd05      	ble.n	8006e5a <_dtoa_r+0x82a>
 8006e4e:	4631      	mov	r1, r6
 8006e50:	461a      	mov	r2, r3
 8006e52:	4620      	mov	r0, r4
 8006e54:	f000 fc06 	bl	8007664 <__lshift>
 8006e58:	4606      	mov	r6, r0
 8006e5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d06e      	beq.n	8006f3e <_dtoa_r+0x90e>
 8006e60:	ee18 0a10 	vmov	r0, s16
 8006e64:	4631      	mov	r1, r6
 8006e66:	f000 fc6d 	bl	8007744 <__mcmp>
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	da67      	bge.n	8006f3e <_dtoa_r+0x90e>
 8006e6e:	9b00      	ldr	r3, [sp, #0]
 8006e70:	3b01      	subs	r3, #1
 8006e72:	ee18 1a10 	vmov	r1, s16
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	220a      	movs	r2, #10
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	f000 fa41 	bl	8007304 <__multadd>
 8006e82:	9b08      	ldr	r3, [sp, #32]
 8006e84:	ee08 0a10 	vmov	s16, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 81b1 	beq.w	80071f0 <_dtoa_r+0xbc0>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	4639      	mov	r1, r7
 8006e92:	220a      	movs	r2, #10
 8006e94:	4620      	mov	r0, r4
 8006e96:	f000 fa35 	bl	8007304 <__multadd>
 8006e9a:	9b02      	ldr	r3, [sp, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	4607      	mov	r7, r0
 8006ea0:	f300 808e 	bgt.w	8006fc0 <_dtoa_r+0x990>
 8006ea4:	9b06      	ldr	r3, [sp, #24]
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	dc51      	bgt.n	8006f4e <_dtoa_r+0x91e>
 8006eaa:	e089      	b.n	8006fc0 <_dtoa_r+0x990>
 8006eac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006eae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006eb2:	e74b      	b.n	8006d4c <_dtoa_r+0x71c>
 8006eb4:	9b03      	ldr	r3, [sp, #12]
 8006eb6:	1e5e      	subs	r6, r3, #1
 8006eb8:	9b07      	ldr	r3, [sp, #28]
 8006eba:	42b3      	cmp	r3, r6
 8006ebc:	bfbf      	itttt	lt
 8006ebe:	9b07      	ldrlt	r3, [sp, #28]
 8006ec0:	9607      	strlt	r6, [sp, #28]
 8006ec2:	1af2      	sublt	r2, r6, r3
 8006ec4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006ec6:	bfb6      	itet	lt
 8006ec8:	189b      	addlt	r3, r3, r2
 8006eca:	1b9e      	subge	r6, r3, r6
 8006ecc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006ece:	9b03      	ldr	r3, [sp, #12]
 8006ed0:	bfb8      	it	lt
 8006ed2:	2600      	movlt	r6, #0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bfb7      	itett	lt
 8006ed8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006edc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006ee0:	1a9d      	sublt	r5, r3, r2
 8006ee2:	2300      	movlt	r3, #0
 8006ee4:	e734      	b.n	8006d50 <_dtoa_r+0x720>
 8006ee6:	9e07      	ldr	r6, [sp, #28]
 8006ee8:	9d04      	ldr	r5, [sp, #16]
 8006eea:	9f08      	ldr	r7, [sp, #32]
 8006eec:	e73b      	b.n	8006d66 <_dtoa_r+0x736>
 8006eee:	9a07      	ldr	r2, [sp, #28]
 8006ef0:	e767      	b.n	8006dc2 <_dtoa_r+0x792>
 8006ef2:	9b06      	ldr	r3, [sp, #24]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	dc18      	bgt.n	8006f2a <_dtoa_r+0x8fa>
 8006ef8:	f1ba 0f00 	cmp.w	sl, #0
 8006efc:	d115      	bne.n	8006f2a <_dtoa_r+0x8fa>
 8006efe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f02:	b993      	cbnz	r3, 8006f2a <_dtoa_r+0x8fa>
 8006f04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f08:	0d1b      	lsrs	r3, r3, #20
 8006f0a:	051b      	lsls	r3, r3, #20
 8006f0c:	b183      	cbz	r3, 8006f30 <_dtoa_r+0x900>
 8006f0e:	9b04      	ldr	r3, [sp, #16]
 8006f10:	3301      	adds	r3, #1
 8006f12:	9304      	str	r3, [sp, #16]
 8006f14:	9b05      	ldr	r3, [sp, #20]
 8006f16:	3301      	adds	r3, #1
 8006f18:	9305      	str	r3, [sp, #20]
 8006f1a:	f04f 0801 	mov.w	r8, #1
 8006f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f47f af6a 	bne.w	8006dfa <_dtoa_r+0x7ca>
 8006f26:	2001      	movs	r0, #1
 8006f28:	e76f      	b.n	8006e0a <_dtoa_r+0x7da>
 8006f2a:	f04f 0800 	mov.w	r8, #0
 8006f2e:	e7f6      	b.n	8006f1e <_dtoa_r+0x8ee>
 8006f30:	4698      	mov	r8, r3
 8006f32:	e7f4      	b.n	8006f1e <_dtoa_r+0x8ee>
 8006f34:	f43f af7d 	beq.w	8006e32 <_dtoa_r+0x802>
 8006f38:	4618      	mov	r0, r3
 8006f3a:	301c      	adds	r0, #28
 8006f3c:	e772      	b.n	8006e24 <_dtoa_r+0x7f4>
 8006f3e:	9b03      	ldr	r3, [sp, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	dc37      	bgt.n	8006fb4 <_dtoa_r+0x984>
 8006f44:	9b06      	ldr	r3, [sp, #24]
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	dd34      	ble.n	8006fb4 <_dtoa_r+0x984>
 8006f4a:	9b03      	ldr	r3, [sp, #12]
 8006f4c:	9302      	str	r3, [sp, #8]
 8006f4e:	9b02      	ldr	r3, [sp, #8]
 8006f50:	b96b      	cbnz	r3, 8006f6e <_dtoa_r+0x93e>
 8006f52:	4631      	mov	r1, r6
 8006f54:	2205      	movs	r2, #5
 8006f56:	4620      	mov	r0, r4
 8006f58:	f000 f9d4 	bl	8007304 <__multadd>
 8006f5c:	4601      	mov	r1, r0
 8006f5e:	4606      	mov	r6, r0
 8006f60:	ee18 0a10 	vmov	r0, s16
 8006f64:	f000 fbee 	bl	8007744 <__mcmp>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	f73f adbb 	bgt.w	8006ae4 <_dtoa_r+0x4b4>
 8006f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f70:	9d01      	ldr	r5, [sp, #4]
 8006f72:	43db      	mvns	r3, r3
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	f04f 0800 	mov.w	r8, #0
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f000 f99f 	bl	80072c0 <_Bfree>
 8006f82:	2f00      	cmp	r7, #0
 8006f84:	f43f aea4 	beq.w	8006cd0 <_dtoa_r+0x6a0>
 8006f88:	f1b8 0f00 	cmp.w	r8, #0
 8006f8c:	d005      	beq.n	8006f9a <_dtoa_r+0x96a>
 8006f8e:	45b8      	cmp	r8, r7
 8006f90:	d003      	beq.n	8006f9a <_dtoa_r+0x96a>
 8006f92:	4641      	mov	r1, r8
 8006f94:	4620      	mov	r0, r4
 8006f96:	f000 f993 	bl	80072c0 <_Bfree>
 8006f9a:	4639      	mov	r1, r7
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f000 f98f 	bl	80072c0 <_Bfree>
 8006fa2:	e695      	b.n	8006cd0 <_dtoa_r+0x6a0>
 8006fa4:	2600      	movs	r6, #0
 8006fa6:	4637      	mov	r7, r6
 8006fa8:	e7e1      	b.n	8006f6e <_dtoa_r+0x93e>
 8006faa:	9700      	str	r7, [sp, #0]
 8006fac:	4637      	mov	r7, r6
 8006fae:	e599      	b.n	8006ae4 <_dtoa_r+0x4b4>
 8006fb0:	40240000 	.word	0x40240000
 8006fb4:	9b08      	ldr	r3, [sp, #32]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 80ca 	beq.w	8007150 <_dtoa_r+0xb20>
 8006fbc:	9b03      	ldr	r3, [sp, #12]
 8006fbe:	9302      	str	r3, [sp, #8]
 8006fc0:	2d00      	cmp	r5, #0
 8006fc2:	dd05      	ble.n	8006fd0 <_dtoa_r+0x9a0>
 8006fc4:	4639      	mov	r1, r7
 8006fc6:	462a      	mov	r2, r5
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f000 fb4b 	bl	8007664 <__lshift>
 8006fce:	4607      	mov	r7, r0
 8006fd0:	f1b8 0f00 	cmp.w	r8, #0
 8006fd4:	d05b      	beq.n	800708e <_dtoa_r+0xa5e>
 8006fd6:	6879      	ldr	r1, [r7, #4]
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f000 f931 	bl	8007240 <_Balloc>
 8006fde:	4605      	mov	r5, r0
 8006fe0:	b928      	cbnz	r0, 8006fee <_dtoa_r+0x9be>
 8006fe2:	4b87      	ldr	r3, [pc, #540]	; (8007200 <_dtoa_r+0xbd0>)
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006fea:	f7ff bb3b 	b.w	8006664 <_dtoa_r+0x34>
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	3202      	adds	r2, #2
 8006ff2:	0092      	lsls	r2, r2, #2
 8006ff4:	f107 010c 	add.w	r1, r7, #12
 8006ff8:	300c      	adds	r0, #12
 8006ffa:	f000 f913 	bl	8007224 <memcpy>
 8006ffe:	2201      	movs	r2, #1
 8007000:	4629      	mov	r1, r5
 8007002:	4620      	mov	r0, r4
 8007004:	f000 fb2e 	bl	8007664 <__lshift>
 8007008:	9b01      	ldr	r3, [sp, #4]
 800700a:	f103 0901 	add.w	r9, r3, #1
 800700e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007012:	4413      	add	r3, r2
 8007014:	9305      	str	r3, [sp, #20]
 8007016:	f00a 0301 	and.w	r3, sl, #1
 800701a:	46b8      	mov	r8, r7
 800701c:	9304      	str	r3, [sp, #16]
 800701e:	4607      	mov	r7, r0
 8007020:	4631      	mov	r1, r6
 8007022:	ee18 0a10 	vmov	r0, s16
 8007026:	f7ff fa75 	bl	8006514 <quorem>
 800702a:	4641      	mov	r1, r8
 800702c:	9002      	str	r0, [sp, #8]
 800702e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007032:	ee18 0a10 	vmov	r0, s16
 8007036:	f000 fb85 	bl	8007744 <__mcmp>
 800703a:	463a      	mov	r2, r7
 800703c:	9003      	str	r0, [sp, #12]
 800703e:	4631      	mov	r1, r6
 8007040:	4620      	mov	r0, r4
 8007042:	f000 fb9b 	bl	800777c <__mdiff>
 8007046:	68c2      	ldr	r2, [r0, #12]
 8007048:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800704c:	4605      	mov	r5, r0
 800704e:	bb02      	cbnz	r2, 8007092 <_dtoa_r+0xa62>
 8007050:	4601      	mov	r1, r0
 8007052:	ee18 0a10 	vmov	r0, s16
 8007056:	f000 fb75 	bl	8007744 <__mcmp>
 800705a:	4602      	mov	r2, r0
 800705c:	4629      	mov	r1, r5
 800705e:	4620      	mov	r0, r4
 8007060:	9207      	str	r2, [sp, #28]
 8007062:	f000 f92d 	bl	80072c0 <_Bfree>
 8007066:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800706a:	ea43 0102 	orr.w	r1, r3, r2
 800706e:	9b04      	ldr	r3, [sp, #16]
 8007070:	430b      	orrs	r3, r1
 8007072:	464d      	mov	r5, r9
 8007074:	d10f      	bne.n	8007096 <_dtoa_r+0xa66>
 8007076:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800707a:	d02a      	beq.n	80070d2 <_dtoa_r+0xaa2>
 800707c:	9b03      	ldr	r3, [sp, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	dd02      	ble.n	8007088 <_dtoa_r+0xa58>
 8007082:	9b02      	ldr	r3, [sp, #8]
 8007084:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007088:	f88b a000 	strb.w	sl, [fp]
 800708c:	e775      	b.n	8006f7a <_dtoa_r+0x94a>
 800708e:	4638      	mov	r0, r7
 8007090:	e7ba      	b.n	8007008 <_dtoa_r+0x9d8>
 8007092:	2201      	movs	r2, #1
 8007094:	e7e2      	b.n	800705c <_dtoa_r+0xa2c>
 8007096:	9b03      	ldr	r3, [sp, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	db04      	blt.n	80070a6 <_dtoa_r+0xa76>
 800709c:	9906      	ldr	r1, [sp, #24]
 800709e:	430b      	orrs	r3, r1
 80070a0:	9904      	ldr	r1, [sp, #16]
 80070a2:	430b      	orrs	r3, r1
 80070a4:	d122      	bne.n	80070ec <_dtoa_r+0xabc>
 80070a6:	2a00      	cmp	r2, #0
 80070a8:	ddee      	ble.n	8007088 <_dtoa_r+0xa58>
 80070aa:	ee18 1a10 	vmov	r1, s16
 80070ae:	2201      	movs	r2, #1
 80070b0:	4620      	mov	r0, r4
 80070b2:	f000 fad7 	bl	8007664 <__lshift>
 80070b6:	4631      	mov	r1, r6
 80070b8:	ee08 0a10 	vmov	s16, r0
 80070bc:	f000 fb42 	bl	8007744 <__mcmp>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	dc03      	bgt.n	80070cc <_dtoa_r+0xa9c>
 80070c4:	d1e0      	bne.n	8007088 <_dtoa_r+0xa58>
 80070c6:	f01a 0f01 	tst.w	sl, #1
 80070ca:	d0dd      	beq.n	8007088 <_dtoa_r+0xa58>
 80070cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80070d0:	d1d7      	bne.n	8007082 <_dtoa_r+0xa52>
 80070d2:	2339      	movs	r3, #57	; 0x39
 80070d4:	f88b 3000 	strb.w	r3, [fp]
 80070d8:	462b      	mov	r3, r5
 80070da:	461d      	mov	r5, r3
 80070dc:	3b01      	subs	r3, #1
 80070de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070e2:	2a39      	cmp	r2, #57	; 0x39
 80070e4:	d071      	beq.n	80071ca <_dtoa_r+0xb9a>
 80070e6:	3201      	adds	r2, #1
 80070e8:	701a      	strb	r2, [r3, #0]
 80070ea:	e746      	b.n	8006f7a <_dtoa_r+0x94a>
 80070ec:	2a00      	cmp	r2, #0
 80070ee:	dd07      	ble.n	8007100 <_dtoa_r+0xad0>
 80070f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80070f4:	d0ed      	beq.n	80070d2 <_dtoa_r+0xaa2>
 80070f6:	f10a 0301 	add.w	r3, sl, #1
 80070fa:	f88b 3000 	strb.w	r3, [fp]
 80070fe:	e73c      	b.n	8006f7a <_dtoa_r+0x94a>
 8007100:	9b05      	ldr	r3, [sp, #20]
 8007102:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007106:	4599      	cmp	r9, r3
 8007108:	d047      	beq.n	800719a <_dtoa_r+0xb6a>
 800710a:	ee18 1a10 	vmov	r1, s16
 800710e:	2300      	movs	r3, #0
 8007110:	220a      	movs	r2, #10
 8007112:	4620      	mov	r0, r4
 8007114:	f000 f8f6 	bl	8007304 <__multadd>
 8007118:	45b8      	cmp	r8, r7
 800711a:	ee08 0a10 	vmov	s16, r0
 800711e:	f04f 0300 	mov.w	r3, #0
 8007122:	f04f 020a 	mov.w	r2, #10
 8007126:	4641      	mov	r1, r8
 8007128:	4620      	mov	r0, r4
 800712a:	d106      	bne.n	800713a <_dtoa_r+0xb0a>
 800712c:	f000 f8ea 	bl	8007304 <__multadd>
 8007130:	4680      	mov	r8, r0
 8007132:	4607      	mov	r7, r0
 8007134:	f109 0901 	add.w	r9, r9, #1
 8007138:	e772      	b.n	8007020 <_dtoa_r+0x9f0>
 800713a:	f000 f8e3 	bl	8007304 <__multadd>
 800713e:	4639      	mov	r1, r7
 8007140:	4680      	mov	r8, r0
 8007142:	2300      	movs	r3, #0
 8007144:	220a      	movs	r2, #10
 8007146:	4620      	mov	r0, r4
 8007148:	f000 f8dc 	bl	8007304 <__multadd>
 800714c:	4607      	mov	r7, r0
 800714e:	e7f1      	b.n	8007134 <_dtoa_r+0xb04>
 8007150:	9b03      	ldr	r3, [sp, #12]
 8007152:	9302      	str	r3, [sp, #8]
 8007154:	9d01      	ldr	r5, [sp, #4]
 8007156:	ee18 0a10 	vmov	r0, s16
 800715a:	4631      	mov	r1, r6
 800715c:	f7ff f9da 	bl	8006514 <quorem>
 8007160:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007164:	9b01      	ldr	r3, [sp, #4]
 8007166:	f805 ab01 	strb.w	sl, [r5], #1
 800716a:	1aea      	subs	r2, r5, r3
 800716c:	9b02      	ldr	r3, [sp, #8]
 800716e:	4293      	cmp	r3, r2
 8007170:	dd09      	ble.n	8007186 <_dtoa_r+0xb56>
 8007172:	ee18 1a10 	vmov	r1, s16
 8007176:	2300      	movs	r3, #0
 8007178:	220a      	movs	r2, #10
 800717a:	4620      	mov	r0, r4
 800717c:	f000 f8c2 	bl	8007304 <__multadd>
 8007180:	ee08 0a10 	vmov	s16, r0
 8007184:	e7e7      	b.n	8007156 <_dtoa_r+0xb26>
 8007186:	9b02      	ldr	r3, [sp, #8]
 8007188:	2b00      	cmp	r3, #0
 800718a:	bfc8      	it	gt
 800718c:	461d      	movgt	r5, r3
 800718e:	9b01      	ldr	r3, [sp, #4]
 8007190:	bfd8      	it	le
 8007192:	2501      	movle	r5, #1
 8007194:	441d      	add	r5, r3
 8007196:	f04f 0800 	mov.w	r8, #0
 800719a:	ee18 1a10 	vmov	r1, s16
 800719e:	2201      	movs	r2, #1
 80071a0:	4620      	mov	r0, r4
 80071a2:	f000 fa5f 	bl	8007664 <__lshift>
 80071a6:	4631      	mov	r1, r6
 80071a8:	ee08 0a10 	vmov	s16, r0
 80071ac:	f000 faca 	bl	8007744 <__mcmp>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	dc91      	bgt.n	80070d8 <_dtoa_r+0xaa8>
 80071b4:	d102      	bne.n	80071bc <_dtoa_r+0xb8c>
 80071b6:	f01a 0f01 	tst.w	sl, #1
 80071ba:	d18d      	bne.n	80070d8 <_dtoa_r+0xaa8>
 80071bc:	462b      	mov	r3, r5
 80071be:	461d      	mov	r5, r3
 80071c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071c4:	2a30      	cmp	r2, #48	; 0x30
 80071c6:	d0fa      	beq.n	80071be <_dtoa_r+0xb8e>
 80071c8:	e6d7      	b.n	8006f7a <_dtoa_r+0x94a>
 80071ca:	9a01      	ldr	r2, [sp, #4]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d184      	bne.n	80070da <_dtoa_r+0xaaa>
 80071d0:	9b00      	ldr	r3, [sp, #0]
 80071d2:	3301      	adds	r3, #1
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	2331      	movs	r3, #49	; 0x31
 80071d8:	7013      	strb	r3, [r2, #0]
 80071da:	e6ce      	b.n	8006f7a <_dtoa_r+0x94a>
 80071dc:	4b09      	ldr	r3, [pc, #36]	; (8007204 <_dtoa_r+0xbd4>)
 80071de:	f7ff ba95 	b.w	800670c <_dtoa_r+0xdc>
 80071e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f47f aa6e 	bne.w	80066c6 <_dtoa_r+0x96>
 80071ea:	4b07      	ldr	r3, [pc, #28]	; (8007208 <_dtoa_r+0xbd8>)
 80071ec:	f7ff ba8e 	b.w	800670c <_dtoa_r+0xdc>
 80071f0:	9b02      	ldr	r3, [sp, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	dcae      	bgt.n	8007154 <_dtoa_r+0xb24>
 80071f6:	9b06      	ldr	r3, [sp, #24]
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	f73f aea8 	bgt.w	8006f4e <_dtoa_r+0x91e>
 80071fe:	e7a9      	b.n	8007154 <_dtoa_r+0xb24>
 8007200:	08008af3 	.word	0x08008af3
 8007204:	08008a50 	.word	0x08008a50
 8007208:	08008a74 	.word	0x08008a74

0800720c <_localeconv_r>:
 800720c:	4800      	ldr	r0, [pc, #0]	; (8007210 <_localeconv_r+0x4>)
 800720e:	4770      	bx	lr
 8007210:	20000168 	.word	0x20000168

08007214 <malloc>:
 8007214:	4b02      	ldr	r3, [pc, #8]	; (8007220 <malloc+0xc>)
 8007216:	4601      	mov	r1, r0
 8007218:	6818      	ldr	r0, [r3, #0]
 800721a:	f000 bc17 	b.w	8007a4c <_malloc_r>
 800721e:	bf00      	nop
 8007220:	20000014 	.word	0x20000014

08007224 <memcpy>:
 8007224:	440a      	add	r2, r1
 8007226:	4291      	cmp	r1, r2
 8007228:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800722c:	d100      	bne.n	8007230 <memcpy+0xc>
 800722e:	4770      	bx	lr
 8007230:	b510      	push	{r4, lr}
 8007232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800723a:	4291      	cmp	r1, r2
 800723c:	d1f9      	bne.n	8007232 <memcpy+0xe>
 800723e:	bd10      	pop	{r4, pc}

08007240 <_Balloc>:
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007244:	4604      	mov	r4, r0
 8007246:	460d      	mov	r5, r1
 8007248:	b976      	cbnz	r6, 8007268 <_Balloc+0x28>
 800724a:	2010      	movs	r0, #16
 800724c:	f7ff ffe2 	bl	8007214 <malloc>
 8007250:	4602      	mov	r2, r0
 8007252:	6260      	str	r0, [r4, #36]	; 0x24
 8007254:	b920      	cbnz	r0, 8007260 <_Balloc+0x20>
 8007256:	4b18      	ldr	r3, [pc, #96]	; (80072b8 <_Balloc+0x78>)
 8007258:	4818      	ldr	r0, [pc, #96]	; (80072bc <_Balloc+0x7c>)
 800725a:	2166      	movs	r1, #102	; 0x66
 800725c:	f000 fdd6 	bl	8007e0c <__assert_func>
 8007260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007264:	6006      	str	r6, [r0, #0]
 8007266:	60c6      	str	r6, [r0, #12]
 8007268:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800726a:	68f3      	ldr	r3, [r6, #12]
 800726c:	b183      	cbz	r3, 8007290 <_Balloc+0x50>
 800726e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007276:	b9b8      	cbnz	r0, 80072a8 <_Balloc+0x68>
 8007278:	2101      	movs	r1, #1
 800727a:	fa01 f605 	lsl.w	r6, r1, r5
 800727e:	1d72      	adds	r2, r6, #5
 8007280:	0092      	lsls	r2, r2, #2
 8007282:	4620      	mov	r0, r4
 8007284:	f000 fb60 	bl	8007948 <_calloc_r>
 8007288:	b160      	cbz	r0, 80072a4 <_Balloc+0x64>
 800728a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800728e:	e00e      	b.n	80072ae <_Balloc+0x6e>
 8007290:	2221      	movs	r2, #33	; 0x21
 8007292:	2104      	movs	r1, #4
 8007294:	4620      	mov	r0, r4
 8007296:	f000 fb57 	bl	8007948 <_calloc_r>
 800729a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800729c:	60f0      	str	r0, [r6, #12]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1e4      	bne.n	800726e <_Balloc+0x2e>
 80072a4:	2000      	movs	r0, #0
 80072a6:	bd70      	pop	{r4, r5, r6, pc}
 80072a8:	6802      	ldr	r2, [r0, #0]
 80072aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072ae:	2300      	movs	r3, #0
 80072b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072b4:	e7f7      	b.n	80072a6 <_Balloc+0x66>
 80072b6:	bf00      	nop
 80072b8:	08008a81 	.word	0x08008a81
 80072bc:	08008b04 	.word	0x08008b04

080072c0 <_Bfree>:
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072c4:	4605      	mov	r5, r0
 80072c6:	460c      	mov	r4, r1
 80072c8:	b976      	cbnz	r6, 80072e8 <_Bfree+0x28>
 80072ca:	2010      	movs	r0, #16
 80072cc:	f7ff ffa2 	bl	8007214 <malloc>
 80072d0:	4602      	mov	r2, r0
 80072d2:	6268      	str	r0, [r5, #36]	; 0x24
 80072d4:	b920      	cbnz	r0, 80072e0 <_Bfree+0x20>
 80072d6:	4b09      	ldr	r3, [pc, #36]	; (80072fc <_Bfree+0x3c>)
 80072d8:	4809      	ldr	r0, [pc, #36]	; (8007300 <_Bfree+0x40>)
 80072da:	218a      	movs	r1, #138	; 0x8a
 80072dc:	f000 fd96 	bl	8007e0c <__assert_func>
 80072e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072e4:	6006      	str	r6, [r0, #0]
 80072e6:	60c6      	str	r6, [r0, #12]
 80072e8:	b13c      	cbz	r4, 80072fa <_Bfree+0x3a>
 80072ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80072ec:	6862      	ldr	r2, [r4, #4]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072f4:	6021      	str	r1, [r4, #0]
 80072f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072fa:	bd70      	pop	{r4, r5, r6, pc}
 80072fc:	08008a81 	.word	0x08008a81
 8007300:	08008b04 	.word	0x08008b04

08007304 <__multadd>:
 8007304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007308:	690d      	ldr	r5, [r1, #16]
 800730a:	4607      	mov	r7, r0
 800730c:	460c      	mov	r4, r1
 800730e:	461e      	mov	r6, r3
 8007310:	f101 0c14 	add.w	ip, r1, #20
 8007314:	2000      	movs	r0, #0
 8007316:	f8dc 3000 	ldr.w	r3, [ip]
 800731a:	b299      	uxth	r1, r3
 800731c:	fb02 6101 	mla	r1, r2, r1, r6
 8007320:	0c1e      	lsrs	r6, r3, #16
 8007322:	0c0b      	lsrs	r3, r1, #16
 8007324:	fb02 3306 	mla	r3, r2, r6, r3
 8007328:	b289      	uxth	r1, r1
 800732a:	3001      	adds	r0, #1
 800732c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007330:	4285      	cmp	r5, r0
 8007332:	f84c 1b04 	str.w	r1, [ip], #4
 8007336:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800733a:	dcec      	bgt.n	8007316 <__multadd+0x12>
 800733c:	b30e      	cbz	r6, 8007382 <__multadd+0x7e>
 800733e:	68a3      	ldr	r3, [r4, #8]
 8007340:	42ab      	cmp	r3, r5
 8007342:	dc19      	bgt.n	8007378 <__multadd+0x74>
 8007344:	6861      	ldr	r1, [r4, #4]
 8007346:	4638      	mov	r0, r7
 8007348:	3101      	adds	r1, #1
 800734a:	f7ff ff79 	bl	8007240 <_Balloc>
 800734e:	4680      	mov	r8, r0
 8007350:	b928      	cbnz	r0, 800735e <__multadd+0x5a>
 8007352:	4602      	mov	r2, r0
 8007354:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <__multadd+0x84>)
 8007356:	480d      	ldr	r0, [pc, #52]	; (800738c <__multadd+0x88>)
 8007358:	21b5      	movs	r1, #181	; 0xb5
 800735a:	f000 fd57 	bl	8007e0c <__assert_func>
 800735e:	6922      	ldr	r2, [r4, #16]
 8007360:	3202      	adds	r2, #2
 8007362:	f104 010c 	add.w	r1, r4, #12
 8007366:	0092      	lsls	r2, r2, #2
 8007368:	300c      	adds	r0, #12
 800736a:	f7ff ff5b 	bl	8007224 <memcpy>
 800736e:	4621      	mov	r1, r4
 8007370:	4638      	mov	r0, r7
 8007372:	f7ff ffa5 	bl	80072c0 <_Bfree>
 8007376:	4644      	mov	r4, r8
 8007378:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800737c:	3501      	adds	r5, #1
 800737e:	615e      	str	r6, [r3, #20]
 8007380:	6125      	str	r5, [r4, #16]
 8007382:	4620      	mov	r0, r4
 8007384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007388:	08008af3 	.word	0x08008af3
 800738c:	08008b04 	.word	0x08008b04

08007390 <__hi0bits>:
 8007390:	0c03      	lsrs	r3, r0, #16
 8007392:	041b      	lsls	r3, r3, #16
 8007394:	b9d3      	cbnz	r3, 80073cc <__hi0bits+0x3c>
 8007396:	0400      	lsls	r0, r0, #16
 8007398:	2310      	movs	r3, #16
 800739a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800739e:	bf04      	itt	eq
 80073a0:	0200      	lsleq	r0, r0, #8
 80073a2:	3308      	addeq	r3, #8
 80073a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80073a8:	bf04      	itt	eq
 80073aa:	0100      	lsleq	r0, r0, #4
 80073ac:	3304      	addeq	r3, #4
 80073ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80073b2:	bf04      	itt	eq
 80073b4:	0080      	lsleq	r0, r0, #2
 80073b6:	3302      	addeq	r3, #2
 80073b8:	2800      	cmp	r0, #0
 80073ba:	db05      	blt.n	80073c8 <__hi0bits+0x38>
 80073bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80073c0:	f103 0301 	add.w	r3, r3, #1
 80073c4:	bf08      	it	eq
 80073c6:	2320      	moveq	r3, #32
 80073c8:	4618      	mov	r0, r3
 80073ca:	4770      	bx	lr
 80073cc:	2300      	movs	r3, #0
 80073ce:	e7e4      	b.n	800739a <__hi0bits+0xa>

080073d0 <__lo0bits>:
 80073d0:	6803      	ldr	r3, [r0, #0]
 80073d2:	f013 0207 	ands.w	r2, r3, #7
 80073d6:	4601      	mov	r1, r0
 80073d8:	d00b      	beq.n	80073f2 <__lo0bits+0x22>
 80073da:	07da      	lsls	r2, r3, #31
 80073dc:	d423      	bmi.n	8007426 <__lo0bits+0x56>
 80073de:	0798      	lsls	r0, r3, #30
 80073e0:	bf49      	itett	mi
 80073e2:	085b      	lsrmi	r3, r3, #1
 80073e4:	089b      	lsrpl	r3, r3, #2
 80073e6:	2001      	movmi	r0, #1
 80073e8:	600b      	strmi	r3, [r1, #0]
 80073ea:	bf5c      	itt	pl
 80073ec:	600b      	strpl	r3, [r1, #0]
 80073ee:	2002      	movpl	r0, #2
 80073f0:	4770      	bx	lr
 80073f2:	b298      	uxth	r0, r3
 80073f4:	b9a8      	cbnz	r0, 8007422 <__lo0bits+0x52>
 80073f6:	0c1b      	lsrs	r3, r3, #16
 80073f8:	2010      	movs	r0, #16
 80073fa:	b2da      	uxtb	r2, r3
 80073fc:	b90a      	cbnz	r2, 8007402 <__lo0bits+0x32>
 80073fe:	3008      	adds	r0, #8
 8007400:	0a1b      	lsrs	r3, r3, #8
 8007402:	071a      	lsls	r2, r3, #28
 8007404:	bf04      	itt	eq
 8007406:	091b      	lsreq	r3, r3, #4
 8007408:	3004      	addeq	r0, #4
 800740a:	079a      	lsls	r2, r3, #30
 800740c:	bf04      	itt	eq
 800740e:	089b      	lsreq	r3, r3, #2
 8007410:	3002      	addeq	r0, #2
 8007412:	07da      	lsls	r2, r3, #31
 8007414:	d403      	bmi.n	800741e <__lo0bits+0x4e>
 8007416:	085b      	lsrs	r3, r3, #1
 8007418:	f100 0001 	add.w	r0, r0, #1
 800741c:	d005      	beq.n	800742a <__lo0bits+0x5a>
 800741e:	600b      	str	r3, [r1, #0]
 8007420:	4770      	bx	lr
 8007422:	4610      	mov	r0, r2
 8007424:	e7e9      	b.n	80073fa <__lo0bits+0x2a>
 8007426:	2000      	movs	r0, #0
 8007428:	4770      	bx	lr
 800742a:	2020      	movs	r0, #32
 800742c:	4770      	bx	lr
	...

08007430 <__i2b>:
 8007430:	b510      	push	{r4, lr}
 8007432:	460c      	mov	r4, r1
 8007434:	2101      	movs	r1, #1
 8007436:	f7ff ff03 	bl	8007240 <_Balloc>
 800743a:	4602      	mov	r2, r0
 800743c:	b928      	cbnz	r0, 800744a <__i2b+0x1a>
 800743e:	4b05      	ldr	r3, [pc, #20]	; (8007454 <__i2b+0x24>)
 8007440:	4805      	ldr	r0, [pc, #20]	; (8007458 <__i2b+0x28>)
 8007442:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007446:	f000 fce1 	bl	8007e0c <__assert_func>
 800744a:	2301      	movs	r3, #1
 800744c:	6144      	str	r4, [r0, #20]
 800744e:	6103      	str	r3, [r0, #16]
 8007450:	bd10      	pop	{r4, pc}
 8007452:	bf00      	nop
 8007454:	08008af3 	.word	0x08008af3
 8007458:	08008b04 	.word	0x08008b04

0800745c <__multiply>:
 800745c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007460:	4691      	mov	r9, r2
 8007462:	690a      	ldr	r2, [r1, #16]
 8007464:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007468:	429a      	cmp	r2, r3
 800746a:	bfb8      	it	lt
 800746c:	460b      	movlt	r3, r1
 800746e:	460c      	mov	r4, r1
 8007470:	bfbc      	itt	lt
 8007472:	464c      	movlt	r4, r9
 8007474:	4699      	movlt	r9, r3
 8007476:	6927      	ldr	r7, [r4, #16]
 8007478:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800747c:	68a3      	ldr	r3, [r4, #8]
 800747e:	6861      	ldr	r1, [r4, #4]
 8007480:	eb07 060a 	add.w	r6, r7, sl
 8007484:	42b3      	cmp	r3, r6
 8007486:	b085      	sub	sp, #20
 8007488:	bfb8      	it	lt
 800748a:	3101      	addlt	r1, #1
 800748c:	f7ff fed8 	bl	8007240 <_Balloc>
 8007490:	b930      	cbnz	r0, 80074a0 <__multiply+0x44>
 8007492:	4602      	mov	r2, r0
 8007494:	4b44      	ldr	r3, [pc, #272]	; (80075a8 <__multiply+0x14c>)
 8007496:	4845      	ldr	r0, [pc, #276]	; (80075ac <__multiply+0x150>)
 8007498:	f240 115d 	movw	r1, #349	; 0x15d
 800749c:	f000 fcb6 	bl	8007e0c <__assert_func>
 80074a0:	f100 0514 	add.w	r5, r0, #20
 80074a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074a8:	462b      	mov	r3, r5
 80074aa:	2200      	movs	r2, #0
 80074ac:	4543      	cmp	r3, r8
 80074ae:	d321      	bcc.n	80074f4 <__multiply+0x98>
 80074b0:	f104 0314 	add.w	r3, r4, #20
 80074b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80074b8:	f109 0314 	add.w	r3, r9, #20
 80074bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80074c0:	9202      	str	r2, [sp, #8]
 80074c2:	1b3a      	subs	r2, r7, r4
 80074c4:	3a15      	subs	r2, #21
 80074c6:	f022 0203 	bic.w	r2, r2, #3
 80074ca:	3204      	adds	r2, #4
 80074cc:	f104 0115 	add.w	r1, r4, #21
 80074d0:	428f      	cmp	r7, r1
 80074d2:	bf38      	it	cc
 80074d4:	2204      	movcc	r2, #4
 80074d6:	9201      	str	r2, [sp, #4]
 80074d8:	9a02      	ldr	r2, [sp, #8]
 80074da:	9303      	str	r3, [sp, #12]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d80c      	bhi.n	80074fa <__multiply+0x9e>
 80074e0:	2e00      	cmp	r6, #0
 80074e2:	dd03      	ble.n	80074ec <__multiply+0x90>
 80074e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d05a      	beq.n	80075a2 <__multiply+0x146>
 80074ec:	6106      	str	r6, [r0, #16]
 80074ee:	b005      	add	sp, #20
 80074f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f4:	f843 2b04 	str.w	r2, [r3], #4
 80074f8:	e7d8      	b.n	80074ac <__multiply+0x50>
 80074fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80074fe:	f1ba 0f00 	cmp.w	sl, #0
 8007502:	d024      	beq.n	800754e <__multiply+0xf2>
 8007504:	f104 0e14 	add.w	lr, r4, #20
 8007508:	46a9      	mov	r9, r5
 800750a:	f04f 0c00 	mov.w	ip, #0
 800750e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007512:	f8d9 1000 	ldr.w	r1, [r9]
 8007516:	fa1f fb82 	uxth.w	fp, r2
 800751a:	b289      	uxth	r1, r1
 800751c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007520:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007524:	f8d9 2000 	ldr.w	r2, [r9]
 8007528:	4461      	add	r1, ip
 800752a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800752e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007532:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007536:	b289      	uxth	r1, r1
 8007538:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800753c:	4577      	cmp	r7, lr
 800753e:	f849 1b04 	str.w	r1, [r9], #4
 8007542:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007546:	d8e2      	bhi.n	800750e <__multiply+0xb2>
 8007548:	9a01      	ldr	r2, [sp, #4]
 800754a:	f845 c002 	str.w	ip, [r5, r2]
 800754e:	9a03      	ldr	r2, [sp, #12]
 8007550:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007554:	3304      	adds	r3, #4
 8007556:	f1b9 0f00 	cmp.w	r9, #0
 800755a:	d020      	beq.n	800759e <__multiply+0x142>
 800755c:	6829      	ldr	r1, [r5, #0]
 800755e:	f104 0c14 	add.w	ip, r4, #20
 8007562:	46ae      	mov	lr, r5
 8007564:	f04f 0a00 	mov.w	sl, #0
 8007568:	f8bc b000 	ldrh.w	fp, [ip]
 800756c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007570:	fb09 220b 	mla	r2, r9, fp, r2
 8007574:	4492      	add	sl, r2
 8007576:	b289      	uxth	r1, r1
 8007578:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800757c:	f84e 1b04 	str.w	r1, [lr], #4
 8007580:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007584:	f8be 1000 	ldrh.w	r1, [lr]
 8007588:	0c12      	lsrs	r2, r2, #16
 800758a:	fb09 1102 	mla	r1, r9, r2, r1
 800758e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007592:	4567      	cmp	r7, ip
 8007594:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007598:	d8e6      	bhi.n	8007568 <__multiply+0x10c>
 800759a:	9a01      	ldr	r2, [sp, #4]
 800759c:	50a9      	str	r1, [r5, r2]
 800759e:	3504      	adds	r5, #4
 80075a0:	e79a      	b.n	80074d8 <__multiply+0x7c>
 80075a2:	3e01      	subs	r6, #1
 80075a4:	e79c      	b.n	80074e0 <__multiply+0x84>
 80075a6:	bf00      	nop
 80075a8:	08008af3 	.word	0x08008af3
 80075ac:	08008b04 	.word	0x08008b04

080075b0 <__pow5mult>:
 80075b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075b4:	4615      	mov	r5, r2
 80075b6:	f012 0203 	ands.w	r2, r2, #3
 80075ba:	4606      	mov	r6, r0
 80075bc:	460f      	mov	r7, r1
 80075be:	d007      	beq.n	80075d0 <__pow5mult+0x20>
 80075c0:	4c25      	ldr	r4, [pc, #148]	; (8007658 <__pow5mult+0xa8>)
 80075c2:	3a01      	subs	r2, #1
 80075c4:	2300      	movs	r3, #0
 80075c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80075ca:	f7ff fe9b 	bl	8007304 <__multadd>
 80075ce:	4607      	mov	r7, r0
 80075d0:	10ad      	asrs	r5, r5, #2
 80075d2:	d03d      	beq.n	8007650 <__pow5mult+0xa0>
 80075d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80075d6:	b97c      	cbnz	r4, 80075f8 <__pow5mult+0x48>
 80075d8:	2010      	movs	r0, #16
 80075da:	f7ff fe1b 	bl	8007214 <malloc>
 80075de:	4602      	mov	r2, r0
 80075e0:	6270      	str	r0, [r6, #36]	; 0x24
 80075e2:	b928      	cbnz	r0, 80075f0 <__pow5mult+0x40>
 80075e4:	4b1d      	ldr	r3, [pc, #116]	; (800765c <__pow5mult+0xac>)
 80075e6:	481e      	ldr	r0, [pc, #120]	; (8007660 <__pow5mult+0xb0>)
 80075e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80075ec:	f000 fc0e 	bl	8007e0c <__assert_func>
 80075f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075f4:	6004      	str	r4, [r0, #0]
 80075f6:	60c4      	str	r4, [r0, #12]
 80075f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80075fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007600:	b94c      	cbnz	r4, 8007616 <__pow5mult+0x66>
 8007602:	f240 2171 	movw	r1, #625	; 0x271
 8007606:	4630      	mov	r0, r6
 8007608:	f7ff ff12 	bl	8007430 <__i2b>
 800760c:	2300      	movs	r3, #0
 800760e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007612:	4604      	mov	r4, r0
 8007614:	6003      	str	r3, [r0, #0]
 8007616:	f04f 0900 	mov.w	r9, #0
 800761a:	07eb      	lsls	r3, r5, #31
 800761c:	d50a      	bpl.n	8007634 <__pow5mult+0x84>
 800761e:	4639      	mov	r1, r7
 8007620:	4622      	mov	r2, r4
 8007622:	4630      	mov	r0, r6
 8007624:	f7ff ff1a 	bl	800745c <__multiply>
 8007628:	4639      	mov	r1, r7
 800762a:	4680      	mov	r8, r0
 800762c:	4630      	mov	r0, r6
 800762e:	f7ff fe47 	bl	80072c0 <_Bfree>
 8007632:	4647      	mov	r7, r8
 8007634:	106d      	asrs	r5, r5, #1
 8007636:	d00b      	beq.n	8007650 <__pow5mult+0xa0>
 8007638:	6820      	ldr	r0, [r4, #0]
 800763a:	b938      	cbnz	r0, 800764c <__pow5mult+0x9c>
 800763c:	4622      	mov	r2, r4
 800763e:	4621      	mov	r1, r4
 8007640:	4630      	mov	r0, r6
 8007642:	f7ff ff0b 	bl	800745c <__multiply>
 8007646:	6020      	str	r0, [r4, #0]
 8007648:	f8c0 9000 	str.w	r9, [r0]
 800764c:	4604      	mov	r4, r0
 800764e:	e7e4      	b.n	800761a <__pow5mult+0x6a>
 8007650:	4638      	mov	r0, r7
 8007652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007656:	bf00      	nop
 8007658:	08008c50 	.word	0x08008c50
 800765c:	08008a81 	.word	0x08008a81
 8007660:	08008b04 	.word	0x08008b04

08007664 <__lshift>:
 8007664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007668:	460c      	mov	r4, r1
 800766a:	6849      	ldr	r1, [r1, #4]
 800766c:	6923      	ldr	r3, [r4, #16]
 800766e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007672:	68a3      	ldr	r3, [r4, #8]
 8007674:	4607      	mov	r7, r0
 8007676:	4691      	mov	r9, r2
 8007678:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800767c:	f108 0601 	add.w	r6, r8, #1
 8007680:	42b3      	cmp	r3, r6
 8007682:	db0b      	blt.n	800769c <__lshift+0x38>
 8007684:	4638      	mov	r0, r7
 8007686:	f7ff fddb 	bl	8007240 <_Balloc>
 800768a:	4605      	mov	r5, r0
 800768c:	b948      	cbnz	r0, 80076a2 <__lshift+0x3e>
 800768e:	4602      	mov	r2, r0
 8007690:	4b2a      	ldr	r3, [pc, #168]	; (800773c <__lshift+0xd8>)
 8007692:	482b      	ldr	r0, [pc, #172]	; (8007740 <__lshift+0xdc>)
 8007694:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007698:	f000 fbb8 	bl	8007e0c <__assert_func>
 800769c:	3101      	adds	r1, #1
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	e7ee      	b.n	8007680 <__lshift+0x1c>
 80076a2:	2300      	movs	r3, #0
 80076a4:	f100 0114 	add.w	r1, r0, #20
 80076a8:	f100 0210 	add.w	r2, r0, #16
 80076ac:	4618      	mov	r0, r3
 80076ae:	4553      	cmp	r3, sl
 80076b0:	db37      	blt.n	8007722 <__lshift+0xbe>
 80076b2:	6920      	ldr	r0, [r4, #16]
 80076b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076b8:	f104 0314 	add.w	r3, r4, #20
 80076bc:	f019 091f 	ands.w	r9, r9, #31
 80076c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80076c8:	d02f      	beq.n	800772a <__lshift+0xc6>
 80076ca:	f1c9 0e20 	rsb	lr, r9, #32
 80076ce:	468a      	mov	sl, r1
 80076d0:	f04f 0c00 	mov.w	ip, #0
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	fa02 f209 	lsl.w	r2, r2, r9
 80076da:	ea42 020c 	orr.w	r2, r2, ip
 80076de:	f84a 2b04 	str.w	r2, [sl], #4
 80076e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80076e6:	4298      	cmp	r0, r3
 80076e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80076ec:	d8f2      	bhi.n	80076d4 <__lshift+0x70>
 80076ee:	1b03      	subs	r3, r0, r4
 80076f0:	3b15      	subs	r3, #21
 80076f2:	f023 0303 	bic.w	r3, r3, #3
 80076f6:	3304      	adds	r3, #4
 80076f8:	f104 0215 	add.w	r2, r4, #21
 80076fc:	4290      	cmp	r0, r2
 80076fe:	bf38      	it	cc
 8007700:	2304      	movcc	r3, #4
 8007702:	f841 c003 	str.w	ip, [r1, r3]
 8007706:	f1bc 0f00 	cmp.w	ip, #0
 800770a:	d001      	beq.n	8007710 <__lshift+0xac>
 800770c:	f108 0602 	add.w	r6, r8, #2
 8007710:	3e01      	subs	r6, #1
 8007712:	4638      	mov	r0, r7
 8007714:	612e      	str	r6, [r5, #16]
 8007716:	4621      	mov	r1, r4
 8007718:	f7ff fdd2 	bl	80072c0 <_Bfree>
 800771c:	4628      	mov	r0, r5
 800771e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007722:	f842 0f04 	str.w	r0, [r2, #4]!
 8007726:	3301      	adds	r3, #1
 8007728:	e7c1      	b.n	80076ae <__lshift+0x4a>
 800772a:	3904      	subs	r1, #4
 800772c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007730:	f841 2f04 	str.w	r2, [r1, #4]!
 8007734:	4298      	cmp	r0, r3
 8007736:	d8f9      	bhi.n	800772c <__lshift+0xc8>
 8007738:	e7ea      	b.n	8007710 <__lshift+0xac>
 800773a:	bf00      	nop
 800773c:	08008af3 	.word	0x08008af3
 8007740:	08008b04 	.word	0x08008b04

08007744 <__mcmp>:
 8007744:	b530      	push	{r4, r5, lr}
 8007746:	6902      	ldr	r2, [r0, #16]
 8007748:	690c      	ldr	r4, [r1, #16]
 800774a:	1b12      	subs	r2, r2, r4
 800774c:	d10e      	bne.n	800776c <__mcmp+0x28>
 800774e:	f100 0314 	add.w	r3, r0, #20
 8007752:	3114      	adds	r1, #20
 8007754:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007758:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800775c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007760:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007764:	42a5      	cmp	r5, r4
 8007766:	d003      	beq.n	8007770 <__mcmp+0x2c>
 8007768:	d305      	bcc.n	8007776 <__mcmp+0x32>
 800776a:	2201      	movs	r2, #1
 800776c:	4610      	mov	r0, r2
 800776e:	bd30      	pop	{r4, r5, pc}
 8007770:	4283      	cmp	r3, r0
 8007772:	d3f3      	bcc.n	800775c <__mcmp+0x18>
 8007774:	e7fa      	b.n	800776c <__mcmp+0x28>
 8007776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800777a:	e7f7      	b.n	800776c <__mcmp+0x28>

0800777c <__mdiff>:
 800777c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007780:	460c      	mov	r4, r1
 8007782:	4606      	mov	r6, r0
 8007784:	4611      	mov	r1, r2
 8007786:	4620      	mov	r0, r4
 8007788:	4690      	mov	r8, r2
 800778a:	f7ff ffdb 	bl	8007744 <__mcmp>
 800778e:	1e05      	subs	r5, r0, #0
 8007790:	d110      	bne.n	80077b4 <__mdiff+0x38>
 8007792:	4629      	mov	r1, r5
 8007794:	4630      	mov	r0, r6
 8007796:	f7ff fd53 	bl	8007240 <_Balloc>
 800779a:	b930      	cbnz	r0, 80077aa <__mdiff+0x2e>
 800779c:	4b3a      	ldr	r3, [pc, #232]	; (8007888 <__mdiff+0x10c>)
 800779e:	4602      	mov	r2, r0
 80077a0:	f240 2132 	movw	r1, #562	; 0x232
 80077a4:	4839      	ldr	r0, [pc, #228]	; (800788c <__mdiff+0x110>)
 80077a6:	f000 fb31 	bl	8007e0c <__assert_func>
 80077aa:	2301      	movs	r3, #1
 80077ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b4:	bfa4      	itt	ge
 80077b6:	4643      	movge	r3, r8
 80077b8:	46a0      	movge	r8, r4
 80077ba:	4630      	mov	r0, r6
 80077bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80077c0:	bfa6      	itte	ge
 80077c2:	461c      	movge	r4, r3
 80077c4:	2500      	movge	r5, #0
 80077c6:	2501      	movlt	r5, #1
 80077c8:	f7ff fd3a 	bl	8007240 <_Balloc>
 80077cc:	b920      	cbnz	r0, 80077d8 <__mdiff+0x5c>
 80077ce:	4b2e      	ldr	r3, [pc, #184]	; (8007888 <__mdiff+0x10c>)
 80077d0:	4602      	mov	r2, r0
 80077d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80077d6:	e7e5      	b.n	80077a4 <__mdiff+0x28>
 80077d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80077dc:	6926      	ldr	r6, [r4, #16]
 80077de:	60c5      	str	r5, [r0, #12]
 80077e0:	f104 0914 	add.w	r9, r4, #20
 80077e4:	f108 0514 	add.w	r5, r8, #20
 80077e8:	f100 0e14 	add.w	lr, r0, #20
 80077ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80077f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80077f4:	f108 0210 	add.w	r2, r8, #16
 80077f8:	46f2      	mov	sl, lr
 80077fa:	2100      	movs	r1, #0
 80077fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007800:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007804:	fa1f f883 	uxth.w	r8, r3
 8007808:	fa11 f18b 	uxtah	r1, r1, fp
 800780c:	0c1b      	lsrs	r3, r3, #16
 800780e:	eba1 0808 	sub.w	r8, r1, r8
 8007812:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007816:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800781a:	fa1f f888 	uxth.w	r8, r8
 800781e:	1419      	asrs	r1, r3, #16
 8007820:	454e      	cmp	r6, r9
 8007822:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007826:	f84a 3b04 	str.w	r3, [sl], #4
 800782a:	d8e7      	bhi.n	80077fc <__mdiff+0x80>
 800782c:	1b33      	subs	r3, r6, r4
 800782e:	3b15      	subs	r3, #21
 8007830:	f023 0303 	bic.w	r3, r3, #3
 8007834:	3304      	adds	r3, #4
 8007836:	3415      	adds	r4, #21
 8007838:	42a6      	cmp	r6, r4
 800783a:	bf38      	it	cc
 800783c:	2304      	movcc	r3, #4
 800783e:	441d      	add	r5, r3
 8007840:	4473      	add	r3, lr
 8007842:	469e      	mov	lr, r3
 8007844:	462e      	mov	r6, r5
 8007846:	4566      	cmp	r6, ip
 8007848:	d30e      	bcc.n	8007868 <__mdiff+0xec>
 800784a:	f10c 0203 	add.w	r2, ip, #3
 800784e:	1b52      	subs	r2, r2, r5
 8007850:	f022 0203 	bic.w	r2, r2, #3
 8007854:	3d03      	subs	r5, #3
 8007856:	45ac      	cmp	ip, r5
 8007858:	bf38      	it	cc
 800785a:	2200      	movcc	r2, #0
 800785c:	441a      	add	r2, r3
 800785e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007862:	b17b      	cbz	r3, 8007884 <__mdiff+0x108>
 8007864:	6107      	str	r7, [r0, #16]
 8007866:	e7a3      	b.n	80077b0 <__mdiff+0x34>
 8007868:	f856 8b04 	ldr.w	r8, [r6], #4
 800786c:	fa11 f288 	uxtah	r2, r1, r8
 8007870:	1414      	asrs	r4, r2, #16
 8007872:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007876:	b292      	uxth	r2, r2
 8007878:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800787c:	f84e 2b04 	str.w	r2, [lr], #4
 8007880:	1421      	asrs	r1, r4, #16
 8007882:	e7e0      	b.n	8007846 <__mdiff+0xca>
 8007884:	3f01      	subs	r7, #1
 8007886:	e7ea      	b.n	800785e <__mdiff+0xe2>
 8007888:	08008af3 	.word	0x08008af3
 800788c:	08008b04 	.word	0x08008b04

08007890 <__d2b>:
 8007890:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007894:	4689      	mov	r9, r1
 8007896:	2101      	movs	r1, #1
 8007898:	ec57 6b10 	vmov	r6, r7, d0
 800789c:	4690      	mov	r8, r2
 800789e:	f7ff fccf 	bl	8007240 <_Balloc>
 80078a2:	4604      	mov	r4, r0
 80078a4:	b930      	cbnz	r0, 80078b4 <__d2b+0x24>
 80078a6:	4602      	mov	r2, r0
 80078a8:	4b25      	ldr	r3, [pc, #148]	; (8007940 <__d2b+0xb0>)
 80078aa:	4826      	ldr	r0, [pc, #152]	; (8007944 <__d2b+0xb4>)
 80078ac:	f240 310a 	movw	r1, #778	; 0x30a
 80078b0:	f000 faac 	bl	8007e0c <__assert_func>
 80078b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80078b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80078bc:	bb35      	cbnz	r5, 800790c <__d2b+0x7c>
 80078be:	2e00      	cmp	r6, #0
 80078c0:	9301      	str	r3, [sp, #4]
 80078c2:	d028      	beq.n	8007916 <__d2b+0x86>
 80078c4:	4668      	mov	r0, sp
 80078c6:	9600      	str	r6, [sp, #0]
 80078c8:	f7ff fd82 	bl	80073d0 <__lo0bits>
 80078cc:	9900      	ldr	r1, [sp, #0]
 80078ce:	b300      	cbz	r0, 8007912 <__d2b+0x82>
 80078d0:	9a01      	ldr	r2, [sp, #4]
 80078d2:	f1c0 0320 	rsb	r3, r0, #32
 80078d6:	fa02 f303 	lsl.w	r3, r2, r3
 80078da:	430b      	orrs	r3, r1
 80078dc:	40c2      	lsrs	r2, r0
 80078de:	6163      	str	r3, [r4, #20]
 80078e0:	9201      	str	r2, [sp, #4]
 80078e2:	9b01      	ldr	r3, [sp, #4]
 80078e4:	61a3      	str	r3, [r4, #24]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	bf14      	ite	ne
 80078ea:	2202      	movne	r2, #2
 80078ec:	2201      	moveq	r2, #1
 80078ee:	6122      	str	r2, [r4, #16]
 80078f0:	b1d5      	cbz	r5, 8007928 <__d2b+0x98>
 80078f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80078f6:	4405      	add	r5, r0
 80078f8:	f8c9 5000 	str.w	r5, [r9]
 80078fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007900:	f8c8 0000 	str.w	r0, [r8]
 8007904:	4620      	mov	r0, r4
 8007906:	b003      	add	sp, #12
 8007908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800790c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007910:	e7d5      	b.n	80078be <__d2b+0x2e>
 8007912:	6161      	str	r1, [r4, #20]
 8007914:	e7e5      	b.n	80078e2 <__d2b+0x52>
 8007916:	a801      	add	r0, sp, #4
 8007918:	f7ff fd5a 	bl	80073d0 <__lo0bits>
 800791c:	9b01      	ldr	r3, [sp, #4]
 800791e:	6163      	str	r3, [r4, #20]
 8007920:	2201      	movs	r2, #1
 8007922:	6122      	str	r2, [r4, #16]
 8007924:	3020      	adds	r0, #32
 8007926:	e7e3      	b.n	80078f0 <__d2b+0x60>
 8007928:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800792c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007930:	f8c9 0000 	str.w	r0, [r9]
 8007934:	6918      	ldr	r0, [r3, #16]
 8007936:	f7ff fd2b 	bl	8007390 <__hi0bits>
 800793a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800793e:	e7df      	b.n	8007900 <__d2b+0x70>
 8007940:	08008af3 	.word	0x08008af3
 8007944:	08008b04 	.word	0x08008b04

08007948 <_calloc_r>:
 8007948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800794a:	fba1 2402 	umull	r2, r4, r1, r2
 800794e:	b94c      	cbnz	r4, 8007964 <_calloc_r+0x1c>
 8007950:	4611      	mov	r1, r2
 8007952:	9201      	str	r2, [sp, #4]
 8007954:	f000 f87a 	bl	8007a4c <_malloc_r>
 8007958:	9a01      	ldr	r2, [sp, #4]
 800795a:	4605      	mov	r5, r0
 800795c:	b930      	cbnz	r0, 800796c <_calloc_r+0x24>
 800795e:	4628      	mov	r0, r5
 8007960:	b003      	add	sp, #12
 8007962:	bd30      	pop	{r4, r5, pc}
 8007964:	220c      	movs	r2, #12
 8007966:	6002      	str	r2, [r0, #0]
 8007968:	2500      	movs	r5, #0
 800796a:	e7f8      	b.n	800795e <_calloc_r+0x16>
 800796c:	4621      	mov	r1, r4
 800796e:	f7fe f93f 	bl	8005bf0 <memset>
 8007972:	e7f4      	b.n	800795e <_calloc_r+0x16>

08007974 <_free_r>:
 8007974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007976:	2900      	cmp	r1, #0
 8007978:	d044      	beq.n	8007a04 <_free_r+0x90>
 800797a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800797e:	9001      	str	r0, [sp, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	f1a1 0404 	sub.w	r4, r1, #4
 8007986:	bfb8      	it	lt
 8007988:	18e4      	addlt	r4, r4, r3
 800798a:	f000 fa9b 	bl	8007ec4 <__malloc_lock>
 800798e:	4a1e      	ldr	r2, [pc, #120]	; (8007a08 <_free_r+0x94>)
 8007990:	9801      	ldr	r0, [sp, #4]
 8007992:	6813      	ldr	r3, [r2, #0]
 8007994:	b933      	cbnz	r3, 80079a4 <_free_r+0x30>
 8007996:	6063      	str	r3, [r4, #4]
 8007998:	6014      	str	r4, [r2, #0]
 800799a:	b003      	add	sp, #12
 800799c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079a0:	f000 ba96 	b.w	8007ed0 <__malloc_unlock>
 80079a4:	42a3      	cmp	r3, r4
 80079a6:	d908      	bls.n	80079ba <_free_r+0x46>
 80079a8:	6825      	ldr	r5, [r4, #0]
 80079aa:	1961      	adds	r1, r4, r5
 80079ac:	428b      	cmp	r3, r1
 80079ae:	bf01      	itttt	eq
 80079b0:	6819      	ldreq	r1, [r3, #0]
 80079b2:	685b      	ldreq	r3, [r3, #4]
 80079b4:	1949      	addeq	r1, r1, r5
 80079b6:	6021      	streq	r1, [r4, #0]
 80079b8:	e7ed      	b.n	8007996 <_free_r+0x22>
 80079ba:	461a      	mov	r2, r3
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	b10b      	cbz	r3, 80079c4 <_free_r+0x50>
 80079c0:	42a3      	cmp	r3, r4
 80079c2:	d9fa      	bls.n	80079ba <_free_r+0x46>
 80079c4:	6811      	ldr	r1, [r2, #0]
 80079c6:	1855      	adds	r5, r2, r1
 80079c8:	42a5      	cmp	r5, r4
 80079ca:	d10b      	bne.n	80079e4 <_free_r+0x70>
 80079cc:	6824      	ldr	r4, [r4, #0]
 80079ce:	4421      	add	r1, r4
 80079d0:	1854      	adds	r4, r2, r1
 80079d2:	42a3      	cmp	r3, r4
 80079d4:	6011      	str	r1, [r2, #0]
 80079d6:	d1e0      	bne.n	800799a <_free_r+0x26>
 80079d8:	681c      	ldr	r4, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	6053      	str	r3, [r2, #4]
 80079de:	4421      	add	r1, r4
 80079e0:	6011      	str	r1, [r2, #0]
 80079e2:	e7da      	b.n	800799a <_free_r+0x26>
 80079e4:	d902      	bls.n	80079ec <_free_r+0x78>
 80079e6:	230c      	movs	r3, #12
 80079e8:	6003      	str	r3, [r0, #0]
 80079ea:	e7d6      	b.n	800799a <_free_r+0x26>
 80079ec:	6825      	ldr	r5, [r4, #0]
 80079ee:	1961      	adds	r1, r4, r5
 80079f0:	428b      	cmp	r3, r1
 80079f2:	bf04      	itt	eq
 80079f4:	6819      	ldreq	r1, [r3, #0]
 80079f6:	685b      	ldreq	r3, [r3, #4]
 80079f8:	6063      	str	r3, [r4, #4]
 80079fa:	bf04      	itt	eq
 80079fc:	1949      	addeq	r1, r1, r5
 80079fe:	6021      	streq	r1, [r4, #0]
 8007a00:	6054      	str	r4, [r2, #4]
 8007a02:	e7ca      	b.n	800799a <_free_r+0x26>
 8007a04:	b003      	add	sp, #12
 8007a06:	bd30      	pop	{r4, r5, pc}
 8007a08:	20000328 	.word	0x20000328

08007a0c <sbrk_aligned>:
 8007a0c:	b570      	push	{r4, r5, r6, lr}
 8007a0e:	4e0e      	ldr	r6, [pc, #56]	; (8007a48 <sbrk_aligned+0x3c>)
 8007a10:	460c      	mov	r4, r1
 8007a12:	6831      	ldr	r1, [r6, #0]
 8007a14:	4605      	mov	r5, r0
 8007a16:	b911      	cbnz	r1, 8007a1e <sbrk_aligned+0x12>
 8007a18:	f000 f9e8 	bl	8007dec <_sbrk_r>
 8007a1c:	6030      	str	r0, [r6, #0]
 8007a1e:	4621      	mov	r1, r4
 8007a20:	4628      	mov	r0, r5
 8007a22:	f000 f9e3 	bl	8007dec <_sbrk_r>
 8007a26:	1c43      	adds	r3, r0, #1
 8007a28:	d00a      	beq.n	8007a40 <sbrk_aligned+0x34>
 8007a2a:	1cc4      	adds	r4, r0, #3
 8007a2c:	f024 0403 	bic.w	r4, r4, #3
 8007a30:	42a0      	cmp	r0, r4
 8007a32:	d007      	beq.n	8007a44 <sbrk_aligned+0x38>
 8007a34:	1a21      	subs	r1, r4, r0
 8007a36:	4628      	mov	r0, r5
 8007a38:	f000 f9d8 	bl	8007dec <_sbrk_r>
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	d101      	bne.n	8007a44 <sbrk_aligned+0x38>
 8007a40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007a44:	4620      	mov	r0, r4
 8007a46:	bd70      	pop	{r4, r5, r6, pc}
 8007a48:	2000032c 	.word	0x2000032c

08007a4c <_malloc_r>:
 8007a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a50:	1ccd      	adds	r5, r1, #3
 8007a52:	f025 0503 	bic.w	r5, r5, #3
 8007a56:	3508      	adds	r5, #8
 8007a58:	2d0c      	cmp	r5, #12
 8007a5a:	bf38      	it	cc
 8007a5c:	250c      	movcc	r5, #12
 8007a5e:	2d00      	cmp	r5, #0
 8007a60:	4607      	mov	r7, r0
 8007a62:	db01      	blt.n	8007a68 <_malloc_r+0x1c>
 8007a64:	42a9      	cmp	r1, r5
 8007a66:	d905      	bls.n	8007a74 <_malloc_r+0x28>
 8007a68:	230c      	movs	r3, #12
 8007a6a:	603b      	str	r3, [r7, #0]
 8007a6c:	2600      	movs	r6, #0
 8007a6e:	4630      	mov	r0, r6
 8007a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a74:	4e2e      	ldr	r6, [pc, #184]	; (8007b30 <_malloc_r+0xe4>)
 8007a76:	f000 fa25 	bl	8007ec4 <__malloc_lock>
 8007a7a:	6833      	ldr	r3, [r6, #0]
 8007a7c:	461c      	mov	r4, r3
 8007a7e:	bb34      	cbnz	r4, 8007ace <_malloc_r+0x82>
 8007a80:	4629      	mov	r1, r5
 8007a82:	4638      	mov	r0, r7
 8007a84:	f7ff ffc2 	bl	8007a0c <sbrk_aligned>
 8007a88:	1c43      	adds	r3, r0, #1
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	d14d      	bne.n	8007b2a <_malloc_r+0xde>
 8007a8e:	6834      	ldr	r4, [r6, #0]
 8007a90:	4626      	mov	r6, r4
 8007a92:	2e00      	cmp	r6, #0
 8007a94:	d140      	bne.n	8007b18 <_malloc_r+0xcc>
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	4631      	mov	r1, r6
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	eb04 0803 	add.w	r8, r4, r3
 8007aa0:	f000 f9a4 	bl	8007dec <_sbrk_r>
 8007aa4:	4580      	cmp	r8, r0
 8007aa6:	d13a      	bne.n	8007b1e <_malloc_r+0xd2>
 8007aa8:	6821      	ldr	r1, [r4, #0]
 8007aaa:	3503      	adds	r5, #3
 8007aac:	1a6d      	subs	r5, r5, r1
 8007aae:	f025 0503 	bic.w	r5, r5, #3
 8007ab2:	3508      	adds	r5, #8
 8007ab4:	2d0c      	cmp	r5, #12
 8007ab6:	bf38      	it	cc
 8007ab8:	250c      	movcc	r5, #12
 8007aba:	4629      	mov	r1, r5
 8007abc:	4638      	mov	r0, r7
 8007abe:	f7ff ffa5 	bl	8007a0c <sbrk_aligned>
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	d02b      	beq.n	8007b1e <_malloc_r+0xd2>
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	442b      	add	r3, r5
 8007aca:	6023      	str	r3, [r4, #0]
 8007acc:	e00e      	b.n	8007aec <_malloc_r+0xa0>
 8007ace:	6822      	ldr	r2, [r4, #0]
 8007ad0:	1b52      	subs	r2, r2, r5
 8007ad2:	d41e      	bmi.n	8007b12 <_malloc_r+0xc6>
 8007ad4:	2a0b      	cmp	r2, #11
 8007ad6:	d916      	bls.n	8007b06 <_malloc_r+0xba>
 8007ad8:	1961      	adds	r1, r4, r5
 8007ada:	42a3      	cmp	r3, r4
 8007adc:	6025      	str	r5, [r4, #0]
 8007ade:	bf18      	it	ne
 8007ae0:	6059      	strne	r1, [r3, #4]
 8007ae2:	6863      	ldr	r3, [r4, #4]
 8007ae4:	bf08      	it	eq
 8007ae6:	6031      	streq	r1, [r6, #0]
 8007ae8:	5162      	str	r2, [r4, r5]
 8007aea:	604b      	str	r3, [r1, #4]
 8007aec:	4638      	mov	r0, r7
 8007aee:	f104 060b 	add.w	r6, r4, #11
 8007af2:	f000 f9ed 	bl	8007ed0 <__malloc_unlock>
 8007af6:	f026 0607 	bic.w	r6, r6, #7
 8007afa:	1d23      	adds	r3, r4, #4
 8007afc:	1af2      	subs	r2, r6, r3
 8007afe:	d0b6      	beq.n	8007a6e <_malloc_r+0x22>
 8007b00:	1b9b      	subs	r3, r3, r6
 8007b02:	50a3      	str	r3, [r4, r2]
 8007b04:	e7b3      	b.n	8007a6e <_malloc_r+0x22>
 8007b06:	6862      	ldr	r2, [r4, #4]
 8007b08:	42a3      	cmp	r3, r4
 8007b0a:	bf0c      	ite	eq
 8007b0c:	6032      	streq	r2, [r6, #0]
 8007b0e:	605a      	strne	r2, [r3, #4]
 8007b10:	e7ec      	b.n	8007aec <_malloc_r+0xa0>
 8007b12:	4623      	mov	r3, r4
 8007b14:	6864      	ldr	r4, [r4, #4]
 8007b16:	e7b2      	b.n	8007a7e <_malloc_r+0x32>
 8007b18:	4634      	mov	r4, r6
 8007b1a:	6876      	ldr	r6, [r6, #4]
 8007b1c:	e7b9      	b.n	8007a92 <_malloc_r+0x46>
 8007b1e:	230c      	movs	r3, #12
 8007b20:	603b      	str	r3, [r7, #0]
 8007b22:	4638      	mov	r0, r7
 8007b24:	f000 f9d4 	bl	8007ed0 <__malloc_unlock>
 8007b28:	e7a1      	b.n	8007a6e <_malloc_r+0x22>
 8007b2a:	6025      	str	r5, [r4, #0]
 8007b2c:	e7de      	b.n	8007aec <_malloc_r+0xa0>
 8007b2e:	bf00      	nop
 8007b30:	20000328 	.word	0x20000328

08007b34 <__ssputs_r>:
 8007b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b38:	688e      	ldr	r6, [r1, #8]
 8007b3a:	429e      	cmp	r6, r3
 8007b3c:	4682      	mov	sl, r0
 8007b3e:	460c      	mov	r4, r1
 8007b40:	4690      	mov	r8, r2
 8007b42:	461f      	mov	r7, r3
 8007b44:	d838      	bhi.n	8007bb8 <__ssputs_r+0x84>
 8007b46:	898a      	ldrh	r2, [r1, #12]
 8007b48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b4c:	d032      	beq.n	8007bb4 <__ssputs_r+0x80>
 8007b4e:	6825      	ldr	r5, [r4, #0]
 8007b50:	6909      	ldr	r1, [r1, #16]
 8007b52:	eba5 0901 	sub.w	r9, r5, r1
 8007b56:	6965      	ldr	r5, [r4, #20]
 8007b58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b60:	3301      	adds	r3, #1
 8007b62:	444b      	add	r3, r9
 8007b64:	106d      	asrs	r5, r5, #1
 8007b66:	429d      	cmp	r5, r3
 8007b68:	bf38      	it	cc
 8007b6a:	461d      	movcc	r5, r3
 8007b6c:	0553      	lsls	r3, r2, #21
 8007b6e:	d531      	bpl.n	8007bd4 <__ssputs_r+0xa0>
 8007b70:	4629      	mov	r1, r5
 8007b72:	f7ff ff6b 	bl	8007a4c <_malloc_r>
 8007b76:	4606      	mov	r6, r0
 8007b78:	b950      	cbnz	r0, 8007b90 <__ssputs_r+0x5c>
 8007b7a:	230c      	movs	r3, #12
 8007b7c:	f8ca 3000 	str.w	r3, [sl]
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b86:	81a3      	strh	r3, [r4, #12]
 8007b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b90:	6921      	ldr	r1, [r4, #16]
 8007b92:	464a      	mov	r2, r9
 8007b94:	f7ff fb46 	bl	8007224 <memcpy>
 8007b98:	89a3      	ldrh	r3, [r4, #12]
 8007b9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba2:	81a3      	strh	r3, [r4, #12]
 8007ba4:	6126      	str	r6, [r4, #16]
 8007ba6:	6165      	str	r5, [r4, #20]
 8007ba8:	444e      	add	r6, r9
 8007baa:	eba5 0509 	sub.w	r5, r5, r9
 8007bae:	6026      	str	r6, [r4, #0]
 8007bb0:	60a5      	str	r5, [r4, #8]
 8007bb2:	463e      	mov	r6, r7
 8007bb4:	42be      	cmp	r6, r7
 8007bb6:	d900      	bls.n	8007bba <__ssputs_r+0x86>
 8007bb8:	463e      	mov	r6, r7
 8007bba:	6820      	ldr	r0, [r4, #0]
 8007bbc:	4632      	mov	r2, r6
 8007bbe:	4641      	mov	r1, r8
 8007bc0:	f000 f966 	bl	8007e90 <memmove>
 8007bc4:	68a3      	ldr	r3, [r4, #8]
 8007bc6:	1b9b      	subs	r3, r3, r6
 8007bc8:	60a3      	str	r3, [r4, #8]
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	4433      	add	r3, r6
 8007bce:	6023      	str	r3, [r4, #0]
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	e7db      	b.n	8007b8c <__ssputs_r+0x58>
 8007bd4:	462a      	mov	r2, r5
 8007bd6:	f000 f981 	bl	8007edc <_realloc_r>
 8007bda:	4606      	mov	r6, r0
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d1e1      	bne.n	8007ba4 <__ssputs_r+0x70>
 8007be0:	6921      	ldr	r1, [r4, #16]
 8007be2:	4650      	mov	r0, sl
 8007be4:	f7ff fec6 	bl	8007974 <_free_r>
 8007be8:	e7c7      	b.n	8007b7a <__ssputs_r+0x46>
	...

08007bec <_svfiprintf_r>:
 8007bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf0:	4698      	mov	r8, r3
 8007bf2:	898b      	ldrh	r3, [r1, #12]
 8007bf4:	061b      	lsls	r3, r3, #24
 8007bf6:	b09d      	sub	sp, #116	; 0x74
 8007bf8:	4607      	mov	r7, r0
 8007bfa:	460d      	mov	r5, r1
 8007bfc:	4614      	mov	r4, r2
 8007bfe:	d50e      	bpl.n	8007c1e <_svfiprintf_r+0x32>
 8007c00:	690b      	ldr	r3, [r1, #16]
 8007c02:	b963      	cbnz	r3, 8007c1e <_svfiprintf_r+0x32>
 8007c04:	2140      	movs	r1, #64	; 0x40
 8007c06:	f7ff ff21 	bl	8007a4c <_malloc_r>
 8007c0a:	6028      	str	r0, [r5, #0]
 8007c0c:	6128      	str	r0, [r5, #16]
 8007c0e:	b920      	cbnz	r0, 8007c1a <_svfiprintf_r+0x2e>
 8007c10:	230c      	movs	r3, #12
 8007c12:	603b      	str	r3, [r7, #0]
 8007c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c18:	e0d1      	b.n	8007dbe <_svfiprintf_r+0x1d2>
 8007c1a:	2340      	movs	r3, #64	; 0x40
 8007c1c:	616b      	str	r3, [r5, #20]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	9309      	str	r3, [sp, #36]	; 0x24
 8007c22:	2320      	movs	r3, #32
 8007c24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c28:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c2c:	2330      	movs	r3, #48	; 0x30
 8007c2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007dd8 <_svfiprintf_r+0x1ec>
 8007c32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c36:	f04f 0901 	mov.w	r9, #1
 8007c3a:	4623      	mov	r3, r4
 8007c3c:	469a      	mov	sl, r3
 8007c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c42:	b10a      	cbz	r2, 8007c48 <_svfiprintf_r+0x5c>
 8007c44:	2a25      	cmp	r2, #37	; 0x25
 8007c46:	d1f9      	bne.n	8007c3c <_svfiprintf_r+0x50>
 8007c48:	ebba 0b04 	subs.w	fp, sl, r4
 8007c4c:	d00b      	beq.n	8007c66 <_svfiprintf_r+0x7a>
 8007c4e:	465b      	mov	r3, fp
 8007c50:	4622      	mov	r2, r4
 8007c52:	4629      	mov	r1, r5
 8007c54:	4638      	mov	r0, r7
 8007c56:	f7ff ff6d 	bl	8007b34 <__ssputs_r>
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	f000 80aa 	beq.w	8007db4 <_svfiprintf_r+0x1c8>
 8007c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c62:	445a      	add	r2, fp
 8007c64:	9209      	str	r2, [sp, #36]	; 0x24
 8007c66:	f89a 3000 	ldrb.w	r3, [sl]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f000 80a2 	beq.w	8007db4 <_svfiprintf_r+0x1c8>
 8007c70:	2300      	movs	r3, #0
 8007c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c7a:	f10a 0a01 	add.w	sl, sl, #1
 8007c7e:	9304      	str	r3, [sp, #16]
 8007c80:	9307      	str	r3, [sp, #28]
 8007c82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c86:	931a      	str	r3, [sp, #104]	; 0x68
 8007c88:	4654      	mov	r4, sl
 8007c8a:	2205      	movs	r2, #5
 8007c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c90:	4851      	ldr	r0, [pc, #324]	; (8007dd8 <_svfiprintf_r+0x1ec>)
 8007c92:	f7f8 fac5 	bl	8000220 <memchr>
 8007c96:	9a04      	ldr	r2, [sp, #16]
 8007c98:	b9d8      	cbnz	r0, 8007cd2 <_svfiprintf_r+0xe6>
 8007c9a:	06d0      	lsls	r0, r2, #27
 8007c9c:	bf44      	itt	mi
 8007c9e:	2320      	movmi	r3, #32
 8007ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ca4:	0711      	lsls	r1, r2, #28
 8007ca6:	bf44      	itt	mi
 8007ca8:	232b      	movmi	r3, #43	; 0x2b
 8007caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cae:	f89a 3000 	ldrb.w	r3, [sl]
 8007cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8007cb4:	d015      	beq.n	8007ce2 <_svfiprintf_r+0xf6>
 8007cb6:	9a07      	ldr	r2, [sp, #28]
 8007cb8:	4654      	mov	r4, sl
 8007cba:	2000      	movs	r0, #0
 8007cbc:	f04f 0c0a 	mov.w	ip, #10
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cc6:	3b30      	subs	r3, #48	; 0x30
 8007cc8:	2b09      	cmp	r3, #9
 8007cca:	d94e      	bls.n	8007d6a <_svfiprintf_r+0x17e>
 8007ccc:	b1b0      	cbz	r0, 8007cfc <_svfiprintf_r+0x110>
 8007cce:	9207      	str	r2, [sp, #28]
 8007cd0:	e014      	b.n	8007cfc <_svfiprintf_r+0x110>
 8007cd2:	eba0 0308 	sub.w	r3, r0, r8
 8007cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	9304      	str	r3, [sp, #16]
 8007cde:	46a2      	mov	sl, r4
 8007ce0:	e7d2      	b.n	8007c88 <_svfiprintf_r+0x9c>
 8007ce2:	9b03      	ldr	r3, [sp, #12]
 8007ce4:	1d19      	adds	r1, r3, #4
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	9103      	str	r1, [sp, #12]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	bfbb      	ittet	lt
 8007cee:	425b      	neglt	r3, r3
 8007cf0:	f042 0202 	orrlt.w	r2, r2, #2
 8007cf4:	9307      	strge	r3, [sp, #28]
 8007cf6:	9307      	strlt	r3, [sp, #28]
 8007cf8:	bfb8      	it	lt
 8007cfa:	9204      	strlt	r2, [sp, #16]
 8007cfc:	7823      	ldrb	r3, [r4, #0]
 8007cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8007d00:	d10c      	bne.n	8007d1c <_svfiprintf_r+0x130>
 8007d02:	7863      	ldrb	r3, [r4, #1]
 8007d04:	2b2a      	cmp	r3, #42	; 0x2a
 8007d06:	d135      	bne.n	8007d74 <_svfiprintf_r+0x188>
 8007d08:	9b03      	ldr	r3, [sp, #12]
 8007d0a:	1d1a      	adds	r2, r3, #4
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	9203      	str	r2, [sp, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	bfb8      	it	lt
 8007d14:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007d18:	3402      	adds	r4, #2
 8007d1a:	9305      	str	r3, [sp, #20]
 8007d1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007de8 <_svfiprintf_r+0x1fc>
 8007d20:	7821      	ldrb	r1, [r4, #0]
 8007d22:	2203      	movs	r2, #3
 8007d24:	4650      	mov	r0, sl
 8007d26:	f7f8 fa7b 	bl	8000220 <memchr>
 8007d2a:	b140      	cbz	r0, 8007d3e <_svfiprintf_r+0x152>
 8007d2c:	2340      	movs	r3, #64	; 0x40
 8007d2e:	eba0 000a 	sub.w	r0, r0, sl
 8007d32:	fa03 f000 	lsl.w	r0, r3, r0
 8007d36:	9b04      	ldr	r3, [sp, #16]
 8007d38:	4303      	orrs	r3, r0
 8007d3a:	3401      	adds	r4, #1
 8007d3c:	9304      	str	r3, [sp, #16]
 8007d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d42:	4826      	ldr	r0, [pc, #152]	; (8007ddc <_svfiprintf_r+0x1f0>)
 8007d44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d48:	2206      	movs	r2, #6
 8007d4a:	f7f8 fa69 	bl	8000220 <memchr>
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	d038      	beq.n	8007dc4 <_svfiprintf_r+0x1d8>
 8007d52:	4b23      	ldr	r3, [pc, #140]	; (8007de0 <_svfiprintf_r+0x1f4>)
 8007d54:	bb1b      	cbnz	r3, 8007d9e <_svfiprintf_r+0x1b2>
 8007d56:	9b03      	ldr	r3, [sp, #12]
 8007d58:	3307      	adds	r3, #7
 8007d5a:	f023 0307 	bic.w	r3, r3, #7
 8007d5e:	3308      	adds	r3, #8
 8007d60:	9303      	str	r3, [sp, #12]
 8007d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d64:	4433      	add	r3, r6
 8007d66:	9309      	str	r3, [sp, #36]	; 0x24
 8007d68:	e767      	b.n	8007c3a <_svfiprintf_r+0x4e>
 8007d6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d6e:	460c      	mov	r4, r1
 8007d70:	2001      	movs	r0, #1
 8007d72:	e7a5      	b.n	8007cc0 <_svfiprintf_r+0xd4>
 8007d74:	2300      	movs	r3, #0
 8007d76:	3401      	adds	r4, #1
 8007d78:	9305      	str	r3, [sp, #20]
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	f04f 0c0a 	mov.w	ip, #10
 8007d80:	4620      	mov	r0, r4
 8007d82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d86:	3a30      	subs	r2, #48	; 0x30
 8007d88:	2a09      	cmp	r2, #9
 8007d8a:	d903      	bls.n	8007d94 <_svfiprintf_r+0x1a8>
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d0c5      	beq.n	8007d1c <_svfiprintf_r+0x130>
 8007d90:	9105      	str	r1, [sp, #20]
 8007d92:	e7c3      	b.n	8007d1c <_svfiprintf_r+0x130>
 8007d94:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d98:	4604      	mov	r4, r0
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e7f0      	b.n	8007d80 <_svfiprintf_r+0x194>
 8007d9e:	ab03      	add	r3, sp, #12
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	462a      	mov	r2, r5
 8007da4:	4b0f      	ldr	r3, [pc, #60]	; (8007de4 <_svfiprintf_r+0x1f8>)
 8007da6:	a904      	add	r1, sp, #16
 8007da8:	4638      	mov	r0, r7
 8007daa:	f7fd ffc9 	bl	8005d40 <_printf_float>
 8007dae:	1c42      	adds	r2, r0, #1
 8007db0:	4606      	mov	r6, r0
 8007db2:	d1d6      	bne.n	8007d62 <_svfiprintf_r+0x176>
 8007db4:	89ab      	ldrh	r3, [r5, #12]
 8007db6:	065b      	lsls	r3, r3, #25
 8007db8:	f53f af2c 	bmi.w	8007c14 <_svfiprintf_r+0x28>
 8007dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dbe:	b01d      	add	sp, #116	; 0x74
 8007dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc4:	ab03      	add	r3, sp, #12
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	462a      	mov	r2, r5
 8007dca:	4b06      	ldr	r3, [pc, #24]	; (8007de4 <_svfiprintf_r+0x1f8>)
 8007dcc:	a904      	add	r1, sp, #16
 8007dce:	4638      	mov	r0, r7
 8007dd0:	f7fe fa5a 	bl	8006288 <_printf_i>
 8007dd4:	e7eb      	b.n	8007dae <_svfiprintf_r+0x1c2>
 8007dd6:	bf00      	nop
 8007dd8:	08008c5c 	.word	0x08008c5c
 8007ddc:	08008c66 	.word	0x08008c66
 8007de0:	08005d41 	.word	0x08005d41
 8007de4:	08007b35 	.word	0x08007b35
 8007de8:	08008c62 	.word	0x08008c62

08007dec <_sbrk_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4d06      	ldr	r5, [pc, #24]	; (8007e08 <_sbrk_r+0x1c>)
 8007df0:	2300      	movs	r3, #0
 8007df2:	4604      	mov	r4, r0
 8007df4:	4608      	mov	r0, r1
 8007df6:	602b      	str	r3, [r5, #0]
 8007df8:	f7f9 fcbe 	bl	8001778 <_sbrk>
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	d102      	bne.n	8007e06 <_sbrk_r+0x1a>
 8007e00:	682b      	ldr	r3, [r5, #0]
 8007e02:	b103      	cbz	r3, 8007e06 <_sbrk_r+0x1a>
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
 8007e08:	20000330 	.word	0x20000330

08007e0c <__assert_func>:
 8007e0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e0e:	4614      	mov	r4, r2
 8007e10:	461a      	mov	r2, r3
 8007e12:	4b09      	ldr	r3, [pc, #36]	; (8007e38 <__assert_func+0x2c>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4605      	mov	r5, r0
 8007e18:	68d8      	ldr	r0, [r3, #12]
 8007e1a:	b14c      	cbz	r4, 8007e30 <__assert_func+0x24>
 8007e1c:	4b07      	ldr	r3, [pc, #28]	; (8007e3c <__assert_func+0x30>)
 8007e1e:	9100      	str	r1, [sp, #0]
 8007e20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e24:	4906      	ldr	r1, [pc, #24]	; (8007e40 <__assert_func+0x34>)
 8007e26:	462b      	mov	r3, r5
 8007e28:	f000 f80e 	bl	8007e48 <fiprintf>
 8007e2c:	f000 faac 	bl	8008388 <abort>
 8007e30:	4b04      	ldr	r3, [pc, #16]	; (8007e44 <__assert_func+0x38>)
 8007e32:	461c      	mov	r4, r3
 8007e34:	e7f3      	b.n	8007e1e <__assert_func+0x12>
 8007e36:	bf00      	nop
 8007e38:	20000014 	.word	0x20000014
 8007e3c:	08008c6d 	.word	0x08008c6d
 8007e40:	08008c7a 	.word	0x08008c7a
 8007e44:	08008ca8 	.word	0x08008ca8

08007e48 <fiprintf>:
 8007e48:	b40e      	push	{r1, r2, r3}
 8007e4a:	b503      	push	{r0, r1, lr}
 8007e4c:	4601      	mov	r1, r0
 8007e4e:	ab03      	add	r3, sp, #12
 8007e50:	4805      	ldr	r0, [pc, #20]	; (8007e68 <fiprintf+0x20>)
 8007e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e56:	6800      	ldr	r0, [r0, #0]
 8007e58:	9301      	str	r3, [sp, #4]
 8007e5a:	f000 f897 	bl	8007f8c <_vfiprintf_r>
 8007e5e:	b002      	add	sp, #8
 8007e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e64:	b003      	add	sp, #12
 8007e66:	4770      	bx	lr
 8007e68:	20000014 	.word	0x20000014

08007e6c <__ascii_mbtowc>:
 8007e6c:	b082      	sub	sp, #8
 8007e6e:	b901      	cbnz	r1, 8007e72 <__ascii_mbtowc+0x6>
 8007e70:	a901      	add	r1, sp, #4
 8007e72:	b142      	cbz	r2, 8007e86 <__ascii_mbtowc+0x1a>
 8007e74:	b14b      	cbz	r3, 8007e8a <__ascii_mbtowc+0x1e>
 8007e76:	7813      	ldrb	r3, [r2, #0]
 8007e78:	600b      	str	r3, [r1, #0]
 8007e7a:	7812      	ldrb	r2, [r2, #0]
 8007e7c:	1e10      	subs	r0, r2, #0
 8007e7e:	bf18      	it	ne
 8007e80:	2001      	movne	r0, #1
 8007e82:	b002      	add	sp, #8
 8007e84:	4770      	bx	lr
 8007e86:	4610      	mov	r0, r2
 8007e88:	e7fb      	b.n	8007e82 <__ascii_mbtowc+0x16>
 8007e8a:	f06f 0001 	mvn.w	r0, #1
 8007e8e:	e7f8      	b.n	8007e82 <__ascii_mbtowc+0x16>

08007e90 <memmove>:
 8007e90:	4288      	cmp	r0, r1
 8007e92:	b510      	push	{r4, lr}
 8007e94:	eb01 0402 	add.w	r4, r1, r2
 8007e98:	d902      	bls.n	8007ea0 <memmove+0x10>
 8007e9a:	4284      	cmp	r4, r0
 8007e9c:	4623      	mov	r3, r4
 8007e9e:	d807      	bhi.n	8007eb0 <memmove+0x20>
 8007ea0:	1e43      	subs	r3, r0, #1
 8007ea2:	42a1      	cmp	r1, r4
 8007ea4:	d008      	beq.n	8007eb8 <memmove+0x28>
 8007ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007eaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007eae:	e7f8      	b.n	8007ea2 <memmove+0x12>
 8007eb0:	4402      	add	r2, r0
 8007eb2:	4601      	mov	r1, r0
 8007eb4:	428a      	cmp	r2, r1
 8007eb6:	d100      	bne.n	8007eba <memmove+0x2a>
 8007eb8:	bd10      	pop	{r4, pc}
 8007eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ec2:	e7f7      	b.n	8007eb4 <memmove+0x24>

08007ec4 <__malloc_lock>:
 8007ec4:	4801      	ldr	r0, [pc, #4]	; (8007ecc <__malloc_lock+0x8>)
 8007ec6:	f000 bc1f 	b.w	8008708 <__retarget_lock_acquire_recursive>
 8007eca:	bf00      	nop
 8007ecc:	20000334 	.word	0x20000334

08007ed0 <__malloc_unlock>:
 8007ed0:	4801      	ldr	r0, [pc, #4]	; (8007ed8 <__malloc_unlock+0x8>)
 8007ed2:	f000 bc1a 	b.w	800870a <__retarget_lock_release_recursive>
 8007ed6:	bf00      	nop
 8007ed8:	20000334 	.word	0x20000334

08007edc <_realloc_r>:
 8007edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee0:	4680      	mov	r8, r0
 8007ee2:	4614      	mov	r4, r2
 8007ee4:	460e      	mov	r6, r1
 8007ee6:	b921      	cbnz	r1, 8007ef2 <_realloc_r+0x16>
 8007ee8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eec:	4611      	mov	r1, r2
 8007eee:	f7ff bdad 	b.w	8007a4c <_malloc_r>
 8007ef2:	b92a      	cbnz	r2, 8007f00 <_realloc_r+0x24>
 8007ef4:	f7ff fd3e 	bl	8007974 <_free_r>
 8007ef8:	4625      	mov	r5, r4
 8007efa:	4628      	mov	r0, r5
 8007efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f00:	f000 fc6a 	bl	80087d8 <_malloc_usable_size_r>
 8007f04:	4284      	cmp	r4, r0
 8007f06:	4607      	mov	r7, r0
 8007f08:	d802      	bhi.n	8007f10 <_realloc_r+0x34>
 8007f0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f0e:	d812      	bhi.n	8007f36 <_realloc_r+0x5a>
 8007f10:	4621      	mov	r1, r4
 8007f12:	4640      	mov	r0, r8
 8007f14:	f7ff fd9a 	bl	8007a4c <_malloc_r>
 8007f18:	4605      	mov	r5, r0
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d0ed      	beq.n	8007efa <_realloc_r+0x1e>
 8007f1e:	42bc      	cmp	r4, r7
 8007f20:	4622      	mov	r2, r4
 8007f22:	4631      	mov	r1, r6
 8007f24:	bf28      	it	cs
 8007f26:	463a      	movcs	r2, r7
 8007f28:	f7ff f97c 	bl	8007224 <memcpy>
 8007f2c:	4631      	mov	r1, r6
 8007f2e:	4640      	mov	r0, r8
 8007f30:	f7ff fd20 	bl	8007974 <_free_r>
 8007f34:	e7e1      	b.n	8007efa <_realloc_r+0x1e>
 8007f36:	4635      	mov	r5, r6
 8007f38:	e7df      	b.n	8007efa <_realloc_r+0x1e>

08007f3a <__sfputc_r>:
 8007f3a:	6893      	ldr	r3, [r2, #8]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	b410      	push	{r4}
 8007f42:	6093      	str	r3, [r2, #8]
 8007f44:	da08      	bge.n	8007f58 <__sfputc_r+0x1e>
 8007f46:	6994      	ldr	r4, [r2, #24]
 8007f48:	42a3      	cmp	r3, r4
 8007f4a:	db01      	blt.n	8007f50 <__sfputc_r+0x16>
 8007f4c:	290a      	cmp	r1, #10
 8007f4e:	d103      	bne.n	8007f58 <__sfputc_r+0x1e>
 8007f50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f54:	f000 b94a 	b.w	80081ec <__swbuf_r>
 8007f58:	6813      	ldr	r3, [r2, #0]
 8007f5a:	1c58      	adds	r0, r3, #1
 8007f5c:	6010      	str	r0, [r2, #0]
 8007f5e:	7019      	strb	r1, [r3, #0]
 8007f60:	4608      	mov	r0, r1
 8007f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <__sfputs_r>:
 8007f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6a:	4606      	mov	r6, r0
 8007f6c:	460f      	mov	r7, r1
 8007f6e:	4614      	mov	r4, r2
 8007f70:	18d5      	adds	r5, r2, r3
 8007f72:	42ac      	cmp	r4, r5
 8007f74:	d101      	bne.n	8007f7a <__sfputs_r+0x12>
 8007f76:	2000      	movs	r0, #0
 8007f78:	e007      	b.n	8007f8a <__sfputs_r+0x22>
 8007f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f7e:	463a      	mov	r2, r7
 8007f80:	4630      	mov	r0, r6
 8007f82:	f7ff ffda 	bl	8007f3a <__sfputc_r>
 8007f86:	1c43      	adds	r3, r0, #1
 8007f88:	d1f3      	bne.n	8007f72 <__sfputs_r+0xa>
 8007f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f8c <_vfiprintf_r>:
 8007f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f90:	460d      	mov	r5, r1
 8007f92:	b09d      	sub	sp, #116	; 0x74
 8007f94:	4614      	mov	r4, r2
 8007f96:	4698      	mov	r8, r3
 8007f98:	4606      	mov	r6, r0
 8007f9a:	b118      	cbz	r0, 8007fa4 <_vfiprintf_r+0x18>
 8007f9c:	6983      	ldr	r3, [r0, #24]
 8007f9e:	b90b      	cbnz	r3, 8007fa4 <_vfiprintf_r+0x18>
 8007fa0:	f000 fb14 	bl	80085cc <__sinit>
 8007fa4:	4b89      	ldr	r3, [pc, #548]	; (80081cc <_vfiprintf_r+0x240>)
 8007fa6:	429d      	cmp	r5, r3
 8007fa8:	d11b      	bne.n	8007fe2 <_vfiprintf_r+0x56>
 8007faa:	6875      	ldr	r5, [r6, #4]
 8007fac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fae:	07d9      	lsls	r1, r3, #31
 8007fb0:	d405      	bmi.n	8007fbe <_vfiprintf_r+0x32>
 8007fb2:	89ab      	ldrh	r3, [r5, #12]
 8007fb4:	059a      	lsls	r2, r3, #22
 8007fb6:	d402      	bmi.n	8007fbe <_vfiprintf_r+0x32>
 8007fb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fba:	f000 fba5 	bl	8008708 <__retarget_lock_acquire_recursive>
 8007fbe:	89ab      	ldrh	r3, [r5, #12]
 8007fc0:	071b      	lsls	r3, r3, #28
 8007fc2:	d501      	bpl.n	8007fc8 <_vfiprintf_r+0x3c>
 8007fc4:	692b      	ldr	r3, [r5, #16]
 8007fc6:	b9eb      	cbnz	r3, 8008004 <_vfiprintf_r+0x78>
 8007fc8:	4629      	mov	r1, r5
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f000 f96e 	bl	80082ac <__swsetup_r>
 8007fd0:	b1c0      	cbz	r0, 8008004 <_vfiprintf_r+0x78>
 8007fd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fd4:	07dc      	lsls	r4, r3, #31
 8007fd6:	d50e      	bpl.n	8007ff6 <_vfiprintf_r+0x6a>
 8007fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fdc:	b01d      	add	sp, #116	; 0x74
 8007fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe2:	4b7b      	ldr	r3, [pc, #492]	; (80081d0 <_vfiprintf_r+0x244>)
 8007fe4:	429d      	cmp	r5, r3
 8007fe6:	d101      	bne.n	8007fec <_vfiprintf_r+0x60>
 8007fe8:	68b5      	ldr	r5, [r6, #8]
 8007fea:	e7df      	b.n	8007fac <_vfiprintf_r+0x20>
 8007fec:	4b79      	ldr	r3, [pc, #484]	; (80081d4 <_vfiprintf_r+0x248>)
 8007fee:	429d      	cmp	r5, r3
 8007ff0:	bf08      	it	eq
 8007ff2:	68f5      	ldreq	r5, [r6, #12]
 8007ff4:	e7da      	b.n	8007fac <_vfiprintf_r+0x20>
 8007ff6:	89ab      	ldrh	r3, [r5, #12]
 8007ff8:	0598      	lsls	r0, r3, #22
 8007ffa:	d4ed      	bmi.n	8007fd8 <_vfiprintf_r+0x4c>
 8007ffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ffe:	f000 fb84 	bl	800870a <__retarget_lock_release_recursive>
 8008002:	e7e9      	b.n	8007fd8 <_vfiprintf_r+0x4c>
 8008004:	2300      	movs	r3, #0
 8008006:	9309      	str	r3, [sp, #36]	; 0x24
 8008008:	2320      	movs	r3, #32
 800800a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800800e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008012:	2330      	movs	r3, #48	; 0x30
 8008014:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80081d8 <_vfiprintf_r+0x24c>
 8008018:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800801c:	f04f 0901 	mov.w	r9, #1
 8008020:	4623      	mov	r3, r4
 8008022:	469a      	mov	sl, r3
 8008024:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008028:	b10a      	cbz	r2, 800802e <_vfiprintf_r+0xa2>
 800802a:	2a25      	cmp	r2, #37	; 0x25
 800802c:	d1f9      	bne.n	8008022 <_vfiprintf_r+0x96>
 800802e:	ebba 0b04 	subs.w	fp, sl, r4
 8008032:	d00b      	beq.n	800804c <_vfiprintf_r+0xc0>
 8008034:	465b      	mov	r3, fp
 8008036:	4622      	mov	r2, r4
 8008038:	4629      	mov	r1, r5
 800803a:	4630      	mov	r0, r6
 800803c:	f7ff ff94 	bl	8007f68 <__sfputs_r>
 8008040:	3001      	adds	r0, #1
 8008042:	f000 80aa 	beq.w	800819a <_vfiprintf_r+0x20e>
 8008046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008048:	445a      	add	r2, fp
 800804a:	9209      	str	r2, [sp, #36]	; 0x24
 800804c:	f89a 3000 	ldrb.w	r3, [sl]
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 80a2 	beq.w	800819a <_vfiprintf_r+0x20e>
 8008056:	2300      	movs	r3, #0
 8008058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800805c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008060:	f10a 0a01 	add.w	sl, sl, #1
 8008064:	9304      	str	r3, [sp, #16]
 8008066:	9307      	str	r3, [sp, #28]
 8008068:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800806c:	931a      	str	r3, [sp, #104]	; 0x68
 800806e:	4654      	mov	r4, sl
 8008070:	2205      	movs	r2, #5
 8008072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008076:	4858      	ldr	r0, [pc, #352]	; (80081d8 <_vfiprintf_r+0x24c>)
 8008078:	f7f8 f8d2 	bl	8000220 <memchr>
 800807c:	9a04      	ldr	r2, [sp, #16]
 800807e:	b9d8      	cbnz	r0, 80080b8 <_vfiprintf_r+0x12c>
 8008080:	06d1      	lsls	r1, r2, #27
 8008082:	bf44      	itt	mi
 8008084:	2320      	movmi	r3, #32
 8008086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800808a:	0713      	lsls	r3, r2, #28
 800808c:	bf44      	itt	mi
 800808e:	232b      	movmi	r3, #43	; 0x2b
 8008090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008094:	f89a 3000 	ldrb.w	r3, [sl]
 8008098:	2b2a      	cmp	r3, #42	; 0x2a
 800809a:	d015      	beq.n	80080c8 <_vfiprintf_r+0x13c>
 800809c:	9a07      	ldr	r2, [sp, #28]
 800809e:	4654      	mov	r4, sl
 80080a0:	2000      	movs	r0, #0
 80080a2:	f04f 0c0a 	mov.w	ip, #10
 80080a6:	4621      	mov	r1, r4
 80080a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080ac:	3b30      	subs	r3, #48	; 0x30
 80080ae:	2b09      	cmp	r3, #9
 80080b0:	d94e      	bls.n	8008150 <_vfiprintf_r+0x1c4>
 80080b2:	b1b0      	cbz	r0, 80080e2 <_vfiprintf_r+0x156>
 80080b4:	9207      	str	r2, [sp, #28]
 80080b6:	e014      	b.n	80080e2 <_vfiprintf_r+0x156>
 80080b8:	eba0 0308 	sub.w	r3, r0, r8
 80080bc:	fa09 f303 	lsl.w	r3, r9, r3
 80080c0:	4313      	orrs	r3, r2
 80080c2:	9304      	str	r3, [sp, #16]
 80080c4:	46a2      	mov	sl, r4
 80080c6:	e7d2      	b.n	800806e <_vfiprintf_r+0xe2>
 80080c8:	9b03      	ldr	r3, [sp, #12]
 80080ca:	1d19      	adds	r1, r3, #4
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	9103      	str	r1, [sp, #12]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	bfbb      	ittet	lt
 80080d4:	425b      	neglt	r3, r3
 80080d6:	f042 0202 	orrlt.w	r2, r2, #2
 80080da:	9307      	strge	r3, [sp, #28]
 80080dc:	9307      	strlt	r3, [sp, #28]
 80080de:	bfb8      	it	lt
 80080e0:	9204      	strlt	r2, [sp, #16]
 80080e2:	7823      	ldrb	r3, [r4, #0]
 80080e4:	2b2e      	cmp	r3, #46	; 0x2e
 80080e6:	d10c      	bne.n	8008102 <_vfiprintf_r+0x176>
 80080e8:	7863      	ldrb	r3, [r4, #1]
 80080ea:	2b2a      	cmp	r3, #42	; 0x2a
 80080ec:	d135      	bne.n	800815a <_vfiprintf_r+0x1ce>
 80080ee:	9b03      	ldr	r3, [sp, #12]
 80080f0:	1d1a      	adds	r2, r3, #4
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	9203      	str	r2, [sp, #12]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	bfb8      	it	lt
 80080fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80080fe:	3402      	adds	r4, #2
 8008100:	9305      	str	r3, [sp, #20]
 8008102:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80081e8 <_vfiprintf_r+0x25c>
 8008106:	7821      	ldrb	r1, [r4, #0]
 8008108:	2203      	movs	r2, #3
 800810a:	4650      	mov	r0, sl
 800810c:	f7f8 f888 	bl	8000220 <memchr>
 8008110:	b140      	cbz	r0, 8008124 <_vfiprintf_r+0x198>
 8008112:	2340      	movs	r3, #64	; 0x40
 8008114:	eba0 000a 	sub.w	r0, r0, sl
 8008118:	fa03 f000 	lsl.w	r0, r3, r0
 800811c:	9b04      	ldr	r3, [sp, #16]
 800811e:	4303      	orrs	r3, r0
 8008120:	3401      	adds	r4, #1
 8008122:	9304      	str	r3, [sp, #16]
 8008124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008128:	482c      	ldr	r0, [pc, #176]	; (80081dc <_vfiprintf_r+0x250>)
 800812a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800812e:	2206      	movs	r2, #6
 8008130:	f7f8 f876 	bl	8000220 <memchr>
 8008134:	2800      	cmp	r0, #0
 8008136:	d03f      	beq.n	80081b8 <_vfiprintf_r+0x22c>
 8008138:	4b29      	ldr	r3, [pc, #164]	; (80081e0 <_vfiprintf_r+0x254>)
 800813a:	bb1b      	cbnz	r3, 8008184 <_vfiprintf_r+0x1f8>
 800813c:	9b03      	ldr	r3, [sp, #12]
 800813e:	3307      	adds	r3, #7
 8008140:	f023 0307 	bic.w	r3, r3, #7
 8008144:	3308      	adds	r3, #8
 8008146:	9303      	str	r3, [sp, #12]
 8008148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814a:	443b      	add	r3, r7
 800814c:	9309      	str	r3, [sp, #36]	; 0x24
 800814e:	e767      	b.n	8008020 <_vfiprintf_r+0x94>
 8008150:	fb0c 3202 	mla	r2, ip, r2, r3
 8008154:	460c      	mov	r4, r1
 8008156:	2001      	movs	r0, #1
 8008158:	e7a5      	b.n	80080a6 <_vfiprintf_r+0x11a>
 800815a:	2300      	movs	r3, #0
 800815c:	3401      	adds	r4, #1
 800815e:	9305      	str	r3, [sp, #20]
 8008160:	4619      	mov	r1, r3
 8008162:	f04f 0c0a 	mov.w	ip, #10
 8008166:	4620      	mov	r0, r4
 8008168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800816c:	3a30      	subs	r2, #48	; 0x30
 800816e:	2a09      	cmp	r2, #9
 8008170:	d903      	bls.n	800817a <_vfiprintf_r+0x1ee>
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0c5      	beq.n	8008102 <_vfiprintf_r+0x176>
 8008176:	9105      	str	r1, [sp, #20]
 8008178:	e7c3      	b.n	8008102 <_vfiprintf_r+0x176>
 800817a:	fb0c 2101 	mla	r1, ip, r1, r2
 800817e:	4604      	mov	r4, r0
 8008180:	2301      	movs	r3, #1
 8008182:	e7f0      	b.n	8008166 <_vfiprintf_r+0x1da>
 8008184:	ab03      	add	r3, sp, #12
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	462a      	mov	r2, r5
 800818a:	4b16      	ldr	r3, [pc, #88]	; (80081e4 <_vfiprintf_r+0x258>)
 800818c:	a904      	add	r1, sp, #16
 800818e:	4630      	mov	r0, r6
 8008190:	f7fd fdd6 	bl	8005d40 <_printf_float>
 8008194:	4607      	mov	r7, r0
 8008196:	1c78      	adds	r0, r7, #1
 8008198:	d1d6      	bne.n	8008148 <_vfiprintf_r+0x1bc>
 800819a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800819c:	07d9      	lsls	r1, r3, #31
 800819e:	d405      	bmi.n	80081ac <_vfiprintf_r+0x220>
 80081a0:	89ab      	ldrh	r3, [r5, #12]
 80081a2:	059a      	lsls	r2, r3, #22
 80081a4:	d402      	bmi.n	80081ac <_vfiprintf_r+0x220>
 80081a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081a8:	f000 faaf 	bl	800870a <__retarget_lock_release_recursive>
 80081ac:	89ab      	ldrh	r3, [r5, #12]
 80081ae:	065b      	lsls	r3, r3, #25
 80081b0:	f53f af12 	bmi.w	8007fd8 <_vfiprintf_r+0x4c>
 80081b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081b6:	e711      	b.n	8007fdc <_vfiprintf_r+0x50>
 80081b8:	ab03      	add	r3, sp, #12
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	462a      	mov	r2, r5
 80081be:	4b09      	ldr	r3, [pc, #36]	; (80081e4 <_vfiprintf_r+0x258>)
 80081c0:	a904      	add	r1, sp, #16
 80081c2:	4630      	mov	r0, r6
 80081c4:	f7fe f860 	bl	8006288 <_printf_i>
 80081c8:	e7e4      	b.n	8008194 <_vfiprintf_r+0x208>
 80081ca:	bf00      	nop
 80081cc:	08008dd4 	.word	0x08008dd4
 80081d0:	08008df4 	.word	0x08008df4
 80081d4:	08008db4 	.word	0x08008db4
 80081d8:	08008c5c 	.word	0x08008c5c
 80081dc:	08008c66 	.word	0x08008c66
 80081e0:	08005d41 	.word	0x08005d41
 80081e4:	08007f69 	.word	0x08007f69
 80081e8:	08008c62 	.word	0x08008c62

080081ec <__swbuf_r>:
 80081ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ee:	460e      	mov	r6, r1
 80081f0:	4614      	mov	r4, r2
 80081f2:	4605      	mov	r5, r0
 80081f4:	b118      	cbz	r0, 80081fe <__swbuf_r+0x12>
 80081f6:	6983      	ldr	r3, [r0, #24]
 80081f8:	b90b      	cbnz	r3, 80081fe <__swbuf_r+0x12>
 80081fa:	f000 f9e7 	bl	80085cc <__sinit>
 80081fe:	4b21      	ldr	r3, [pc, #132]	; (8008284 <__swbuf_r+0x98>)
 8008200:	429c      	cmp	r4, r3
 8008202:	d12b      	bne.n	800825c <__swbuf_r+0x70>
 8008204:	686c      	ldr	r4, [r5, #4]
 8008206:	69a3      	ldr	r3, [r4, #24]
 8008208:	60a3      	str	r3, [r4, #8]
 800820a:	89a3      	ldrh	r3, [r4, #12]
 800820c:	071a      	lsls	r2, r3, #28
 800820e:	d52f      	bpl.n	8008270 <__swbuf_r+0x84>
 8008210:	6923      	ldr	r3, [r4, #16]
 8008212:	b36b      	cbz	r3, 8008270 <__swbuf_r+0x84>
 8008214:	6923      	ldr	r3, [r4, #16]
 8008216:	6820      	ldr	r0, [r4, #0]
 8008218:	1ac0      	subs	r0, r0, r3
 800821a:	6963      	ldr	r3, [r4, #20]
 800821c:	b2f6      	uxtb	r6, r6
 800821e:	4283      	cmp	r3, r0
 8008220:	4637      	mov	r7, r6
 8008222:	dc04      	bgt.n	800822e <__swbuf_r+0x42>
 8008224:	4621      	mov	r1, r4
 8008226:	4628      	mov	r0, r5
 8008228:	f000 f93c 	bl	80084a4 <_fflush_r>
 800822c:	bb30      	cbnz	r0, 800827c <__swbuf_r+0x90>
 800822e:	68a3      	ldr	r3, [r4, #8]
 8008230:	3b01      	subs	r3, #1
 8008232:	60a3      	str	r3, [r4, #8]
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	1c5a      	adds	r2, r3, #1
 8008238:	6022      	str	r2, [r4, #0]
 800823a:	701e      	strb	r6, [r3, #0]
 800823c:	6963      	ldr	r3, [r4, #20]
 800823e:	3001      	adds	r0, #1
 8008240:	4283      	cmp	r3, r0
 8008242:	d004      	beq.n	800824e <__swbuf_r+0x62>
 8008244:	89a3      	ldrh	r3, [r4, #12]
 8008246:	07db      	lsls	r3, r3, #31
 8008248:	d506      	bpl.n	8008258 <__swbuf_r+0x6c>
 800824a:	2e0a      	cmp	r6, #10
 800824c:	d104      	bne.n	8008258 <__swbuf_r+0x6c>
 800824e:	4621      	mov	r1, r4
 8008250:	4628      	mov	r0, r5
 8008252:	f000 f927 	bl	80084a4 <_fflush_r>
 8008256:	b988      	cbnz	r0, 800827c <__swbuf_r+0x90>
 8008258:	4638      	mov	r0, r7
 800825a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800825c:	4b0a      	ldr	r3, [pc, #40]	; (8008288 <__swbuf_r+0x9c>)
 800825e:	429c      	cmp	r4, r3
 8008260:	d101      	bne.n	8008266 <__swbuf_r+0x7a>
 8008262:	68ac      	ldr	r4, [r5, #8]
 8008264:	e7cf      	b.n	8008206 <__swbuf_r+0x1a>
 8008266:	4b09      	ldr	r3, [pc, #36]	; (800828c <__swbuf_r+0xa0>)
 8008268:	429c      	cmp	r4, r3
 800826a:	bf08      	it	eq
 800826c:	68ec      	ldreq	r4, [r5, #12]
 800826e:	e7ca      	b.n	8008206 <__swbuf_r+0x1a>
 8008270:	4621      	mov	r1, r4
 8008272:	4628      	mov	r0, r5
 8008274:	f000 f81a 	bl	80082ac <__swsetup_r>
 8008278:	2800      	cmp	r0, #0
 800827a:	d0cb      	beq.n	8008214 <__swbuf_r+0x28>
 800827c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008280:	e7ea      	b.n	8008258 <__swbuf_r+0x6c>
 8008282:	bf00      	nop
 8008284:	08008dd4 	.word	0x08008dd4
 8008288:	08008df4 	.word	0x08008df4
 800828c:	08008db4 	.word	0x08008db4

08008290 <__ascii_wctomb>:
 8008290:	b149      	cbz	r1, 80082a6 <__ascii_wctomb+0x16>
 8008292:	2aff      	cmp	r2, #255	; 0xff
 8008294:	bf85      	ittet	hi
 8008296:	238a      	movhi	r3, #138	; 0x8a
 8008298:	6003      	strhi	r3, [r0, #0]
 800829a:	700a      	strbls	r2, [r1, #0]
 800829c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80082a0:	bf98      	it	ls
 80082a2:	2001      	movls	r0, #1
 80082a4:	4770      	bx	lr
 80082a6:	4608      	mov	r0, r1
 80082a8:	4770      	bx	lr
	...

080082ac <__swsetup_r>:
 80082ac:	4b32      	ldr	r3, [pc, #200]	; (8008378 <__swsetup_r+0xcc>)
 80082ae:	b570      	push	{r4, r5, r6, lr}
 80082b0:	681d      	ldr	r5, [r3, #0]
 80082b2:	4606      	mov	r6, r0
 80082b4:	460c      	mov	r4, r1
 80082b6:	b125      	cbz	r5, 80082c2 <__swsetup_r+0x16>
 80082b8:	69ab      	ldr	r3, [r5, #24]
 80082ba:	b913      	cbnz	r3, 80082c2 <__swsetup_r+0x16>
 80082bc:	4628      	mov	r0, r5
 80082be:	f000 f985 	bl	80085cc <__sinit>
 80082c2:	4b2e      	ldr	r3, [pc, #184]	; (800837c <__swsetup_r+0xd0>)
 80082c4:	429c      	cmp	r4, r3
 80082c6:	d10f      	bne.n	80082e8 <__swsetup_r+0x3c>
 80082c8:	686c      	ldr	r4, [r5, #4]
 80082ca:	89a3      	ldrh	r3, [r4, #12]
 80082cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082d0:	0719      	lsls	r1, r3, #28
 80082d2:	d42c      	bmi.n	800832e <__swsetup_r+0x82>
 80082d4:	06dd      	lsls	r5, r3, #27
 80082d6:	d411      	bmi.n	80082fc <__swsetup_r+0x50>
 80082d8:	2309      	movs	r3, #9
 80082da:	6033      	str	r3, [r6, #0]
 80082dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082e0:	81a3      	strh	r3, [r4, #12]
 80082e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082e6:	e03e      	b.n	8008366 <__swsetup_r+0xba>
 80082e8:	4b25      	ldr	r3, [pc, #148]	; (8008380 <__swsetup_r+0xd4>)
 80082ea:	429c      	cmp	r4, r3
 80082ec:	d101      	bne.n	80082f2 <__swsetup_r+0x46>
 80082ee:	68ac      	ldr	r4, [r5, #8]
 80082f0:	e7eb      	b.n	80082ca <__swsetup_r+0x1e>
 80082f2:	4b24      	ldr	r3, [pc, #144]	; (8008384 <__swsetup_r+0xd8>)
 80082f4:	429c      	cmp	r4, r3
 80082f6:	bf08      	it	eq
 80082f8:	68ec      	ldreq	r4, [r5, #12]
 80082fa:	e7e6      	b.n	80082ca <__swsetup_r+0x1e>
 80082fc:	0758      	lsls	r0, r3, #29
 80082fe:	d512      	bpl.n	8008326 <__swsetup_r+0x7a>
 8008300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008302:	b141      	cbz	r1, 8008316 <__swsetup_r+0x6a>
 8008304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008308:	4299      	cmp	r1, r3
 800830a:	d002      	beq.n	8008312 <__swsetup_r+0x66>
 800830c:	4630      	mov	r0, r6
 800830e:	f7ff fb31 	bl	8007974 <_free_r>
 8008312:	2300      	movs	r3, #0
 8008314:	6363      	str	r3, [r4, #52]	; 0x34
 8008316:	89a3      	ldrh	r3, [r4, #12]
 8008318:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800831c:	81a3      	strh	r3, [r4, #12]
 800831e:	2300      	movs	r3, #0
 8008320:	6063      	str	r3, [r4, #4]
 8008322:	6923      	ldr	r3, [r4, #16]
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	89a3      	ldrh	r3, [r4, #12]
 8008328:	f043 0308 	orr.w	r3, r3, #8
 800832c:	81a3      	strh	r3, [r4, #12]
 800832e:	6923      	ldr	r3, [r4, #16]
 8008330:	b94b      	cbnz	r3, 8008346 <__swsetup_r+0x9a>
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800833c:	d003      	beq.n	8008346 <__swsetup_r+0x9a>
 800833e:	4621      	mov	r1, r4
 8008340:	4630      	mov	r0, r6
 8008342:	f000 fa09 	bl	8008758 <__smakebuf_r>
 8008346:	89a0      	ldrh	r0, [r4, #12]
 8008348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800834c:	f010 0301 	ands.w	r3, r0, #1
 8008350:	d00a      	beq.n	8008368 <__swsetup_r+0xbc>
 8008352:	2300      	movs	r3, #0
 8008354:	60a3      	str	r3, [r4, #8]
 8008356:	6963      	ldr	r3, [r4, #20]
 8008358:	425b      	negs	r3, r3
 800835a:	61a3      	str	r3, [r4, #24]
 800835c:	6923      	ldr	r3, [r4, #16]
 800835e:	b943      	cbnz	r3, 8008372 <__swsetup_r+0xc6>
 8008360:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008364:	d1ba      	bne.n	80082dc <__swsetup_r+0x30>
 8008366:	bd70      	pop	{r4, r5, r6, pc}
 8008368:	0781      	lsls	r1, r0, #30
 800836a:	bf58      	it	pl
 800836c:	6963      	ldrpl	r3, [r4, #20]
 800836e:	60a3      	str	r3, [r4, #8]
 8008370:	e7f4      	b.n	800835c <__swsetup_r+0xb0>
 8008372:	2000      	movs	r0, #0
 8008374:	e7f7      	b.n	8008366 <__swsetup_r+0xba>
 8008376:	bf00      	nop
 8008378:	20000014 	.word	0x20000014
 800837c:	08008dd4 	.word	0x08008dd4
 8008380:	08008df4 	.word	0x08008df4
 8008384:	08008db4 	.word	0x08008db4

08008388 <abort>:
 8008388:	b508      	push	{r3, lr}
 800838a:	2006      	movs	r0, #6
 800838c:	f000 fa54 	bl	8008838 <raise>
 8008390:	2001      	movs	r0, #1
 8008392:	f7f9 f979 	bl	8001688 <_exit>
	...

08008398 <__sflush_r>:
 8008398:	898a      	ldrh	r2, [r1, #12]
 800839a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800839e:	4605      	mov	r5, r0
 80083a0:	0710      	lsls	r0, r2, #28
 80083a2:	460c      	mov	r4, r1
 80083a4:	d458      	bmi.n	8008458 <__sflush_r+0xc0>
 80083a6:	684b      	ldr	r3, [r1, #4]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	dc05      	bgt.n	80083b8 <__sflush_r+0x20>
 80083ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	dc02      	bgt.n	80083b8 <__sflush_r+0x20>
 80083b2:	2000      	movs	r0, #0
 80083b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083ba:	2e00      	cmp	r6, #0
 80083bc:	d0f9      	beq.n	80083b2 <__sflush_r+0x1a>
 80083be:	2300      	movs	r3, #0
 80083c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80083c4:	682f      	ldr	r7, [r5, #0]
 80083c6:	602b      	str	r3, [r5, #0]
 80083c8:	d032      	beq.n	8008430 <__sflush_r+0x98>
 80083ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	075a      	lsls	r2, r3, #29
 80083d0:	d505      	bpl.n	80083de <__sflush_r+0x46>
 80083d2:	6863      	ldr	r3, [r4, #4]
 80083d4:	1ac0      	subs	r0, r0, r3
 80083d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083d8:	b10b      	cbz	r3, 80083de <__sflush_r+0x46>
 80083da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083dc:	1ac0      	subs	r0, r0, r3
 80083de:	2300      	movs	r3, #0
 80083e0:	4602      	mov	r2, r0
 80083e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083e4:	6a21      	ldr	r1, [r4, #32]
 80083e6:	4628      	mov	r0, r5
 80083e8:	47b0      	blx	r6
 80083ea:	1c43      	adds	r3, r0, #1
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	d106      	bne.n	80083fe <__sflush_r+0x66>
 80083f0:	6829      	ldr	r1, [r5, #0]
 80083f2:	291d      	cmp	r1, #29
 80083f4:	d82c      	bhi.n	8008450 <__sflush_r+0xb8>
 80083f6:	4a2a      	ldr	r2, [pc, #168]	; (80084a0 <__sflush_r+0x108>)
 80083f8:	40ca      	lsrs	r2, r1
 80083fa:	07d6      	lsls	r6, r2, #31
 80083fc:	d528      	bpl.n	8008450 <__sflush_r+0xb8>
 80083fe:	2200      	movs	r2, #0
 8008400:	6062      	str	r2, [r4, #4]
 8008402:	04d9      	lsls	r1, r3, #19
 8008404:	6922      	ldr	r2, [r4, #16]
 8008406:	6022      	str	r2, [r4, #0]
 8008408:	d504      	bpl.n	8008414 <__sflush_r+0x7c>
 800840a:	1c42      	adds	r2, r0, #1
 800840c:	d101      	bne.n	8008412 <__sflush_r+0x7a>
 800840e:	682b      	ldr	r3, [r5, #0]
 8008410:	b903      	cbnz	r3, 8008414 <__sflush_r+0x7c>
 8008412:	6560      	str	r0, [r4, #84]	; 0x54
 8008414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008416:	602f      	str	r7, [r5, #0]
 8008418:	2900      	cmp	r1, #0
 800841a:	d0ca      	beq.n	80083b2 <__sflush_r+0x1a>
 800841c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008420:	4299      	cmp	r1, r3
 8008422:	d002      	beq.n	800842a <__sflush_r+0x92>
 8008424:	4628      	mov	r0, r5
 8008426:	f7ff faa5 	bl	8007974 <_free_r>
 800842a:	2000      	movs	r0, #0
 800842c:	6360      	str	r0, [r4, #52]	; 0x34
 800842e:	e7c1      	b.n	80083b4 <__sflush_r+0x1c>
 8008430:	6a21      	ldr	r1, [r4, #32]
 8008432:	2301      	movs	r3, #1
 8008434:	4628      	mov	r0, r5
 8008436:	47b0      	blx	r6
 8008438:	1c41      	adds	r1, r0, #1
 800843a:	d1c7      	bne.n	80083cc <__sflush_r+0x34>
 800843c:	682b      	ldr	r3, [r5, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d0c4      	beq.n	80083cc <__sflush_r+0x34>
 8008442:	2b1d      	cmp	r3, #29
 8008444:	d001      	beq.n	800844a <__sflush_r+0xb2>
 8008446:	2b16      	cmp	r3, #22
 8008448:	d101      	bne.n	800844e <__sflush_r+0xb6>
 800844a:	602f      	str	r7, [r5, #0]
 800844c:	e7b1      	b.n	80083b2 <__sflush_r+0x1a>
 800844e:	89a3      	ldrh	r3, [r4, #12]
 8008450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008454:	81a3      	strh	r3, [r4, #12]
 8008456:	e7ad      	b.n	80083b4 <__sflush_r+0x1c>
 8008458:	690f      	ldr	r7, [r1, #16]
 800845a:	2f00      	cmp	r7, #0
 800845c:	d0a9      	beq.n	80083b2 <__sflush_r+0x1a>
 800845e:	0793      	lsls	r3, r2, #30
 8008460:	680e      	ldr	r6, [r1, #0]
 8008462:	bf08      	it	eq
 8008464:	694b      	ldreq	r3, [r1, #20]
 8008466:	600f      	str	r7, [r1, #0]
 8008468:	bf18      	it	ne
 800846a:	2300      	movne	r3, #0
 800846c:	eba6 0807 	sub.w	r8, r6, r7
 8008470:	608b      	str	r3, [r1, #8]
 8008472:	f1b8 0f00 	cmp.w	r8, #0
 8008476:	dd9c      	ble.n	80083b2 <__sflush_r+0x1a>
 8008478:	6a21      	ldr	r1, [r4, #32]
 800847a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800847c:	4643      	mov	r3, r8
 800847e:	463a      	mov	r2, r7
 8008480:	4628      	mov	r0, r5
 8008482:	47b0      	blx	r6
 8008484:	2800      	cmp	r0, #0
 8008486:	dc06      	bgt.n	8008496 <__sflush_r+0xfe>
 8008488:	89a3      	ldrh	r3, [r4, #12]
 800848a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800848e:	81a3      	strh	r3, [r4, #12]
 8008490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008494:	e78e      	b.n	80083b4 <__sflush_r+0x1c>
 8008496:	4407      	add	r7, r0
 8008498:	eba8 0800 	sub.w	r8, r8, r0
 800849c:	e7e9      	b.n	8008472 <__sflush_r+0xda>
 800849e:	bf00      	nop
 80084a0:	20400001 	.word	0x20400001

080084a4 <_fflush_r>:
 80084a4:	b538      	push	{r3, r4, r5, lr}
 80084a6:	690b      	ldr	r3, [r1, #16]
 80084a8:	4605      	mov	r5, r0
 80084aa:	460c      	mov	r4, r1
 80084ac:	b913      	cbnz	r3, 80084b4 <_fflush_r+0x10>
 80084ae:	2500      	movs	r5, #0
 80084b0:	4628      	mov	r0, r5
 80084b2:	bd38      	pop	{r3, r4, r5, pc}
 80084b4:	b118      	cbz	r0, 80084be <_fflush_r+0x1a>
 80084b6:	6983      	ldr	r3, [r0, #24]
 80084b8:	b90b      	cbnz	r3, 80084be <_fflush_r+0x1a>
 80084ba:	f000 f887 	bl	80085cc <__sinit>
 80084be:	4b14      	ldr	r3, [pc, #80]	; (8008510 <_fflush_r+0x6c>)
 80084c0:	429c      	cmp	r4, r3
 80084c2:	d11b      	bne.n	80084fc <_fflush_r+0x58>
 80084c4:	686c      	ldr	r4, [r5, #4]
 80084c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d0ef      	beq.n	80084ae <_fflush_r+0xa>
 80084ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084d0:	07d0      	lsls	r0, r2, #31
 80084d2:	d404      	bmi.n	80084de <_fflush_r+0x3a>
 80084d4:	0599      	lsls	r1, r3, #22
 80084d6:	d402      	bmi.n	80084de <_fflush_r+0x3a>
 80084d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084da:	f000 f915 	bl	8008708 <__retarget_lock_acquire_recursive>
 80084de:	4628      	mov	r0, r5
 80084e0:	4621      	mov	r1, r4
 80084e2:	f7ff ff59 	bl	8008398 <__sflush_r>
 80084e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084e8:	07da      	lsls	r2, r3, #31
 80084ea:	4605      	mov	r5, r0
 80084ec:	d4e0      	bmi.n	80084b0 <_fflush_r+0xc>
 80084ee:	89a3      	ldrh	r3, [r4, #12]
 80084f0:	059b      	lsls	r3, r3, #22
 80084f2:	d4dd      	bmi.n	80084b0 <_fflush_r+0xc>
 80084f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084f6:	f000 f908 	bl	800870a <__retarget_lock_release_recursive>
 80084fa:	e7d9      	b.n	80084b0 <_fflush_r+0xc>
 80084fc:	4b05      	ldr	r3, [pc, #20]	; (8008514 <_fflush_r+0x70>)
 80084fe:	429c      	cmp	r4, r3
 8008500:	d101      	bne.n	8008506 <_fflush_r+0x62>
 8008502:	68ac      	ldr	r4, [r5, #8]
 8008504:	e7df      	b.n	80084c6 <_fflush_r+0x22>
 8008506:	4b04      	ldr	r3, [pc, #16]	; (8008518 <_fflush_r+0x74>)
 8008508:	429c      	cmp	r4, r3
 800850a:	bf08      	it	eq
 800850c:	68ec      	ldreq	r4, [r5, #12]
 800850e:	e7da      	b.n	80084c6 <_fflush_r+0x22>
 8008510:	08008dd4 	.word	0x08008dd4
 8008514:	08008df4 	.word	0x08008df4
 8008518:	08008db4 	.word	0x08008db4

0800851c <std>:
 800851c:	2300      	movs	r3, #0
 800851e:	b510      	push	{r4, lr}
 8008520:	4604      	mov	r4, r0
 8008522:	e9c0 3300 	strd	r3, r3, [r0]
 8008526:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800852a:	6083      	str	r3, [r0, #8]
 800852c:	8181      	strh	r1, [r0, #12]
 800852e:	6643      	str	r3, [r0, #100]	; 0x64
 8008530:	81c2      	strh	r2, [r0, #14]
 8008532:	6183      	str	r3, [r0, #24]
 8008534:	4619      	mov	r1, r3
 8008536:	2208      	movs	r2, #8
 8008538:	305c      	adds	r0, #92	; 0x5c
 800853a:	f7fd fb59 	bl	8005bf0 <memset>
 800853e:	4b05      	ldr	r3, [pc, #20]	; (8008554 <std+0x38>)
 8008540:	6263      	str	r3, [r4, #36]	; 0x24
 8008542:	4b05      	ldr	r3, [pc, #20]	; (8008558 <std+0x3c>)
 8008544:	62a3      	str	r3, [r4, #40]	; 0x28
 8008546:	4b05      	ldr	r3, [pc, #20]	; (800855c <std+0x40>)
 8008548:	62e3      	str	r3, [r4, #44]	; 0x2c
 800854a:	4b05      	ldr	r3, [pc, #20]	; (8008560 <std+0x44>)
 800854c:	6224      	str	r4, [r4, #32]
 800854e:	6323      	str	r3, [r4, #48]	; 0x30
 8008550:	bd10      	pop	{r4, pc}
 8008552:	bf00      	nop
 8008554:	08008871 	.word	0x08008871
 8008558:	08008893 	.word	0x08008893
 800855c:	080088cb 	.word	0x080088cb
 8008560:	080088ef 	.word	0x080088ef

08008564 <_cleanup_r>:
 8008564:	4901      	ldr	r1, [pc, #4]	; (800856c <_cleanup_r+0x8>)
 8008566:	f000 b8af 	b.w	80086c8 <_fwalk_reent>
 800856a:	bf00      	nop
 800856c:	080084a5 	.word	0x080084a5

08008570 <__sfmoreglue>:
 8008570:	b570      	push	{r4, r5, r6, lr}
 8008572:	2268      	movs	r2, #104	; 0x68
 8008574:	1e4d      	subs	r5, r1, #1
 8008576:	4355      	muls	r5, r2
 8008578:	460e      	mov	r6, r1
 800857a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800857e:	f7ff fa65 	bl	8007a4c <_malloc_r>
 8008582:	4604      	mov	r4, r0
 8008584:	b140      	cbz	r0, 8008598 <__sfmoreglue+0x28>
 8008586:	2100      	movs	r1, #0
 8008588:	e9c0 1600 	strd	r1, r6, [r0]
 800858c:	300c      	adds	r0, #12
 800858e:	60a0      	str	r0, [r4, #8]
 8008590:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008594:	f7fd fb2c 	bl	8005bf0 <memset>
 8008598:	4620      	mov	r0, r4
 800859a:	bd70      	pop	{r4, r5, r6, pc}

0800859c <__sfp_lock_acquire>:
 800859c:	4801      	ldr	r0, [pc, #4]	; (80085a4 <__sfp_lock_acquire+0x8>)
 800859e:	f000 b8b3 	b.w	8008708 <__retarget_lock_acquire_recursive>
 80085a2:	bf00      	nop
 80085a4:	20000335 	.word	0x20000335

080085a8 <__sfp_lock_release>:
 80085a8:	4801      	ldr	r0, [pc, #4]	; (80085b0 <__sfp_lock_release+0x8>)
 80085aa:	f000 b8ae 	b.w	800870a <__retarget_lock_release_recursive>
 80085ae:	bf00      	nop
 80085b0:	20000335 	.word	0x20000335

080085b4 <__sinit_lock_acquire>:
 80085b4:	4801      	ldr	r0, [pc, #4]	; (80085bc <__sinit_lock_acquire+0x8>)
 80085b6:	f000 b8a7 	b.w	8008708 <__retarget_lock_acquire_recursive>
 80085ba:	bf00      	nop
 80085bc:	20000336 	.word	0x20000336

080085c0 <__sinit_lock_release>:
 80085c0:	4801      	ldr	r0, [pc, #4]	; (80085c8 <__sinit_lock_release+0x8>)
 80085c2:	f000 b8a2 	b.w	800870a <__retarget_lock_release_recursive>
 80085c6:	bf00      	nop
 80085c8:	20000336 	.word	0x20000336

080085cc <__sinit>:
 80085cc:	b510      	push	{r4, lr}
 80085ce:	4604      	mov	r4, r0
 80085d0:	f7ff fff0 	bl	80085b4 <__sinit_lock_acquire>
 80085d4:	69a3      	ldr	r3, [r4, #24]
 80085d6:	b11b      	cbz	r3, 80085e0 <__sinit+0x14>
 80085d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085dc:	f7ff bff0 	b.w	80085c0 <__sinit_lock_release>
 80085e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80085e4:	6523      	str	r3, [r4, #80]	; 0x50
 80085e6:	4b13      	ldr	r3, [pc, #76]	; (8008634 <__sinit+0x68>)
 80085e8:	4a13      	ldr	r2, [pc, #76]	; (8008638 <__sinit+0x6c>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80085ee:	42a3      	cmp	r3, r4
 80085f0:	bf04      	itt	eq
 80085f2:	2301      	moveq	r3, #1
 80085f4:	61a3      	streq	r3, [r4, #24]
 80085f6:	4620      	mov	r0, r4
 80085f8:	f000 f820 	bl	800863c <__sfp>
 80085fc:	6060      	str	r0, [r4, #4]
 80085fe:	4620      	mov	r0, r4
 8008600:	f000 f81c 	bl	800863c <__sfp>
 8008604:	60a0      	str	r0, [r4, #8]
 8008606:	4620      	mov	r0, r4
 8008608:	f000 f818 	bl	800863c <__sfp>
 800860c:	2200      	movs	r2, #0
 800860e:	60e0      	str	r0, [r4, #12]
 8008610:	2104      	movs	r1, #4
 8008612:	6860      	ldr	r0, [r4, #4]
 8008614:	f7ff ff82 	bl	800851c <std>
 8008618:	68a0      	ldr	r0, [r4, #8]
 800861a:	2201      	movs	r2, #1
 800861c:	2109      	movs	r1, #9
 800861e:	f7ff ff7d 	bl	800851c <std>
 8008622:	68e0      	ldr	r0, [r4, #12]
 8008624:	2202      	movs	r2, #2
 8008626:	2112      	movs	r1, #18
 8008628:	f7ff ff78 	bl	800851c <std>
 800862c:	2301      	movs	r3, #1
 800862e:	61a3      	str	r3, [r4, #24]
 8008630:	e7d2      	b.n	80085d8 <__sinit+0xc>
 8008632:	bf00      	nop
 8008634:	08008a3c 	.word	0x08008a3c
 8008638:	08008565 	.word	0x08008565

0800863c <__sfp>:
 800863c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863e:	4607      	mov	r7, r0
 8008640:	f7ff ffac 	bl	800859c <__sfp_lock_acquire>
 8008644:	4b1e      	ldr	r3, [pc, #120]	; (80086c0 <__sfp+0x84>)
 8008646:	681e      	ldr	r6, [r3, #0]
 8008648:	69b3      	ldr	r3, [r6, #24]
 800864a:	b913      	cbnz	r3, 8008652 <__sfp+0x16>
 800864c:	4630      	mov	r0, r6
 800864e:	f7ff ffbd 	bl	80085cc <__sinit>
 8008652:	3648      	adds	r6, #72	; 0x48
 8008654:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008658:	3b01      	subs	r3, #1
 800865a:	d503      	bpl.n	8008664 <__sfp+0x28>
 800865c:	6833      	ldr	r3, [r6, #0]
 800865e:	b30b      	cbz	r3, 80086a4 <__sfp+0x68>
 8008660:	6836      	ldr	r6, [r6, #0]
 8008662:	e7f7      	b.n	8008654 <__sfp+0x18>
 8008664:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008668:	b9d5      	cbnz	r5, 80086a0 <__sfp+0x64>
 800866a:	4b16      	ldr	r3, [pc, #88]	; (80086c4 <__sfp+0x88>)
 800866c:	60e3      	str	r3, [r4, #12]
 800866e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008672:	6665      	str	r5, [r4, #100]	; 0x64
 8008674:	f000 f847 	bl	8008706 <__retarget_lock_init_recursive>
 8008678:	f7ff ff96 	bl	80085a8 <__sfp_lock_release>
 800867c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008680:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008684:	6025      	str	r5, [r4, #0]
 8008686:	61a5      	str	r5, [r4, #24]
 8008688:	2208      	movs	r2, #8
 800868a:	4629      	mov	r1, r5
 800868c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008690:	f7fd faae 	bl	8005bf0 <memset>
 8008694:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008698:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800869c:	4620      	mov	r0, r4
 800869e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086a0:	3468      	adds	r4, #104	; 0x68
 80086a2:	e7d9      	b.n	8008658 <__sfp+0x1c>
 80086a4:	2104      	movs	r1, #4
 80086a6:	4638      	mov	r0, r7
 80086a8:	f7ff ff62 	bl	8008570 <__sfmoreglue>
 80086ac:	4604      	mov	r4, r0
 80086ae:	6030      	str	r0, [r6, #0]
 80086b0:	2800      	cmp	r0, #0
 80086b2:	d1d5      	bne.n	8008660 <__sfp+0x24>
 80086b4:	f7ff ff78 	bl	80085a8 <__sfp_lock_release>
 80086b8:	230c      	movs	r3, #12
 80086ba:	603b      	str	r3, [r7, #0]
 80086bc:	e7ee      	b.n	800869c <__sfp+0x60>
 80086be:	bf00      	nop
 80086c0:	08008a3c 	.word	0x08008a3c
 80086c4:	ffff0001 	.word	0xffff0001

080086c8 <_fwalk_reent>:
 80086c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086cc:	4606      	mov	r6, r0
 80086ce:	4688      	mov	r8, r1
 80086d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80086d4:	2700      	movs	r7, #0
 80086d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086da:	f1b9 0901 	subs.w	r9, r9, #1
 80086de:	d505      	bpl.n	80086ec <_fwalk_reent+0x24>
 80086e0:	6824      	ldr	r4, [r4, #0]
 80086e2:	2c00      	cmp	r4, #0
 80086e4:	d1f7      	bne.n	80086d6 <_fwalk_reent+0xe>
 80086e6:	4638      	mov	r0, r7
 80086e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ec:	89ab      	ldrh	r3, [r5, #12]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d907      	bls.n	8008702 <_fwalk_reent+0x3a>
 80086f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086f6:	3301      	adds	r3, #1
 80086f8:	d003      	beq.n	8008702 <_fwalk_reent+0x3a>
 80086fa:	4629      	mov	r1, r5
 80086fc:	4630      	mov	r0, r6
 80086fe:	47c0      	blx	r8
 8008700:	4307      	orrs	r7, r0
 8008702:	3568      	adds	r5, #104	; 0x68
 8008704:	e7e9      	b.n	80086da <_fwalk_reent+0x12>

08008706 <__retarget_lock_init_recursive>:
 8008706:	4770      	bx	lr

08008708 <__retarget_lock_acquire_recursive>:
 8008708:	4770      	bx	lr

0800870a <__retarget_lock_release_recursive>:
 800870a:	4770      	bx	lr

0800870c <__swhatbuf_r>:
 800870c:	b570      	push	{r4, r5, r6, lr}
 800870e:	460e      	mov	r6, r1
 8008710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008714:	2900      	cmp	r1, #0
 8008716:	b096      	sub	sp, #88	; 0x58
 8008718:	4614      	mov	r4, r2
 800871a:	461d      	mov	r5, r3
 800871c:	da08      	bge.n	8008730 <__swhatbuf_r+0x24>
 800871e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	602a      	str	r2, [r5, #0]
 8008726:	061a      	lsls	r2, r3, #24
 8008728:	d410      	bmi.n	800874c <__swhatbuf_r+0x40>
 800872a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800872e:	e00e      	b.n	800874e <__swhatbuf_r+0x42>
 8008730:	466a      	mov	r2, sp
 8008732:	f000 f903 	bl	800893c <_fstat_r>
 8008736:	2800      	cmp	r0, #0
 8008738:	dbf1      	blt.n	800871e <__swhatbuf_r+0x12>
 800873a:	9a01      	ldr	r2, [sp, #4]
 800873c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008740:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008744:	425a      	negs	r2, r3
 8008746:	415a      	adcs	r2, r3
 8008748:	602a      	str	r2, [r5, #0]
 800874a:	e7ee      	b.n	800872a <__swhatbuf_r+0x1e>
 800874c:	2340      	movs	r3, #64	; 0x40
 800874e:	2000      	movs	r0, #0
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	b016      	add	sp, #88	; 0x58
 8008754:	bd70      	pop	{r4, r5, r6, pc}
	...

08008758 <__smakebuf_r>:
 8008758:	898b      	ldrh	r3, [r1, #12]
 800875a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800875c:	079d      	lsls	r5, r3, #30
 800875e:	4606      	mov	r6, r0
 8008760:	460c      	mov	r4, r1
 8008762:	d507      	bpl.n	8008774 <__smakebuf_r+0x1c>
 8008764:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008768:	6023      	str	r3, [r4, #0]
 800876a:	6123      	str	r3, [r4, #16]
 800876c:	2301      	movs	r3, #1
 800876e:	6163      	str	r3, [r4, #20]
 8008770:	b002      	add	sp, #8
 8008772:	bd70      	pop	{r4, r5, r6, pc}
 8008774:	ab01      	add	r3, sp, #4
 8008776:	466a      	mov	r2, sp
 8008778:	f7ff ffc8 	bl	800870c <__swhatbuf_r>
 800877c:	9900      	ldr	r1, [sp, #0]
 800877e:	4605      	mov	r5, r0
 8008780:	4630      	mov	r0, r6
 8008782:	f7ff f963 	bl	8007a4c <_malloc_r>
 8008786:	b948      	cbnz	r0, 800879c <__smakebuf_r+0x44>
 8008788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800878c:	059a      	lsls	r2, r3, #22
 800878e:	d4ef      	bmi.n	8008770 <__smakebuf_r+0x18>
 8008790:	f023 0303 	bic.w	r3, r3, #3
 8008794:	f043 0302 	orr.w	r3, r3, #2
 8008798:	81a3      	strh	r3, [r4, #12]
 800879a:	e7e3      	b.n	8008764 <__smakebuf_r+0xc>
 800879c:	4b0d      	ldr	r3, [pc, #52]	; (80087d4 <__smakebuf_r+0x7c>)
 800879e:	62b3      	str	r3, [r6, #40]	; 0x28
 80087a0:	89a3      	ldrh	r3, [r4, #12]
 80087a2:	6020      	str	r0, [r4, #0]
 80087a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087a8:	81a3      	strh	r3, [r4, #12]
 80087aa:	9b00      	ldr	r3, [sp, #0]
 80087ac:	6163      	str	r3, [r4, #20]
 80087ae:	9b01      	ldr	r3, [sp, #4]
 80087b0:	6120      	str	r0, [r4, #16]
 80087b2:	b15b      	cbz	r3, 80087cc <__smakebuf_r+0x74>
 80087b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087b8:	4630      	mov	r0, r6
 80087ba:	f000 f8d1 	bl	8008960 <_isatty_r>
 80087be:	b128      	cbz	r0, 80087cc <__smakebuf_r+0x74>
 80087c0:	89a3      	ldrh	r3, [r4, #12]
 80087c2:	f023 0303 	bic.w	r3, r3, #3
 80087c6:	f043 0301 	orr.w	r3, r3, #1
 80087ca:	81a3      	strh	r3, [r4, #12]
 80087cc:	89a0      	ldrh	r0, [r4, #12]
 80087ce:	4305      	orrs	r5, r0
 80087d0:	81a5      	strh	r5, [r4, #12]
 80087d2:	e7cd      	b.n	8008770 <__smakebuf_r+0x18>
 80087d4:	08008565 	.word	0x08008565

080087d8 <_malloc_usable_size_r>:
 80087d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087dc:	1f18      	subs	r0, r3, #4
 80087de:	2b00      	cmp	r3, #0
 80087e0:	bfbc      	itt	lt
 80087e2:	580b      	ldrlt	r3, [r1, r0]
 80087e4:	18c0      	addlt	r0, r0, r3
 80087e6:	4770      	bx	lr

080087e8 <_raise_r>:
 80087e8:	291f      	cmp	r1, #31
 80087ea:	b538      	push	{r3, r4, r5, lr}
 80087ec:	4604      	mov	r4, r0
 80087ee:	460d      	mov	r5, r1
 80087f0:	d904      	bls.n	80087fc <_raise_r+0x14>
 80087f2:	2316      	movs	r3, #22
 80087f4:	6003      	str	r3, [r0, #0]
 80087f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087fa:	bd38      	pop	{r3, r4, r5, pc}
 80087fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80087fe:	b112      	cbz	r2, 8008806 <_raise_r+0x1e>
 8008800:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008804:	b94b      	cbnz	r3, 800881a <_raise_r+0x32>
 8008806:	4620      	mov	r0, r4
 8008808:	f000 f830 	bl	800886c <_getpid_r>
 800880c:	462a      	mov	r2, r5
 800880e:	4601      	mov	r1, r0
 8008810:	4620      	mov	r0, r4
 8008812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008816:	f000 b817 	b.w	8008848 <_kill_r>
 800881a:	2b01      	cmp	r3, #1
 800881c:	d00a      	beq.n	8008834 <_raise_r+0x4c>
 800881e:	1c59      	adds	r1, r3, #1
 8008820:	d103      	bne.n	800882a <_raise_r+0x42>
 8008822:	2316      	movs	r3, #22
 8008824:	6003      	str	r3, [r0, #0]
 8008826:	2001      	movs	r0, #1
 8008828:	e7e7      	b.n	80087fa <_raise_r+0x12>
 800882a:	2400      	movs	r4, #0
 800882c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008830:	4628      	mov	r0, r5
 8008832:	4798      	blx	r3
 8008834:	2000      	movs	r0, #0
 8008836:	e7e0      	b.n	80087fa <_raise_r+0x12>

08008838 <raise>:
 8008838:	4b02      	ldr	r3, [pc, #8]	; (8008844 <raise+0xc>)
 800883a:	4601      	mov	r1, r0
 800883c:	6818      	ldr	r0, [r3, #0]
 800883e:	f7ff bfd3 	b.w	80087e8 <_raise_r>
 8008842:	bf00      	nop
 8008844:	20000014 	.word	0x20000014

08008848 <_kill_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4d07      	ldr	r5, [pc, #28]	; (8008868 <_kill_r+0x20>)
 800884c:	2300      	movs	r3, #0
 800884e:	4604      	mov	r4, r0
 8008850:	4608      	mov	r0, r1
 8008852:	4611      	mov	r1, r2
 8008854:	602b      	str	r3, [r5, #0]
 8008856:	f7f8 ff07 	bl	8001668 <_kill>
 800885a:	1c43      	adds	r3, r0, #1
 800885c:	d102      	bne.n	8008864 <_kill_r+0x1c>
 800885e:	682b      	ldr	r3, [r5, #0]
 8008860:	b103      	cbz	r3, 8008864 <_kill_r+0x1c>
 8008862:	6023      	str	r3, [r4, #0]
 8008864:	bd38      	pop	{r3, r4, r5, pc}
 8008866:	bf00      	nop
 8008868:	20000330 	.word	0x20000330

0800886c <_getpid_r>:
 800886c:	f7f8 bef4 	b.w	8001658 <_getpid>

08008870 <__sread>:
 8008870:	b510      	push	{r4, lr}
 8008872:	460c      	mov	r4, r1
 8008874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008878:	f000 f894 	bl	80089a4 <_read_r>
 800887c:	2800      	cmp	r0, #0
 800887e:	bfab      	itete	ge
 8008880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008882:	89a3      	ldrhlt	r3, [r4, #12]
 8008884:	181b      	addge	r3, r3, r0
 8008886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800888a:	bfac      	ite	ge
 800888c:	6563      	strge	r3, [r4, #84]	; 0x54
 800888e:	81a3      	strhlt	r3, [r4, #12]
 8008890:	bd10      	pop	{r4, pc}

08008892 <__swrite>:
 8008892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008896:	461f      	mov	r7, r3
 8008898:	898b      	ldrh	r3, [r1, #12]
 800889a:	05db      	lsls	r3, r3, #23
 800889c:	4605      	mov	r5, r0
 800889e:	460c      	mov	r4, r1
 80088a0:	4616      	mov	r6, r2
 80088a2:	d505      	bpl.n	80088b0 <__swrite+0x1e>
 80088a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a8:	2302      	movs	r3, #2
 80088aa:	2200      	movs	r2, #0
 80088ac:	f000 f868 	bl	8008980 <_lseek_r>
 80088b0:	89a3      	ldrh	r3, [r4, #12]
 80088b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088ba:	81a3      	strh	r3, [r4, #12]
 80088bc:	4632      	mov	r2, r6
 80088be:	463b      	mov	r3, r7
 80088c0:	4628      	mov	r0, r5
 80088c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088c6:	f000 b817 	b.w	80088f8 <_write_r>

080088ca <__sseek>:
 80088ca:	b510      	push	{r4, lr}
 80088cc:	460c      	mov	r4, r1
 80088ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d2:	f000 f855 	bl	8008980 <_lseek_r>
 80088d6:	1c43      	adds	r3, r0, #1
 80088d8:	89a3      	ldrh	r3, [r4, #12]
 80088da:	bf15      	itete	ne
 80088dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80088de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088e6:	81a3      	strheq	r3, [r4, #12]
 80088e8:	bf18      	it	ne
 80088ea:	81a3      	strhne	r3, [r4, #12]
 80088ec:	bd10      	pop	{r4, pc}

080088ee <__sclose>:
 80088ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f2:	f000 b813 	b.w	800891c <_close_r>
	...

080088f8 <_write_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	4d07      	ldr	r5, [pc, #28]	; (8008918 <_write_r+0x20>)
 80088fc:	4604      	mov	r4, r0
 80088fe:	4608      	mov	r0, r1
 8008900:	4611      	mov	r1, r2
 8008902:	2200      	movs	r2, #0
 8008904:	602a      	str	r2, [r5, #0]
 8008906:	461a      	mov	r2, r3
 8008908:	f7f8 fee5 	bl	80016d6 <_write>
 800890c:	1c43      	adds	r3, r0, #1
 800890e:	d102      	bne.n	8008916 <_write_r+0x1e>
 8008910:	682b      	ldr	r3, [r5, #0]
 8008912:	b103      	cbz	r3, 8008916 <_write_r+0x1e>
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	bd38      	pop	{r3, r4, r5, pc}
 8008918:	20000330 	.word	0x20000330

0800891c <_close_r>:
 800891c:	b538      	push	{r3, r4, r5, lr}
 800891e:	4d06      	ldr	r5, [pc, #24]	; (8008938 <_close_r+0x1c>)
 8008920:	2300      	movs	r3, #0
 8008922:	4604      	mov	r4, r0
 8008924:	4608      	mov	r0, r1
 8008926:	602b      	str	r3, [r5, #0]
 8008928:	f7f8 fef1 	bl	800170e <_close>
 800892c:	1c43      	adds	r3, r0, #1
 800892e:	d102      	bne.n	8008936 <_close_r+0x1a>
 8008930:	682b      	ldr	r3, [r5, #0]
 8008932:	b103      	cbz	r3, 8008936 <_close_r+0x1a>
 8008934:	6023      	str	r3, [r4, #0]
 8008936:	bd38      	pop	{r3, r4, r5, pc}
 8008938:	20000330 	.word	0x20000330

0800893c <_fstat_r>:
 800893c:	b538      	push	{r3, r4, r5, lr}
 800893e:	4d07      	ldr	r5, [pc, #28]	; (800895c <_fstat_r+0x20>)
 8008940:	2300      	movs	r3, #0
 8008942:	4604      	mov	r4, r0
 8008944:	4608      	mov	r0, r1
 8008946:	4611      	mov	r1, r2
 8008948:	602b      	str	r3, [r5, #0]
 800894a:	f7f8 feec 	bl	8001726 <_fstat>
 800894e:	1c43      	adds	r3, r0, #1
 8008950:	d102      	bne.n	8008958 <_fstat_r+0x1c>
 8008952:	682b      	ldr	r3, [r5, #0]
 8008954:	b103      	cbz	r3, 8008958 <_fstat_r+0x1c>
 8008956:	6023      	str	r3, [r4, #0]
 8008958:	bd38      	pop	{r3, r4, r5, pc}
 800895a:	bf00      	nop
 800895c:	20000330 	.word	0x20000330

08008960 <_isatty_r>:
 8008960:	b538      	push	{r3, r4, r5, lr}
 8008962:	4d06      	ldr	r5, [pc, #24]	; (800897c <_isatty_r+0x1c>)
 8008964:	2300      	movs	r3, #0
 8008966:	4604      	mov	r4, r0
 8008968:	4608      	mov	r0, r1
 800896a:	602b      	str	r3, [r5, #0]
 800896c:	f7f8 feeb 	bl	8001746 <_isatty>
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	d102      	bne.n	800897a <_isatty_r+0x1a>
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	b103      	cbz	r3, 800897a <_isatty_r+0x1a>
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	20000330 	.word	0x20000330

08008980 <_lseek_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4d07      	ldr	r5, [pc, #28]	; (80089a0 <_lseek_r+0x20>)
 8008984:	4604      	mov	r4, r0
 8008986:	4608      	mov	r0, r1
 8008988:	4611      	mov	r1, r2
 800898a:	2200      	movs	r2, #0
 800898c:	602a      	str	r2, [r5, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	f7f8 fee4 	bl	800175c <_lseek>
 8008994:	1c43      	adds	r3, r0, #1
 8008996:	d102      	bne.n	800899e <_lseek_r+0x1e>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	b103      	cbz	r3, 800899e <_lseek_r+0x1e>
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	bd38      	pop	{r3, r4, r5, pc}
 80089a0:	20000330 	.word	0x20000330

080089a4 <_read_r>:
 80089a4:	b538      	push	{r3, r4, r5, lr}
 80089a6:	4d07      	ldr	r5, [pc, #28]	; (80089c4 <_read_r+0x20>)
 80089a8:	4604      	mov	r4, r0
 80089aa:	4608      	mov	r0, r1
 80089ac:	4611      	mov	r1, r2
 80089ae:	2200      	movs	r2, #0
 80089b0:	602a      	str	r2, [r5, #0]
 80089b2:	461a      	mov	r2, r3
 80089b4:	f7f8 fe72 	bl	800169c <_read>
 80089b8:	1c43      	adds	r3, r0, #1
 80089ba:	d102      	bne.n	80089c2 <_read_r+0x1e>
 80089bc:	682b      	ldr	r3, [r5, #0]
 80089be:	b103      	cbz	r3, 80089c2 <_read_r+0x1e>
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	20000330 	.word	0x20000330

080089c8 <_init>:
 80089c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ca:	bf00      	nop
 80089cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ce:	bc08      	pop	{r3}
 80089d0:	469e      	mov	lr, r3
 80089d2:	4770      	bx	lr

080089d4 <_fini>:
 80089d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d6:	bf00      	nop
 80089d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089da:	bc08      	pop	{r3}
 80089dc:	469e      	mov	lr, r3
 80089de:	4770      	bx	lr
