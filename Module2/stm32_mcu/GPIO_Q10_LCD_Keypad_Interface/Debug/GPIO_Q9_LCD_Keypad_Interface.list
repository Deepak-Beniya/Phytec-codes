
GPIO_Q9_LCD_Keypad_Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003210  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  080033d4  080033d4  000133d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003590  08003590  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003590  08003590  00013590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003598  08003598  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003598  08003598  00013598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800359c  0800359c  0001359c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080035a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  08003610  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08003610  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000927c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001906  00000000  00000000  0002931c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  0002ac28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f0  00000000  00000000  0002b3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021cfe  00000000  00000000  0002bab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009eb5  00000000  00000000  0004d7ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c98c0  00000000  00000000  00057663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120f23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002410  00000000  00000000  00120f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080033bc 	.word	0x080033bc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	080033bc 	.word	0x080033bc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <print>:
#include<stdio.h>
#include<string.h>
#include<Lcd.h>

void print(unsigned char dat)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	///////0
	if((dat&0x1)==0x1)
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	f003 0301 	and.w	r3, r3, #1
 8000518:	2b00      	cmp	r3, #0
 800051a:	d006      	beq.n	800052a <print+0x22>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000522:	4841      	ldr	r0, [pc, #260]	; (8000628 <print+0x120>)
 8000524:	f001 f956 	bl	80017d4 <HAL_GPIO_WritePin>
 8000528:	e005      	b.n	8000536 <print+0x2e>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000530:	483d      	ldr	r0, [pc, #244]	; (8000628 <print+0x120>)
 8000532:	f001 f94f 	bl	80017d4 <HAL_GPIO_WritePin>
	}
	////////1
	if((dat&0x2)==0x2)
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	f003 0302 	and.w	r3, r3, #2
 800053c:	2b00      	cmp	r3, #0
 800053e:	d005      	beq.n	800054c <print+0x44>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000540:	2201      	movs	r2, #1
 8000542:	2108      	movs	r1, #8
 8000544:	4839      	ldr	r0, [pc, #228]	; (800062c <print+0x124>)
 8000546:	f001 f945 	bl	80017d4 <HAL_GPIO_WritePin>
 800054a:	e004      	b.n	8000556 <print+0x4e>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2108      	movs	r1, #8
 8000550:	4836      	ldr	r0, [pc, #216]	; (800062c <print+0x124>)
 8000552:	f001 f93f 	bl	80017d4 <HAL_GPIO_WritePin>
	}
	////////2
	if((dat&0x4)==0x4)
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	f003 0304 	and.w	r3, r3, #4
 800055c:	2b00      	cmp	r3, #0
 800055e:	d005      	beq.n	800056c <print+0x64>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000560:	2201      	movs	r2, #1
 8000562:	2120      	movs	r1, #32
 8000564:	4831      	ldr	r0, [pc, #196]	; (800062c <print+0x124>)
 8000566:	f001 f935 	bl	80017d4 <HAL_GPIO_WritePin>
 800056a:	e004      	b.n	8000576 <print+0x6e>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2120      	movs	r1, #32
 8000570:	482e      	ldr	r0, [pc, #184]	; (800062c <print+0x124>)
 8000572:	f001 f92f 	bl	80017d4 <HAL_GPIO_WritePin>
		}
	////////3
	if((dat&0x8)==0x8)
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	f003 0308 	and.w	r3, r3, #8
 800057c:	2b00      	cmp	r3, #0
 800057e:	d005      	beq.n	800058c <print+0x84>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2110      	movs	r1, #16
 8000584:	4829      	ldr	r0, [pc, #164]	; (800062c <print+0x124>)
 8000586:	f001 f925 	bl	80017d4 <HAL_GPIO_WritePin>
 800058a:	e004      	b.n	8000596 <print+0x8e>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	2110      	movs	r1, #16
 8000590:	4826      	ldr	r0, [pc, #152]	; (800062c <print+0x124>)
 8000592:	f001 f91f 	bl	80017d4 <HAL_GPIO_WritePin>
		}
	////////4
	if((dat&0x10)==0x10)
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	f003 0310 	and.w	r3, r3, #16
 800059c:	2b00      	cmp	r3, #0
 800059e:	d006      	beq.n	80005ae <print+0xa6>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a6:	4821      	ldr	r0, [pc, #132]	; (800062c <print+0x124>)
 80005a8:	f001 f914 	bl	80017d4 <HAL_GPIO_WritePin>
 80005ac:	e005      	b.n	80005ba <print+0xb2>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b4:	481d      	ldr	r0, [pc, #116]	; (800062c <print+0x124>)
 80005b6:	f001 f90d 	bl	80017d4 <HAL_GPIO_WritePin>
		}
	////////5
	if((dat&0x20)==0x20)
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	f003 0320 	and.w	r3, r3, #32
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d006      	beq.n	80005d2 <print+0xca>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ca:	4817      	ldr	r0, [pc, #92]	; (8000628 <print+0x120>)
 80005cc:	f001 f902 	bl	80017d4 <HAL_GPIO_WritePin>
 80005d0:	e005      	b.n	80005de <print+0xd6>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d8:	4813      	ldr	r0, [pc, #76]	; (8000628 <print+0x120>)
 80005da:	f001 f8fb 	bl	80017d4 <HAL_GPIO_WritePin>
		}
	////////6
	if((dat&0x40)==0x40)
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d006      	beq.n	80005f6 <print+0xee>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ee:	480e      	ldr	r0, [pc, #56]	; (8000628 <print+0x120>)
 80005f0:	f001 f8f0 	bl	80017d4 <HAL_GPIO_WritePin>
 80005f4:	e005      	b.n	8000602 <print+0xfa>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fc:	480a      	ldr	r0, [pc, #40]	; (8000628 <print+0x120>)
 80005fe:	f001 f8e9 	bl	80017d4 <HAL_GPIO_WritePin>
		}
	////////7
	if((dat&0x80)==0x80)
 8000602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000606:	2b00      	cmp	r3, #0
 8000608:	da05      	bge.n	8000616 <print+0x10e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2180      	movs	r1, #128	; 0x80
 800060e:	4808      	ldr	r0, [pc, #32]	; (8000630 <print+0x128>)
 8000610:	f001 f8e0 	bl	80017d4 <HAL_GPIO_WritePin>
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);
		}

}
 8000614:	e004      	b.n	8000620 <print+0x118>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <print+0x128>)
 800061c:	f001 f8da 	bl	80017d4 <HAL_GPIO_WritePin>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40020000 	.word	0x40020000
 800062c:	40020400 	.word	0x40020400
 8000630:	40020800 	.word	0x40020800

08000634 <lcd_cmd>:
void lcd_cmd(unsigned char cmd)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
	print(cmd);
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff61 	bl	8000508 <print>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);//REG SELECT PIN =0 for command
 8000646:	2200      	movs	r2, #0
 8000648:	2140      	movs	r1, #64	; 0x40
 800064a:	480c      	ldr	r0, [pc, #48]	; (800067c <lcd_cmd+0x48>)
 800064c:	f001 f8c2 	bl	80017d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);//READ WRITE PIN =0 for write
 8000650:	2200      	movs	r2, #0
 8000652:	2180      	movs	r1, #128	; 0x80
 8000654:	480a      	ldr	r0, [pc, #40]	; (8000680 <lcd_cmd+0x4c>)
 8000656:	f001 f8bd 	bl	80017d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);// ENABLE PIN =1
 800065a:	2201      	movs	r2, #1
 800065c:	2140      	movs	r1, #64	; 0x40
 800065e:	4808      	ldr	r0, [pc, #32]	; (8000680 <lcd_cmd+0x4c>)
 8000660:	f001 f8b8 	bl	80017d4 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000664:	2002      	movs	r0, #2
 8000666:	f000 fdff 	bl	8001268 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);// ENABLE PIN =0
 800066a:	2200      	movs	r2, #0
 800066c:	2140      	movs	r1, #64	; 0x40
 800066e:	4804      	ldr	r0, [pc, #16]	; (8000680 <lcd_cmd+0x4c>)
 8000670:	f001 f8b0 	bl	80017d4 <HAL_GPIO_WritePin>

}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40020400 	.word	0x40020400
 8000680:	40020000 	.word	0x40020000

08000684 <lcd_data>:
void lcd_data(unsigned char mydat)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	print(mydat);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ff39 	bl	8000508 <print>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET); // RS = 1 for data
 8000696:	2201      	movs	r2, #1
 8000698:	2140      	movs	r1, #64	; 0x40
 800069a:	480c      	ldr	r0, [pc, #48]	; (80006cc <lcd_data+0x48>)
 800069c:	f001 f89a 	bl	80017d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET); // RW = 0 for write
 80006a0:	2200      	movs	r2, #0
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	480a      	ldr	r0, [pc, #40]	; (80006d0 <lcd_data+0x4c>)
 80006a6:	f001 f895 	bl	80017d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET); // EN = 1
 80006aa:	2201      	movs	r2, #1
 80006ac:	2140      	movs	r1, #64	; 0x40
 80006ae:	4808      	ldr	r0, [pc, #32]	; (80006d0 <lcd_data+0x4c>)
 80006b0:	f001 f890 	bl	80017d4 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80006b4:	2002      	movs	r0, #2
 80006b6:	f000 fdd7 	bl	8001268 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET); // EN = 0
 80006ba:	2200      	movs	r2, #0
 80006bc:	2140      	movs	r1, #64	; 0x40
 80006be:	4804      	ldr	r0, [pc, #16]	; (80006d0 <lcd_data+0x4c>)
 80006c0:	f001 f888 	bl	80017d4 <HAL_GPIO_WritePin>

}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40020400 	.word	0x40020400
 80006d0:	40020000 	.word	0x40020000

080006d4 <lcd_init>:
void lcd_init()
{void lcd_init(void);
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	lcd_cmd(0x38); // 8-bit mode, 2 lines, 5x7 font
 80006d8:	2038      	movs	r0, #56	; 0x38
 80006da:	f7ff ffab 	bl	8000634 <lcd_cmd>
	lcd_cmd(0x06); // Entry mode: increment, no shift
 80006de:	2006      	movs	r0, #6
 80006e0:	f7ff ffa8 	bl	8000634 <lcd_cmd>
	lcd_cmd(0x01); // Clear display
 80006e4:	2001      	movs	r0, #1
 80006e6:	f7ff ffa5 	bl	8000634 <lcd_cmd>
	lcd_cmd(0x0C); // Display on, cursor off, blink off
 80006ea:	200c      	movs	r0, #12
 80006ec:	f7ff ffa2 	bl	8000634 <lcd_cmd>
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <lcd_display>:
void lcd_display(unsigned char *str,unsigned int length)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
	for(int i=0;i<length;i++)
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	e009      	b.n	8000718 <lcd_display+0x24>
	{
		lcd_data(str[i]);
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4413      	add	r3, r2
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ffb9 	bl	8000684 <lcd_data>
	for(int i=0;i<length;i++)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	3301      	adds	r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	683a      	ldr	r2, [r7, #0]
 800071c:	429a      	cmp	r2, r3
 800071e:	d8f1      	bhi.n	8000704 <lcd_display+0x10>
	}
}
 8000720:	bf00      	nop
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000732:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000736:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	2b00      	cmp	r3, #0
 8000740:	d013      	beq.n	800076a <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000742:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000746:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800074a:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800074e:	2b00      	cmp	r3, #0
 8000750:	d00b      	beq.n	800076a <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000752:	e000      	b.n	8000756 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000754:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000756:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d0f9      	beq.n	8000754 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000760:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800076a:	687b      	ldr	r3, [r7, #4]
}
 800076c:	4618      	mov	r0, r3
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077e:	f000 fd01 	bl	8001184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000782:	f000 fa5b 	bl	8000c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000786:	f000 faf1 	bl	8000d6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800078a:	f000 fac5 	bl	8000d18 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800078e:	f7ff ffa1 	bl	80006d4 <lcd_init>
  int count =0;
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
  int i[1]={count};
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 800079a:	2201      	movs	r2, #1
 800079c:	2101      	movs	r1, #1
 800079e:	48d3      	ldr	r0, [pc, #844]	; (8000aec <main+0x374>)
 80007a0:	f001 f818 	bl	80017d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2102      	movs	r1, #2
 80007a8:	48d0      	ldr	r0, [pc, #832]	; (8000aec <main+0x374>)
 80007aa:	f001 f813 	bl	80017d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2104      	movs	r1, #4
 80007b2:	48ce      	ldr	r0, [pc, #824]	; (8000aec <main+0x374>)
 80007b4:	f001 f80e 	bl	80017d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2108      	movs	r1, #8
 80007bc:	48cb      	ldr	r0, [pc, #812]	; (8000aec <main+0x374>)
 80007be:	f001 f809 	bl	80017d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2101      	movs	r1, #1
 80007c6:	48c9      	ldr	r0, [pc, #804]	; (8000aec <main+0x374>)
 80007c8:	f001 f804 	bl	80017d4 <HAL_GPIO_WritePin>
//
//	  		  lcd_cmd(0x01);
//	  		  HAL_Delay(1000);
//
//	  	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_4)))
 80007cc:	2110      	movs	r1, #16
 80007ce:	48c7      	ldr	r0, [pc, #796]	; (8000aec <main+0x374>)
 80007d0:	f000 ffe8 	bl	80017a4 <HAL_GPIO_ReadPin>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d110      	bne.n	80007fc <main+0x84>
	  {
		  HAL_Delay(300);
 80007da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007de:	f000 fd43 	bl	8001268 <HAL_Delay>
		  printf("1 is pressed\n");
 80007e2:	48c3      	ldr	r0, [pc, #780]	; (8000af0 <main+0x378>)
 80007e4:	f002 f95a 	bl	8002a9c <puts>
		  lcd_cmd(0x07);
 80007e8:	2007      	movs	r0, #7
 80007ea:	f7ff ff23 	bl	8000634 <lcd_cmd>
		  lcd_display("1",1);
 80007ee:	2101      	movs	r1, #1
 80007f0:	48c0      	ldr	r0, [pc, #768]	; (8000af4 <main+0x37c>)
 80007f2:	f7ff ff7f 	bl	80006f4 <lcd_display>
		  lcd_cmd(0x05);
 80007f6:	2005      	movs	r0, #5
 80007f8:	f7ff ff1c 	bl	8000634 <lcd_cmd>
	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_5)))
 80007fc:	2120      	movs	r1, #32
 80007fe:	48bb      	ldr	r0, [pc, #748]	; (8000aec <main+0x374>)
 8000800:	f000 ffd0 	bl	80017a4 <HAL_GPIO_ReadPin>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d110      	bne.n	800082c <main+0xb4>
	  {
		  HAL_Delay(300);
 800080a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800080e:	f000 fd2b 	bl	8001268 <HAL_Delay>
		  printf("2 is pressed\n");
 8000812:	48b9      	ldr	r0, [pc, #740]	; (8000af8 <main+0x380>)
 8000814:	f002 f942 	bl	8002a9c <puts>
		  lcd_cmd(0x07);
 8000818:	2007      	movs	r0, #7
 800081a:	f7ff ff0b 	bl	8000634 <lcd_cmd>
		  lcd_display("2",1);
 800081e:	2101      	movs	r1, #1
 8000820:	48b6      	ldr	r0, [pc, #728]	; (8000afc <main+0x384>)
 8000822:	f7ff ff67 	bl	80006f4 <lcd_display>
		  lcd_cmd(0x05);
 8000826:	2005      	movs	r0, #5
 8000828:	f7ff ff04 	bl	8000634 <lcd_cmd>
	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_6)))
 800082c:	2140      	movs	r1, #64	; 0x40
 800082e:	48af      	ldr	r0, [pc, #700]	; (8000aec <main+0x374>)
 8000830:	f000 ffb8 	bl	80017a4 <HAL_GPIO_ReadPin>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d10d      	bne.n	8000856 <main+0xde>
	  {
		  HAL_Delay(300);
 800083a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800083e:	f000 fd13 	bl	8001268 <HAL_Delay>
		  printf("3 is pressed\n");
 8000842:	48af      	ldr	r0, [pc, #700]	; (8000b00 <main+0x388>)
 8000844:	f002 f92a 	bl	8002a9c <puts>
		  lcd_cmd(0x06);
 8000848:	2006      	movs	r0, #6
 800084a:	f7ff fef3 	bl	8000634 <lcd_cmd>
		  lcd_display("3",1);
 800084e:	2101      	movs	r1, #1
 8000850:	48ac      	ldr	r0, [pc, #688]	; (8000b04 <main+0x38c>)
 8000852:	f7ff ff4f 	bl	80006f4 <lcd_display>
	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_8)))
 8000856:	f44f 7180 	mov.w	r1, #256	; 0x100
 800085a:	48a4      	ldr	r0, [pc, #656]	; (8000aec <main+0x374>)
 800085c:	f000 ffa2 	bl	80017a4 <HAL_GPIO_ReadPin>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d10d      	bne.n	8000882 <main+0x10a>
	  {
		  HAL_Delay(300);
 8000866:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800086a:	f000 fcfd 	bl	8001268 <HAL_Delay>
		  printf("A is pressed\n");
 800086e:	48a6      	ldr	r0, [pc, #664]	; (8000b08 <main+0x390>)
 8000870:	f002 f914 	bl	8002a9c <puts>
		  lcd_cmd(0x06);
 8000874:	2006      	movs	r0, #6
 8000876:	f7ff fedd 	bl	8000634 <lcd_cmd>
		  lcd_display("A",1);
 800087a:	2101      	movs	r1, #1
 800087c:	48a3      	ldr	r0, [pc, #652]	; (8000b0c <main+0x394>)
 800087e:	f7ff ff39 	bl	80006f4 <lcd_display>
	  }

	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 8000882:	2201      	movs	r2, #1
 8000884:	2101      	movs	r1, #1
 8000886:	4899      	ldr	r0, [pc, #612]	; (8000aec <main+0x374>)
 8000888:	f000 ffa4 	bl	80017d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 800088c:	2201      	movs	r2, #1
 800088e:	2102      	movs	r1, #2
 8000890:	4896      	ldr	r0, [pc, #600]	; (8000aec <main+0x374>)
 8000892:	f000 ff9f 	bl	80017d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 8000896:	2201      	movs	r2, #1
 8000898:	2104      	movs	r1, #4
 800089a:	4894      	ldr	r0, [pc, #592]	; (8000aec <main+0x374>)
 800089c:	f000 ff9a 	bl	80017d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2108      	movs	r1, #8
 80008a4:	4891      	ldr	r0, [pc, #580]	; (8000aec <main+0x374>)
 80008a6:	f000 ff95 	bl	80017d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2102      	movs	r1, #2
 80008ae:	488f      	ldr	r0, [pc, #572]	; (8000aec <main+0x374>)
 80008b0:	f000 ff90 	bl	80017d4 <HAL_GPIO_WritePin>
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_4)))
 80008b4:	2110      	movs	r1, #16
 80008b6:	488d      	ldr	r0, [pc, #564]	; (8000aec <main+0x374>)
 80008b8:	f000 ff74 	bl	80017a4 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d111      	bne.n	80008e6 <main+0x16e>
	  {
		  HAL_Delay(300);
 80008c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008c6:	f000 fccf 	bl	8001268 <HAL_Delay>
		  printf("4 is pressed\n");
 80008ca:	4891      	ldr	r0, [pc, #580]	; (8000b10 <main+0x398>)
 80008cc:	f002 f8e6 	bl	8002a9c <puts>
		  HAL_Delay(300);
 80008d0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008d4:	f000 fcc8 	bl	8001268 <HAL_Delay>
		  lcd_cmd(0x07);
 80008d8:	2007      	movs	r0, #7
 80008da:	f7ff feab 	bl	8000634 <lcd_cmd>
		  lcd_display("4",1);
 80008de:	2101      	movs	r1, #1
 80008e0:	488c      	ldr	r0, [pc, #560]	; (8000b14 <main+0x39c>)
 80008e2:	f7ff ff07 	bl	80006f4 <lcd_display>
	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_5)))
 80008e6:	2120      	movs	r1, #32
 80008e8:	4880      	ldr	r0, [pc, #512]	; (8000aec <main+0x374>)
 80008ea:	f000 ff5b 	bl	80017a4 <HAL_GPIO_ReadPin>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d111      	bne.n	8000918 <main+0x1a0>
	  {
		  HAL_Delay(300);
 80008f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008f8:	f000 fcb6 	bl	8001268 <HAL_Delay>
		  printf("5 is pressed\n");
 80008fc:	4886      	ldr	r0, [pc, #536]	; (8000b18 <main+0x3a0>)
 80008fe:	f002 f8cd 	bl	8002a9c <puts>
		  HAL_Delay(300);
 8000902:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000906:	f000 fcaf 	bl	8001268 <HAL_Delay>
		  lcd_cmd(0x07);
 800090a:	2007      	movs	r0, #7
 800090c:	f7ff fe92 	bl	8000634 <lcd_cmd>
		  lcd_display("5",1);
 8000910:	2101      	movs	r1, #1
 8000912:	4882      	ldr	r0, [pc, #520]	; (8000b1c <main+0x3a4>)
 8000914:	f7ff feee 	bl	80006f4 <lcd_display>
	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_6)))
 8000918:	2140      	movs	r1, #64	; 0x40
 800091a:	4874      	ldr	r0, [pc, #464]	; (8000aec <main+0x374>)
 800091c:	f000 ff42 	bl	80017a4 <HAL_GPIO_ReadPin>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d111      	bne.n	800094a <main+0x1d2>
	  {
		  HAL_Delay(300);
 8000926:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800092a:	f000 fc9d 	bl	8001268 <HAL_Delay>
		  printf("6 is pressed\n");
 800092e:	487c      	ldr	r0, [pc, #496]	; (8000b20 <main+0x3a8>)
 8000930:	f002 f8b4 	bl	8002a9c <puts>
		  HAL_Delay(300);
 8000934:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000938:	f000 fc96 	bl	8001268 <HAL_Delay>
		  lcd_cmd(0x06);
 800093c:	2006      	movs	r0, #6
 800093e:	f7ff fe79 	bl	8000634 <lcd_cmd>
		  lcd_display("6",1);
 8000942:	2101      	movs	r1, #1
 8000944:	4877      	ldr	r0, [pc, #476]	; (8000b24 <main+0x3ac>)
 8000946:	f7ff fed5 	bl	80006f4 <lcd_display>
	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_8)))
 800094a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800094e:	4867      	ldr	r0, [pc, #412]	; (8000aec <main+0x374>)
 8000950:	f000 ff28 	bl	80017a4 <HAL_GPIO_ReadPin>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d111      	bne.n	800097e <main+0x206>
	  {
		  HAL_Delay(300);
 800095a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800095e:	f000 fc83 	bl	8001268 <HAL_Delay>
		  printf("B is pressed\n");
 8000962:	4871      	ldr	r0, [pc, #452]	; (8000b28 <main+0x3b0>)
 8000964:	f002 f89a 	bl	8002a9c <puts>
		  HAL_Delay(300);
 8000968:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800096c:	f000 fc7c 	bl	8001268 <HAL_Delay>
		  lcd_cmd(0x06);
 8000970:	2006      	movs	r0, #6
 8000972:	f7ff fe5f 	bl	8000634 <lcd_cmd>
		  lcd_display("B",1);
 8000976:	2101      	movs	r1, #1
 8000978:	486c      	ldr	r0, [pc, #432]	; (8000b2c <main+0x3b4>)
 800097a:	f7ff febb 	bl	80006f4 <lcd_display>
	  }

	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 800097e:	2201      	movs	r2, #1
 8000980:	2101      	movs	r1, #1
 8000982:	485a      	ldr	r0, [pc, #360]	; (8000aec <main+0x374>)
 8000984:	f000 ff26 	bl	80017d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 8000988:	2201      	movs	r2, #1
 800098a:	2102      	movs	r1, #2
 800098c:	4857      	ldr	r0, [pc, #348]	; (8000aec <main+0x374>)
 800098e:	f000 ff21 	bl	80017d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 8000992:	2201      	movs	r2, #1
 8000994:	2104      	movs	r1, #4
 8000996:	4855      	ldr	r0, [pc, #340]	; (8000aec <main+0x374>)
 8000998:	f000 ff1c 	bl	80017d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 800099c:	2201      	movs	r2, #1
 800099e:	2108      	movs	r1, #8
 80009a0:	4852      	ldr	r0, [pc, #328]	; (8000aec <main+0x374>)
 80009a2:	f000 ff17 	bl	80017d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2104      	movs	r1, #4
 80009aa:	4850      	ldr	r0, [pc, #320]	; (8000aec <main+0x374>)
 80009ac:	f000 ff12 	bl	80017d4 <HAL_GPIO_WritePin>
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_4)))
 80009b0:	2110      	movs	r1, #16
 80009b2:	484e      	ldr	r0, [pc, #312]	; (8000aec <main+0x374>)
 80009b4:	f000 fef6 	bl	80017a4 <HAL_GPIO_ReadPin>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d111      	bne.n	80009e2 <main+0x26a>
	  {
		  HAL_Delay(300);
 80009be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009c2:	f000 fc51 	bl	8001268 <HAL_Delay>
		  printf("7 is pressed\n");
 80009c6:	485a      	ldr	r0, [pc, #360]	; (8000b30 <main+0x3b8>)
 80009c8:	f002 f868 	bl	8002a9c <puts>
		  HAL_Delay(300);
 80009cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009d0:	f000 fc4a 	bl	8001268 <HAL_Delay>
		  lcd_cmd(0x06);
 80009d4:	2006      	movs	r0, #6
 80009d6:	f7ff fe2d 	bl	8000634 <lcd_cmd>
		  lcd_display("7",1);
 80009da:	2101      	movs	r1, #1
 80009dc:	4855      	ldr	r0, [pc, #340]	; (8000b34 <main+0x3bc>)
 80009de:	f7ff fe89 	bl	80006f4 <lcd_display>

	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_5)))
 80009e2:	2120      	movs	r1, #32
 80009e4:	4841      	ldr	r0, [pc, #260]	; (8000aec <main+0x374>)
 80009e6:	f000 fedd 	bl	80017a4 <HAL_GPIO_ReadPin>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d111      	bne.n	8000a14 <main+0x29c>
	  {
		  HAL_Delay(300);
 80009f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009f4:	f000 fc38 	bl	8001268 <HAL_Delay>
		  printf("8 is pressed\n");
 80009f8:	484f      	ldr	r0, [pc, #316]	; (8000b38 <main+0x3c0>)
 80009fa:	f002 f84f 	bl	8002a9c <puts>
		  HAL_Delay(300);
 80009fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a02:	f000 fc31 	bl	8001268 <HAL_Delay>
		  lcd_cmd(0x06);
 8000a06:	2006      	movs	r0, #6
 8000a08:	f7ff fe14 	bl	8000634 <lcd_cmd>
		  lcd_display("8",1);
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	484b      	ldr	r0, [pc, #300]	; (8000b3c <main+0x3c4>)
 8000a10:	f7ff fe70 	bl	80006f4 <lcd_display>

	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_6)))
 8000a14:	2140      	movs	r1, #64	; 0x40
 8000a16:	4835      	ldr	r0, [pc, #212]	; (8000aec <main+0x374>)
 8000a18:	f000 fec4 	bl	80017a4 <HAL_GPIO_ReadPin>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d111      	bne.n	8000a46 <main+0x2ce>
	  {
		  HAL_Delay(300);
 8000a22:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a26:	f000 fc1f 	bl	8001268 <HAL_Delay>
		  printf("9 is pressed\n");
 8000a2a:	4845      	ldr	r0, [pc, #276]	; (8000b40 <main+0x3c8>)
 8000a2c:	f002 f836 	bl	8002a9c <puts>
		  HAL_Delay(300);
 8000a30:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a34:	f000 fc18 	bl	8001268 <HAL_Delay>
		  lcd_cmd(0x06);
 8000a38:	2006      	movs	r0, #6
 8000a3a:	f7ff fdfb 	bl	8000634 <lcd_cmd>
		  lcd_display("9",1);
 8000a3e:	2101      	movs	r1, #1
 8000a40:	4840      	ldr	r0, [pc, #256]	; (8000b44 <main+0x3cc>)
 8000a42:	f7ff fe57 	bl	80006f4 <lcd_display>
	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_8)))
 8000a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a4a:	4828      	ldr	r0, [pc, #160]	; (8000aec <main+0x374>)
 8000a4c:	f000 feaa 	bl	80017a4 <HAL_GPIO_ReadPin>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d111      	bne.n	8000a7a <main+0x302>
	  {
		  HAL_Delay(300);
 8000a56:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a5a:	f000 fc05 	bl	8001268 <HAL_Delay>
		  printf("C is pressed\n");
 8000a5e:	483a      	ldr	r0, [pc, #232]	; (8000b48 <main+0x3d0>)
 8000a60:	f002 f81c 	bl	8002a9c <puts>
		  HAL_Delay(300);
 8000a64:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a68:	f000 fbfe 	bl	8001268 <HAL_Delay>
		  lcd_cmd(0x06);
 8000a6c:	2006      	movs	r0, #6
 8000a6e:	f7ff fde1 	bl	8000634 <lcd_cmd>
		  lcd_display("C",1);
 8000a72:	2101      	movs	r1, #1
 8000a74:	4835      	ldr	r0, [pc, #212]	; (8000b4c <main+0x3d4>)
 8000a76:	f7ff fe3d 	bl	80006f4 <lcd_display>
	  }

	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	481b      	ldr	r0, [pc, #108]	; (8000aec <main+0x374>)
 8000a80:	f000 fea8 	bl	80017d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2102      	movs	r1, #2
 8000a88:	4818      	ldr	r0, [pc, #96]	; (8000aec <main+0x374>)
 8000a8a:	f000 fea3 	bl	80017d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2104      	movs	r1, #4
 8000a92:	4816      	ldr	r0, [pc, #88]	; (8000aec <main+0x374>)
 8000a94:	f000 fe9e 	bl	80017d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2108      	movs	r1, #8
 8000a9c:	4813      	ldr	r0, [pc, #76]	; (8000aec <main+0x374>)
 8000a9e:	f000 fe99 	bl	80017d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2108      	movs	r1, #8
 8000aa6:	4811      	ldr	r0, [pc, #68]	; (8000aec <main+0x374>)
 8000aa8:	f000 fe94 	bl	80017d4 <HAL_GPIO_WritePin>
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_4)))
 8000aac:	2110      	movs	r1, #16
 8000aae:	480f      	ldr	r0, [pc, #60]	; (8000aec <main+0x374>)
 8000ab0:	f000 fe78 	bl	80017a4 <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d111      	bne.n	8000ade <main+0x366>
	  {
		  HAL_Delay(300);
 8000aba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000abe:	f000 fbd3 	bl	8001268 <HAL_Delay>
		  printf("* is pressed\n");
 8000ac2:	4823      	ldr	r0, [pc, #140]	; (8000b50 <main+0x3d8>)
 8000ac4:	f001 ffea 	bl	8002a9c <puts>
		  HAL_Delay(300);
 8000ac8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000acc:	f000 fbcc 	bl	8001268 <HAL_Delay>
		  lcd_cmd(0x06);
 8000ad0:	2006      	movs	r0, #6
 8000ad2:	f7ff fdaf 	bl	8000634 <lcd_cmd>
		  lcd_display("*",1);
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	481e      	ldr	r0, [pc, #120]	; (8000b54 <main+0x3dc>)
 8000ada:	f7ff fe0b 	bl	80006f4 <lcd_display>
	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_5)))
 8000ade:	2120      	movs	r1, #32
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <main+0x374>)
 8000ae2:	f000 fe5f 	bl	80017a4 <HAL_GPIO_ReadPin>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	e035      	b.n	8000b58 <main+0x3e0>
 8000aec:	40020800 	.word	0x40020800
 8000af0:	080033d4 	.word	0x080033d4
 8000af4:	080033e4 	.word	0x080033e4
 8000af8:	080033e8 	.word	0x080033e8
 8000afc:	080033f8 	.word	0x080033f8
 8000b00:	080033fc 	.word	0x080033fc
 8000b04:	0800340c 	.word	0x0800340c
 8000b08:	08003410 	.word	0x08003410
 8000b0c:	08003420 	.word	0x08003420
 8000b10:	08003424 	.word	0x08003424
 8000b14:	08003434 	.word	0x08003434
 8000b18:	08003438 	.word	0x08003438
 8000b1c:	08003448 	.word	0x08003448
 8000b20:	0800344c 	.word	0x0800344c
 8000b24:	0800345c 	.word	0x0800345c
 8000b28:	08003460 	.word	0x08003460
 8000b2c:	08003470 	.word	0x08003470
 8000b30:	08003474 	.word	0x08003474
 8000b34:	08003484 	.word	0x08003484
 8000b38:	08003488 	.word	0x08003488
 8000b3c:	08003498 	.word	0x08003498
 8000b40:	0800349c 	.word	0x0800349c
 8000b44:	080034ac 	.word	0x080034ac
 8000b48:	080034b0 	.word	0x080034b0
 8000b4c:	080034c0 	.word	0x080034c0
 8000b50:	080034c4 	.word	0x080034c4
 8000b54:	080034d4 	.word	0x080034d4
 8000b58:	d111      	bne.n	8000b7e <main+0x406>
	  {
		  HAL_Delay(300);
 8000b5a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b5e:	f000 fb83 	bl	8001268 <HAL_Delay>
		  printf("0 is pressed\n");
 8000b62:	4821      	ldr	r0, [pc, #132]	; (8000be8 <main+0x470>)
 8000b64:	f001 ff9a 	bl	8002a9c <puts>
		  HAL_Delay(300);
 8000b68:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b6c:	f000 fb7c 	bl	8001268 <HAL_Delay>
		  lcd_cmd(0x06);
 8000b70:	2006      	movs	r0, #6
 8000b72:	f7ff fd5f 	bl	8000634 <lcd_cmd>
		  lcd_display("0",1);
 8000b76:	2101      	movs	r1, #1
 8000b78:	481c      	ldr	r0, [pc, #112]	; (8000bec <main+0x474>)
 8000b7a:	f7ff fdbb 	bl	80006f4 <lcd_display>
	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_6)))
 8000b7e:	2140      	movs	r1, #64	; 0x40
 8000b80:	481b      	ldr	r0, [pc, #108]	; (8000bf0 <main+0x478>)
 8000b82:	f000 fe0f 	bl	80017a4 <HAL_GPIO_ReadPin>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d111      	bne.n	8000bb0 <main+0x438>
	  {
		  HAL_Delay(300);
 8000b8c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b90:	f000 fb6a 	bl	8001268 <HAL_Delay>
		  printf("# is pressed\n");
 8000b94:	4817      	ldr	r0, [pc, #92]	; (8000bf4 <main+0x47c>)
 8000b96:	f001 ff81 	bl	8002a9c <puts>
		  HAL_Delay(300);
 8000b9a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b9e:	f000 fb63 	bl	8001268 <HAL_Delay>
		  lcd_cmd(0x06);
 8000ba2:	2006      	movs	r0, #6
 8000ba4:	f7ff fd46 	bl	8000634 <lcd_cmd>
		  lcd_display("#",1);
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <main+0x480>)
 8000bac:	f7ff fda2 	bl	80006f4 <lcd_display>
	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_8)))
 8000bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb4:	480e      	ldr	r0, [pc, #56]	; (8000bf0 <main+0x478>)
 8000bb6:	f000 fdf5 	bl	80017a4 <HAL_GPIO_ReadPin>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f47f adec 	bne.w	800079a <main+0x22>
	  {
		  HAL_Delay(300);
 8000bc2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000bc6:	f000 fb4f 	bl	8001268 <HAL_Delay>
		  printf("D is pressed\n");
 8000bca:	480c      	ldr	r0, [pc, #48]	; (8000bfc <main+0x484>)
 8000bcc:	f001 ff66 	bl	8002a9c <puts>
		  HAL_Delay(300);
 8000bd0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000bd4:	f000 fb48 	bl	8001268 <HAL_Delay>
		  lcd_cmd(0x06);
 8000bd8:	2006      	movs	r0, #6
 8000bda:	f7ff fd2b 	bl	8000634 <lcd_cmd>
		  lcd_display("D",1);
 8000bde:	2101      	movs	r1, #1
 8000be0:	4807      	ldr	r0, [pc, #28]	; (8000c00 <main+0x488>)
 8000be2:	f7ff fd87 	bl	80006f4 <lcd_display>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 8000be6:	e5d8      	b.n	800079a <main+0x22>
 8000be8:	080034d8 	.word	0x080034d8
 8000bec:	080034e8 	.word	0x080034e8
 8000bf0:	40020800 	.word	0x40020800
 8000bf4:	080034ec 	.word	0x080034ec
 8000bf8:	080034fc 	.word	0x080034fc
 8000bfc:	08003500 	.word	0x08003500
 8000c00:	08003510 	.word	0x08003510

08000c04 <_write>:
  }
  /* USER CODE END 3 */
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	e009      	b.n	8000c2a <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	60ba      	str	r2, [r7, #8]
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fd83 	bl	800072a <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	3301      	adds	r3, #1
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	dbf1      	blt.n	8000c16 <_write+0x12>
  }
  return len;
 8000c32:	687b      	ldr	r3, [r7, #4]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b094      	sub	sp, #80	; 0x50
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	2234      	movs	r2, #52	; 0x34
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f001 feb0 	bl	80029b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	f107 0308 	add.w	r3, r7, #8
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	4b2a      	ldr	r3, [pc, #168]	; (8000d10 <SystemClock_Config+0xd4>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	4a29      	ldr	r2, [pc, #164]	; (8000d10 <SystemClock_Config+0xd4>)
 8000c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c70:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <SystemClock_Config+0xd4>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <SystemClock_Config+0xd8>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c88:	4a22      	ldr	r2, [pc, #136]	; (8000d14 <SystemClock_Config+0xd8>)
 8000c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <SystemClock_Config+0xd8>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca4:	2310      	movs	r3, #16
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cac:	2300      	movs	r3, #0
 8000cae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cb0:	2310      	movs	r3, #16
 8000cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cb4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cb8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 f8e6 	bl	8001e9c <HAL_RCC_OscConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cd6:	f000 f8f1 	bl	8000ebc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cda:	230f      	movs	r3, #15
 8000cdc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cf0:	f107 0308 	add.w	r3, r7, #8
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 fd86 	bl	8001808 <HAL_RCC_ClockConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d02:	f000 f8db 	bl	8000ebc <Error_Handler>
  }
}
 8000d06:	bf00      	nop
 8000d08:	3750      	adds	r7, #80	; 0x50
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40007000 	.word	0x40007000

08000d18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <MX_USART2_UART_Init+0x50>)
 8000d20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d3e:	220c      	movs	r2, #12
 8000d40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d50:	f001 fb42 	bl	80023d8 <HAL_UART_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d5a:	f000 f8af 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000008c 	.word	0x2000008c
 8000d68:	40004400 	.word	0x40004400

08000d6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	4b49      	ldr	r3, [pc, #292]	; (8000eac <MX_GPIO_Init+0x140>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a48      	ldr	r2, [pc, #288]	; (8000eac <MX_GPIO_Init+0x140>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b46      	ldr	r3, [pc, #280]	; (8000eac <MX_GPIO_Init+0x140>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b42      	ldr	r3, [pc, #264]	; (8000eac <MX_GPIO_Init+0x140>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a41      	ldr	r2, [pc, #260]	; (8000eac <MX_GPIO_Init+0x140>)
 8000da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b3f      	ldr	r3, [pc, #252]	; (8000eac <MX_GPIO_Init+0x140>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <MX_GPIO_Init+0x140>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a3a      	ldr	r2, [pc, #232]	; (8000eac <MX_GPIO_Init+0x140>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b38      	ldr	r3, [pc, #224]	; (8000eac <MX_GPIO_Init+0x140>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	4b34      	ldr	r3, [pc, #208]	; (8000eac <MX_GPIO_Init+0x140>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a33      	ldr	r2, [pc, #204]	; (8000eac <MX_GPIO_Init+0x140>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b31      	ldr	r3, [pc, #196]	; (8000eac <MX_GPIO_Init+0x140>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000df2:	2200      	movs	r2, #0
 8000df4:	218f      	movs	r1, #143	; 0x8f
 8000df6:	482e      	ldr	r0, [pc, #184]	; (8000eb0 <MX_GPIO_Init+0x144>)
 8000df8:	f000 fcec 	bl	80017d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000e02:	482c      	ldr	r0, [pc, #176]	; (8000eb4 <MX_GPIO_Init+0x148>)
 8000e04:	f000 fce6 	bl	80017d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8000e0e:	482a      	ldr	r0, [pc, #168]	; (8000eb8 <MX_GPIO_Init+0x14c>)
 8000e10:	f000 fce0 	bl	80017d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e1a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4821      	ldr	r0, [pc, #132]	; (8000eb0 <MX_GPIO_Init+0x144>)
 8000e2c:	f000 fb26 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e30:	238f      	movs	r3, #143	; 0x8f
 8000e32:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	481a      	ldr	r0, [pc, #104]	; (8000eb0 <MX_GPIO_Init+0x144>)
 8000e48:	f000 fb18 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8
                           PA9 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000e4c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e50:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <MX_GPIO_Init+0x148>)
 8000e66:	f000 fb09 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8000e6a:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8000e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <MX_GPIO_Init+0x144>)
 8000e80:	f000 fafc 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000e84:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8000e88:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <MX_GPIO_Init+0x14c>)
 8000e9e:	f000 faed 	bl	800147c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	; 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020800 	.word	0x40020800
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	40020400 	.word	0x40020400

08000ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec0:	b672      	cpsid	i
}
 8000ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <Error_Handler+0x8>
	...

08000ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_MspInit+0x4c>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f06:	2007      	movs	r0, #7
 8000f08:	f000 fa84 	bl	8001414 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40023800 	.word	0x40023800

08000f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a19      	ldr	r2, [pc, #100]	; (8000f9c <HAL_UART_MspInit+0x84>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d12b      	bne.n	8000f92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_UART_MspInit+0x88>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <HAL_UART_MspInit+0x88>)
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f48:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <HAL_UART_MspInit+0x88>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <HAL_UART_MspInit+0x88>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a10      	ldr	r2, [pc, #64]	; (8000fa0 <HAL_UART_MspInit+0x88>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_UART_MspInit+0x88>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f72:	230c      	movs	r3, #12
 8000f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f82:	2307      	movs	r3, #7
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <HAL_UART_MspInit+0x8c>)
 8000f8e:	f000 fa75 	bl	800147c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f92:	bf00      	nop
 8000f94:	3728      	adds	r7, #40	; 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40004400 	.word	0x40004400
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020000 	.word	0x40020000

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <NMI_Handler+0x4>

08000fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <HardFault_Handler+0x4>

08000fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <MemManage_Handler+0x4>

08000fba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <BusFault_Handler+0x4>

08000fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <UsageFault_Handler+0x4>

08000fc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff4:	f000 f918 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	e00a      	b.n	8001024 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800100e:	f3af 8000 	nop.w
 8001012:	4601      	mov	r1, r0
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	60ba      	str	r2, [r7, #8]
 800101a:	b2ca      	uxtb	r2, r1
 800101c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3301      	adds	r3, #1
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	dbf0      	blt.n	800100e <_read+0x12>
  }

  return len;
 800102c:	687b      	ldr	r3, [r7, #4]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800105e:	605a      	str	r2, [r3, #4]
  return 0;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <_isatty>:

int _isatty(int file)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a8:	4a14      	ldr	r2, [pc, #80]	; (80010fc <_sbrk+0x5c>)
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <_sbrk+0x60>)
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <_sbrk+0x64>)
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <_sbrk+0x68>)
 80010c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d207      	bcs.n	80010e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d0:	f001 fc44 	bl	800295c <__errno>
 80010d4:	4603      	mov	r3, r0
 80010d6:	220c      	movs	r2, #12
 80010d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010de:	e009      	b.n	80010f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <_sbrk+0x64>)
 80010f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20020000 	.word	0x20020000
 8001100:	00000400 	.word	0x00000400
 8001104:	200000d0 	.word	0x200000d0
 8001108:	200000e8 	.word	0x200000e8

0800110c <SystemInit>:





{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <SystemInit+0x20>)
 8001112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <SystemInit+0x20>)
 8001118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800111c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001168 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001134:	480d      	ldr	r0, [pc, #52]	; (800116c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001136:	490e      	ldr	r1, [pc, #56]	; (8001170 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001138:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800114c:	4c0b      	ldr	r4, [pc, #44]	; (800117c <LoopFillZerobss+0x26>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800115a:	f7ff ffd7 	bl	800110c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115e:	f001 fc03 	bl	8002968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001162:	f7ff fb09 	bl	8000778 <main>
  bx  lr    
 8001166:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001174:	080035a0 	.word	0x080035a0
  ldr r2, =_sbss
 8001178:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800117c:	200000e8 	.word	0x200000e8

08001180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC_IRQHandler>
	...

08001184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <HAL_Init+0x40>)
 800118e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001192:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <HAL_Init+0x40>)
 800119a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_Init+0x40>)
 80011a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 f931 	bl	8001414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 f808 	bl	80011c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b8:	f7ff fe86 	bl	8000ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023c00 	.word	0x40023c00

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_InitTick+0x54>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_InitTick+0x58>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f93b 	bl	8001462 <HAL_SYSTICK_Config>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00e      	b.n	8001214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d80a      	bhi.n	8001212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fc:	2200      	movs	r2, #0
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001204:	f000 f911 	bl	800142a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001208:	4a06      	ldr	r2, [pc, #24]	; (8001224 <HAL_InitTick+0x5c>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e000      	b.n	8001214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000000 	.word	0x20000000
 8001220:	20000008 	.word	0x20000008
 8001224:	20000004 	.word	0x20000004

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_IncTick+0x20>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x24>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_IncTick+0x24>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000008 	.word	0x20000008
 800124c:	200000d4 	.word	0x200000d4

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	200000d4 	.word	0x200000d4

08001268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff ffee 	bl	8001250 <HAL_GetTick>
 8001274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001280:	d005      	beq.n	800128e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_Delay+0x44>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800128e:	bf00      	nop
 8001290:	f7ff ffde 	bl	8001250 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8f7      	bhi.n	8001290 <HAL_Delay+0x28>
  {
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000008 	.word	0x20000008

080012b0 <__NVIC_SetPriorityGrouping>:
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_GetPriorityGrouping>:
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_SetPriority>:
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	; (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <SysTick_Config>:
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e0:	d301      	bcc.n	80013e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00f      	b.n	8001406 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <SysTick_Config+0x40>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ee:	210f      	movs	r1, #15
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013f4:	f7ff ff8e 	bl	8001314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <SysTick_Config+0x40>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <SysTick_Config+0x40>)
 8001400:	2207      	movs	r2, #7
 8001402:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	e000e010 	.word	0xe000e010

08001414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff47 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800143c:	f7ff ff5c 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 8001440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f7ff ff8e 	bl	8001368 <NVIC_EncodePriority>
 800144c:	4602      	mov	r2, r0
 800144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff5d 	bl	8001314 <__NVIC_SetPriority>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffb0 	bl	80013d0 <SysTick_Config>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	e165      	b.n	8001764 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001498:	2201      	movs	r2, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	f040 8154 	bne.w	800175e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d005      	beq.n	80014ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d130      	bne.n	8001530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001504:	2201      	movs	r2, #1
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f003 0201 	and.w	r2, r3, #1
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b03      	cmp	r3, #3
 800153a:	d017      	beq.n	800156c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d123      	bne.n	80015c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	08da      	lsrs	r2, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3208      	adds	r2, #8
 8001580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	220f      	movs	r2, #15
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	691a      	ldr	r2, [r3, #16]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	08da      	lsrs	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3208      	adds	r2, #8
 80015ba:	69b9      	ldr	r1, [r7, #24]
 80015bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0203 	and.w	r2, r3, #3
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80ae 	beq.w	800175e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b5d      	ldr	r3, [pc, #372]	; (800177c <HAL_GPIO_Init+0x300>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a5c      	ldr	r2, [pc, #368]	; (800177c <HAL_GPIO_Init+0x300>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b5a      	ldr	r3, [pc, #360]	; (800177c <HAL_GPIO_Init+0x300>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800161e:	4a58      	ldr	r2, [pc, #352]	; (8001780 <HAL_GPIO_Init+0x304>)
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	3302      	adds	r3, #2
 8001626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	220f      	movs	r2, #15
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4f      	ldr	r2, [pc, #316]	; (8001784 <HAL_GPIO_Init+0x308>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d025      	beq.n	8001696 <HAL_GPIO_Init+0x21a>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a4e      	ldr	r2, [pc, #312]	; (8001788 <HAL_GPIO_Init+0x30c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d01f      	beq.n	8001692 <HAL_GPIO_Init+0x216>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4d      	ldr	r2, [pc, #308]	; (800178c <HAL_GPIO_Init+0x310>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d019      	beq.n	800168e <HAL_GPIO_Init+0x212>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a4c      	ldr	r2, [pc, #304]	; (8001790 <HAL_GPIO_Init+0x314>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d013      	beq.n	800168a <HAL_GPIO_Init+0x20e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a4b      	ldr	r2, [pc, #300]	; (8001794 <HAL_GPIO_Init+0x318>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d00d      	beq.n	8001686 <HAL_GPIO_Init+0x20a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a4a      	ldr	r2, [pc, #296]	; (8001798 <HAL_GPIO_Init+0x31c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d007      	beq.n	8001682 <HAL_GPIO_Init+0x206>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a49      	ldr	r2, [pc, #292]	; (800179c <HAL_GPIO_Init+0x320>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_GPIO_Init+0x202>
 800167a:	2306      	movs	r3, #6
 800167c:	e00c      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 800167e:	2307      	movs	r3, #7
 8001680:	e00a      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 8001682:	2305      	movs	r3, #5
 8001684:	e008      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 8001686:	2304      	movs	r3, #4
 8001688:	e006      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 800168a:	2303      	movs	r3, #3
 800168c:	e004      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 800168e:	2302      	movs	r3, #2
 8001690:	e002      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 8001696:	2300      	movs	r3, #0
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	f002 0203 	and.w	r2, r2, #3
 800169e:	0092      	lsls	r2, r2, #2
 80016a0:	4093      	lsls	r3, r2
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016a8:	4935      	ldr	r1, [pc, #212]	; (8001780 <HAL_GPIO_Init+0x304>)
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	089b      	lsrs	r3, r3, #2
 80016ae:	3302      	adds	r3, #2
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016b6:	4b3a      	ldr	r3, [pc, #232]	; (80017a0 <HAL_GPIO_Init+0x324>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016da:	4a31      	ldr	r2, [pc, #196]	; (80017a0 <HAL_GPIO_Init+0x324>)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016e0:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <HAL_GPIO_Init+0x324>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001704:	4a26      	ldr	r2, [pc, #152]	; (80017a0 <HAL_GPIO_Init+0x324>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800170a:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <HAL_GPIO_Init+0x324>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800172e:	4a1c      	ldr	r2, [pc, #112]	; (80017a0 <HAL_GPIO_Init+0x324>)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <HAL_GPIO_Init+0x324>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001758:	4a11      	ldr	r2, [pc, #68]	; (80017a0 <HAL_GPIO_Init+0x324>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3301      	adds	r3, #1
 8001762:	61fb      	str	r3, [r7, #28]
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	2b0f      	cmp	r3, #15
 8001768:	f67f ae96 	bls.w	8001498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800
 8001780:	40013800 	.word	0x40013800
 8001784:	40020000 	.word	0x40020000
 8001788:	40020400 	.word	0x40020400
 800178c:	40020800 	.word	0x40020800
 8001790:	40020c00 	.word	0x40020c00
 8001794:	40021000 	.word	0x40021000
 8001798:	40021400 	.word	0x40021400
 800179c:	40021800 	.word	0x40021800
 80017a0:	40013c00 	.word	0x40013c00

080017a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691a      	ldr	r2, [r3, #16]
 80017b4:	887b      	ldrh	r3, [r7, #2]
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017bc:	2301      	movs	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]
 80017c0:	e001      	b.n	80017c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
 80017e0:	4613      	mov	r3, r2
 80017e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017e4:	787b      	ldrb	r3, [r7, #1]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ea:	887a      	ldrh	r2, [r7, #2]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017f0:	e003      	b.n	80017fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	041a      	lsls	r2, r3, #16
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	619a      	str	r2, [r3, #24]
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0cc      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800181c:	4b68      	ldr	r3, [pc, #416]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d90c      	bls.n	8001844 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182a:	4b65      	ldr	r3, [pc, #404]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001832:	4b63      	ldr	r3, [pc, #396]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0b8      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d020      	beq.n	8001892 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800185c:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	4a58      	ldr	r2, [pc, #352]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001866:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001874:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4a52      	ldr	r2, [pc, #328]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800187e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001880:	4b50      	ldr	r3, [pc, #320]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	494d      	ldr	r1, [pc, #308]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d044      	beq.n	8001928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a6:	4b47      	ldr	r3, [pc, #284]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d119      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e07f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d003      	beq.n	80018c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c6:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d109      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e06f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d6:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e067      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018e6:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f023 0203 	bic.w	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4934      	ldr	r1, [pc, #208]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018f8:	f7ff fcaa 	bl	8001250 <HAL_GetTick>
 80018fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001900:	f7ff fca6 	bl	8001250 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e04f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	4b2b      	ldr	r3, [pc, #172]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 020c 	and.w	r2, r3, #12
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	429a      	cmp	r2, r3
 8001926:	d1eb      	bne.n	8001900 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d20c      	bcs.n	8001950 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e032      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d008      	beq.n	800196e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	4916      	ldr	r1, [pc, #88]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d009      	beq.n	800198e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	490e      	ldr	r1, [pc, #56]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800198e:	f000 f855 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 8001992:	4602      	mov	r2, r0
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	490a      	ldr	r1, [pc, #40]	; (80019c8 <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	5ccb      	ldrb	r3, [r1, r3]
 80019a2:	fa22 f303 	lsr.w	r3, r2, r3
 80019a6:	4a09      	ldr	r2, [pc, #36]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fc0a 	bl	80011c8 <HAL_InitTick>

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023c00 	.word	0x40023c00
 80019c4:	40023800 	.word	0x40023800
 80019c8:	08003514 	.word	0x08003514
 80019cc:	20000000 	.word	0x20000000
 80019d0:	20000004 	.word	0x20000004

080019d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000000 	.word	0x20000000

080019ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019f0:	f7ff fff0 	bl	80019d4 <HAL_RCC_GetHCLKFreq>
 80019f4:	4602      	mov	r2, r0
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	0a9b      	lsrs	r3, r3, #10
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	4903      	ldr	r1, [pc, #12]	; (8001a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a02:	5ccb      	ldrb	r3, [r1, r3]
 8001a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	08003524 	.word	0x08003524

08001a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a18:	f7ff ffdc 	bl	80019d4 <HAL_RCC_GetHCLKFreq>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	0b5b      	lsrs	r3, r3, #13
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	4903      	ldr	r1, [pc, #12]	; (8001a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a2a:	5ccb      	ldrb	r3, [r1, r3]
 8001a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40023800 	.word	0x40023800
 8001a38:	08003524 	.word	0x08003524

08001a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a40:	b0ae      	sub	sp, #184	; 0xb8
 8001a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a62:	4bcb      	ldr	r3, [pc, #812]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b0c      	cmp	r3, #12
 8001a6c:	f200 8206 	bhi.w	8001e7c <HAL_RCC_GetSysClockFreq+0x440>
 8001a70:	a201      	add	r2, pc, #4	; (adr r2, 8001a78 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a76:	bf00      	nop
 8001a78:	08001aad 	.word	0x08001aad
 8001a7c:	08001e7d 	.word	0x08001e7d
 8001a80:	08001e7d 	.word	0x08001e7d
 8001a84:	08001e7d 	.word	0x08001e7d
 8001a88:	08001ab5 	.word	0x08001ab5
 8001a8c:	08001e7d 	.word	0x08001e7d
 8001a90:	08001e7d 	.word	0x08001e7d
 8001a94:	08001e7d 	.word	0x08001e7d
 8001a98:	08001abd 	.word	0x08001abd
 8001a9c:	08001e7d 	.word	0x08001e7d
 8001aa0:	08001e7d 	.word	0x08001e7d
 8001aa4:	08001e7d 	.word	0x08001e7d
 8001aa8:	08001cad 	.word	0x08001cad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aac:	4bb9      	ldr	r3, [pc, #740]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001aae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001ab2:	e1e7      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ab4:	4bb8      	ldr	r3, [pc, #736]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001ab6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001aba:	e1e3      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001abc:	4bb4      	ldr	r3, [pc, #720]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ac4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ac8:	4bb1      	ldr	r3, [pc, #708]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d071      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad4:	4bae      	ldr	r3, [pc, #696]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	099b      	lsrs	r3, r3, #6
 8001ada:	2200      	movs	r2, #0
 8001adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001ae0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001af0:	2300      	movs	r3, #0
 8001af2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001af6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001afa:	4622      	mov	r2, r4
 8001afc:	462b      	mov	r3, r5
 8001afe:	f04f 0000 	mov.w	r0, #0
 8001b02:	f04f 0100 	mov.w	r1, #0
 8001b06:	0159      	lsls	r1, r3, #5
 8001b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b0c:	0150      	lsls	r0, r2, #5
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4621      	mov	r1, r4
 8001b14:	1a51      	subs	r1, r2, r1
 8001b16:	6439      	str	r1, [r7, #64]	; 0x40
 8001b18:	4629      	mov	r1, r5
 8001b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001b2c:	4649      	mov	r1, r9
 8001b2e:	018b      	lsls	r3, r1, #6
 8001b30:	4641      	mov	r1, r8
 8001b32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b36:	4641      	mov	r1, r8
 8001b38:	018a      	lsls	r2, r1, #6
 8001b3a:	4641      	mov	r1, r8
 8001b3c:	1a51      	subs	r1, r2, r1
 8001b3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001b40:	4649      	mov	r1, r9
 8001b42:	eb63 0301 	sbc.w	r3, r3, r1
 8001b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001b54:	4649      	mov	r1, r9
 8001b56:	00cb      	lsls	r3, r1, #3
 8001b58:	4641      	mov	r1, r8
 8001b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b5e:	4641      	mov	r1, r8
 8001b60:	00ca      	lsls	r2, r1, #3
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	4603      	mov	r3, r0
 8001b68:	4622      	mov	r2, r4
 8001b6a:	189b      	adds	r3, r3, r2
 8001b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b6e:	462b      	mov	r3, r5
 8001b70:	460a      	mov	r2, r1
 8001b72:	eb42 0303 	adc.w	r3, r2, r3
 8001b76:	637b      	str	r3, [r7, #52]	; 0x34
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b84:	4629      	mov	r1, r5
 8001b86:	024b      	lsls	r3, r1, #9
 8001b88:	4621      	mov	r1, r4
 8001b8a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b8e:	4621      	mov	r1, r4
 8001b90:	024a      	lsls	r2, r1, #9
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ba0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ba4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ba8:	f7fe fb2c 	bl	8000204 <__aeabi_uldivmod>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001bb6:	e067      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb8:	4b75      	ldr	r3, [pc, #468]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	099b      	lsrs	r3, r3, #6
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001bc4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001bc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001bd6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001bda:	4622      	mov	r2, r4
 8001bdc:	462b      	mov	r3, r5
 8001bde:	f04f 0000 	mov.w	r0, #0
 8001be2:	f04f 0100 	mov.w	r1, #0
 8001be6:	0159      	lsls	r1, r3, #5
 8001be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bec:	0150      	lsls	r0, r2, #5
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	1a51      	subs	r1, r2, r1
 8001bf6:	62b9      	str	r1, [r7, #40]	; 0x28
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001c0c:	4649      	mov	r1, r9
 8001c0e:	018b      	lsls	r3, r1, #6
 8001c10:	4641      	mov	r1, r8
 8001c12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c16:	4641      	mov	r1, r8
 8001c18:	018a      	lsls	r2, r1, #6
 8001c1a:	4641      	mov	r1, r8
 8001c1c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c20:	4649      	mov	r1, r9
 8001c22:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001c32:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001c36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c3a:	4692      	mov	sl, r2
 8001c3c:	469b      	mov	fp, r3
 8001c3e:	4623      	mov	r3, r4
 8001c40:	eb1a 0303 	adds.w	r3, sl, r3
 8001c44:	623b      	str	r3, [r7, #32]
 8001c46:	462b      	mov	r3, r5
 8001c48:	eb4b 0303 	adc.w	r3, fp, r3
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001c5a:	4629      	mov	r1, r5
 8001c5c:	028b      	lsls	r3, r1, #10
 8001c5e:	4621      	mov	r1, r4
 8001c60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c64:	4621      	mov	r1, r4
 8001c66:	028a      	lsls	r2, r1, #10
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c70:	2200      	movs	r2, #0
 8001c72:	673b      	str	r3, [r7, #112]	; 0x70
 8001c74:	677a      	str	r2, [r7, #116]	; 0x74
 8001c76:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001c7a:	f7fe fac3 	bl	8000204 <__aeabi_uldivmod>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4613      	mov	r3, r2
 8001c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c88:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	0c1b      	lsrs	r3, r3, #16
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	3301      	adds	r3, #1
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001c9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001c9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001caa:	e0eb      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cac:	4b38      	ldr	r3, [pc, #224]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cb8:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d06b      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc4:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	099b      	lsrs	r3, r3, #6
 8001cca:	2200      	movs	r2, #0
 8001ccc:	66bb      	str	r3, [r7, #104]	; 0x68
 8001cce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001cd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd6:	663b      	str	r3, [r7, #96]	; 0x60
 8001cd8:	2300      	movs	r3, #0
 8001cda:	667b      	str	r3, [r7, #100]	; 0x64
 8001cdc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001ce0:	4622      	mov	r2, r4
 8001ce2:	462b      	mov	r3, r5
 8001ce4:	f04f 0000 	mov.w	r0, #0
 8001ce8:	f04f 0100 	mov.w	r1, #0
 8001cec:	0159      	lsls	r1, r3, #5
 8001cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cf2:	0150      	lsls	r0, r2, #5
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	1a51      	subs	r1, r2, r1
 8001cfc:	61b9      	str	r1, [r7, #24]
 8001cfe:	4629      	mov	r1, r5
 8001d00:	eb63 0301 	sbc.w	r3, r3, r1
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001d12:	4659      	mov	r1, fp
 8001d14:	018b      	lsls	r3, r1, #6
 8001d16:	4651      	mov	r1, sl
 8001d18:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d1c:	4651      	mov	r1, sl
 8001d1e:	018a      	lsls	r2, r1, #6
 8001d20:	4651      	mov	r1, sl
 8001d22:	ebb2 0801 	subs.w	r8, r2, r1
 8001d26:	4659      	mov	r1, fp
 8001d28:	eb63 0901 	sbc.w	r9, r3, r1
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d40:	4690      	mov	r8, r2
 8001d42:	4699      	mov	r9, r3
 8001d44:	4623      	mov	r3, r4
 8001d46:	eb18 0303 	adds.w	r3, r8, r3
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	462b      	mov	r3, r5
 8001d4e:	eb49 0303 	adc.w	r3, r9, r3
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001d60:	4629      	mov	r1, r5
 8001d62:	024b      	lsls	r3, r1, #9
 8001d64:	4621      	mov	r1, r4
 8001d66:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d6a:	4621      	mov	r1, r4
 8001d6c:	024a      	lsls	r2, r1, #9
 8001d6e:	4610      	mov	r0, r2
 8001d70:	4619      	mov	r1, r3
 8001d72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d76:	2200      	movs	r2, #0
 8001d78:	65bb      	str	r3, [r7, #88]	; 0x58
 8001d7a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001d7c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d80:	f7fe fa40 	bl	8000204 <__aeabi_uldivmod>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4613      	mov	r3, r2
 8001d8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d8e:	e065      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x420>
 8001d90:	40023800 	.word	0x40023800
 8001d94:	00f42400 	.word	0x00f42400
 8001d98:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d9c:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	099b      	lsrs	r3, r3, #6
 8001da2:	2200      	movs	r2, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	4611      	mov	r1, r2
 8001da8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dac:	653b      	str	r3, [r7, #80]	; 0x50
 8001dae:	2300      	movs	r3, #0
 8001db0:	657b      	str	r3, [r7, #84]	; 0x54
 8001db2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001db6:	4642      	mov	r2, r8
 8001db8:	464b      	mov	r3, r9
 8001dba:	f04f 0000 	mov.w	r0, #0
 8001dbe:	f04f 0100 	mov.w	r1, #0
 8001dc2:	0159      	lsls	r1, r3, #5
 8001dc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dc8:	0150      	lsls	r0, r2, #5
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4641      	mov	r1, r8
 8001dd0:	1a51      	subs	r1, r2, r1
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	4649      	mov	r1, r9
 8001dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001de8:	4659      	mov	r1, fp
 8001dea:	018b      	lsls	r3, r1, #6
 8001dec:	4651      	mov	r1, sl
 8001dee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001df2:	4651      	mov	r1, sl
 8001df4:	018a      	lsls	r2, r1, #6
 8001df6:	4651      	mov	r1, sl
 8001df8:	1a54      	subs	r4, r2, r1
 8001dfa:	4659      	mov	r1, fp
 8001dfc:	eb63 0501 	sbc.w	r5, r3, r1
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	00eb      	lsls	r3, r5, #3
 8001e0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e0e:	00e2      	lsls	r2, r4, #3
 8001e10:	4614      	mov	r4, r2
 8001e12:	461d      	mov	r5, r3
 8001e14:	4643      	mov	r3, r8
 8001e16:	18e3      	adds	r3, r4, r3
 8001e18:	603b      	str	r3, [r7, #0]
 8001e1a:	464b      	mov	r3, r9
 8001e1c:	eb45 0303 	adc.w	r3, r5, r3
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e2e:	4629      	mov	r1, r5
 8001e30:	028b      	lsls	r3, r1, #10
 8001e32:	4621      	mov	r1, r4
 8001e34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e38:	4621      	mov	r1, r4
 8001e3a:	028a      	lsls	r2, r1, #10
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e44:	2200      	movs	r2, #0
 8001e46:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e48:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001e4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e4e:	f7fe f9d9 	bl	8000204 <__aeabi_uldivmod>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4613      	mov	r3, r2
 8001e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x458>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	0f1b      	lsrs	r3, r3, #28
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001e6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e7a:	e003      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	37b8      	adds	r7, #184	; 0xb8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800
 8001e98:	00f42400 	.word	0x00f42400

08001e9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e28d      	b.n	80023ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8083 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ebc:	4b94      	ldr	r3, [pc, #592]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d019      	beq.n	8001efc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ec8:	4b91      	ldr	r3, [pc, #580]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ed4:	4b8e      	ldr	r3, [pc, #568]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ee0:	d00c      	beq.n	8001efc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee2:	4b8b      	ldr	r3, [pc, #556]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	d112      	bne.n	8001f14 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eee:	4b88      	ldr	r3, [pc, #544]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001efa:	d10b      	bne.n	8001f14 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efc:	4b84      	ldr	r3, [pc, #528]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d05b      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x124>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d157      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e25a      	b.n	80023ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1c:	d106      	bne.n	8001f2c <HAL_RCC_OscConfig+0x90>
 8001f1e:	4b7c      	ldr	r3, [pc, #496]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a7b      	ldr	r2, [pc, #492]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e01d      	b.n	8001f68 <HAL_RCC_OscConfig+0xcc>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0xb4>
 8001f36:	4b76      	ldr	r3, [pc, #472]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a75      	ldr	r2, [pc, #468]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b73      	ldr	r3, [pc, #460]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a72      	ldr	r2, [pc, #456]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_OscConfig+0xcc>
 8001f50:	4b6f      	ldr	r3, [pc, #444]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a6e      	ldr	r2, [pc, #440]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	4b6c      	ldr	r3, [pc, #432]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a6b      	ldr	r2, [pc, #428]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d013      	beq.n	8001f98 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7ff f96e 	bl	8001250 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f78:	f7ff f96a 	bl	8001250 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	; 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e21f      	b.n	80023ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4b61      	ldr	r3, [pc, #388]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0xdc>
 8001f96:	e014      	b.n	8001fc2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7ff f95a 	bl	8001250 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7ff f956 	bl	8001250 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e20b      	b.n	80023ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	4b57      	ldr	r3, [pc, #348]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x104>
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d06f      	beq.n	80020ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fce:	4b50      	ldr	r3, [pc, #320]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d017      	beq.n	800200a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fda:	4b4d      	ldr	r3, [pc, #308]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d105      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fe6:	4b4a      	ldr	r3, [pc, #296]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00b      	beq.n	800200a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ff2:	4b47      	ldr	r3, [pc, #284]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	d11c      	bne.n	8002038 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffe:	4b44      	ldr	r3, [pc, #272]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d116      	bne.n	8002038 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200a:	4b41      	ldr	r3, [pc, #260]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d005      	beq.n	8002022 <HAL_RCC_OscConfig+0x186>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d001      	beq.n	8002022 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e1d3      	b.n	80023ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002022:	4b3b      	ldr	r3, [pc, #236]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4937      	ldr	r1, [pc, #220]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002036:	e03a      	b.n	80020ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d020      	beq.n	8002082 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002040:	4b34      	ldr	r3, [pc, #208]	; (8002114 <HAL_RCC_OscConfig+0x278>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002046:	f7ff f903 	bl	8001250 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800204e:	f7ff f8ff 	bl	8001250 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e1b4      	b.n	80023ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002060:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206c:	4b28      	ldr	r3, [pc, #160]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4925      	ldr	r1, [pc, #148]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]
 8002080:	e015      	b.n	80020ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002082:	4b24      	ldr	r3, [pc, #144]	; (8002114 <HAL_RCC_OscConfig+0x278>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff f8e2 	bl	8001250 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002090:	f7ff f8de 	bl	8001250 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e193      	b.n	80023ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a2:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d036      	beq.n	8002128 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d016      	beq.n	80020f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <HAL_RCC_OscConfig+0x27c>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7ff f8c2 	bl	8001250 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d0:	f7ff f8be 	bl	8001250 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e173      	b.n	80023ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 80020e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x234>
 80020ee:	e01b      	b.n	8002128 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f0:	4b09      	ldr	r3, [pc, #36]	; (8002118 <HAL_RCC_OscConfig+0x27c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f6:	f7ff f8ab 	bl	8001250 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fc:	e00e      	b.n	800211c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fe:	f7ff f8a7 	bl	8001250 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d907      	bls.n	800211c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e15c      	b.n	80023ca <HAL_RCC_OscConfig+0x52e>
 8002110:	40023800 	.word	0x40023800
 8002114:	42470000 	.word	0x42470000
 8002118:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211c:	4b8a      	ldr	r3, [pc, #552]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 800211e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1ea      	bne.n	80020fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 8097 	beq.w	8002264 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213a:	4b83      	ldr	r3, [pc, #524]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10f      	bne.n	8002166 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	4b7f      	ldr	r3, [pc, #508]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	4a7e      	ldr	r2, [pc, #504]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002154:	6413      	str	r3, [r2, #64]	; 0x40
 8002156:	4b7c      	ldr	r3, [pc, #496]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002162:	2301      	movs	r3, #1
 8002164:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002166:	4b79      	ldr	r3, [pc, #484]	; (800234c <HAL_RCC_OscConfig+0x4b0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216e:	2b00      	cmp	r3, #0
 8002170:	d118      	bne.n	80021a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002172:	4b76      	ldr	r3, [pc, #472]	; (800234c <HAL_RCC_OscConfig+0x4b0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a75      	ldr	r2, [pc, #468]	; (800234c <HAL_RCC_OscConfig+0x4b0>)
 8002178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217e:	f7ff f867 	bl	8001250 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002186:	f7ff f863 	bl	8001250 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e118      	b.n	80023ca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	4b6c      	ldr	r3, [pc, #432]	; (800234c <HAL_RCC_OscConfig+0x4b0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d106      	bne.n	80021ba <HAL_RCC_OscConfig+0x31e>
 80021ac:	4b66      	ldr	r3, [pc, #408]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b0:	4a65      	ldr	r2, [pc, #404]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6713      	str	r3, [r2, #112]	; 0x70
 80021b8:	e01c      	b.n	80021f4 <HAL_RCC_OscConfig+0x358>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b05      	cmp	r3, #5
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0x340>
 80021c2:	4b61      	ldr	r3, [pc, #388]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c6:	4a60      	ldr	r2, [pc, #384]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 80021c8:	f043 0304 	orr.w	r3, r3, #4
 80021cc:	6713      	str	r3, [r2, #112]	; 0x70
 80021ce:	4b5e      	ldr	r3, [pc, #376]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d2:	4a5d      	ldr	r2, [pc, #372]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6713      	str	r3, [r2, #112]	; 0x70
 80021da:	e00b      	b.n	80021f4 <HAL_RCC_OscConfig+0x358>
 80021dc:	4b5a      	ldr	r3, [pc, #360]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 80021de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e0:	4a59      	ldr	r2, [pc, #356]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 80021e2:	f023 0301 	bic.w	r3, r3, #1
 80021e6:	6713      	str	r3, [r2, #112]	; 0x70
 80021e8:	4b57      	ldr	r3, [pc, #348]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 80021ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ec:	4a56      	ldr	r2, [pc, #344]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 80021ee:	f023 0304 	bic.w	r3, r3, #4
 80021f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d015      	beq.n	8002228 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fc:	f7ff f828 	bl	8001250 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002202:	e00a      	b.n	800221a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002204:	f7ff f824 	bl	8001250 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e0d7      	b.n	80023ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221a:	4b4b      	ldr	r3, [pc, #300]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0ee      	beq.n	8002204 <HAL_RCC_OscConfig+0x368>
 8002226:	e014      	b.n	8002252 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002228:	f7ff f812 	bl	8001250 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222e:	e00a      	b.n	8002246 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002230:	f7ff f80e 	bl	8001250 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	; 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e0c1      	b.n	80023ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002246:	4b40      	ldr	r3, [pc, #256]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1ee      	bne.n	8002230 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002252:	7dfb      	ldrb	r3, [r7, #23]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d105      	bne.n	8002264 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002258:	4b3b      	ldr	r3, [pc, #236]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	4a3a      	ldr	r2, [pc, #232]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 800225e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002262:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80ad 	beq.w	80023c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800226e:	4b36      	ldr	r3, [pc, #216]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b08      	cmp	r3, #8
 8002278:	d060      	beq.n	800233c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d145      	bne.n	800230e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002282:	4b33      	ldr	r3, [pc, #204]	; (8002350 <HAL_RCC_OscConfig+0x4b4>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7fe ffe2 	bl	8001250 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002290:	f7fe ffde 	bl	8001250 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e093      	b.n	80023ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a2:	4b29      	ldr	r3, [pc, #164]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69da      	ldr	r2, [r3, #28]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	019b      	lsls	r3, r3, #6
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c4:	085b      	lsrs	r3, r3, #1
 80022c6:	3b01      	subs	r3, #1
 80022c8:	041b      	lsls	r3, r3, #16
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d0:	061b      	lsls	r3, r3, #24
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	071b      	lsls	r3, r3, #28
 80022da:	491b      	ldr	r1, [pc, #108]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <HAL_RCC_OscConfig+0x4b4>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7fe ffb3 	bl	8001250 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ee:	f7fe ffaf 	bl	8001250 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e064      	b.n	80023ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x452>
 800230c:	e05c      	b.n	80023c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_RCC_OscConfig+0x4b4>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7fe ff9c 	bl	8001250 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231c:	f7fe ff98 	bl	8001250 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e04d      	b.n	80023ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_RCC_OscConfig+0x4ac>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x480>
 800233a:	e045      	b.n	80023c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d107      	bne.n	8002354 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e040      	b.n	80023ca <HAL_RCC_OscConfig+0x52e>
 8002348:	40023800 	.word	0x40023800
 800234c:	40007000 	.word	0x40007000
 8002350:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002354:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <HAL_RCC_OscConfig+0x538>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d030      	beq.n	80023c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d129      	bne.n	80023c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237a:	429a      	cmp	r2, r3
 800237c:	d122      	bne.n	80023c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002384:	4013      	ands	r3, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800238a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800238c:	4293      	cmp	r3, r2
 800238e:	d119      	bne.n	80023c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239a:	085b      	lsrs	r3, r3, #1
 800239c:	3b01      	subs	r3, #1
 800239e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d10f      	bne.n	80023c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d107      	bne.n	80023c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800

080023d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e03f      	b.n	800246a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7fe fd8a 	bl	8000f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2224      	movs	r2, #36	; 0x24
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800241a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f829 	bl	8002474 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695a      	ldr	r2, [r3, #20]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002478:	b0c0      	sub	sp, #256	; 0x100
 800247a:	af00      	add	r7, sp, #0
 800247c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800248c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002490:	68d9      	ldr	r1, [r3, #12]
 8002492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	ea40 0301 	orr.w	r3, r0, r1
 800249c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800249e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80024cc:	f021 010c 	bic.w	r1, r1, #12
 80024d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80024da:	430b      	orrs	r3, r1
 80024dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80024ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ee:	6999      	ldr	r1, [r3, #24]
 80024f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	ea40 0301 	orr.w	r3, r0, r1
 80024fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	4b8f      	ldr	r3, [pc, #572]	; (8002740 <UART_SetConfig+0x2cc>)
 8002504:	429a      	cmp	r2, r3
 8002506:	d005      	beq.n	8002514 <UART_SetConfig+0xa0>
 8002508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	4b8d      	ldr	r3, [pc, #564]	; (8002744 <UART_SetConfig+0x2d0>)
 8002510:	429a      	cmp	r2, r3
 8002512:	d104      	bne.n	800251e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002514:	f7ff fa7e 	bl	8001a14 <HAL_RCC_GetPCLK2Freq>
 8002518:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800251c:	e003      	b.n	8002526 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800251e:	f7ff fa65 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 8002522:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002530:	f040 810c 	bne.w	800274c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002538:	2200      	movs	r2, #0
 800253a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800253e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002542:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002546:	4622      	mov	r2, r4
 8002548:	462b      	mov	r3, r5
 800254a:	1891      	adds	r1, r2, r2
 800254c:	65b9      	str	r1, [r7, #88]	; 0x58
 800254e:	415b      	adcs	r3, r3
 8002550:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002552:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002556:	4621      	mov	r1, r4
 8002558:	eb12 0801 	adds.w	r8, r2, r1
 800255c:	4629      	mov	r1, r5
 800255e:	eb43 0901 	adc.w	r9, r3, r1
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800256e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002572:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002576:	4690      	mov	r8, r2
 8002578:	4699      	mov	r9, r3
 800257a:	4623      	mov	r3, r4
 800257c:	eb18 0303 	adds.w	r3, r8, r3
 8002580:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002584:	462b      	mov	r3, r5
 8002586:	eb49 0303 	adc.w	r3, r9, r3
 800258a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800258e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800259a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800259e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80025a2:	460b      	mov	r3, r1
 80025a4:	18db      	adds	r3, r3, r3
 80025a6:	653b      	str	r3, [r7, #80]	; 0x50
 80025a8:	4613      	mov	r3, r2
 80025aa:	eb42 0303 	adc.w	r3, r2, r3
 80025ae:	657b      	str	r3, [r7, #84]	; 0x54
 80025b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80025b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80025b8:	f7fd fe24 	bl	8000204 <__aeabi_uldivmod>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4b61      	ldr	r3, [pc, #388]	; (8002748 <UART_SetConfig+0x2d4>)
 80025c2:	fba3 2302 	umull	r2, r3, r3, r2
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	011c      	lsls	r4, r3, #4
 80025ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025ce:	2200      	movs	r2, #0
 80025d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80025d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80025dc:	4642      	mov	r2, r8
 80025de:	464b      	mov	r3, r9
 80025e0:	1891      	adds	r1, r2, r2
 80025e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80025e4:	415b      	adcs	r3, r3
 80025e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025ec:	4641      	mov	r1, r8
 80025ee:	eb12 0a01 	adds.w	sl, r2, r1
 80025f2:	4649      	mov	r1, r9
 80025f4:	eb43 0b01 	adc.w	fp, r3, r1
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002604:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002608:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800260c:	4692      	mov	sl, r2
 800260e:	469b      	mov	fp, r3
 8002610:	4643      	mov	r3, r8
 8002612:	eb1a 0303 	adds.w	r3, sl, r3
 8002616:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800261a:	464b      	mov	r3, r9
 800261c:	eb4b 0303 	adc.w	r3, fp, r3
 8002620:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002630:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002634:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002638:	460b      	mov	r3, r1
 800263a:	18db      	adds	r3, r3, r3
 800263c:	643b      	str	r3, [r7, #64]	; 0x40
 800263e:	4613      	mov	r3, r2
 8002640:	eb42 0303 	adc.w	r3, r2, r3
 8002644:	647b      	str	r3, [r7, #68]	; 0x44
 8002646:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800264a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800264e:	f7fd fdd9 	bl	8000204 <__aeabi_uldivmod>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4611      	mov	r1, r2
 8002658:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <UART_SetConfig+0x2d4>)
 800265a:	fba3 2301 	umull	r2, r3, r3, r1
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	2264      	movs	r2, #100	; 0x64
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	1acb      	subs	r3, r1, r3
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800266e:	4b36      	ldr	r3, [pc, #216]	; (8002748 <UART_SetConfig+0x2d4>)
 8002670:	fba3 2302 	umull	r2, r3, r3, r2
 8002674:	095b      	lsrs	r3, r3, #5
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800267c:	441c      	add	r4, r3
 800267e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002682:	2200      	movs	r2, #0
 8002684:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002688:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800268c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002690:	4642      	mov	r2, r8
 8002692:	464b      	mov	r3, r9
 8002694:	1891      	adds	r1, r2, r2
 8002696:	63b9      	str	r1, [r7, #56]	; 0x38
 8002698:	415b      	adcs	r3, r3
 800269a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800269c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80026a0:	4641      	mov	r1, r8
 80026a2:	1851      	adds	r1, r2, r1
 80026a4:	6339      	str	r1, [r7, #48]	; 0x30
 80026a6:	4649      	mov	r1, r9
 80026a8:	414b      	adcs	r3, r1
 80026aa:	637b      	str	r3, [r7, #52]	; 0x34
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80026b8:	4659      	mov	r1, fp
 80026ba:	00cb      	lsls	r3, r1, #3
 80026bc:	4651      	mov	r1, sl
 80026be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026c2:	4651      	mov	r1, sl
 80026c4:	00ca      	lsls	r2, r1, #3
 80026c6:	4610      	mov	r0, r2
 80026c8:	4619      	mov	r1, r3
 80026ca:	4603      	mov	r3, r0
 80026cc:	4642      	mov	r2, r8
 80026ce:	189b      	adds	r3, r3, r2
 80026d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026d4:	464b      	mov	r3, r9
 80026d6:	460a      	mov	r2, r1
 80026d8:	eb42 0303 	adc.w	r3, r2, r3
 80026dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80026ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80026f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80026f4:	460b      	mov	r3, r1
 80026f6:	18db      	adds	r3, r3, r3
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026fa:	4613      	mov	r3, r2
 80026fc:	eb42 0303 	adc.w	r3, r2, r3
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002702:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002706:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800270a:	f7fd fd7b 	bl	8000204 <__aeabi_uldivmod>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <UART_SetConfig+0x2d4>)
 8002714:	fba3 1302 	umull	r1, r3, r3, r2
 8002718:	095b      	lsrs	r3, r3, #5
 800271a:	2164      	movs	r1, #100	; 0x64
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	3332      	adds	r3, #50	; 0x32
 8002726:	4a08      	ldr	r2, [pc, #32]	; (8002748 <UART_SetConfig+0x2d4>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	f003 0207 	and.w	r2, r3, #7
 8002732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4422      	add	r2, r4
 800273a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800273c:	e105      	b.n	800294a <UART_SetConfig+0x4d6>
 800273e:	bf00      	nop
 8002740:	40011000 	.word	0x40011000
 8002744:	40011400 	.word	0x40011400
 8002748:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800274c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002750:	2200      	movs	r2, #0
 8002752:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002756:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800275a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800275e:	4642      	mov	r2, r8
 8002760:	464b      	mov	r3, r9
 8002762:	1891      	adds	r1, r2, r2
 8002764:	6239      	str	r1, [r7, #32]
 8002766:	415b      	adcs	r3, r3
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
 800276a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800276e:	4641      	mov	r1, r8
 8002770:	1854      	adds	r4, r2, r1
 8002772:	4649      	mov	r1, r9
 8002774:	eb43 0501 	adc.w	r5, r3, r1
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	00eb      	lsls	r3, r5, #3
 8002782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002786:	00e2      	lsls	r2, r4, #3
 8002788:	4614      	mov	r4, r2
 800278a:	461d      	mov	r5, r3
 800278c:	4643      	mov	r3, r8
 800278e:	18e3      	adds	r3, r4, r3
 8002790:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002794:	464b      	mov	r3, r9
 8002796:	eb45 0303 	adc.w	r3, r5, r3
 800279a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800279e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80027ba:	4629      	mov	r1, r5
 80027bc:	008b      	lsls	r3, r1, #2
 80027be:	4621      	mov	r1, r4
 80027c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027c4:	4621      	mov	r1, r4
 80027c6:	008a      	lsls	r2, r1, #2
 80027c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80027cc:	f7fd fd1a 	bl	8000204 <__aeabi_uldivmod>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4b60      	ldr	r3, [pc, #384]	; (8002958 <UART_SetConfig+0x4e4>)
 80027d6:	fba3 2302 	umull	r2, r3, r3, r2
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	011c      	lsls	r4, r3, #4
 80027de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027e2:	2200      	movs	r2, #0
 80027e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80027ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80027f0:	4642      	mov	r2, r8
 80027f2:	464b      	mov	r3, r9
 80027f4:	1891      	adds	r1, r2, r2
 80027f6:	61b9      	str	r1, [r7, #24]
 80027f8:	415b      	adcs	r3, r3
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002800:	4641      	mov	r1, r8
 8002802:	1851      	adds	r1, r2, r1
 8002804:	6139      	str	r1, [r7, #16]
 8002806:	4649      	mov	r1, r9
 8002808:	414b      	adcs	r3, r1
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002818:	4659      	mov	r1, fp
 800281a:	00cb      	lsls	r3, r1, #3
 800281c:	4651      	mov	r1, sl
 800281e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002822:	4651      	mov	r1, sl
 8002824:	00ca      	lsls	r2, r1, #3
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	4603      	mov	r3, r0
 800282c:	4642      	mov	r2, r8
 800282e:	189b      	adds	r3, r3, r2
 8002830:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002834:	464b      	mov	r3, r9
 8002836:	460a      	mov	r2, r1
 8002838:	eb42 0303 	adc.w	r3, r2, r3
 800283c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	67bb      	str	r3, [r7, #120]	; 0x78
 800284a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002858:	4649      	mov	r1, r9
 800285a:	008b      	lsls	r3, r1, #2
 800285c:	4641      	mov	r1, r8
 800285e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002862:	4641      	mov	r1, r8
 8002864:	008a      	lsls	r2, r1, #2
 8002866:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800286a:	f7fd fccb 	bl	8000204 <__aeabi_uldivmod>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4b39      	ldr	r3, [pc, #228]	; (8002958 <UART_SetConfig+0x4e4>)
 8002874:	fba3 1302 	umull	r1, r3, r3, r2
 8002878:	095b      	lsrs	r3, r3, #5
 800287a:	2164      	movs	r1, #100	; 0x64
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	3332      	adds	r3, #50	; 0x32
 8002886:	4a34      	ldr	r2, [pc, #208]	; (8002958 <UART_SetConfig+0x4e4>)
 8002888:	fba2 2303 	umull	r2, r3, r2, r3
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002892:	441c      	add	r4, r3
 8002894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002898:	2200      	movs	r2, #0
 800289a:	673b      	str	r3, [r7, #112]	; 0x70
 800289c:	677a      	str	r2, [r7, #116]	; 0x74
 800289e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80028a2:	4642      	mov	r2, r8
 80028a4:	464b      	mov	r3, r9
 80028a6:	1891      	adds	r1, r2, r2
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	415b      	adcs	r3, r3
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028b2:	4641      	mov	r1, r8
 80028b4:	1851      	adds	r1, r2, r1
 80028b6:	6039      	str	r1, [r7, #0]
 80028b8:	4649      	mov	r1, r9
 80028ba:	414b      	adcs	r3, r1
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028ca:	4659      	mov	r1, fp
 80028cc:	00cb      	lsls	r3, r1, #3
 80028ce:	4651      	mov	r1, sl
 80028d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028d4:	4651      	mov	r1, sl
 80028d6:	00ca      	lsls	r2, r1, #3
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	4603      	mov	r3, r0
 80028de:	4642      	mov	r2, r8
 80028e0:	189b      	adds	r3, r3, r2
 80028e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80028e4:	464b      	mov	r3, r9
 80028e6:	460a      	mov	r2, r1
 80028e8:	eb42 0303 	adc.w	r3, r2, r3
 80028ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	663b      	str	r3, [r7, #96]	; 0x60
 80028f8:	667a      	str	r2, [r7, #100]	; 0x64
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002906:	4649      	mov	r1, r9
 8002908:	008b      	lsls	r3, r1, #2
 800290a:	4641      	mov	r1, r8
 800290c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002910:	4641      	mov	r1, r8
 8002912:	008a      	lsls	r2, r1, #2
 8002914:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002918:	f7fd fc74 	bl	8000204 <__aeabi_uldivmod>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <UART_SetConfig+0x4e4>)
 8002922:	fba3 1302 	umull	r1, r3, r3, r2
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	2164      	movs	r1, #100	; 0x64
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	3332      	adds	r3, #50	; 0x32
 8002934:	4a08      	ldr	r2, [pc, #32]	; (8002958 <UART_SetConfig+0x4e4>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	f003 020f 	and.w	r2, r3, #15
 8002940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4422      	add	r2, r4
 8002948:	609a      	str	r2, [r3, #8]
}
 800294a:	bf00      	nop
 800294c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002950:	46bd      	mov	sp, r7
 8002952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002956:	bf00      	nop
 8002958:	51eb851f 	.word	0x51eb851f

0800295c <__errno>:
 800295c:	4b01      	ldr	r3, [pc, #4]	; (8002964 <__errno+0x8>)
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	2000000c 	.word	0x2000000c

08002968 <__libc_init_array>:
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	4d0d      	ldr	r5, [pc, #52]	; (80029a0 <__libc_init_array+0x38>)
 800296c:	4c0d      	ldr	r4, [pc, #52]	; (80029a4 <__libc_init_array+0x3c>)
 800296e:	1b64      	subs	r4, r4, r5
 8002970:	10a4      	asrs	r4, r4, #2
 8002972:	2600      	movs	r6, #0
 8002974:	42a6      	cmp	r6, r4
 8002976:	d109      	bne.n	800298c <__libc_init_array+0x24>
 8002978:	4d0b      	ldr	r5, [pc, #44]	; (80029a8 <__libc_init_array+0x40>)
 800297a:	4c0c      	ldr	r4, [pc, #48]	; (80029ac <__libc_init_array+0x44>)
 800297c:	f000 fd1e 	bl	80033bc <_init>
 8002980:	1b64      	subs	r4, r4, r5
 8002982:	10a4      	asrs	r4, r4, #2
 8002984:	2600      	movs	r6, #0
 8002986:	42a6      	cmp	r6, r4
 8002988:	d105      	bne.n	8002996 <__libc_init_array+0x2e>
 800298a:	bd70      	pop	{r4, r5, r6, pc}
 800298c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002990:	4798      	blx	r3
 8002992:	3601      	adds	r6, #1
 8002994:	e7ee      	b.n	8002974 <__libc_init_array+0xc>
 8002996:	f855 3b04 	ldr.w	r3, [r5], #4
 800299a:	4798      	blx	r3
 800299c:	3601      	adds	r6, #1
 800299e:	e7f2      	b.n	8002986 <__libc_init_array+0x1e>
 80029a0:	08003598 	.word	0x08003598
 80029a4:	08003598 	.word	0x08003598
 80029a8:	08003598 	.word	0x08003598
 80029ac:	0800359c 	.word	0x0800359c

080029b0 <memset>:
 80029b0:	4402      	add	r2, r0
 80029b2:	4603      	mov	r3, r0
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <memset+0xa>
 80029b8:	4770      	bx	lr
 80029ba:	f803 1b01 	strb.w	r1, [r3], #1
 80029be:	e7f9      	b.n	80029b4 <memset+0x4>

080029c0 <_puts_r>:
 80029c0:	b570      	push	{r4, r5, r6, lr}
 80029c2:	460e      	mov	r6, r1
 80029c4:	4605      	mov	r5, r0
 80029c6:	b118      	cbz	r0, 80029d0 <_puts_r+0x10>
 80029c8:	6983      	ldr	r3, [r0, #24]
 80029ca:	b90b      	cbnz	r3, 80029d0 <_puts_r+0x10>
 80029cc:	f000 fa48 	bl	8002e60 <__sinit>
 80029d0:	69ab      	ldr	r3, [r5, #24]
 80029d2:	68ac      	ldr	r4, [r5, #8]
 80029d4:	b913      	cbnz	r3, 80029dc <_puts_r+0x1c>
 80029d6:	4628      	mov	r0, r5
 80029d8:	f000 fa42 	bl	8002e60 <__sinit>
 80029dc:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <_puts_r+0xd0>)
 80029de:	429c      	cmp	r4, r3
 80029e0:	d120      	bne.n	8002a24 <_puts_r+0x64>
 80029e2:	686c      	ldr	r4, [r5, #4]
 80029e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029e6:	07db      	lsls	r3, r3, #31
 80029e8:	d405      	bmi.n	80029f6 <_puts_r+0x36>
 80029ea:	89a3      	ldrh	r3, [r4, #12]
 80029ec:	0598      	lsls	r0, r3, #22
 80029ee:	d402      	bmi.n	80029f6 <_puts_r+0x36>
 80029f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029f2:	f000 fad3 	bl	8002f9c <__retarget_lock_acquire_recursive>
 80029f6:	89a3      	ldrh	r3, [r4, #12]
 80029f8:	0719      	lsls	r1, r3, #28
 80029fa:	d51d      	bpl.n	8002a38 <_puts_r+0x78>
 80029fc:	6923      	ldr	r3, [r4, #16]
 80029fe:	b1db      	cbz	r3, 8002a38 <_puts_r+0x78>
 8002a00:	3e01      	subs	r6, #1
 8002a02:	68a3      	ldr	r3, [r4, #8]
 8002a04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	60a3      	str	r3, [r4, #8]
 8002a0c:	bb39      	cbnz	r1, 8002a5e <_puts_r+0x9e>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	da38      	bge.n	8002a84 <_puts_r+0xc4>
 8002a12:	4622      	mov	r2, r4
 8002a14:	210a      	movs	r1, #10
 8002a16:	4628      	mov	r0, r5
 8002a18:	f000 f848 	bl	8002aac <__swbuf_r>
 8002a1c:	3001      	adds	r0, #1
 8002a1e:	d011      	beq.n	8002a44 <_puts_r+0x84>
 8002a20:	250a      	movs	r5, #10
 8002a22:	e011      	b.n	8002a48 <_puts_r+0x88>
 8002a24:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <_puts_r+0xd4>)
 8002a26:	429c      	cmp	r4, r3
 8002a28:	d101      	bne.n	8002a2e <_puts_r+0x6e>
 8002a2a:	68ac      	ldr	r4, [r5, #8]
 8002a2c:	e7da      	b.n	80029e4 <_puts_r+0x24>
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <_puts_r+0xd8>)
 8002a30:	429c      	cmp	r4, r3
 8002a32:	bf08      	it	eq
 8002a34:	68ec      	ldreq	r4, [r5, #12]
 8002a36:	e7d5      	b.n	80029e4 <_puts_r+0x24>
 8002a38:	4621      	mov	r1, r4
 8002a3a:	4628      	mov	r0, r5
 8002a3c:	f000 f888 	bl	8002b50 <__swsetup_r>
 8002a40:	2800      	cmp	r0, #0
 8002a42:	d0dd      	beq.n	8002a00 <_puts_r+0x40>
 8002a44:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002a48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a4a:	07da      	lsls	r2, r3, #31
 8002a4c:	d405      	bmi.n	8002a5a <_puts_r+0x9a>
 8002a4e:	89a3      	ldrh	r3, [r4, #12]
 8002a50:	059b      	lsls	r3, r3, #22
 8002a52:	d402      	bmi.n	8002a5a <_puts_r+0x9a>
 8002a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a56:	f000 faa2 	bl	8002f9e <__retarget_lock_release_recursive>
 8002a5a:	4628      	mov	r0, r5
 8002a5c:	bd70      	pop	{r4, r5, r6, pc}
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	da04      	bge.n	8002a6c <_puts_r+0xac>
 8002a62:	69a2      	ldr	r2, [r4, #24]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	dc06      	bgt.n	8002a76 <_puts_r+0xb6>
 8002a68:	290a      	cmp	r1, #10
 8002a6a:	d004      	beq.n	8002a76 <_puts_r+0xb6>
 8002a6c:	6823      	ldr	r3, [r4, #0]
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	6022      	str	r2, [r4, #0]
 8002a72:	7019      	strb	r1, [r3, #0]
 8002a74:	e7c5      	b.n	8002a02 <_puts_r+0x42>
 8002a76:	4622      	mov	r2, r4
 8002a78:	4628      	mov	r0, r5
 8002a7a:	f000 f817 	bl	8002aac <__swbuf_r>
 8002a7e:	3001      	adds	r0, #1
 8002a80:	d1bf      	bne.n	8002a02 <_puts_r+0x42>
 8002a82:	e7df      	b.n	8002a44 <_puts_r+0x84>
 8002a84:	6823      	ldr	r3, [r4, #0]
 8002a86:	250a      	movs	r5, #10
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	6022      	str	r2, [r4, #0]
 8002a8c:	701d      	strb	r5, [r3, #0]
 8002a8e:	e7db      	b.n	8002a48 <_puts_r+0x88>
 8002a90:	08003550 	.word	0x08003550
 8002a94:	08003570 	.word	0x08003570
 8002a98:	08003530 	.word	0x08003530

08002a9c <puts>:
 8002a9c:	4b02      	ldr	r3, [pc, #8]	; (8002aa8 <puts+0xc>)
 8002a9e:	4601      	mov	r1, r0
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	f7ff bf8d 	b.w	80029c0 <_puts_r>
 8002aa6:	bf00      	nop
 8002aa8:	2000000c 	.word	0x2000000c

08002aac <__swbuf_r>:
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	460e      	mov	r6, r1
 8002ab0:	4614      	mov	r4, r2
 8002ab2:	4605      	mov	r5, r0
 8002ab4:	b118      	cbz	r0, 8002abe <__swbuf_r+0x12>
 8002ab6:	6983      	ldr	r3, [r0, #24]
 8002ab8:	b90b      	cbnz	r3, 8002abe <__swbuf_r+0x12>
 8002aba:	f000 f9d1 	bl	8002e60 <__sinit>
 8002abe:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <__swbuf_r+0x98>)
 8002ac0:	429c      	cmp	r4, r3
 8002ac2:	d12b      	bne.n	8002b1c <__swbuf_r+0x70>
 8002ac4:	686c      	ldr	r4, [r5, #4]
 8002ac6:	69a3      	ldr	r3, [r4, #24]
 8002ac8:	60a3      	str	r3, [r4, #8]
 8002aca:	89a3      	ldrh	r3, [r4, #12]
 8002acc:	071a      	lsls	r2, r3, #28
 8002ace:	d52f      	bpl.n	8002b30 <__swbuf_r+0x84>
 8002ad0:	6923      	ldr	r3, [r4, #16]
 8002ad2:	b36b      	cbz	r3, 8002b30 <__swbuf_r+0x84>
 8002ad4:	6923      	ldr	r3, [r4, #16]
 8002ad6:	6820      	ldr	r0, [r4, #0]
 8002ad8:	1ac0      	subs	r0, r0, r3
 8002ada:	6963      	ldr	r3, [r4, #20]
 8002adc:	b2f6      	uxtb	r6, r6
 8002ade:	4283      	cmp	r3, r0
 8002ae0:	4637      	mov	r7, r6
 8002ae2:	dc04      	bgt.n	8002aee <__swbuf_r+0x42>
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	4628      	mov	r0, r5
 8002ae8:	f000 f926 	bl	8002d38 <_fflush_r>
 8002aec:	bb30      	cbnz	r0, 8002b3c <__swbuf_r+0x90>
 8002aee:	68a3      	ldr	r3, [r4, #8]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	60a3      	str	r3, [r4, #8]
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	6022      	str	r2, [r4, #0]
 8002afa:	701e      	strb	r6, [r3, #0]
 8002afc:	6963      	ldr	r3, [r4, #20]
 8002afe:	3001      	adds	r0, #1
 8002b00:	4283      	cmp	r3, r0
 8002b02:	d004      	beq.n	8002b0e <__swbuf_r+0x62>
 8002b04:	89a3      	ldrh	r3, [r4, #12]
 8002b06:	07db      	lsls	r3, r3, #31
 8002b08:	d506      	bpl.n	8002b18 <__swbuf_r+0x6c>
 8002b0a:	2e0a      	cmp	r6, #10
 8002b0c:	d104      	bne.n	8002b18 <__swbuf_r+0x6c>
 8002b0e:	4621      	mov	r1, r4
 8002b10:	4628      	mov	r0, r5
 8002b12:	f000 f911 	bl	8002d38 <_fflush_r>
 8002b16:	b988      	cbnz	r0, 8002b3c <__swbuf_r+0x90>
 8002b18:	4638      	mov	r0, r7
 8002b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <__swbuf_r+0x9c>)
 8002b1e:	429c      	cmp	r4, r3
 8002b20:	d101      	bne.n	8002b26 <__swbuf_r+0x7a>
 8002b22:	68ac      	ldr	r4, [r5, #8]
 8002b24:	e7cf      	b.n	8002ac6 <__swbuf_r+0x1a>
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <__swbuf_r+0xa0>)
 8002b28:	429c      	cmp	r4, r3
 8002b2a:	bf08      	it	eq
 8002b2c:	68ec      	ldreq	r4, [r5, #12]
 8002b2e:	e7ca      	b.n	8002ac6 <__swbuf_r+0x1a>
 8002b30:	4621      	mov	r1, r4
 8002b32:	4628      	mov	r0, r5
 8002b34:	f000 f80c 	bl	8002b50 <__swsetup_r>
 8002b38:	2800      	cmp	r0, #0
 8002b3a:	d0cb      	beq.n	8002ad4 <__swbuf_r+0x28>
 8002b3c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002b40:	e7ea      	b.n	8002b18 <__swbuf_r+0x6c>
 8002b42:	bf00      	nop
 8002b44:	08003550 	.word	0x08003550
 8002b48:	08003570 	.word	0x08003570
 8002b4c:	08003530 	.word	0x08003530

08002b50 <__swsetup_r>:
 8002b50:	4b32      	ldr	r3, [pc, #200]	; (8002c1c <__swsetup_r+0xcc>)
 8002b52:	b570      	push	{r4, r5, r6, lr}
 8002b54:	681d      	ldr	r5, [r3, #0]
 8002b56:	4606      	mov	r6, r0
 8002b58:	460c      	mov	r4, r1
 8002b5a:	b125      	cbz	r5, 8002b66 <__swsetup_r+0x16>
 8002b5c:	69ab      	ldr	r3, [r5, #24]
 8002b5e:	b913      	cbnz	r3, 8002b66 <__swsetup_r+0x16>
 8002b60:	4628      	mov	r0, r5
 8002b62:	f000 f97d 	bl	8002e60 <__sinit>
 8002b66:	4b2e      	ldr	r3, [pc, #184]	; (8002c20 <__swsetup_r+0xd0>)
 8002b68:	429c      	cmp	r4, r3
 8002b6a:	d10f      	bne.n	8002b8c <__swsetup_r+0x3c>
 8002b6c:	686c      	ldr	r4, [r5, #4]
 8002b6e:	89a3      	ldrh	r3, [r4, #12]
 8002b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b74:	0719      	lsls	r1, r3, #28
 8002b76:	d42c      	bmi.n	8002bd2 <__swsetup_r+0x82>
 8002b78:	06dd      	lsls	r5, r3, #27
 8002b7a:	d411      	bmi.n	8002ba0 <__swsetup_r+0x50>
 8002b7c:	2309      	movs	r3, #9
 8002b7e:	6033      	str	r3, [r6, #0]
 8002b80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002b84:	81a3      	strh	r3, [r4, #12]
 8002b86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b8a:	e03e      	b.n	8002c0a <__swsetup_r+0xba>
 8002b8c:	4b25      	ldr	r3, [pc, #148]	; (8002c24 <__swsetup_r+0xd4>)
 8002b8e:	429c      	cmp	r4, r3
 8002b90:	d101      	bne.n	8002b96 <__swsetup_r+0x46>
 8002b92:	68ac      	ldr	r4, [r5, #8]
 8002b94:	e7eb      	b.n	8002b6e <__swsetup_r+0x1e>
 8002b96:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <__swsetup_r+0xd8>)
 8002b98:	429c      	cmp	r4, r3
 8002b9a:	bf08      	it	eq
 8002b9c:	68ec      	ldreq	r4, [r5, #12]
 8002b9e:	e7e6      	b.n	8002b6e <__swsetup_r+0x1e>
 8002ba0:	0758      	lsls	r0, r3, #29
 8002ba2:	d512      	bpl.n	8002bca <__swsetup_r+0x7a>
 8002ba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ba6:	b141      	cbz	r1, 8002bba <__swsetup_r+0x6a>
 8002ba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bac:	4299      	cmp	r1, r3
 8002bae:	d002      	beq.n	8002bb6 <__swsetup_r+0x66>
 8002bb0:	4630      	mov	r0, r6
 8002bb2:	f000 fa5b 	bl	800306c <_free_r>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	6363      	str	r3, [r4, #52]	; 0x34
 8002bba:	89a3      	ldrh	r3, [r4, #12]
 8002bbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002bc0:	81a3      	strh	r3, [r4, #12]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	6063      	str	r3, [r4, #4]
 8002bc6:	6923      	ldr	r3, [r4, #16]
 8002bc8:	6023      	str	r3, [r4, #0]
 8002bca:	89a3      	ldrh	r3, [r4, #12]
 8002bcc:	f043 0308 	orr.w	r3, r3, #8
 8002bd0:	81a3      	strh	r3, [r4, #12]
 8002bd2:	6923      	ldr	r3, [r4, #16]
 8002bd4:	b94b      	cbnz	r3, 8002bea <__swsetup_r+0x9a>
 8002bd6:	89a3      	ldrh	r3, [r4, #12]
 8002bd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be0:	d003      	beq.n	8002bea <__swsetup_r+0x9a>
 8002be2:	4621      	mov	r1, r4
 8002be4:	4630      	mov	r0, r6
 8002be6:	f000 fa01 	bl	8002fec <__smakebuf_r>
 8002bea:	89a0      	ldrh	r0, [r4, #12]
 8002bec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002bf0:	f010 0301 	ands.w	r3, r0, #1
 8002bf4:	d00a      	beq.n	8002c0c <__swsetup_r+0xbc>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60a3      	str	r3, [r4, #8]
 8002bfa:	6963      	ldr	r3, [r4, #20]
 8002bfc:	425b      	negs	r3, r3
 8002bfe:	61a3      	str	r3, [r4, #24]
 8002c00:	6923      	ldr	r3, [r4, #16]
 8002c02:	b943      	cbnz	r3, 8002c16 <__swsetup_r+0xc6>
 8002c04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002c08:	d1ba      	bne.n	8002b80 <__swsetup_r+0x30>
 8002c0a:	bd70      	pop	{r4, r5, r6, pc}
 8002c0c:	0781      	lsls	r1, r0, #30
 8002c0e:	bf58      	it	pl
 8002c10:	6963      	ldrpl	r3, [r4, #20]
 8002c12:	60a3      	str	r3, [r4, #8]
 8002c14:	e7f4      	b.n	8002c00 <__swsetup_r+0xb0>
 8002c16:	2000      	movs	r0, #0
 8002c18:	e7f7      	b.n	8002c0a <__swsetup_r+0xba>
 8002c1a:	bf00      	nop
 8002c1c:	2000000c 	.word	0x2000000c
 8002c20:	08003550 	.word	0x08003550
 8002c24:	08003570 	.word	0x08003570
 8002c28:	08003530 	.word	0x08003530

08002c2c <__sflush_r>:
 8002c2c:	898a      	ldrh	r2, [r1, #12]
 8002c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c32:	4605      	mov	r5, r0
 8002c34:	0710      	lsls	r0, r2, #28
 8002c36:	460c      	mov	r4, r1
 8002c38:	d458      	bmi.n	8002cec <__sflush_r+0xc0>
 8002c3a:	684b      	ldr	r3, [r1, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	dc05      	bgt.n	8002c4c <__sflush_r+0x20>
 8002c40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	dc02      	bgt.n	8002c4c <__sflush_r+0x20>
 8002c46:	2000      	movs	r0, #0
 8002c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c4e:	2e00      	cmp	r6, #0
 8002c50:	d0f9      	beq.n	8002c46 <__sflush_r+0x1a>
 8002c52:	2300      	movs	r3, #0
 8002c54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002c58:	682f      	ldr	r7, [r5, #0]
 8002c5a:	602b      	str	r3, [r5, #0]
 8002c5c:	d032      	beq.n	8002cc4 <__sflush_r+0x98>
 8002c5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002c60:	89a3      	ldrh	r3, [r4, #12]
 8002c62:	075a      	lsls	r2, r3, #29
 8002c64:	d505      	bpl.n	8002c72 <__sflush_r+0x46>
 8002c66:	6863      	ldr	r3, [r4, #4]
 8002c68:	1ac0      	subs	r0, r0, r3
 8002c6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c6c:	b10b      	cbz	r3, 8002c72 <__sflush_r+0x46>
 8002c6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c70:	1ac0      	subs	r0, r0, r3
 8002c72:	2300      	movs	r3, #0
 8002c74:	4602      	mov	r2, r0
 8002c76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c78:	6a21      	ldr	r1, [r4, #32]
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	47b0      	blx	r6
 8002c7e:	1c43      	adds	r3, r0, #1
 8002c80:	89a3      	ldrh	r3, [r4, #12]
 8002c82:	d106      	bne.n	8002c92 <__sflush_r+0x66>
 8002c84:	6829      	ldr	r1, [r5, #0]
 8002c86:	291d      	cmp	r1, #29
 8002c88:	d82c      	bhi.n	8002ce4 <__sflush_r+0xb8>
 8002c8a:	4a2a      	ldr	r2, [pc, #168]	; (8002d34 <__sflush_r+0x108>)
 8002c8c:	40ca      	lsrs	r2, r1
 8002c8e:	07d6      	lsls	r6, r2, #31
 8002c90:	d528      	bpl.n	8002ce4 <__sflush_r+0xb8>
 8002c92:	2200      	movs	r2, #0
 8002c94:	6062      	str	r2, [r4, #4]
 8002c96:	04d9      	lsls	r1, r3, #19
 8002c98:	6922      	ldr	r2, [r4, #16]
 8002c9a:	6022      	str	r2, [r4, #0]
 8002c9c:	d504      	bpl.n	8002ca8 <__sflush_r+0x7c>
 8002c9e:	1c42      	adds	r2, r0, #1
 8002ca0:	d101      	bne.n	8002ca6 <__sflush_r+0x7a>
 8002ca2:	682b      	ldr	r3, [r5, #0]
 8002ca4:	b903      	cbnz	r3, 8002ca8 <__sflush_r+0x7c>
 8002ca6:	6560      	str	r0, [r4, #84]	; 0x54
 8002ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002caa:	602f      	str	r7, [r5, #0]
 8002cac:	2900      	cmp	r1, #0
 8002cae:	d0ca      	beq.n	8002c46 <__sflush_r+0x1a>
 8002cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002cb4:	4299      	cmp	r1, r3
 8002cb6:	d002      	beq.n	8002cbe <__sflush_r+0x92>
 8002cb8:	4628      	mov	r0, r5
 8002cba:	f000 f9d7 	bl	800306c <_free_r>
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	6360      	str	r0, [r4, #52]	; 0x34
 8002cc2:	e7c1      	b.n	8002c48 <__sflush_r+0x1c>
 8002cc4:	6a21      	ldr	r1, [r4, #32]
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	4628      	mov	r0, r5
 8002cca:	47b0      	blx	r6
 8002ccc:	1c41      	adds	r1, r0, #1
 8002cce:	d1c7      	bne.n	8002c60 <__sflush_r+0x34>
 8002cd0:	682b      	ldr	r3, [r5, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0c4      	beq.n	8002c60 <__sflush_r+0x34>
 8002cd6:	2b1d      	cmp	r3, #29
 8002cd8:	d001      	beq.n	8002cde <__sflush_r+0xb2>
 8002cda:	2b16      	cmp	r3, #22
 8002cdc:	d101      	bne.n	8002ce2 <__sflush_r+0xb6>
 8002cde:	602f      	str	r7, [r5, #0]
 8002ce0:	e7b1      	b.n	8002c46 <__sflush_r+0x1a>
 8002ce2:	89a3      	ldrh	r3, [r4, #12]
 8002ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ce8:	81a3      	strh	r3, [r4, #12]
 8002cea:	e7ad      	b.n	8002c48 <__sflush_r+0x1c>
 8002cec:	690f      	ldr	r7, [r1, #16]
 8002cee:	2f00      	cmp	r7, #0
 8002cf0:	d0a9      	beq.n	8002c46 <__sflush_r+0x1a>
 8002cf2:	0793      	lsls	r3, r2, #30
 8002cf4:	680e      	ldr	r6, [r1, #0]
 8002cf6:	bf08      	it	eq
 8002cf8:	694b      	ldreq	r3, [r1, #20]
 8002cfa:	600f      	str	r7, [r1, #0]
 8002cfc:	bf18      	it	ne
 8002cfe:	2300      	movne	r3, #0
 8002d00:	eba6 0807 	sub.w	r8, r6, r7
 8002d04:	608b      	str	r3, [r1, #8]
 8002d06:	f1b8 0f00 	cmp.w	r8, #0
 8002d0a:	dd9c      	ble.n	8002c46 <__sflush_r+0x1a>
 8002d0c:	6a21      	ldr	r1, [r4, #32]
 8002d0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002d10:	4643      	mov	r3, r8
 8002d12:	463a      	mov	r2, r7
 8002d14:	4628      	mov	r0, r5
 8002d16:	47b0      	blx	r6
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	dc06      	bgt.n	8002d2a <__sflush_r+0xfe>
 8002d1c:	89a3      	ldrh	r3, [r4, #12]
 8002d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d22:	81a3      	strh	r3, [r4, #12]
 8002d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d28:	e78e      	b.n	8002c48 <__sflush_r+0x1c>
 8002d2a:	4407      	add	r7, r0
 8002d2c:	eba8 0800 	sub.w	r8, r8, r0
 8002d30:	e7e9      	b.n	8002d06 <__sflush_r+0xda>
 8002d32:	bf00      	nop
 8002d34:	20400001 	.word	0x20400001

08002d38 <_fflush_r>:
 8002d38:	b538      	push	{r3, r4, r5, lr}
 8002d3a:	690b      	ldr	r3, [r1, #16]
 8002d3c:	4605      	mov	r5, r0
 8002d3e:	460c      	mov	r4, r1
 8002d40:	b913      	cbnz	r3, 8002d48 <_fflush_r+0x10>
 8002d42:	2500      	movs	r5, #0
 8002d44:	4628      	mov	r0, r5
 8002d46:	bd38      	pop	{r3, r4, r5, pc}
 8002d48:	b118      	cbz	r0, 8002d52 <_fflush_r+0x1a>
 8002d4a:	6983      	ldr	r3, [r0, #24]
 8002d4c:	b90b      	cbnz	r3, 8002d52 <_fflush_r+0x1a>
 8002d4e:	f000 f887 	bl	8002e60 <__sinit>
 8002d52:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <_fflush_r+0x6c>)
 8002d54:	429c      	cmp	r4, r3
 8002d56:	d11b      	bne.n	8002d90 <_fflush_r+0x58>
 8002d58:	686c      	ldr	r4, [r5, #4]
 8002d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0ef      	beq.n	8002d42 <_fflush_r+0xa>
 8002d62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002d64:	07d0      	lsls	r0, r2, #31
 8002d66:	d404      	bmi.n	8002d72 <_fflush_r+0x3a>
 8002d68:	0599      	lsls	r1, r3, #22
 8002d6a:	d402      	bmi.n	8002d72 <_fflush_r+0x3a>
 8002d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d6e:	f000 f915 	bl	8002f9c <__retarget_lock_acquire_recursive>
 8002d72:	4628      	mov	r0, r5
 8002d74:	4621      	mov	r1, r4
 8002d76:	f7ff ff59 	bl	8002c2c <__sflush_r>
 8002d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d7c:	07da      	lsls	r2, r3, #31
 8002d7e:	4605      	mov	r5, r0
 8002d80:	d4e0      	bmi.n	8002d44 <_fflush_r+0xc>
 8002d82:	89a3      	ldrh	r3, [r4, #12]
 8002d84:	059b      	lsls	r3, r3, #22
 8002d86:	d4dd      	bmi.n	8002d44 <_fflush_r+0xc>
 8002d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d8a:	f000 f908 	bl	8002f9e <__retarget_lock_release_recursive>
 8002d8e:	e7d9      	b.n	8002d44 <_fflush_r+0xc>
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <_fflush_r+0x70>)
 8002d92:	429c      	cmp	r4, r3
 8002d94:	d101      	bne.n	8002d9a <_fflush_r+0x62>
 8002d96:	68ac      	ldr	r4, [r5, #8]
 8002d98:	e7df      	b.n	8002d5a <_fflush_r+0x22>
 8002d9a:	4b04      	ldr	r3, [pc, #16]	; (8002dac <_fflush_r+0x74>)
 8002d9c:	429c      	cmp	r4, r3
 8002d9e:	bf08      	it	eq
 8002da0:	68ec      	ldreq	r4, [r5, #12]
 8002da2:	e7da      	b.n	8002d5a <_fflush_r+0x22>
 8002da4:	08003550 	.word	0x08003550
 8002da8:	08003570 	.word	0x08003570
 8002dac:	08003530 	.word	0x08003530

08002db0 <std>:
 8002db0:	2300      	movs	r3, #0
 8002db2:	b510      	push	{r4, lr}
 8002db4:	4604      	mov	r4, r0
 8002db6:	e9c0 3300 	strd	r3, r3, [r0]
 8002dba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002dbe:	6083      	str	r3, [r0, #8]
 8002dc0:	8181      	strh	r1, [r0, #12]
 8002dc2:	6643      	str	r3, [r0, #100]	; 0x64
 8002dc4:	81c2      	strh	r2, [r0, #14]
 8002dc6:	6183      	str	r3, [r0, #24]
 8002dc8:	4619      	mov	r1, r3
 8002dca:	2208      	movs	r2, #8
 8002dcc:	305c      	adds	r0, #92	; 0x5c
 8002dce:	f7ff fdef 	bl	80029b0 <memset>
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <std+0x38>)
 8002dd4:	6263      	str	r3, [r4, #36]	; 0x24
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <std+0x3c>)
 8002dd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <std+0x40>)
 8002ddc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002dde:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <std+0x44>)
 8002de0:	6224      	str	r4, [r4, #32]
 8002de2:	6323      	str	r3, [r4, #48]	; 0x30
 8002de4:	bd10      	pop	{r4, pc}
 8002de6:	bf00      	nop
 8002de8:	0800324d 	.word	0x0800324d
 8002dec:	0800326f 	.word	0x0800326f
 8002df0:	080032a7 	.word	0x080032a7
 8002df4:	080032cb 	.word	0x080032cb

08002df8 <_cleanup_r>:
 8002df8:	4901      	ldr	r1, [pc, #4]	; (8002e00 <_cleanup_r+0x8>)
 8002dfa:	f000 b8af 	b.w	8002f5c <_fwalk_reent>
 8002dfe:	bf00      	nop
 8002e00:	08002d39 	.word	0x08002d39

08002e04 <__sfmoreglue>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	2268      	movs	r2, #104	; 0x68
 8002e08:	1e4d      	subs	r5, r1, #1
 8002e0a:	4355      	muls	r5, r2
 8002e0c:	460e      	mov	r6, r1
 8002e0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002e12:	f000 f997 	bl	8003144 <_malloc_r>
 8002e16:	4604      	mov	r4, r0
 8002e18:	b140      	cbz	r0, 8002e2c <__sfmoreglue+0x28>
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	e9c0 1600 	strd	r1, r6, [r0]
 8002e20:	300c      	adds	r0, #12
 8002e22:	60a0      	str	r0, [r4, #8]
 8002e24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002e28:	f7ff fdc2 	bl	80029b0 <memset>
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	bd70      	pop	{r4, r5, r6, pc}

08002e30 <__sfp_lock_acquire>:
 8002e30:	4801      	ldr	r0, [pc, #4]	; (8002e38 <__sfp_lock_acquire+0x8>)
 8002e32:	f000 b8b3 	b.w	8002f9c <__retarget_lock_acquire_recursive>
 8002e36:	bf00      	nop
 8002e38:	200000d9 	.word	0x200000d9

08002e3c <__sfp_lock_release>:
 8002e3c:	4801      	ldr	r0, [pc, #4]	; (8002e44 <__sfp_lock_release+0x8>)
 8002e3e:	f000 b8ae 	b.w	8002f9e <__retarget_lock_release_recursive>
 8002e42:	bf00      	nop
 8002e44:	200000d9 	.word	0x200000d9

08002e48 <__sinit_lock_acquire>:
 8002e48:	4801      	ldr	r0, [pc, #4]	; (8002e50 <__sinit_lock_acquire+0x8>)
 8002e4a:	f000 b8a7 	b.w	8002f9c <__retarget_lock_acquire_recursive>
 8002e4e:	bf00      	nop
 8002e50:	200000da 	.word	0x200000da

08002e54 <__sinit_lock_release>:
 8002e54:	4801      	ldr	r0, [pc, #4]	; (8002e5c <__sinit_lock_release+0x8>)
 8002e56:	f000 b8a2 	b.w	8002f9e <__retarget_lock_release_recursive>
 8002e5a:	bf00      	nop
 8002e5c:	200000da 	.word	0x200000da

08002e60 <__sinit>:
 8002e60:	b510      	push	{r4, lr}
 8002e62:	4604      	mov	r4, r0
 8002e64:	f7ff fff0 	bl	8002e48 <__sinit_lock_acquire>
 8002e68:	69a3      	ldr	r3, [r4, #24]
 8002e6a:	b11b      	cbz	r3, 8002e74 <__sinit+0x14>
 8002e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e70:	f7ff bff0 	b.w	8002e54 <__sinit_lock_release>
 8002e74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002e78:	6523      	str	r3, [r4, #80]	; 0x50
 8002e7a:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <__sinit+0x68>)
 8002e7c:	4a13      	ldr	r2, [pc, #76]	; (8002ecc <__sinit+0x6c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	62a2      	str	r2, [r4, #40]	; 0x28
 8002e82:	42a3      	cmp	r3, r4
 8002e84:	bf04      	itt	eq
 8002e86:	2301      	moveq	r3, #1
 8002e88:	61a3      	streq	r3, [r4, #24]
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f000 f820 	bl	8002ed0 <__sfp>
 8002e90:	6060      	str	r0, [r4, #4]
 8002e92:	4620      	mov	r0, r4
 8002e94:	f000 f81c 	bl	8002ed0 <__sfp>
 8002e98:	60a0      	str	r0, [r4, #8]
 8002e9a:	4620      	mov	r0, r4
 8002e9c:	f000 f818 	bl	8002ed0 <__sfp>
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	60e0      	str	r0, [r4, #12]
 8002ea4:	2104      	movs	r1, #4
 8002ea6:	6860      	ldr	r0, [r4, #4]
 8002ea8:	f7ff ff82 	bl	8002db0 <std>
 8002eac:	68a0      	ldr	r0, [r4, #8]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	2109      	movs	r1, #9
 8002eb2:	f7ff ff7d 	bl	8002db0 <std>
 8002eb6:	68e0      	ldr	r0, [r4, #12]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	2112      	movs	r1, #18
 8002ebc:	f7ff ff78 	bl	8002db0 <std>
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	61a3      	str	r3, [r4, #24]
 8002ec4:	e7d2      	b.n	8002e6c <__sinit+0xc>
 8002ec6:	bf00      	nop
 8002ec8:	0800352c 	.word	0x0800352c
 8002ecc:	08002df9 	.word	0x08002df9

08002ed0 <__sfp>:
 8002ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed2:	4607      	mov	r7, r0
 8002ed4:	f7ff ffac 	bl	8002e30 <__sfp_lock_acquire>
 8002ed8:	4b1e      	ldr	r3, [pc, #120]	; (8002f54 <__sfp+0x84>)
 8002eda:	681e      	ldr	r6, [r3, #0]
 8002edc:	69b3      	ldr	r3, [r6, #24]
 8002ede:	b913      	cbnz	r3, 8002ee6 <__sfp+0x16>
 8002ee0:	4630      	mov	r0, r6
 8002ee2:	f7ff ffbd 	bl	8002e60 <__sinit>
 8002ee6:	3648      	adds	r6, #72	; 0x48
 8002ee8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	d503      	bpl.n	8002ef8 <__sfp+0x28>
 8002ef0:	6833      	ldr	r3, [r6, #0]
 8002ef2:	b30b      	cbz	r3, 8002f38 <__sfp+0x68>
 8002ef4:	6836      	ldr	r6, [r6, #0]
 8002ef6:	e7f7      	b.n	8002ee8 <__sfp+0x18>
 8002ef8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002efc:	b9d5      	cbnz	r5, 8002f34 <__sfp+0x64>
 8002efe:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <__sfp+0x88>)
 8002f00:	60e3      	str	r3, [r4, #12]
 8002f02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f06:	6665      	str	r5, [r4, #100]	; 0x64
 8002f08:	f000 f847 	bl	8002f9a <__retarget_lock_init_recursive>
 8002f0c:	f7ff ff96 	bl	8002e3c <__sfp_lock_release>
 8002f10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002f14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002f18:	6025      	str	r5, [r4, #0]
 8002f1a:	61a5      	str	r5, [r4, #24]
 8002f1c:	2208      	movs	r2, #8
 8002f1e:	4629      	mov	r1, r5
 8002f20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002f24:	f7ff fd44 	bl	80029b0 <memset>
 8002f28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002f2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002f30:	4620      	mov	r0, r4
 8002f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f34:	3468      	adds	r4, #104	; 0x68
 8002f36:	e7d9      	b.n	8002eec <__sfp+0x1c>
 8002f38:	2104      	movs	r1, #4
 8002f3a:	4638      	mov	r0, r7
 8002f3c:	f7ff ff62 	bl	8002e04 <__sfmoreglue>
 8002f40:	4604      	mov	r4, r0
 8002f42:	6030      	str	r0, [r6, #0]
 8002f44:	2800      	cmp	r0, #0
 8002f46:	d1d5      	bne.n	8002ef4 <__sfp+0x24>
 8002f48:	f7ff ff78 	bl	8002e3c <__sfp_lock_release>
 8002f4c:	230c      	movs	r3, #12
 8002f4e:	603b      	str	r3, [r7, #0]
 8002f50:	e7ee      	b.n	8002f30 <__sfp+0x60>
 8002f52:	bf00      	nop
 8002f54:	0800352c 	.word	0x0800352c
 8002f58:	ffff0001 	.word	0xffff0001

08002f5c <_fwalk_reent>:
 8002f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f60:	4606      	mov	r6, r0
 8002f62:	4688      	mov	r8, r1
 8002f64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002f68:	2700      	movs	r7, #0
 8002f6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f6e:	f1b9 0901 	subs.w	r9, r9, #1
 8002f72:	d505      	bpl.n	8002f80 <_fwalk_reent+0x24>
 8002f74:	6824      	ldr	r4, [r4, #0]
 8002f76:	2c00      	cmp	r4, #0
 8002f78:	d1f7      	bne.n	8002f6a <_fwalk_reent+0xe>
 8002f7a:	4638      	mov	r0, r7
 8002f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f80:	89ab      	ldrh	r3, [r5, #12]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d907      	bls.n	8002f96 <_fwalk_reent+0x3a>
 8002f86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	d003      	beq.n	8002f96 <_fwalk_reent+0x3a>
 8002f8e:	4629      	mov	r1, r5
 8002f90:	4630      	mov	r0, r6
 8002f92:	47c0      	blx	r8
 8002f94:	4307      	orrs	r7, r0
 8002f96:	3568      	adds	r5, #104	; 0x68
 8002f98:	e7e9      	b.n	8002f6e <_fwalk_reent+0x12>

08002f9a <__retarget_lock_init_recursive>:
 8002f9a:	4770      	bx	lr

08002f9c <__retarget_lock_acquire_recursive>:
 8002f9c:	4770      	bx	lr

08002f9e <__retarget_lock_release_recursive>:
 8002f9e:	4770      	bx	lr

08002fa0 <__swhatbuf_r>:
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	460e      	mov	r6, r1
 8002fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fa8:	2900      	cmp	r1, #0
 8002faa:	b096      	sub	sp, #88	; 0x58
 8002fac:	4614      	mov	r4, r2
 8002fae:	461d      	mov	r5, r3
 8002fb0:	da08      	bge.n	8002fc4 <__swhatbuf_r+0x24>
 8002fb2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	602a      	str	r2, [r5, #0]
 8002fba:	061a      	lsls	r2, r3, #24
 8002fbc:	d410      	bmi.n	8002fe0 <__swhatbuf_r+0x40>
 8002fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fc2:	e00e      	b.n	8002fe2 <__swhatbuf_r+0x42>
 8002fc4:	466a      	mov	r2, sp
 8002fc6:	f000 f9a7 	bl	8003318 <_fstat_r>
 8002fca:	2800      	cmp	r0, #0
 8002fcc:	dbf1      	blt.n	8002fb2 <__swhatbuf_r+0x12>
 8002fce:	9a01      	ldr	r2, [sp, #4]
 8002fd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002fd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002fd8:	425a      	negs	r2, r3
 8002fda:	415a      	adcs	r2, r3
 8002fdc:	602a      	str	r2, [r5, #0]
 8002fde:	e7ee      	b.n	8002fbe <__swhatbuf_r+0x1e>
 8002fe0:	2340      	movs	r3, #64	; 0x40
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	6023      	str	r3, [r4, #0]
 8002fe6:	b016      	add	sp, #88	; 0x58
 8002fe8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002fec <__smakebuf_r>:
 8002fec:	898b      	ldrh	r3, [r1, #12]
 8002fee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ff0:	079d      	lsls	r5, r3, #30
 8002ff2:	4606      	mov	r6, r0
 8002ff4:	460c      	mov	r4, r1
 8002ff6:	d507      	bpl.n	8003008 <__smakebuf_r+0x1c>
 8002ff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002ffc:	6023      	str	r3, [r4, #0]
 8002ffe:	6123      	str	r3, [r4, #16]
 8003000:	2301      	movs	r3, #1
 8003002:	6163      	str	r3, [r4, #20]
 8003004:	b002      	add	sp, #8
 8003006:	bd70      	pop	{r4, r5, r6, pc}
 8003008:	ab01      	add	r3, sp, #4
 800300a:	466a      	mov	r2, sp
 800300c:	f7ff ffc8 	bl	8002fa0 <__swhatbuf_r>
 8003010:	9900      	ldr	r1, [sp, #0]
 8003012:	4605      	mov	r5, r0
 8003014:	4630      	mov	r0, r6
 8003016:	f000 f895 	bl	8003144 <_malloc_r>
 800301a:	b948      	cbnz	r0, 8003030 <__smakebuf_r+0x44>
 800301c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003020:	059a      	lsls	r2, r3, #22
 8003022:	d4ef      	bmi.n	8003004 <__smakebuf_r+0x18>
 8003024:	f023 0303 	bic.w	r3, r3, #3
 8003028:	f043 0302 	orr.w	r3, r3, #2
 800302c:	81a3      	strh	r3, [r4, #12]
 800302e:	e7e3      	b.n	8002ff8 <__smakebuf_r+0xc>
 8003030:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <__smakebuf_r+0x7c>)
 8003032:	62b3      	str	r3, [r6, #40]	; 0x28
 8003034:	89a3      	ldrh	r3, [r4, #12]
 8003036:	6020      	str	r0, [r4, #0]
 8003038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800303c:	81a3      	strh	r3, [r4, #12]
 800303e:	9b00      	ldr	r3, [sp, #0]
 8003040:	6163      	str	r3, [r4, #20]
 8003042:	9b01      	ldr	r3, [sp, #4]
 8003044:	6120      	str	r0, [r4, #16]
 8003046:	b15b      	cbz	r3, 8003060 <__smakebuf_r+0x74>
 8003048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800304c:	4630      	mov	r0, r6
 800304e:	f000 f975 	bl	800333c <_isatty_r>
 8003052:	b128      	cbz	r0, 8003060 <__smakebuf_r+0x74>
 8003054:	89a3      	ldrh	r3, [r4, #12]
 8003056:	f023 0303 	bic.w	r3, r3, #3
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	81a3      	strh	r3, [r4, #12]
 8003060:	89a0      	ldrh	r0, [r4, #12]
 8003062:	4305      	orrs	r5, r0
 8003064:	81a5      	strh	r5, [r4, #12]
 8003066:	e7cd      	b.n	8003004 <__smakebuf_r+0x18>
 8003068:	08002df9 	.word	0x08002df9

0800306c <_free_r>:
 800306c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800306e:	2900      	cmp	r1, #0
 8003070:	d044      	beq.n	80030fc <_free_r+0x90>
 8003072:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003076:	9001      	str	r0, [sp, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	f1a1 0404 	sub.w	r4, r1, #4
 800307e:	bfb8      	it	lt
 8003080:	18e4      	addlt	r4, r4, r3
 8003082:	f000 f97d 	bl	8003380 <__malloc_lock>
 8003086:	4a1e      	ldr	r2, [pc, #120]	; (8003100 <_free_r+0x94>)
 8003088:	9801      	ldr	r0, [sp, #4]
 800308a:	6813      	ldr	r3, [r2, #0]
 800308c:	b933      	cbnz	r3, 800309c <_free_r+0x30>
 800308e:	6063      	str	r3, [r4, #4]
 8003090:	6014      	str	r4, [r2, #0]
 8003092:	b003      	add	sp, #12
 8003094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003098:	f000 b978 	b.w	800338c <__malloc_unlock>
 800309c:	42a3      	cmp	r3, r4
 800309e:	d908      	bls.n	80030b2 <_free_r+0x46>
 80030a0:	6825      	ldr	r5, [r4, #0]
 80030a2:	1961      	adds	r1, r4, r5
 80030a4:	428b      	cmp	r3, r1
 80030a6:	bf01      	itttt	eq
 80030a8:	6819      	ldreq	r1, [r3, #0]
 80030aa:	685b      	ldreq	r3, [r3, #4]
 80030ac:	1949      	addeq	r1, r1, r5
 80030ae:	6021      	streq	r1, [r4, #0]
 80030b0:	e7ed      	b.n	800308e <_free_r+0x22>
 80030b2:	461a      	mov	r2, r3
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	b10b      	cbz	r3, 80030bc <_free_r+0x50>
 80030b8:	42a3      	cmp	r3, r4
 80030ba:	d9fa      	bls.n	80030b2 <_free_r+0x46>
 80030bc:	6811      	ldr	r1, [r2, #0]
 80030be:	1855      	adds	r5, r2, r1
 80030c0:	42a5      	cmp	r5, r4
 80030c2:	d10b      	bne.n	80030dc <_free_r+0x70>
 80030c4:	6824      	ldr	r4, [r4, #0]
 80030c6:	4421      	add	r1, r4
 80030c8:	1854      	adds	r4, r2, r1
 80030ca:	42a3      	cmp	r3, r4
 80030cc:	6011      	str	r1, [r2, #0]
 80030ce:	d1e0      	bne.n	8003092 <_free_r+0x26>
 80030d0:	681c      	ldr	r4, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	6053      	str	r3, [r2, #4]
 80030d6:	4421      	add	r1, r4
 80030d8:	6011      	str	r1, [r2, #0]
 80030da:	e7da      	b.n	8003092 <_free_r+0x26>
 80030dc:	d902      	bls.n	80030e4 <_free_r+0x78>
 80030de:	230c      	movs	r3, #12
 80030e0:	6003      	str	r3, [r0, #0]
 80030e2:	e7d6      	b.n	8003092 <_free_r+0x26>
 80030e4:	6825      	ldr	r5, [r4, #0]
 80030e6:	1961      	adds	r1, r4, r5
 80030e8:	428b      	cmp	r3, r1
 80030ea:	bf04      	itt	eq
 80030ec:	6819      	ldreq	r1, [r3, #0]
 80030ee:	685b      	ldreq	r3, [r3, #4]
 80030f0:	6063      	str	r3, [r4, #4]
 80030f2:	bf04      	itt	eq
 80030f4:	1949      	addeq	r1, r1, r5
 80030f6:	6021      	streq	r1, [r4, #0]
 80030f8:	6054      	str	r4, [r2, #4]
 80030fa:	e7ca      	b.n	8003092 <_free_r+0x26>
 80030fc:	b003      	add	sp, #12
 80030fe:	bd30      	pop	{r4, r5, pc}
 8003100:	200000dc 	.word	0x200000dc

08003104 <sbrk_aligned>:
 8003104:	b570      	push	{r4, r5, r6, lr}
 8003106:	4e0e      	ldr	r6, [pc, #56]	; (8003140 <sbrk_aligned+0x3c>)
 8003108:	460c      	mov	r4, r1
 800310a:	6831      	ldr	r1, [r6, #0]
 800310c:	4605      	mov	r5, r0
 800310e:	b911      	cbnz	r1, 8003116 <sbrk_aligned+0x12>
 8003110:	f000 f88c 	bl	800322c <_sbrk_r>
 8003114:	6030      	str	r0, [r6, #0]
 8003116:	4621      	mov	r1, r4
 8003118:	4628      	mov	r0, r5
 800311a:	f000 f887 	bl	800322c <_sbrk_r>
 800311e:	1c43      	adds	r3, r0, #1
 8003120:	d00a      	beq.n	8003138 <sbrk_aligned+0x34>
 8003122:	1cc4      	adds	r4, r0, #3
 8003124:	f024 0403 	bic.w	r4, r4, #3
 8003128:	42a0      	cmp	r0, r4
 800312a:	d007      	beq.n	800313c <sbrk_aligned+0x38>
 800312c:	1a21      	subs	r1, r4, r0
 800312e:	4628      	mov	r0, r5
 8003130:	f000 f87c 	bl	800322c <_sbrk_r>
 8003134:	3001      	adds	r0, #1
 8003136:	d101      	bne.n	800313c <sbrk_aligned+0x38>
 8003138:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800313c:	4620      	mov	r0, r4
 800313e:	bd70      	pop	{r4, r5, r6, pc}
 8003140:	200000e0 	.word	0x200000e0

08003144 <_malloc_r>:
 8003144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003148:	1ccd      	adds	r5, r1, #3
 800314a:	f025 0503 	bic.w	r5, r5, #3
 800314e:	3508      	adds	r5, #8
 8003150:	2d0c      	cmp	r5, #12
 8003152:	bf38      	it	cc
 8003154:	250c      	movcc	r5, #12
 8003156:	2d00      	cmp	r5, #0
 8003158:	4607      	mov	r7, r0
 800315a:	db01      	blt.n	8003160 <_malloc_r+0x1c>
 800315c:	42a9      	cmp	r1, r5
 800315e:	d905      	bls.n	800316c <_malloc_r+0x28>
 8003160:	230c      	movs	r3, #12
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	2600      	movs	r6, #0
 8003166:	4630      	mov	r0, r6
 8003168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800316c:	4e2e      	ldr	r6, [pc, #184]	; (8003228 <_malloc_r+0xe4>)
 800316e:	f000 f907 	bl	8003380 <__malloc_lock>
 8003172:	6833      	ldr	r3, [r6, #0]
 8003174:	461c      	mov	r4, r3
 8003176:	bb34      	cbnz	r4, 80031c6 <_malloc_r+0x82>
 8003178:	4629      	mov	r1, r5
 800317a:	4638      	mov	r0, r7
 800317c:	f7ff ffc2 	bl	8003104 <sbrk_aligned>
 8003180:	1c43      	adds	r3, r0, #1
 8003182:	4604      	mov	r4, r0
 8003184:	d14d      	bne.n	8003222 <_malloc_r+0xde>
 8003186:	6834      	ldr	r4, [r6, #0]
 8003188:	4626      	mov	r6, r4
 800318a:	2e00      	cmp	r6, #0
 800318c:	d140      	bne.n	8003210 <_malloc_r+0xcc>
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	4631      	mov	r1, r6
 8003192:	4638      	mov	r0, r7
 8003194:	eb04 0803 	add.w	r8, r4, r3
 8003198:	f000 f848 	bl	800322c <_sbrk_r>
 800319c:	4580      	cmp	r8, r0
 800319e:	d13a      	bne.n	8003216 <_malloc_r+0xd2>
 80031a0:	6821      	ldr	r1, [r4, #0]
 80031a2:	3503      	adds	r5, #3
 80031a4:	1a6d      	subs	r5, r5, r1
 80031a6:	f025 0503 	bic.w	r5, r5, #3
 80031aa:	3508      	adds	r5, #8
 80031ac:	2d0c      	cmp	r5, #12
 80031ae:	bf38      	it	cc
 80031b0:	250c      	movcc	r5, #12
 80031b2:	4629      	mov	r1, r5
 80031b4:	4638      	mov	r0, r7
 80031b6:	f7ff ffa5 	bl	8003104 <sbrk_aligned>
 80031ba:	3001      	adds	r0, #1
 80031bc:	d02b      	beq.n	8003216 <_malloc_r+0xd2>
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	442b      	add	r3, r5
 80031c2:	6023      	str	r3, [r4, #0]
 80031c4:	e00e      	b.n	80031e4 <_malloc_r+0xa0>
 80031c6:	6822      	ldr	r2, [r4, #0]
 80031c8:	1b52      	subs	r2, r2, r5
 80031ca:	d41e      	bmi.n	800320a <_malloc_r+0xc6>
 80031cc:	2a0b      	cmp	r2, #11
 80031ce:	d916      	bls.n	80031fe <_malloc_r+0xba>
 80031d0:	1961      	adds	r1, r4, r5
 80031d2:	42a3      	cmp	r3, r4
 80031d4:	6025      	str	r5, [r4, #0]
 80031d6:	bf18      	it	ne
 80031d8:	6059      	strne	r1, [r3, #4]
 80031da:	6863      	ldr	r3, [r4, #4]
 80031dc:	bf08      	it	eq
 80031de:	6031      	streq	r1, [r6, #0]
 80031e0:	5162      	str	r2, [r4, r5]
 80031e2:	604b      	str	r3, [r1, #4]
 80031e4:	4638      	mov	r0, r7
 80031e6:	f104 060b 	add.w	r6, r4, #11
 80031ea:	f000 f8cf 	bl	800338c <__malloc_unlock>
 80031ee:	f026 0607 	bic.w	r6, r6, #7
 80031f2:	1d23      	adds	r3, r4, #4
 80031f4:	1af2      	subs	r2, r6, r3
 80031f6:	d0b6      	beq.n	8003166 <_malloc_r+0x22>
 80031f8:	1b9b      	subs	r3, r3, r6
 80031fa:	50a3      	str	r3, [r4, r2]
 80031fc:	e7b3      	b.n	8003166 <_malloc_r+0x22>
 80031fe:	6862      	ldr	r2, [r4, #4]
 8003200:	42a3      	cmp	r3, r4
 8003202:	bf0c      	ite	eq
 8003204:	6032      	streq	r2, [r6, #0]
 8003206:	605a      	strne	r2, [r3, #4]
 8003208:	e7ec      	b.n	80031e4 <_malloc_r+0xa0>
 800320a:	4623      	mov	r3, r4
 800320c:	6864      	ldr	r4, [r4, #4]
 800320e:	e7b2      	b.n	8003176 <_malloc_r+0x32>
 8003210:	4634      	mov	r4, r6
 8003212:	6876      	ldr	r6, [r6, #4]
 8003214:	e7b9      	b.n	800318a <_malloc_r+0x46>
 8003216:	230c      	movs	r3, #12
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	4638      	mov	r0, r7
 800321c:	f000 f8b6 	bl	800338c <__malloc_unlock>
 8003220:	e7a1      	b.n	8003166 <_malloc_r+0x22>
 8003222:	6025      	str	r5, [r4, #0]
 8003224:	e7de      	b.n	80031e4 <_malloc_r+0xa0>
 8003226:	bf00      	nop
 8003228:	200000dc 	.word	0x200000dc

0800322c <_sbrk_r>:
 800322c:	b538      	push	{r3, r4, r5, lr}
 800322e:	4d06      	ldr	r5, [pc, #24]	; (8003248 <_sbrk_r+0x1c>)
 8003230:	2300      	movs	r3, #0
 8003232:	4604      	mov	r4, r0
 8003234:	4608      	mov	r0, r1
 8003236:	602b      	str	r3, [r5, #0]
 8003238:	f7fd ff32 	bl	80010a0 <_sbrk>
 800323c:	1c43      	adds	r3, r0, #1
 800323e:	d102      	bne.n	8003246 <_sbrk_r+0x1a>
 8003240:	682b      	ldr	r3, [r5, #0]
 8003242:	b103      	cbz	r3, 8003246 <_sbrk_r+0x1a>
 8003244:	6023      	str	r3, [r4, #0]
 8003246:	bd38      	pop	{r3, r4, r5, pc}
 8003248:	200000e4 	.word	0x200000e4

0800324c <__sread>:
 800324c:	b510      	push	{r4, lr}
 800324e:	460c      	mov	r4, r1
 8003250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003254:	f000 f8a0 	bl	8003398 <_read_r>
 8003258:	2800      	cmp	r0, #0
 800325a:	bfab      	itete	ge
 800325c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800325e:	89a3      	ldrhlt	r3, [r4, #12]
 8003260:	181b      	addge	r3, r3, r0
 8003262:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003266:	bfac      	ite	ge
 8003268:	6563      	strge	r3, [r4, #84]	; 0x54
 800326a:	81a3      	strhlt	r3, [r4, #12]
 800326c:	bd10      	pop	{r4, pc}

0800326e <__swrite>:
 800326e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003272:	461f      	mov	r7, r3
 8003274:	898b      	ldrh	r3, [r1, #12]
 8003276:	05db      	lsls	r3, r3, #23
 8003278:	4605      	mov	r5, r0
 800327a:	460c      	mov	r4, r1
 800327c:	4616      	mov	r6, r2
 800327e:	d505      	bpl.n	800328c <__swrite+0x1e>
 8003280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003284:	2302      	movs	r3, #2
 8003286:	2200      	movs	r2, #0
 8003288:	f000 f868 	bl	800335c <_lseek_r>
 800328c:	89a3      	ldrh	r3, [r4, #12]
 800328e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003292:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003296:	81a3      	strh	r3, [r4, #12]
 8003298:	4632      	mov	r2, r6
 800329a:	463b      	mov	r3, r7
 800329c:	4628      	mov	r0, r5
 800329e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032a2:	f000 b817 	b.w	80032d4 <_write_r>

080032a6 <__sseek>:
 80032a6:	b510      	push	{r4, lr}
 80032a8:	460c      	mov	r4, r1
 80032aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032ae:	f000 f855 	bl	800335c <_lseek_r>
 80032b2:	1c43      	adds	r3, r0, #1
 80032b4:	89a3      	ldrh	r3, [r4, #12]
 80032b6:	bf15      	itete	ne
 80032b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80032ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80032be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80032c2:	81a3      	strheq	r3, [r4, #12]
 80032c4:	bf18      	it	ne
 80032c6:	81a3      	strhne	r3, [r4, #12]
 80032c8:	bd10      	pop	{r4, pc}

080032ca <__sclose>:
 80032ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032ce:	f000 b813 	b.w	80032f8 <_close_r>
	...

080032d4 <_write_r>:
 80032d4:	b538      	push	{r3, r4, r5, lr}
 80032d6:	4d07      	ldr	r5, [pc, #28]	; (80032f4 <_write_r+0x20>)
 80032d8:	4604      	mov	r4, r0
 80032da:	4608      	mov	r0, r1
 80032dc:	4611      	mov	r1, r2
 80032de:	2200      	movs	r2, #0
 80032e0:	602a      	str	r2, [r5, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	f7fd fc8e 	bl	8000c04 <_write>
 80032e8:	1c43      	adds	r3, r0, #1
 80032ea:	d102      	bne.n	80032f2 <_write_r+0x1e>
 80032ec:	682b      	ldr	r3, [r5, #0]
 80032ee:	b103      	cbz	r3, 80032f2 <_write_r+0x1e>
 80032f0:	6023      	str	r3, [r4, #0]
 80032f2:	bd38      	pop	{r3, r4, r5, pc}
 80032f4:	200000e4 	.word	0x200000e4

080032f8 <_close_r>:
 80032f8:	b538      	push	{r3, r4, r5, lr}
 80032fa:	4d06      	ldr	r5, [pc, #24]	; (8003314 <_close_r+0x1c>)
 80032fc:	2300      	movs	r3, #0
 80032fe:	4604      	mov	r4, r0
 8003300:	4608      	mov	r0, r1
 8003302:	602b      	str	r3, [r5, #0]
 8003304:	f7fd fe97 	bl	8001036 <_close>
 8003308:	1c43      	adds	r3, r0, #1
 800330a:	d102      	bne.n	8003312 <_close_r+0x1a>
 800330c:	682b      	ldr	r3, [r5, #0]
 800330e:	b103      	cbz	r3, 8003312 <_close_r+0x1a>
 8003310:	6023      	str	r3, [r4, #0]
 8003312:	bd38      	pop	{r3, r4, r5, pc}
 8003314:	200000e4 	.word	0x200000e4

08003318 <_fstat_r>:
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	4d07      	ldr	r5, [pc, #28]	; (8003338 <_fstat_r+0x20>)
 800331c:	2300      	movs	r3, #0
 800331e:	4604      	mov	r4, r0
 8003320:	4608      	mov	r0, r1
 8003322:	4611      	mov	r1, r2
 8003324:	602b      	str	r3, [r5, #0]
 8003326:	f7fd fe92 	bl	800104e <_fstat>
 800332a:	1c43      	adds	r3, r0, #1
 800332c:	d102      	bne.n	8003334 <_fstat_r+0x1c>
 800332e:	682b      	ldr	r3, [r5, #0]
 8003330:	b103      	cbz	r3, 8003334 <_fstat_r+0x1c>
 8003332:	6023      	str	r3, [r4, #0]
 8003334:	bd38      	pop	{r3, r4, r5, pc}
 8003336:	bf00      	nop
 8003338:	200000e4 	.word	0x200000e4

0800333c <_isatty_r>:
 800333c:	b538      	push	{r3, r4, r5, lr}
 800333e:	4d06      	ldr	r5, [pc, #24]	; (8003358 <_isatty_r+0x1c>)
 8003340:	2300      	movs	r3, #0
 8003342:	4604      	mov	r4, r0
 8003344:	4608      	mov	r0, r1
 8003346:	602b      	str	r3, [r5, #0]
 8003348:	f7fd fe91 	bl	800106e <_isatty>
 800334c:	1c43      	adds	r3, r0, #1
 800334e:	d102      	bne.n	8003356 <_isatty_r+0x1a>
 8003350:	682b      	ldr	r3, [r5, #0]
 8003352:	b103      	cbz	r3, 8003356 <_isatty_r+0x1a>
 8003354:	6023      	str	r3, [r4, #0]
 8003356:	bd38      	pop	{r3, r4, r5, pc}
 8003358:	200000e4 	.word	0x200000e4

0800335c <_lseek_r>:
 800335c:	b538      	push	{r3, r4, r5, lr}
 800335e:	4d07      	ldr	r5, [pc, #28]	; (800337c <_lseek_r+0x20>)
 8003360:	4604      	mov	r4, r0
 8003362:	4608      	mov	r0, r1
 8003364:	4611      	mov	r1, r2
 8003366:	2200      	movs	r2, #0
 8003368:	602a      	str	r2, [r5, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	f7fd fe8a 	bl	8001084 <_lseek>
 8003370:	1c43      	adds	r3, r0, #1
 8003372:	d102      	bne.n	800337a <_lseek_r+0x1e>
 8003374:	682b      	ldr	r3, [r5, #0]
 8003376:	b103      	cbz	r3, 800337a <_lseek_r+0x1e>
 8003378:	6023      	str	r3, [r4, #0]
 800337a:	bd38      	pop	{r3, r4, r5, pc}
 800337c:	200000e4 	.word	0x200000e4

08003380 <__malloc_lock>:
 8003380:	4801      	ldr	r0, [pc, #4]	; (8003388 <__malloc_lock+0x8>)
 8003382:	f7ff be0b 	b.w	8002f9c <__retarget_lock_acquire_recursive>
 8003386:	bf00      	nop
 8003388:	200000d8 	.word	0x200000d8

0800338c <__malloc_unlock>:
 800338c:	4801      	ldr	r0, [pc, #4]	; (8003394 <__malloc_unlock+0x8>)
 800338e:	f7ff be06 	b.w	8002f9e <__retarget_lock_release_recursive>
 8003392:	bf00      	nop
 8003394:	200000d8 	.word	0x200000d8

08003398 <_read_r>:
 8003398:	b538      	push	{r3, r4, r5, lr}
 800339a:	4d07      	ldr	r5, [pc, #28]	; (80033b8 <_read_r+0x20>)
 800339c:	4604      	mov	r4, r0
 800339e:	4608      	mov	r0, r1
 80033a0:	4611      	mov	r1, r2
 80033a2:	2200      	movs	r2, #0
 80033a4:	602a      	str	r2, [r5, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	f7fd fe28 	bl	8000ffc <_read>
 80033ac:	1c43      	adds	r3, r0, #1
 80033ae:	d102      	bne.n	80033b6 <_read_r+0x1e>
 80033b0:	682b      	ldr	r3, [r5, #0]
 80033b2:	b103      	cbz	r3, 80033b6 <_read_r+0x1e>
 80033b4:	6023      	str	r3, [r4, #0]
 80033b6:	bd38      	pop	{r3, r4, r5, pc}
 80033b8:	200000e4 	.word	0x200000e4

080033bc <_init>:
 80033bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033be:	bf00      	nop
 80033c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033c2:	bc08      	pop	{r3}
 80033c4:	469e      	mov	lr, r3
 80033c6:	4770      	bx	lr

080033c8 <_fini>:
 80033c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ca:	bf00      	nop
 80033cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ce:	bc08      	pop	{r3}
 80033d0:	469e      	mov	lr, r3
 80033d2:	4770      	bx	lr
