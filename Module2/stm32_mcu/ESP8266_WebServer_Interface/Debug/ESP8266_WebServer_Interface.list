
ESP8266_WebServer_Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000411c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  080042ec  080042ec  000142ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004948  08004948  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08004948  08004948  00014948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004950  08004950  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004950  08004950  00014950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004954  08004954  00014954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000080  080049d8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  080049d8  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa79  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d26  00000000  00000000  0002ab29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0002c850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000768  00000000  00000000  0002d058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021751  00000000  00000000  0002d7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3d6  00000000  00000000  0004ef11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8b1e  00000000  00000000  0005a2e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122e05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002380  00000000  00000000  00122e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080042d4 	.word	0x080042d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	080042d4 	.word	0x080042d4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b098      	sub	sp, #96	; 0x60
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 80005ee:	f000 fa5f 	bl	8000ab0 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n", wifi_uart);
 80005f2:	495d      	ldr	r1, [pc, #372]	; (8000768 <ESP_Init+0x184>)
 80005f4:	485d      	ldr	r0, [pc, #372]	; (800076c <ESP_Init+0x188>)
 80005f6:	f000 fc78 	bl	8000eea <Uart_sendstring>
	Uart_sendstring("RESETTING.", pc_uart); //Reset the ESP and for loop for 5 second delay
 80005fa:	495d      	ldr	r1, [pc, #372]	; (8000770 <ESP_Init+0x18c>)
 80005fc:	485d      	ldr	r0, [pc, #372]	; (8000774 <ESP_Init+0x190>)
 80005fe:	f000 fc74 	bl	8000eea <Uart_sendstring>
	for (int i=0; i<5; i++)
 8000602:	2300      	movs	r3, #0
 8000604:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000606:	e00a      	b.n	800061e <ESP_Init+0x3a>
	{
		Uart_sendstring(".", pc_uart);
 8000608:	4959      	ldr	r1, [pc, #356]	; (8000770 <ESP_Init+0x18c>)
 800060a:	485b      	ldr	r0, [pc, #364]	; (8000778 <ESP_Init+0x194>)
 800060c:	f000 fc6d 	bl	8000eea <Uart_sendstring>
		HAL_Delay(1000);
 8000610:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000614:	f001 f93e 	bl	8001894 <HAL_Delay>
	for (int i=0; i<5; i++)
 8000618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800061a:	3301      	adds	r3, #1
 800061c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800061e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000620:	2b04      	cmp	r3, #4
 8000622:	ddf1      	ble.n	8000608 <ESP_Init+0x24>
	}

	/********* AT **********/
	Uart_sendstring("AT\r\n", wifi_uart);  // Send AT and wait for ok response
 8000624:	4950      	ldr	r1, [pc, #320]	; (8000768 <ESP_Init+0x184>)
 8000626:	4855      	ldr	r0, [pc, #340]	; (800077c <ESP_Init+0x198>)
 8000628:	f000 fc5f 	bl	8000eea <Uart_sendstring>
	while(!(Wait_for("AT\r\r\n\r\nOK\r\n", wifi_uart)));
 800062c:	bf00      	nop
 800062e:	494e      	ldr	r1, [pc, #312]	; (8000768 <ESP_Init+0x184>)
 8000630:	4853      	ldr	r0, [pc, #332]	; (8000780 <ESP_Init+0x19c>)
 8000632:	f000 fceb 	bl	800100c <Wait_for>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d0f8      	beq.n	800062e <ESP_Init+0x4a>
	Uart_sendstring("AT---->OK\n\n", pc_uart);
 800063c:	494c      	ldr	r1, [pc, #304]	; (8000770 <ESP_Init+0x18c>)
 800063e:	4851      	ldr	r0, [pc, #324]	; (8000784 <ESP_Init+0x1a0>)
 8000640:	f000 fc53 	bl	8000eea <Uart_sendstring>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart); //Set the module in Station Mode
 8000644:	4948      	ldr	r1, [pc, #288]	; (8000768 <ESP_Init+0x184>)
 8000646:	4850      	ldr	r0, [pc, #320]	; (8000788 <ESP_Init+0x1a4>)
 8000648:	f000 fc4f 	bl	8000eea <Uart_sendstring>
	while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n", wifi_uart)));
 800064c:	bf00      	nop
 800064e:	4946      	ldr	r1, [pc, #280]	; (8000768 <ESP_Init+0x184>)
 8000650:	484e      	ldr	r0, [pc, #312]	; (800078c <ESP_Init+0x1a8>)
 8000652:	f000 fcdb 	bl	800100c <Wait_for>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d0f8      	beq.n	800064e <ESP_Init+0x6a>
	Uart_sendstring("CW MODE---->1\n\n", pc_uart);
 800065c:	4944      	ldr	r1, [pc, #272]	; (8000770 <ESP_Init+0x18c>)
 800065e:	484c      	ldr	r0, [pc, #304]	; (8000790 <ESP_Init+0x1ac>)
 8000660:	f000 fc43 	bl	8000eea <Uart_sendstring>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_sendstring("connecting... to the provided AP\n", pc_uart); //join the access point
 8000664:	4942      	ldr	r1, [pc, #264]	; (8000770 <ESP_Init+0x18c>)
 8000666:	484b      	ldr	r0, [pc, #300]	; (8000794 <ESP_Init+0x1b0>)
 8000668:	f000 fc3f 	bl	8000eea <Uart_sendstring>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 800066c:	f107 0008 	add.w	r0, r7, #8
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	4948      	ldr	r1, [pc, #288]	; (8000798 <ESP_Init+0x1b4>)
 8000676:	f003 f9b1 	bl	80039dc <siprintf>
	Uart_sendstring(data, wifi_uart);
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	493a      	ldr	r1, [pc, #232]	; (8000768 <ESP_Init+0x184>)
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fc32 	bl	8000eea <Uart_sendstring>
	while (!(Wait_for("WIFI GOT IP\r\n\r\nOK\r\n", wifi_uart)));
 8000686:	bf00      	nop
 8000688:	4937      	ldr	r1, [pc, #220]	; (8000768 <ESP_Init+0x184>)
 800068a:	4844      	ldr	r0, [pc, #272]	; (800079c <ESP_Init+0x1b8>)
 800068c:	f000 fcbe 	bl	800100c <Wait_for>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0f8      	beq.n	8000688 <ESP_Init+0xa4>
	sprintf (data, "Connected to,\"%s\"\n\n", SSID);
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	4940      	ldr	r1, [pc, #256]	; (80007a0 <ESP_Init+0x1bc>)
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 f99c 	bl	80039dc <siprintf>
	Uart_sendstring(data,pc_uart);
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	4931      	ldr	r1, [pc, #196]	; (8000770 <ESP_Init+0x18c>)
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fc1d 	bl	8000eea <Uart_sendstring>


	/********* AT+CIFSR **********/
	Uart_sendstring("AT+CIFSR\r\n", wifi_uart); //Querry for the IP Address
 80006b0:	492d      	ldr	r1, [pc, #180]	; (8000768 <ESP_Init+0x184>)
 80006b2:	483c      	ldr	r0, [pc, #240]	; (80007a4 <ESP_Init+0x1c0>)
 80006b4:	f000 fc19 	bl	8000eea <Uart_sendstring>
	while (!(Wait_for("CIFSR:STAIP,\"", wifi_uart)));
 80006b8:	bf00      	nop
 80006ba:	492b      	ldr	r1, [pc, #172]	; (8000768 <ESP_Init+0x184>)
 80006bc:	483a      	ldr	r0, [pc, #232]	; (80007a8 <ESP_Init+0x1c4>)
 80006be:	f000 fca5 	bl	800100c <Wait_for>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d0f8      	beq.n	80006ba <ESP_Init+0xd6>
	while (!(Copy_upto("\"",buffer, wifi_uart)));
 80006c8:	bf00      	nop
 80006ca:	4a27      	ldr	r2, [pc, #156]	; (8000768 <ESP_Init+0x184>)
 80006cc:	4937      	ldr	r1, [pc, #220]	; (80007ac <ESP_Init+0x1c8>)
 80006ce:	4838      	ldr	r0, [pc, #224]	; (80007b0 <ESP_Init+0x1cc>)
 80006d0:	f000 fc22 	bl	8000f18 <Copy_upto>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d0f7      	beq.n	80006ca <ESP_Init+0xe6>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 80006da:	bf00      	nop
 80006dc:	4922      	ldr	r1, [pc, #136]	; (8000768 <ESP_Init+0x184>)
 80006de:	4835      	ldr	r0, [pc, #212]	; (80007b4 <ESP_Init+0x1d0>)
 80006e0:	f000 fc94 	bl	800100c <Wait_for>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d0f8      	beq.n	80006dc <ESP_Init+0xf8>
	int len = strlen (buffer);
 80006ea:	4830      	ldr	r0, [pc, #192]	; (80007ac <ESP_Init+0x1c8>)
 80006ec:	f7ff fd9a 	bl	8000224 <strlen>
 80006f0:	4603      	mov	r3, r0
 80006f2:	65bb      	str	r3, [r7, #88]	; 0x58
	buffer[len-1] = '\0';
 80006f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006f6:	3b01      	subs	r3, #1
 80006f8:	4a2c      	ldr	r2, [pc, #176]	; (80007ac <ESP_Init+0x1c8>)
 80006fa:	2100      	movs	r1, #0
 80006fc:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP ADDR: %s\n\n", buffer);
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	4a2a      	ldr	r2, [pc, #168]	; (80007ac <ESP_Init+0x1c8>)
 8000704:	492c      	ldr	r1, [pc, #176]	; (80007b8 <ESP_Init+0x1d4>)
 8000706:	4618      	mov	r0, r3
 8000708:	f003 f968 	bl	80039dc <siprintf>
	Uart_sendstring(data, pc_uart);
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	4917      	ldr	r1, [pc, #92]	; (8000770 <ESP_Init+0x18c>)
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fbe9 	bl	8000eea <Uart_sendstring>


	Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 8000718:	4913      	ldr	r1, [pc, #76]	; (8000768 <ESP_Init+0x184>)
 800071a:	4828      	ldr	r0, [pc, #160]	; (80007bc <ESP_Init+0x1d8>)
 800071c:	f000 fbe5 	bl	8000eea <Uart_sendstring>
	while (!(Wait_for("AT+CIPMUX=1\r\r\n\r\nOK\r\n", wifi_uart)));
 8000720:	bf00      	nop
 8000722:	4911      	ldr	r1, [pc, #68]	; (8000768 <ESP_Init+0x184>)
 8000724:	4826      	ldr	r0, [pc, #152]	; (80007c0 <ESP_Init+0x1dc>)
 8000726:	f000 fc71 	bl	800100c <Wait_for>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0f8      	beq.n	8000722 <ESP_Init+0x13e>
	Uart_sendstring("CIPMUX---->OK\n\n", pc_uart);
 8000730:	490f      	ldr	r1, [pc, #60]	; (8000770 <ESP_Init+0x18c>)
 8000732:	4824      	ldr	r0, [pc, #144]	; (80007c4 <ESP_Init+0x1e0>)
 8000734:	f000 fbd9 	bl	8000eea <Uart_sendstring>

	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart); //Stop the server AT port 80
 8000738:	490b      	ldr	r1, [pc, #44]	; (8000768 <ESP_Init+0x184>)
 800073a:	4823      	ldr	r0, [pc, #140]	; (80007c8 <ESP_Init+0x1e4>)
 800073c:	f000 fbd5 	bl	8000eea <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000740:	bf00      	nop
 8000742:	4909      	ldr	r1, [pc, #36]	; (8000768 <ESP_Init+0x184>)
 8000744:	481b      	ldr	r0, [pc, #108]	; (80007b4 <ESP_Init+0x1d0>)
 8000746:	f000 fc61 	bl	800100c <Wait_for>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d0f8      	beq.n	8000742 <ESP_Init+0x15e>
	Uart_sendstring("CIPSERVER---->OK\n\n", pc_uart);
 8000750:	4907      	ldr	r1, [pc, #28]	; (8000770 <ESP_Init+0x18c>)
 8000752:	481e      	ldr	r0, [pc, #120]	; (80007cc <ESP_Init+0x1e8>)
 8000754:	f000 fbc9 	bl	8000eea <Uart_sendstring>

	Uart_sendstring("Now Connect to the IP ADRESS\n\n", pc_uart);
 8000758:	4905      	ldr	r1, [pc, #20]	; (8000770 <ESP_Init+0x18c>)
 800075a:	481d      	ldr	r0, [pc, #116]	; (80007d0 <ESP_Init+0x1ec>)
 800075c:	f000 fbc5 	bl	8000eea <Uart_sendstring>

}
 8000760:	bf00      	nop
 8000762:	3760      	adds	r7, #96	; 0x60
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200001e0 	.word	0x200001e0
 800076c:	080046f0 	.word	0x080046f0
 8000770:	20000224 	.word	0x20000224
 8000774:	080046fc 	.word	0x080046fc
 8000778:	08004708 	.word	0x08004708
 800077c:	0800470c 	.word	0x0800470c
 8000780:	08004714 	.word	0x08004714
 8000784:	08004720 	.word	0x08004720
 8000788:	0800472c 	.word	0x0800472c
 800078c:	0800473c 	.word	0x0800473c
 8000790:	08004754 	.word	0x08004754
 8000794:	08004764 	.word	0x08004764
 8000798:	08004788 	.word	0x08004788
 800079c:	080047a0 	.word	0x080047a0
 80007a0:	080047b4 	.word	0x080047b4
 80007a4:	080047c8 	.word	0x080047c8
 80007a8:	080047d4 	.word	0x080047d4
 80007ac:	2000009c 	.word	0x2000009c
 80007b0:	080047e4 	.word	0x080047e4
 80007b4:	080047e8 	.word	0x080047e8
 80007b8:	080047f0 	.word	0x080047f0
 80007bc:	08004800 	.word	0x08004800
 80007c0:	08004810 	.word	0x08004810
 80007c4:	08004828 	.word	0x08004828
 80007c8:	08004838 	.word	0x08004838
 80007cc:	0800484c 	.word	0x0800484c
 80007d0:	08004860 	.word	0x08004860

080007d4 <Server_Send>:




int Server_Send (char *str, int Link_ID) // It will send string to the device
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b098      	sub	sp, #96	; 0x60
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff fd20 	bl	8000224 <strlen>
 80007e4:	4603      	mov	r3, r0
 80007e6:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 80007e8:	f107 000c 	add.w	r0, r7, #12
 80007ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	491a      	ldr	r1, [pc, #104]	; (800085c <Server_Send+0x88>)
 80007f2:	f003 f8f3 	bl	80039dc <siprintf>
	Uart_sendstring(data, wifi_uart);
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	4919      	ldr	r1, [pc, #100]	; (8000860 <Server_Send+0x8c>)
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 fb74 	bl	8000eea <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)));
 8000802:	bf00      	nop
 8000804:	4916      	ldr	r1, [pc, #88]	; (8000860 <Server_Send+0x8c>)
 8000806:	4817      	ldr	r0, [pc, #92]	; (8000864 <Server_Send+0x90>)
 8000808:	f000 fc00 	bl	800100c <Wait_for>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0f8      	beq.n	8000804 <Server_Send+0x30>
	Uart_sendstring (str, wifi_uart);
 8000812:	4913      	ldr	r1, [pc, #76]	; (8000860 <Server_Send+0x8c>)
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f000 fb68 	bl	8000eea <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)));
 800081a:	bf00      	nop
 800081c:	4910      	ldr	r1, [pc, #64]	; (8000860 <Server_Send+0x8c>)
 800081e:	4812      	ldr	r0, [pc, #72]	; (8000868 <Server_Send+0x94>)
 8000820:	f000 fbf4 	bl	800100c <Wait_for>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d0f8      	beq.n	800081c <Server_Send+0x48>
	sprintf (data, "AT+CIPCLOSE=5\r\n");
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	490f      	ldr	r1, [pc, #60]	; (800086c <Server_Send+0x98>)
 8000830:	4618      	mov	r0, r3
 8000832:	f003 f8d3 	bl	80039dc <siprintf>
	Uart_sendstring(data, wifi_uart);
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4909      	ldr	r1, [pc, #36]	; (8000860 <Server_Send+0x8c>)
 800083c:	4618      	mov	r0, r3
 800083e:	f000 fb54 	bl	8000eea <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000842:	bf00      	nop
 8000844:	4906      	ldr	r1, [pc, #24]	; (8000860 <Server_Send+0x8c>)
 8000846:	480a      	ldr	r0, [pc, #40]	; (8000870 <Server_Send+0x9c>)
 8000848:	f000 fbe0 	bl	800100c <Wait_for>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d0f8      	beq.n	8000844 <Server_Send+0x70>
	return 1;
 8000852:	2301      	movs	r3, #1
}
 8000854:	4618      	mov	r0, r3
 8000856:	3760      	adds	r7, #96	; 0x60
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	08004880 	.word	0x08004880
 8000860:	200001e0 	.word	0x200001e0
 8000864:	08004894 	.word	0x08004894
 8000868:	08004898 	.word	0x08004898
 800086c:	080048a0 	.word	0x080048a0
 8000870:	080047e8 	.word	0x080047e8

08000874 <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800087a:	af00      	add	r7, sp, #0
 800087c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000880:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000884:	6018      	str	r0, [r3, #0]
 8000886:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800088a:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800088e:	6019      	str	r1, [r3, #0]
	char datatosend[1024] = {0};
 8000890:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000894:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	3304      	adds	r3, #4
 800089e:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f003 f891 	bl	80039cc <memset>
	if (!(strcmp (str, "/ledon")))
 80008aa:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80008ae:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80008b2:	493f      	ldr	r1, [pc, #252]	; (80009b0 <Server_Handle+0x13c>)
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	f7ff fcab 	bl	8000210 <strcmp>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d122      	bne.n	8000906 <Server_Handle+0x92>
	{
		sprintf (datatosend, Basic_inclusion);
 80008c0:	4b3c      	ldr	r3, [pc, #240]	; (80009b4 <Server_Handle+0x140>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	f107 0308 	add.w	r3, r7, #8
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f003 f886 	bl	80039dc <siprintf>
		strcat(datatosend, LED_ON);
 80008d0:	4b39      	ldr	r3, [pc, #228]	; (80009b8 <Server_Handle+0x144>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	f107 0308 	add.w	r3, r7, #8
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f003 f89e 	bl	8003a1c <strcat>
		strcat(datatosend, Terminate);
 80008e0:	4b36      	ldr	r3, [pc, #216]	; (80009bc <Server_Handle+0x148>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	4611      	mov	r1, r2
 80008ea:	4618      	mov	r0, r3
 80008ec:	f003 f896 	bl	8003a1c <strcat>
		Server_Send(datatosend, Link_ID);
 80008f0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80008f4:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80008f8:	f107 0208 	add.w	r2, r7, #8
 80008fc:	6819      	ldr	r1, [r3, #0]
 80008fe:	4610      	mov	r0, r2
 8000900:	f7ff ff68 	bl	80007d4 <Server_Send>
		strcat(datatosend, LED_OFF);
		strcat(datatosend, Terminate);
		Server_Send(datatosend, Link_ID);
	}

}
 8000904:	e04f      	b.n	80009a6 <Server_Handle+0x132>
	else if (!(strcmp (str, "/ledoff")))
 8000906:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800090a:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800090e:	492c      	ldr	r1, [pc, #176]	; (80009c0 <Server_Handle+0x14c>)
 8000910:	6818      	ldr	r0, [r3, #0]
 8000912:	f7ff fc7d 	bl	8000210 <strcmp>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d122      	bne.n	8000962 <Server_Handle+0xee>
		sprintf (datatosend, Basic_inclusion);
 800091c:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <Server_Handle+0x140>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f003 f858 	bl	80039dc <siprintf>
		strcat(datatosend, LED_OFF);
 800092c:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <Server_Handle+0x150>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f003 f870 	bl	8003a1c <strcat>
		strcat(datatosend, Terminate);
 800093c:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <Server_Handle+0x148>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	4611      	mov	r1, r2
 8000946:	4618      	mov	r0, r3
 8000948:	f003 f868 	bl	8003a1c <strcat>
		Server_Send(datatosend, Link_ID);
 800094c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000950:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8000954:	f107 0208 	add.w	r2, r7, #8
 8000958:	6819      	ldr	r1, [r3, #0]
 800095a:	4610      	mov	r0, r2
 800095c:	f7ff ff3a 	bl	80007d4 <Server_Send>
}
 8000960:	e021      	b.n	80009a6 <Server_Handle+0x132>
		sprintf (datatosend, Basic_inclusion);
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <Server_Handle+0x140>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f003 f835 	bl	80039dc <siprintf>
		strcat(datatosend, LED_OFF);
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <Server_Handle+0x150>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	4611      	mov	r1, r2
 800097c:	4618      	mov	r0, r3
 800097e:	f003 f84d 	bl	8003a1c <strcat>
		strcat(datatosend, Terminate);
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <Server_Handle+0x148>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	4611      	mov	r1, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f003 f845 	bl	8003a1c <strcat>
		Server_Send(datatosend, Link_ID);
 8000992:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000996:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800099a:	f107 0208 	add.w	r2, r7, #8
 800099e:	6819      	ldr	r1, [r3, #0]
 80009a0:	4610      	mov	r0, r2
 80009a2:	f7ff ff17 	bl	80007d4 <Server_Send>
}
 80009a6:	bf00      	nop
 80009a8:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	080048b0 	.word	0x080048b0
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000004 	.word	0x20000004
 80009bc:	2000000c 	.word	0x2000000c
 80009c0:	080048b8 	.word	0x080048b8
 80009c4:	20000008 	.word	0x20000008

080009c8 <Server_Start>:

void Server_Start (void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b092      	sub	sp, #72	; 0x48
 80009cc:	af00      	add	r7, sp, #0
	char buftocopyinto[64] = {0};
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	223c      	movs	r2, #60	; 0x3c
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 fff6 	bl	80039cc <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID, wifi_uart)));
 80009e0:	bf00      	nop
 80009e2:	1dfa      	adds	r2, r7, #7
 80009e4:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <Server_Start+0xc8>)
 80009e6:	2101      	movs	r1, #1
 80009e8:	482a      	ldr	r0, [pc, #168]	; (8000a94 <Server_Start+0xcc>)
 80009ea:	f000 fa4f 	bl	8000e8c <Get_after>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d0f6      	beq.n	80009e2 <Server_Start+0x1a>
	Link_ID -= 48;
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	3b30      	subs	r3, #48	; 0x30
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftocopyinto, wifi_uart)));
 80009fc:	bf00      	nop
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <Server_Start+0xc8>)
 8000a04:	4619      	mov	r1, r3
 8000a06:	4824      	ldr	r0, [pc, #144]	; (8000a98 <Server_Start+0xd0>)
 8000a08:	f000 fa86 	bl	8000f18 <Copy_upto>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d0f5      	beq.n	80009fe <Server_Start+0x36>
	if (Look_for("/ledon", buftocopyinto) == 1)
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	4619      	mov	r1, r3
 8000a18:	4820      	ldr	r0, [pc, #128]	; (8000a9c <Server_Start+0xd4>)
 8000a1a:	f000 f8b0 	bl	8000b7e <Look_for>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d10a      	bne.n	8000a3a <Server_Start+0x72>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2120      	movs	r1, #32
 8000a28:	481d      	ldr	r0, [pc, #116]	; (8000aa0 <Server_Start+0xd8>)
 8000a2a:	f001 fa8f 	bl	8001f4c <HAL_GPIO_WritePin>
		Server_Handle("/ledon",Link_ID);
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	4619      	mov	r1, r3
 8000a32:	481a      	ldr	r0, [pc, #104]	; (8000a9c <Server_Start+0xd4>)
 8000a34:	f7ff ff1e 	bl	8000874 <Server_Handle>
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
		Server_Handle("/ ", Link_ID);
	}
}
 8000a38:	e026      	b.n	8000a88 <Server_Start+0xc0>
	else if (Look_for("/ledoff", buftocopyinto) == 1)
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4818      	ldr	r0, [pc, #96]	; (8000aa4 <Server_Start+0xdc>)
 8000a42:	f000 f89c 	bl	8000b7e <Look_for>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d10a      	bne.n	8000a62 <Server_Start+0x9a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2120      	movs	r1, #32
 8000a50:	4813      	ldr	r0, [pc, #76]	; (8000aa0 <Server_Start+0xd8>)
 8000a52:	f001 fa7b 	bl	8001f4c <HAL_GPIO_WritePin>
		Server_Handle("/ledoff",Link_ID);
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4812      	ldr	r0, [pc, #72]	; (8000aa4 <Server_Start+0xdc>)
 8000a5c:	f7ff ff0a 	bl	8000874 <Server_Handle>
}
 8000a60:	e012      	b.n	8000a88 <Server_Start+0xc0>
	else if (Look_for("/favicon.ico", buftocopyinto) == 1);
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	4619      	mov	r1, r3
 8000a68:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <Server_Start+0xe0>)
 8000a6a:	f000 f888 	bl	8000b7e <Look_for>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d009      	beq.n	8000a88 <Server_Start+0xc0>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2120      	movs	r1, #32
 8000a78:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <Server_Start+0xd8>)
 8000a7a:	f001 fa67 	bl	8001f4c <HAL_GPIO_WritePin>
		Server_Handle("/ ", Link_ID);
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	4619      	mov	r1, r3
 8000a82:	480a      	ldr	r0, [pc, #40]	; (8000aac <Server_Start+0xe4>)
 8000a84:	f7ff fef6 	bl	8000874 <Server_Handle>
}
 8000a88:	bf00      	nop
 8000a8a:	3748      	adds	r7, #72	; 0x48
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200001e0 	.word	0x200001e0
 8000a94:	080048c0 	.word	0x080048c0
 8000a98:	080048c8 	.word	0x080048c8
 8000a9c:	080048b0 	.word	0x080048b0
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	080048b8 	.word	0x080048b8
 8000aa8:	080048d4 	.word	0x080048d4
 8000aac:	080048e4 	.word	0x080048e4

08000ab0 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <Ringbuf_init+0x68>)
 8000ab6:	4a19      	ldr	r2, [pc, #100]	; (8000b1c <Ringbuf_init+0x6c>)
 8000ab8:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <Ringbuf_init+0x70>)
 8000abc:	4a19      	ldr	r2, [pc, #100]	; (8000b24 <Ringbuf_init+0x74>)
 8000abe:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <Ringbuf_init+0x78>)
 8000ac2:	4a1a      	ldr	r2, [pc, #104]	; (8000b2c <Ringbuf_init+0x7c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <Ringbuf_init+0x80>)
 8000ac8:	4a1a      	ldr	r2, [pc, #104]	; (8000b34 <Ringbuf_init+0x84>)
 8000aca:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 8000acc:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <Ringbuf_init+0x88>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	695a      	ldr	r2, [r3, #20]
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <Ringbuf_init+0x88>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f042 0201 	orr.w	r2, r2, #1
 8000ada:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <Ringbuf_init+0x8c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	695a      	ldr	r2, [r3, #20]
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <Ringbuf_init+0x8c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f042 0201 	orr.w	r2, r2, #1
 8000aea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <Ringbuf_init+0x88>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	68da      	ldr	r2, [r3, #12]
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <Ringbuf_init+0x88>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f042 0220 	orr.w	r2, r2, #32
 8000afa:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <Ringbuf_init+0x8c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	68da      	ldr	r2, [r3, #12]
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <Ringbuf_init+0x8c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f042 0220 	orr.w	r2, r2, #32
 8000b0a:	60da      	str	r2, [r3, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	200001d0 	.word	0x200001d0
 8000b1c:	200000b0 	.word	0x200000b0
 8000b20:	200001d4 	.word	0x200001d4
 8000b24:	200000f8 	.word	0x200000f8
 8000b28:	200001d8 	.word	0x200001d8
 8000b2c:	20000140 	.word	0x20000140
 8000b30:	200001dc 	.word	0x200001dc
 8000b34:	20000188 	.word	0x20000188
 8000b38:	200001e0 	.word	0x200001e0
 8000b3c:	20000224 	.word	0x20000224

08000b40 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	3301      	adds	r3, #1
 8000b52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b56:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d007      	beq.n	8000b72 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	79f9      	ldrb	r1, [r7, #7]
 8000b6a:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <Look_for>:


int Look_for (char *str, char *buffertolookinto)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff fb4b 	bl	8000224 <strlen>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8000b92:	6838      	ldr	r0, [r7, #0]
 8000b94:	f7ff fb46 	bl	8000224 <strlen>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8000ba4:	e002      	b.n	8000bac <Look_for+0x2e>
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	781a      	ldrb	r2, [r3, #0]
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	6839      	ldr	r1, [r7, #0]
 8000bb8:	440b      	add	r3, r1
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d1f2      	bne.n	8000ba6 <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx]){
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	6839      	ldr	r1, [r7, #0]
 8000bcc:	440b      	add	r3, r1
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d111      	bne.n	8000bf8 <Look_for+0x7a>
	while (str[so_far] == buffertolookinto[indx])
 8000bd4:	e005      	b.n	8000be2 <Look_for+0x64>
	{
		so_far++;
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
		indx++;
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	3301      	adds	r3, #1
 8000be0:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	4413      	add	r3, r2
 8000be8:	781a      	ldrb	r2, [r3, #0]
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	6839      	ldr	r1, [r7, #0]
 8000bee:	440b      	add	r3, r1
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d0ef      	beq.n	8000bd6 <Look_for+0x58>
 8000bf6:	e008      	b.n	8000c0a <Look_for+0x8c>
	}
	}

	else
		{
			so_far =0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	dbcf      	blt.n	8000ba4 <Look_for+0x26>
 8000c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c08:	e007      	b.n	8000c1a <Look_for+0x9c>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d101      	bne.n	8000c16 <Look_for+0x98>
 8000c12:	2301      	movs	r3, #1
 8000c14:	e001      	b.n	8000c1a <Look_for+0x9c>
	else return -1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <Uart_peek>:
	}
}


int Uart_peek(UART_HandleTypeDef *uart)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <Uart_peek+0x70>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d111      	bne.n	8000c58 <Uart_peek+0x34>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <Uart_peek+0x74>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <Uart_peek+0x74>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d102      	bne.n	8000c4a <Uart_peek+0x26>
		  {
		    return -1;
 8000c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c48:	e01e      	b.n	8000c88 <Uart_peek+0x64>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <Uart_peek+0x74>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <Uart_peek+0x74>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c54:	5cd3      	ldrb	r3, [r2, r3]
 8000c56:	e017      	b.n	8000c88 <Uart_peek+0x64>
		  }
	}

	else if (uart == pc_uart)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <Uart_peek+0x78>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d111      	bne.n	8000c84 <Uart_peek+0x60>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <Uart_peek+0x7c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <Uart_peek+0x7c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d102      	bne.n	8000c76 <Uart_peek+0x52>
		  {
		    return -1;
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c74:	e008      	b.n	8000c88 <Uart_peek+0x64>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <Uart_peek+0x7c>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <Uart_peek+0x7c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c80:	5cd3      	ldrb	r3, [r2, r3]
 8000c82:	e001      	b.n	8000c88 <Uart_peek+0x64>
		  }
	}

	return -1;
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	200001e0 	.word	0x200001e0
 8000c98:	200001d0 	.word	0x200001d0
 8000c9c:	20000224 	.word	0x20000224
 8000ca0:	200001d8 	.word	0x200001d8

08000ca4 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a24      	ldr	r2, [pc, #144]	; (8000d40 <Uart_read+0x9c>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d11c      	bne.n	8000cee <Uart_read+0x4a>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8000cb4:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <Uart_read+0xa0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cba:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <Uart_read+0xa0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d102      	bne.n	8000cca <Uart_read+0x26>
		  {
		    return -1;
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cc8:	e034      	b.n	8000d34 <Uart_read+0x90>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000cca:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <Uart_read+0xa0>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <Uart_read+0xa0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd4:	5cd3      	ldrb	r3, [r2, r3]
 8000cd6:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <Uart_read+0xa0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <Uart_read+0xa0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ce8:	645a      	str	r2, [r3, #68]	; 0x44
		    return c;
 8000cea:	7bbb      	ldrb	r3, [r7, #14]
 8000cec:	e022      	b.n	8000d34 <Uart_read+0x90>
		  }
	}

	else if (uart == pc_uart)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <Uart_read+0xa4>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d11c      	bne.n	8000d30 <Uart_read+0x8c>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <Uart_read+0xa8>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <Uart_read+0xa8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d102      	bne.n	8000d0c <Uart_read+0x68>
		  {
		    return -1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d0a:	e013      	b.n	8000d34 <Uart_read+0x90>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <Uart_read+0xa8>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <Uart_read+0xa8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	5cd3      	ldrb	r3, [r2, r3]
 8000d18:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <Uart_read+0xa8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d20:	1c5a      	adds	r2, r3, #1
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <Uart_read+0xa8>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d2a:	645a      	str	r2, [r3, #68]	; 0x44
		    return c;
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	e001      	b.n	8000d34 <Uart_read+0x90>
		  }
	}

	else return -1;
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	200001e0 	.word	0x200001e0
 8000d44:	200001d0 	.word	0x200001d0
 8000d48:	20000224 	.word	0x20000224
 8000d4c:	200001d8 	.word	0x200001d8

08000d50 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db4c      	blt.n	8000dfa <Uart_write+0xaa>
	{
		if (uart == device_uart){
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	4a29      	ldr	r2, [pc, #164]	; (8000e08 <Uart_write+0xb8>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d122      	bne.n	8000dae <Uart_write+0x5e>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8000d68:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <Uart_write+0xbc>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	3301      	adds	r3, #1
 8000d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d74:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 8000d76:	bf00      	nop
 8000d78:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <Uart_write+0xbc>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d0f9      	beq.n	8000d78 <Uart_write+0x28>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8000d84:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <Uart_write+0xbc>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <Uart_write+0xbc>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	b2c9      	uxtb	r1, r1
 8000d92:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 8000d94:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <Uart_write+0xbc>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	68ba      	ldr	r2, [r7, #8]
 8000d9a:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <Uart_write+0xb8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	68da      	ldr	r2, [r3, #12]
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <Uart_write+0xb8>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000daa:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 8000dac:	e025      	b.n	8000dfa <Uart_write+0xaa>
		else if (uart == pc_uart){
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <Uart_write+0xc0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d121      	bne.n	8000dfa <Uart_write+0xaa>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <Uart_write+0xc4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000dc2:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8000dc4:	bf00      	nop
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <Uart_write+0xc4>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d0f9      	beq.n	8000dc6 <Uart_write+0x76>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <Uart_write+0xc4>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <Uart_write+0xc4>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	b2c9      	uxtb	r1, r1
 8000de0:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <Uart_write+0xc4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <Uart_write+0xc0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <Uart_write+0xc0>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000df8:	60da      	str	r2, [r3, #12]
}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	200001e0 	.word	0x200001e0
 8000e0c:	200001d4 	.word	0x200001d4
 8000e10:	20000224 	.word	0x20000224
 8000e14:	200001dc 	.word	0x200001dc

08000e18 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a16      	ldr	r2, [pc, #88]	; (8000e7c <IsDataAvailable+0x64>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d10e      	bne.n	8000e46 <IsDataAvailable+0x2e>
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <IsDataAvailable+0x68>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <IsDataAvailable+0x68>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	3340      	adds	r3, #64	; 0x40
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e44:	e014      	b.n	8000e70 <IsDataAvailable+0x58>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <IsDataAvailable+0x6c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d10e      	bne.n	8000e6c <IsDataAvailable+0x54>
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <IsDataAvailable+0x70>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <IsDataAvailable+0x70>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	3340      	adds	r3, #64	; 0x40
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e6a:	e001      	b.n	8000e70 <IsDataAvailable+0x58>
	return -1;
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	200001e0 	.word	0x200001e0
 8000e80:	200001d0 	.word	0x200001d0
 8000e84:	20000224 	.word	0x20000224
 8000e88:	200001d8 	.word	0x200001d8

08000e8c <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string, uart) != 1);
 8000e9c:	bf00      	nop
 8000e9e:	6839      	ldr	r1, [r7, #0]
 8000ea0:	68f8      	ldr	r0, [r7, #12]
 8000ea2:	f000 f8b3 	bl	800100c <Wait_for>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d1f8      	bne.n	8000e9e <Get_after+0x12>
	for (int indx=0; indx<numberofchars; indx++)
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	e012      	b.n	8000ed8 <Get_after+0x4c>
	{
		while (!(IsDataAvailable(uart)));
 8000eb2:	bf00      	nop
 8000eb4:	6838      	ldr	r0, [r7, #0]
 8000eb6:	f7ff ffaf 	bl	8000e18 <IsDataAvailable>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d0f9      	beq.n	8000eb4 <Get_after+0x28>
		buffertosave[indx] = Uart_read(uart);
 8000ec0:	6838      	ldr	r0, [r7, #0]
 8000ec2:	f7ff feef 	bl	8000ca4 <Uart_read>
 8000ec6:	4601      	mov	r1, r0
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	b2ca      	uxtb	r2, r1
 8000ed0:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	7afb      	ldrb	r3, [r7, #11]
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	dbe8      	blt.n	8000eb2 <Get_after+0x26>
	}
	return 1;
 8000ee0:	2301      	movs	r3, #1
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 8000ef4:	e007      	b.n	8000f06 <Uart_sendstring+0x1c>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	1c5a      	adds	r2, r3, #1
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	6839      	ldr	r1, [r7, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff25 	bl	8000d50 <Uart_write>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f3      	bne.n	8000ef6 <Uart_sendstring+0xc>
}
 8000f0e:	bf00      	nop
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f7ff f97b 	bl	8000224 <strlen>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 8000f36:	bf00      	nop
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff ff6d 	bl	8000e18 <IsDataAvailable>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d0f9      	beq.n	8000f38 <Copy_upto+0x20>
	while (Uart_peek(uart) != string[so_far])
 8000f44:	e01c      	b.n	8000f80 <Copy_upto+0x68>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000f46:	4b30      	ldr	r3, [pc, #192]	; (8001008 <Copy_upto+0xf0>)
 8000f48:	6819      	ldr	r1, [r3, #0]
 8000f4a:	4b2f      	ldr	r3, [pc, #188]	; (8001008 <Copy_upto+0xf0>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	68b8      	ldr	r0, [r7, #8]
 8000f54:	4403      	add	r3, r0
 8000f56:	5c8a      	ldrb	r2, [r1, r2]
 8000f58:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000f5a:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <Copy_upto+0xf0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f60:	1c5a      	adds	r2, r3, #1
 8000f62:	4b29      	ldr	r3, [pc, #164]	; (8001008 <Copy_upto+0xf0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f6a:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 8000f72:	bf00      	nop
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff4f 	bl	8000e18 <IsDataAvailable>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0f9      	beq.n	8000f74 <Copy_upto+0x5c>
	while (Uart_peek(uart) != string[so_far])
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff fe4f 	bl	8000c24 <Uart_peek>
 8000f86:	4601      	mov	r1, r0
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4299      	cmp	r1, r3
 8000f92:	d1d8      	bne.n	8000f46 <Copy_upto+0x2e>

		}
	while (Uart_peek(uart) == string [so_far])
 8000f94:	e01b      	b.n	8000fce <Copy_upto+0xb6>
	{
		so_far++;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff fe81 	bl	8000ca4 <Uart_read>
 8000fa2:	4601      	mov	r1, r0
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	61ba      	str	r2, [r7, #24]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	4413      	add	r3, r2
 8000fb0:	b2ca      	uxtb	r2, r1
 8000fb2:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d101      	bne.n	8000fc0 <Copy_upto+0xa8>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e01f      	b.n	8001000 <Copy_upto+0xe8>
		while (!IsDataAvailable(uart));
 8000fc0:	bf00      	nop
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ff28 	bl	8000e18 <IsDataAvailable>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f9      	beq.n	8000fc2 <Copy_upto+0xaa>
	while (Uart_peek(uart) == string [so_far])
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff fe28 	bl	8000c24 <Uart_peek>
 8000fd4:	4601      	mov	r1, r0
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4299      	cmp	r1, r3
 8000fe0:	d0d9      	beq.n	8000f96 <Copy_upto+0x7e>
	}

	if (so_far != len)
 8000fe2:	69fa      	ldr	r2, [r7, #28]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d002      	beq.n	8000ff0 <Copy_upto+0xd8>
	{
		so_far = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
		goto again;
 8000fee:	e7a2      	b.n	8000f36 <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d101      	bne.n	8000ffc <Copy_upto+0xe4>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e001      	b.n	8001000 <Copy_upto+0xe8>
	else return -1;
 8000ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

}
 8001000:	4618      	mov	r0, r3
 8001002:	3720      	adds	r7, #32
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200001d0 	.word	0x200001d0

0800100c <Wait_for>:

int Wait_for (char *string, UART_HandleTypeDef *uart)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff f902 	bl	8000224 <strlen>
 8001020:	4603      	mov	r3, r0
 8001022:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable(uart));
 8001024:	bf00      	nop
 8001026:	6838      	ldr	r0, [r7, #0]
 8001028:	f7ff fef6 	bl	8000e18 <IsDataAvailable>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f9      	beq.n	8001026 <Wait_for+0x1a>
	if (uart == device_uart)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	4a30      	ldr	r2, [pc, #192]	; (80010f8 <Wait_for+0xec>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d114      	bne.n	8001064 <Wait_for+0x58>
		while (Uart_peek(uart) != string[so_far]) _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 800103a:	e008      	b.n	800104e <Wait_for+0x42>
 800103c:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <Wait_for+0xf0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <Wait_for+0xf0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800104c:	645a      	str	r2, [r3, #68]	; 0x44
 800104e:	6838      	ldr	r0, [r7, #0]
 8001050:	f7ff fde8 	bl	8000c24 <Uart_peek>
 8001054:	4601      	mov	r1, r0
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	4299      	cmp	r1, r3
 8001060:	d1ec      	bne.n	800103c <Wait_for+0x30>
 8001062:	e02b      	b.n	80010bc <Wait_for+0xb0>
	else if (uart == pc_uart)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	4a26      	ldr	r2, [pc, #152]	; (8001100 <Wait_for+0xf4>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d127      	bne.n	80010bc <Wait_for+0xb0>
		while (Uart_peek(uart) != string[so_far]) _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 800106c:	e008      	b.n	8001080 <Wait_for+0x74>
 800106e:	4b25      	ldr	r3, [pc, #148]	; (8001104 <Wait_for+0xf8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001074:	1c5a      	adds	r2, r3, #1
 8001076:	4b23      	ldr	r3, [pc, #140]	; (8001104 <Wait_for+0xf8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800107e:	645a      	str	r2, [r3, #68]	; 0x44
 8001080:	6838      	ldr	r0, [r7, #0]
 8001082:	f7ff fdcf 	bl	8000c24 <Uart_peek>
 8001086:	4601      	mov	r1, r0
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4299      	cmp	r1, r3
 8001092:	d1ec      	bne.n	800106e <Wait_for+0x62>
	while (Uart_peek(uart) == string [so_far])
 8001094:	e012      	b.n	80010bc <Wait_for+0xb0>
	{
		so_far++;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	3301      	adds	r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 800109c:	6838      	ldr	r0, [r7, #0]
 800109e:	f7ff fe01 	bl	8000ca4 <Uart_read>
		if (so_far == len) return 1;
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d101      	bne.n	80010ae <Wait_for+0xa2>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e01f      	b.n	80010ee <Wait_for+0xe2>
		while (!IsDataAvailable(uart));
 80010ae:	bf00      	nop
 80010b0:	6838      	ldr	r0, [r7, #0]
 80010b2:	f7ff feb1 	bl	8000e18 <IsDataAvailable>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0f9      	beq.n	80010b0 <Wait_for+0xa4>
	while (Uart_peek(uart) == string [so_far])
 80010bc:	6838      	ldr	r0, [r7, #0]
 80010be:	f7ff fdb1 	bl	8000c24 <Uart_peek>
 80010c2:	4601      	mov	r1, r0
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4299      	cmp	r1, r3
 80010ce:	d0e2      	beq.n	8001096 <Wait_for+0x8a>
	}

	if (so_far != len)
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d002      	beq.n	80010de <Wait_for+0xd2>
	{
		so_far = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
		goto again;
 80010dc:	e7a2      	b.n	8001024 <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d101      	bne.n	80010ea <Wait_for+0xde>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e001      	b.n	80010ee <Wait_for+0xe2>
	else return -1;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200001e0 	.word	0x200001e0
 80010fc:	200001d0 	.word	0x200001d0
 8001100:	20000224 	.word	0x20000224
 8001104:	200001d8 	.word	0x200001d8

08001108 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f003 0320 	and.w	r3, r3, #32
 8001126:	2b00      	cmp	r3, #0
 8001128:	d023      	beq.n	8001172 <Uart_isr+0x6a>
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	f003 0320 	and.w	r3, r3, #32
 8001130:	2b00      	cmp	r3, #0
 8001132:	d01e      	beq.n	8001172 <Uart_isr+0x6a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a3a      	ldr	r2, [pc, #232]	; (8001230 <Uart_isr+0x128>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d107      	bne.n	800115a <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 800114a:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <Uart_isr+0x12c>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	4611      	mov	r1, r2
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fcf4 	bl	8000b40 <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 8001158:	e063      	b.n	8001222 <Uart_isr+0x11a>
        else if (huart == pc_uart)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a36      	ldr	r2, [pc, #216]	; (8001238 <Uart_isr+0x130>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d15f      	bne.n	8001222 <Uart_isr+0x11a>
           	store_char (c, _rx_buffer2);  // store data in buffer
 8001162:	4b36      	ldr	r3, [pc, #216]	; (800123c <Uart_isr+0x134>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	4611      	mov	r1, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fce8 	bl	8000b40 <store_char>
        return;
 8001170:	e057      	b.n	8001222 <Uart_isr+0x11a>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001178:	2b00      	cmp	r3, #0
 800117a:	d055      	beq.n	8001228 <Uart_isr+0x120>
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001182:	2b00      	cmp	r3, #0
 8001184:	d050      	beq.n	8001228 <Uart_isr+0x120>
    {
    	if (huart == device_uart){
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a29      	ldr	r2, [pc, #164]	; (8001230 <Uart_isr+0x128>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d122      	bne.n	80011d4 <Uart_isr+0xcc>
    	if(tx_buffer1.head == tx_buffer1.tail)
 800118e:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <Uart_isr+0x138>)
 8001190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001192:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <Uart_isr+0x138>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	429a      	cmp	r2, r3
 8001198:	d108      	bne.n	80011ac <Uart_isr+0xa4>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011a8:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 80011aa:	e03c      	b.n	8001226 <Uart_isr+0x11e>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <Uart_isr+0x138>)
 80011ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b0:	4a23      	ldr	r2, [pc, #140]	; (8001240 <Uart_isr+0x138>)
 80011b2:	5cd3      	ldrb	r3, [r2, r3]
 80011b4:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 80011b6:	4b22      	ldr	r3, [pc, #136]	; (8001240 <Uart_isr+0x138>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	3301      	adds	r3, #1
 80011bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011c0:	4a1f      	ldr	r2, [pc, #124]	; (8001240 <Uart_isr+0x138>)
 80011c2:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	7b7a      	ldrb	r2, [r7, #13]
 80011d0:	605a      	str	r2, [r3, #4]
    	return;
 80011d2:	e028      	b.n	8001226 <Uart_isr+0x11e>
    	else if (huart == pc_uart){
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a18      	ldr	r2, [pc, #96]	; (8001238 <Uart_isr+0x130>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d124      	bne.n	8001226 <Uart_isr+0x11e>
        	if(tx_buffer2.head == tx_buffer2.tail)
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <Uart_isr+0x13c>)
 80011de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <Uart_isr+0x13c>)
 80011e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d108      	bne.n	80011fa <Uart_isr+0xf2>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011f6:	60da      	str	r2, [r3, #12]
    	return;
 80011f8:	e015      	b.n	8001226 <Uart_isr+0x11e>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <Uart_isr+0x13c>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	4a11      	ldr	r2, [pc, #68]	; (8001244 <Uart_isr+0x13c>)
 8001200:	5cd3      	ldrb	r3, [r2, r3]
 8001202:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <Uart_isr+0x13c>)
 8001206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001208:	3301      	adds	r3, #1
 800120a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800120e:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <Uart_isr+0x13c>)
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
        	      huart->Instance->SR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	7bba      	ldrb	r2, [r7, #14]
 800121e:	605a      	str	r2, [r3, #4]
    	return;
 8001220:	e001      	b.n	8001226 <Uart_isr+0x11e>
        return;
 8001222:	bf00      	nop
 8001224:	e000      	b.n	8001228 <Uart_isr+0x120>
    	return;
 8001226:	bf00      	nop
    }
}
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200001e0 	.word	0x200001e0
 8001234:	200001d0 	.word	0x200001d0
 8001238:	20000224 	.word	0x20000224
 800123c:	200001d8 	.word	0x200001d8
 8001240:	200000f8 	.word	0x200000f8
 8001244:	20000188 	.word	0x20000188

08001248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124c:	f000 fab0 	bl	80017b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001250:	f000 f812 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001254:	f000 f8d0 	bl	80013f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001258:	f000 f8a4 	bl	80013a4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800125c:	f000 f878 	bl	8001350 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ESP_Init("Deepak","12345678");
 8001260:	4903      	ldr	r1, [pc, #12]	; (8001270 <main+0x28>)
 8001262:	4804      	ldr	r0, [pc, #16]	; (8001274 <main+0x2c>)
 8001264:	f7ff f9be 	bl	80005e4 <ESP_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Server_Start();
 8001268:	f7ff fbae 	bl	80009c8 <Server_Start>
 800126c:	e7fc      	b.n	8001268 <main+0x20>
 800126e:	bf00      	nop
 8001270:	080048e8 	.word	0x080048e8
 8001274:	080048f4 	.word	0x080048f4

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	; 0x50
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	2234      	movs	r2, #52	; 0x34
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f002 fba0 	bl	80039cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	4b29      	ldr	r3, [pc, #164]	; (8001348 <SystemClock_Config+0xd0>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	4a28      	ldr	r2, [pc, #160]	; (8001348 <SystemClock_Config+0xd0>)
 80012a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012aa:	6413      	str	r3, [r2, #64]	; 0x40
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <SystemClock_Config+0xd0>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012b8:	2300      	movs	r3, #0
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <SystemClock_Config+0xd4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012c4:	4a21      	ldr	r2, [pc, #132]	; (800134c <SystemClock_Config+0xd4>)
 80012c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <SystemClock_Config+0xd4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012d8:	2301      	movs	r3, #1
 80012da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e2:	2302      	movs	r3, #2
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012ec:	2304      	movs	r3, #4
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 80012f0:	2332      	movs	r3, #50	; 0x32
 80012f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	4618      	mov	r0, r3
 8001306:	f001 f985 	bl	8002614 <HAL_RCC_OscConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001310:	f000 f8e0 	bl	80014d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001314:	230f      	movs	r3, #15
 8001316:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001318:	2302      	movs	r3, #2
 800131a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001324:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	2101      	movs	r1, #1
 8001330:	4618      	mov	r0, r3
 8001332:	f000 fe25 	bl	8001f80 <HAL_RCC_ClockConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800133c:	f000 f8ca 	bl	80014d4 <Error_Handler>
  }
}
 8001340:	bf00      	nop
 8001342:	3750      	adds	r7, #80	; 0x50
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800
 800134c:	40007000 	.word	0x40007000

08001350 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_USART1_UART_Init+0x4c>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <MX_USART1_UART_Init+0x50>)
 8001358:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <MX_USART1_UART_Init+0x4c>)
 800135c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001360:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_USART1_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_USART1_UART_Init+0x4c>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_USART1_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_USART1_UART_Init+0x4c>)
 8001376:	220c      	movs	r2, #12
 8001378:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <MX_USART1_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_USART1_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_USART1_UART_Init+0x4c>)
 8001388:	f001 fbe2 	bl	8002b50 <HAL_UART_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001392:	f000 f89f 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200001e0 	.word	0x200001e0
 80013a0:	40011000 	.word	0x40011000

080013a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <MX_USART2_UART_Init+0x50>)
 80013ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013ca:	220c      	movs	r2, #12
 80013cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013dc:	f001 fbb8 	bl	8002b50 <HAL_UART_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013e6:	f000 f875 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000224 	.word	0x20000224
 80013f4:	40004400 	.word	0x40004400

080013f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <MX_GPIO_Init+0xd0>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a2c      	ldr	r2, [pc, #176]	; (80014c8 <MX_GPIO_Init+0xd0>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <MX_GPIO_Init+0xd0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <MX_GPIO_Init+0xd0>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a25      	ldr	r2, [pc, #148]	; (80014c8 <MX_GPIO_Init+0xd0>)
 8001434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <MX_GPIO_Init+0xd0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <MX_GPIO_Init+0xd0>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <MX_GPIO_Init+0xd0>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <MX_GPIO_Init+0xd0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MX_GPIO_Init+0xd0>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <MX_GPIO_Init+0xd0>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_GPIO_Init+0xd0>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	2120      	movs	r1, #32
 8001482:	4812      	ldr	r0, [pc, #72]	; (80014cc <MX_GPIO_Init+0xd4>)
 8001484:	f000 fd62 	bl	8001f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800148c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800148e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	480c      	ldr	r0, [pc, #48]	; (80014d0 <MX_GPIO_Init+0xd8>)
 80014a0:	f000 fbc0 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014a4:	2320      	movs	r3, #32
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	4804      	ldr	r0, [pc, #16]	; (80014cc <MX_GPIO_Init+0xd4>)
 80014bc:	f000 fbb2 	bl	8001c24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014c0:	bf00      	nop
 80014c2:	3728      	adds	r7, #40	; 0x28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020000 	.word	0x40020000
 80014d0:	40020800 	.word	0x40020800

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014dc:	e7fe      	b.n	80014dc <Error_Handler+0x8>
	...

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <HAL_MspInit+0x4c>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	4a0f      	ldr	r2, [pc, #60]	; (800152c <HAL_MspInit+0x4c>)
 80014f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f4:	6453      	str	r3, [r2, #68]	; 0x44
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <HAL_MspInit+0x4c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	603b      	str	r3, [r7, #0]
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_MspInit+0x4c>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a08      	ldr	r2, [pc, #32]	; (800152c <HAL_MspInit+0x4c>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_MspInit+0x4c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800151e:	2007      	movs	r0, #7
 8001520:	f000 faac 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800

08001530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08c      	sub	sp, #48	; 0x30
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a3a      	ldr	r2, [pc, #232]	; (8001638 <HAL_UART_MspInit+0x108>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d135      	bne.n	80015be <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
 8001556:	4b39      	ldr	r3, [pc, #228]	; (800163c <HAL_UART_MspInit+0x10c>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a38      	ldr	r2, [pc, #224]	; (800163c <HAL_UART_MspInit+0x10c>)
 800155c:	f043 0310 	orr.w	r3, r3, #16
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b36      	ldr	r3, [pc, #216]	; (800163c <HAL_UART_MspInit+0x10c>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	61bb      	str	r3, [r7, #24]
 800156c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	4b32      	ldr	r3, [pc, #200]	; (800163c <HAL_UART_MspInit+0x10c>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a31      	ldr	r2, [pc, #196]	; (800163c <HAL_UART_MspInit+0x10c>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b2f      	ldr	r3, [pc, #188]	; (800163c <HAL_UART_MspInit+0x10c>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800158a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800159c:	2307      	movs	r3, #7
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	4619      	mov	r1, r3
 80015a6:	4826      	ldr	r0, [pc, #152]	; (8001640 <HAL_UART_MspInit+0x110>)
 80015a8:	f000 fb3c 	bl	8001c24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	2025      	movs	r0, #37	; 0x25
 80015b2:	f000 fa6e 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015b6:	2025      	movs	r0, #37	; 0x25
 80015b8:	f000 fa87 	bl	8001aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015bc:	e038      	b.n	8001630 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a20      	ldr	r2, [pc, #128]	; (8001644 <HAL_UART_MspInit+0x114>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d133      	bne.n	8001630 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_UART_MspInit+0x10c>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	4a1a      	ldr	r2, [pc, #104]	; (800163c <HAL_UART_MspInit+0x10c>)
 80015d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d6:	6413      	str	r3, [r2, #64]	; 0x40
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_UART_MspInit+0x10c>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_UART_MspInit+0x10c>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	4a13      	ldr	r2, [pc, #76]	; (800163c <HAL_UART_MspInit+0x10c>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6313      	str	r3, [r2, #48]	; 0x30
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_UART_MspInit+0x10c>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001600:	230c      	movs	r3, #12
 8001602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160c:	2303      	movs	r3, #3
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001610:	2307      	movs	r3, #7
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	4619      	mov	r1, r3
 800161a:	4809      	ldr	r0, [pc, #36]	; (8001640 <HAL_UART_MspInit+0x110>)
 800161c:	f000 fb02 	bl	8001c24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	2026      	movs	r0, #38	; 0x26
 8001626:	f000 fa34 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800162a:	2026      	movs	r0, #38	; 0x26
 800162c:	f000 fa4d 	bl	8001aca <HAL_NVIC_EnableIRQ>
}
 8001630:	bf00      	nop
 8001632:	3730      	adds	r7, #48	; 0x30
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40011000 	.word	0x40011000
 800163c:	40023800 	.word	0x40023800
 8001640:	40020000 	.word	0x40020000
 8001644:	40004400 	.word	0x40004400

08001648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800164c:	e7fe      	b.n	800164c <NMI_Handler+0x4>

0800164e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <MemManage_Handler+0x4>

0800165a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <BusFault_Handler+0x4>

08001660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <UsageFault_Handler+0x4>

08001666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001694:	f000 f8de 	bl	8001854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}

0800169c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (&huart1);
 80016a0:	4803      	ldr	r0, [pc, #12]	; (80016b0 <USART1_IRQHandler+0x14>)
 80016a2:	f7ff fd31 	bl	8001108 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016a6:	4802      	ldr	r0, [pc, #8]	; (80016b0 <USART1_IRQHandler+0x14>)
 80016a8:	f001 faa0 	bl	8002bec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200001e0 	.word	0x200001e0

080016b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr (&huart2);
 80016b8:	4803      	ldr	r0, [pc, #12]	; (80016c8 <USART2_IRQHandler+0x14>)
 80016ba:	f7ff fd25 	bl	8001108 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016be:	4802      	ldr	r0, [pc, #8]	; (80016c8 <USART2_IRQHandler+0x14>)
 80016c0:	f001 fa94 	bl	8002bec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000224 	.word	0x20000224

080016cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d4:	4a14      	ldr	r2, [pc, #80]	; (8001728 <_sbrk+0x5c>)
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <_sbrk+0x60>)
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <_sbrk+0x64>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d102      	bne.n	80016ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <_sbrk+0x64>)
 80016ea:	4a12      	ldr	r2, [pc, #72]	; (8001734 <_sbrk+0x68>)
 80016ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <_sbrk+0x64>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d207      	bcs.n	800170c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016fc:	f002 f93c 	bl	8003978 <__errno>
 8001700:	4603      	mov	r3, r0
 8001702:	220c      	movs	r2, #12
 8001704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800170a:	e009      	b.n	8001720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <_sbrk+0x64>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001712:	4b07      	ldr	r3, [pc, #28]	; (8001730 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	4a05      	ldr	r2, [pc, #20]	; (8001730 <_sbrk+0x64>)
 800171c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171e:	68fb      	ldr	r3, [r7, #12]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20020000 	.word	0x20020000
 800172c:	00000400 	.word	0x00000400
 8001730:	20000268 	.word	0x20000268
 8001734:	20000280 	.word	0x20000280

08001738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <SystemInit+0x20>)
 800173e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <SystemInit+0x20>)
 8001744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800175c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001794 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001760:	480d      	ldr	r0, [pc, #52]	; (8001798 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001762:	490e      	ldr	r1, [pc, #56]	; (800179c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001764:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001778:	4c0b      	ldr	r4, [pc, #44]	; (80017a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001786:	f7ff ffd7 	bl	8001738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178a:	f002 f8fb 	bl	8003984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800178e:	f7ff fd5b 	bl	8001248 <main>
  bx  lr    
 8001792:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001794:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800179c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80017a0:	08004958 	.word	0x08004958
  ldr r2, =_sbss
 80017a4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80017a8:	20000280 	.word	0x20000280

080017ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ac:	e7fe      	b.n	80017ac <ADC_IRQHandler>
	...

080017b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <HAL_Init+0x40>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <HAL_Init+0x40>)
 80017ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_Init+0x40>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <HAL_Init+0x40>)
 80017c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <HAL_Init+0x40>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <HAL_Init+0x40>)
 80017d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d8:	2003      	movs	r0, #3
 80017da:	f000 f94f 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017de:	2000      	movs	r0, #0
 80017e0:	f000 f808 	bl	80017f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e4:	f7ff fe7c 	bl	80014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023c00 	.word	0x40023c00

080017f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_InitTick+0x54>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_InitTick+0x58>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180a:	fbb3 f3f1 	udiv	r3, r3, r1
 800180e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f967 	bl	8001ae6 <HAL_SYSTICK_Config>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e00e      	b.n	8001840 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b0f      	cmp	r3, #15
 8001826:	d80a      	bhi.n	800183e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001828:	2200      	movs	r2, #0
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001830:	f000 f92f 	bl	8001a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001834:	4a06      	ldr	r2, [pc, #24]	; (8001850 <HAL_InitTick+0x5c>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	e000      	b.n	8001840 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000010 	.word	0x20000010
 800184c:	20000018 	.word	0x20000018
 8001850:	20000014 	.word	0x20000014

08001854 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_IncTick+0x20>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_IncTick+0x24>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4413      	add	r3, r2
 8001864:	4a04      	ldr	r2, [pc, #16]	; (8001878 <HAL_IncTick+0x24>)
 8001866:	6013      	str	r3, [r2, #0]
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000018 	.word	0x20000018
 8001878:	2000026c 	.word	0x2000026c

0800187c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return uwTick;
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <HAL_GetTick+0x14>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	2000026c 	.word	0x2000026c

08001894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800189c:	f7ff ffee 	bl	800187c <HAL_GetTick>
 80018a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018ac:	d005      	beq.n	80018ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ae:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <HAL_Delay+0x44>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4413      	add	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ba:	bf00      	nop
 80018bc:	f7ff ffde 	bl	800187c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d8f7      	bhi.n	80018bc <HAL_Delay+0x28>
  {
  }
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000018 	.word	0x20000018

080018dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f8:	4013      	ands	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800190c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190e:	4a04      	ldr	r2, [pc, #16]	; (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	60d3      	str	r3, [r2, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <__NVIC_GetPriorityGrouping+0x18>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	f003 0307 	and.w	r3, r3, #7
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	2b00      	cmp	r3, #0
 8001950:	db0b      	blt.n	800196a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	f003 021f 	and.w	r2, r3, #31
 8001958:	4907      	ldr	r1, [pc, #28]	; (8001978 <__NVIC_EnableIRQ+0x38>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	095b      	lsrs	r3, r3, #5
 8001960:	2001      	movs	r0, #1
 8001962:	fa00 f202 	lsl.w	r2, r0, r2
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000e100 	.word	0xe000e100

0800197c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	; (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	; (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f1c3 0307 	rsb	r3, r3, #7
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	bf28      	it	cs
 80019ee:	2304      	movcs	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3304      	adds	r3, #4
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d902      	bls.n	8001a00 <NVIC_EncodePriority+0x30>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b03      	subs	r3, #3
 80019fe:	e000      	b.n	8001a02 <NVIC_EncodePriority+0x32>
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	4313      	orrs	r3, r2
         );
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3724      	adds	r7, #36	; 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a48:	d301      	bcc.n	8001a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00f      	b.n	8001a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <SysTick_Config+0x40>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a56:	210f      	movs	r1, #15
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a5c:	f7ff ff8e 	bl	800197c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <SysTick_Config+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <SysTick_Config+0x40>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff29 	bl	80018dc <__NVIC_SetPriorityGrouping>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa4:	f7ff ff3e 	bl	8001924 <__NVIC_GetPriorityGrouping>
 8001aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	6978      	ldr	r0, [r7, #20]
 8001ab0:	f7ff ff8e 	bl	80019d0 <NVIC_EncodePriority>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff5d 	bl	800197c <__NVIC_SetPriority>
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff31 	bl	8001940 <__NVIC_EnableIRQ>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ffa2 	bl	8001a38 <SysTick_Config>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b0c:	f7ff feb6 	bl	800187c <HAL_GetTick>
 8001b10:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d008      	beq.n	8001b30 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2280      	movs	r2, #128	; 0x80
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e052      	b.n	8001bd6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0216 	bic.w	r2, r2, #22
 8001b3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b4e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d103      	bne.n	8001b60 <HAL_DMA_Abort+0x62>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d007      	beq.n	8001b70 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0208 	bic.w	r2, r2, #8
 8001b6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0201 	bic.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b80:	e013      	b.n	8001baa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b82:	f7ff fe7b 	bl	800187c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b05      	cmp	r3, #5
 8001b8e:	d90c      	bls.n	8001baa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2220      	movs	r2, #32
 8001b94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2203      	movs	r2, #3
 8001b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e015      	b.n	8001bd6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1e4      	bne.n	8001b82 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbc:	223f      	movs	r2, #63	; 0x3f
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d004      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e00c      	b.n	8001c16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2205      	movs	r2, #5
 8001c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	e165      	b.n	8001f0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c40:	2201      	movs	r2, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	f040 8154 	bne.w	8001f06 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d005      	beq.n	8001c76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d130      	bne.n	8001cd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	2203      	movs	r2, #3
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cac:	2201      	movs	r2, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 0201 	and.w	r2, r3, #1
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d017      	beq.n	8001d14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d123      	bne.n	8001d68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	08da      	lsrs	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3208      	adds	r2, #8
 8001d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	220f      	movs	r2, #15
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	08da      	lsrs	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3208      	adds	r2, #8
 8001d62:	69b9      	ldr	r1, [r7, #24]
 8001d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0203 	and.w	r2, r3, #3
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80ae 	beq.w	8001f06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b5d      	ldr	r3, [pc, #372]	; (8001f24 <HAL_GPIO_Init+0x300>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	4a5c      	ldr	r2, [pc, #368]	; (8001f24 <HAL_GPIO_Init+0x300>)
 8001db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dba:	4b5a      	ldr	r3, [pc, #360]	; (8001f24 <HAL_GPIO_Init+0x300>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc6:	4a58      	ldr	r2, [pc, #352]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4f      	ldr	r2, [pc, #316]	; (8001f2c <HAL_GPIO_Init+0x308>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d025      	beq.n	8001e3e <HAL_GPIO_Init+0x21a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4e      	ldr	r2, [pc, #312]	; (8001f30 <HAL_GPIO_Init+0x30c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01f      	beq.n	8001e3a <HAL_GPIO_Init+0x216>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4d      	ldr	r2, [pc, #308]	; (8001f34 <HAL_GPIO_Init+0x310>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d019      	beq.n	8001e36 <HAL_GPIO_Init+0x212>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4c      	ldr	r2, [pc, #304]	; (8001f38 <HAL_GPIO_Init+0x314>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_GPIO_Init+0x20e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4b      	ldr	r2, [pc, #300]	; (8001f3c <HAL_GPIO_Init+0x318>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00d      	beq.n	8001e2e <HAL_GPIO_Init+0x20a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4a      	ldr	r2, [pc, #296]	; (8001f40 <HAL_GPIO_Init+0x31c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d007      	beq.n	8001e2a <HAL_GPIO_Init+0x206>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a49      	ldr	r2, [pc, #292]	; (8001f44 <HAL_GPIO_Init+0x320>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_GPIO_Init+0x202>
 8001e22:	2306      	movs	r3, #6
 8001e24:	e00c      	b.n	8001e40 <HAL_GPIO_Init+0x21c>
 8001e26:	2307      	movs	r3, #7
 8001e28:	e00a      	b.n	8001e40 <HAL_GPIO_Init+0x21c>
 8001e2a:	2305      	movs	r3, #5
 8001e2c:	e008      	b.n	8001e40 <HAL_GPIO_Init+0x21c>
 8001e2e:	2304      	movs	r3, #4
 8001e30:	e006      	b.n	8001e40 <HAL_GPIO_Init+0x21c>
 8001e32:	2303      	movs	r3, #3
 8001e34:	e004      	b.n	8001e40 <HAL_GPIO_Init+0x21c>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e002      	b.n	8001e40 <HAL_GPIO_Init+0x21c>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <HAL_GPIO_Init+0x21c>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	69fa      	ldr	r2, [r7, #28]
 8001e42:	f002 0203 	and.w	r2, r2, #3
 8001e46:	0092      	lsls	r2, r2, #2
 8001e48:	4093      	lsls	r3, r2
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e50:	4935      	ldr	r1, [pc, #212]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	089b      	lsrs	r3, r3, #2
 8001e56:	3302      	adds	r3, #2
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e5e:	4b3a      	ldr	r3, [pc, #232]	; (8001f48 <HAL_GPIO_Init+0x324>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e82:	4a31      	ldr	r2, [pc, #196]	; (8001f48 <HAL_GPIO_Init+0x324>)
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e88:	4b2f      	ldr	r3, [pc, #188]	; (8001f48 <HAL_GPIO_Init+0x324>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eac:	4a26      	ldr	r2, [pc, #152]	; (8001f48 <HAL_GPIO_Init+0x324>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eb2:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <HAL_GPIO_Init+0x324>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ed6:	4a1c      	ldr	r2, [pc, #112]	; (8001f48 <HAL_GPIO_Init+0x324>)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001edc:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_GPIO_Init+0x324>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f00:	4a11      	ldr	r2, [pc, #68]	; (8001f48 <HAL_GPIO_Init+0x324>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	61fb      	str	r3, [r7, #28]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	2b0f      	cmp	r3, #15
 8001f10:	f67f ae96 	bls.w	8001c40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	3724      	adds	r7, #36	; 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40013800 	.word	0x40013800
 8001f2c:	40020000 	.word	0x40020000
 8001f30:	40020400 	.word	0x40020400
 8001f34:	40020800 	.word	0x40020800
 8001f38:	40020c00 	.word	0x40020c00
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40021400 	.word	0x40021400
 8001f44:	40021800 	.word	0x40021800
 8001f48:	40013c00 	.word	0x40013c00

08001f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	807b      	strh	r3, [r7, #2]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f5c:	787b      	ldrb	r3, [r7, #1]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f62:	887a      	ldrh	r2, [r7, #2]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f68:	e003      	b.n	8001f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f6a:	887b      	ldrh	r3, [r7, #2]
 8001f6c:	041a      	lsls	r2, r3, #16
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	619a      	str	r2, [r3, #24]
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0cc      	b.n	800212e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b68      	ldr	r3, [pc, #416]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d90c      	bls.n	8001fbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b65      	ldr	r3, [pc, #404]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b63      	ldr	r3, [pc, #396]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0b8      	b.n	800212e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d020      	beq.n	800200a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd4:	4b59      	ldr	r3, [pc, #356]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	4a58      	ldr	r2, [pc, #352]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fec:	4b53      	ldr	r3, [pc, #332]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4a52      	ldr	r2, [pc, #328]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ff6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff8:	4b50      	ldr	r3, [pc, #320]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	494d      	ldr	r1, [pc, #308]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	4313      	orrs	r3, r2
 8002008:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d044      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d107      	bne.n	800202e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	4b47      	ldr	r3, [pc, #284]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d119      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e07f      	b.n	800212e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d003      	beq.n	800203e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800203a:	2b03      	cmp	r3, #3
 800203c:	d107      	bne.n	800204e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203e:	4b3f      	ldr	r3, [pc, #252]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e06f      	b.n	800212e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204e:	4b3b      	ldr	r3, [pc, #236]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e067      	b.n	800212e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800205e:	4b37      	ldr	r3, [pc, #220]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f023 0203 	bic.w	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4934      	ldr	r1, [pc, #208]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 800206c:	4313      	orrs	r3, r2
 800206e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002070:	f7ff fc04 	bl	800187c <HAL_GetTick>
 8002074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	e00a      	b.n	800208e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002078:	f7ff fc00 	bl	800187c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	; 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e04f      	b.n	800212e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	4b2b      	ldr	r3, [pc, #172]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 020c 	and.w	r2, r3, #12
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	429a      	cmp	r2, r3
 800209e:	d1eb      	bne.n	8002078 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020a0:	4b25      	ldr	r3, [pc, #148]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d20c      	bcs.n	80020c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b22      	ldr	r3, [pc, #136]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e032      	b.n	800212e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d4:	4b19      	ldr	r3, [pc, #100]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4916      	ldr	r1, [pc, #88]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d009      	beq.n	8002106 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020f2:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	490e      	ldr	r1, [pc, #56]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	4313      	orrs	r3, r2
 8002104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002106:	f000 f855 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 800210a:	4602      	mov	r2, r0
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	490a      	ldr	r1, [pc, #40]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	5ccb      	ldrb	r3, [r1, r3]
 800211a:	fa22 f303 	lsr.w	r3, r2, r3
 800211e:	4a09      	ldr	r2, [pc, #36]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fb64 	bl	80017f4 <HAL_InitTick>

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40023c00 	.word	0x40023c00
 800213c:	40023800 	.word	0x40023800
 8002140:	080048fc 	.word	0x080048fc
 8002144:	20000010 	.word	0x20000010
 8002148:	20000014 	.word	0x20000014

0800214c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <HAL_RCC_GetHCLKFreq+0x14>)
 8002152:	681b      	ldr	r3, [r3, #0]
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000010 	.word	0x20000010

08002164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002168:	f7ff fff0 	bl	800214c <HAL_RCC_GetHCLKFreq>
 800216c:	4602      	mov	r2, r0
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	0a9b      	lsrs	r3, r3, #10
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	4903      	ldr	r1, [pc, #12]	; (8002188 <HAL_RCC_GetPCLK1Freq+0x24>)
 800217a:	5ccb      	ldrb	r3, [r1, r3]
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002180:	4618      	mov	r0, r3
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40023800 	.word	0x40023800
 8002188:	0800490c 	.word	0x0800490c

0800218c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002190:	f7ff ffdc 	bl	800214c <HAL_RCC_GetHCLKFreq>
 8002194:	4602      	mov	r2, r0
 8002196:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	0b5b      	lsrs	r3, r3, #13
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	4903      	ldr	r1, [pc, #12]	; (80021b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a2:	5ccb      	ldrb	r3, [r1, r3]
 80021a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40023800 	.word	0x40023800
 80021b0:	0800490c 	.word	0x0800490c

080021b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021b8:	b0ae      	sub	sp, #184	; 0xb8
 80021ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021da:	4bcb      	ldr	r3, [pc, #812]	; (8002508 <HAL_RCC_GetSysClockFreq+0x354>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b0c      	cmp	r3, #12
 80021e4:	f200 8206 	bhi.w	80025f4 <HAL_RCC_GetSysClockFreq+0x440>
 80021e8:	a201      	add	r2, pc, #4	; (adr r2, 80021f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80021ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ee:	bf00      	nop
 80021f0:	08002225 	.word	0x08002225
 80021f4:	080025f5 	.word	0x080025f5
 80021f8:	080025f5 	.word	0x080025f5
 80021fc:	080025f5 	.word	0x080025f5
 8002200:	0800222d 	.word	0x0800222d
 8002204:	080025f5 	.word	0x080025f5
 8002208:	080025f5 	.word	0x080025f5
 800220c:	080025f5 	.word	0x080025f5
 8002210:	08002235 	.word	0x08002235
 8002214:	080025f5 	.word	0x080025f5
 8002218:	080025f5 	.word	0x080025f5
 800221c:	080025f5 	.word	0x080025f5
 8002220:	08002425 	.word	0x08002425
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002224:	4bb9      	ldr	r3, [pc, #740]	; (800250c <HAL_RCC_GetSysClockFreq+0x358>)
 8002226:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800222a:	e1e7      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800222c:	4bb8      	ldr	r3, [pc, #736]	; (8002510 <HAL_RCC_GetSysClockFreq+0x35c>)
 800222e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002232:	e1e3      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002234:	4bb4      	ldr	r3, [pc, #720]	; (8002508 <HAL_RCC_GetSysClockFreq+0x354>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800223c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002240:	4bb1      	ldr	r3, [pc, #708]	; (8002508 <HAL_RCC_GetSysClockFreq+0x354>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d071      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800224c:	4bae      	ldr	r3, [pc, #696]	; (8002508 <HAL_RCC_GetSysClockFreq+0x354>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	099b      	lsrs	r3, r3, #6
 8002252:	2200      	movs	r2, #0
 8002254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002258:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800225c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002264:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002268:	2300      	movs	r3, #0
 800226a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800226e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002272:	4622      	mov	r2, r4
 8002274:	462b      	mov	r3, r5
 8002276:	f04f 0000 	mov.w	r0, #0
 800227a:	f04f 0100 	mov.w	r1, #0
 800227e:	0159      	lsls	r1, r3, #5
 8002280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002284:	0150      	lsls	r0, r2, #5
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4621      	mov	r1, r4
 800228c:	1a51      	subs	r1, r2, r1
 800228e:	6439      	str	r1, [r7, #64]	; 0x40
 8002290:	4629      	mov	r1, r5
 8002292:	eb63 0301 	sbc.w	r3, r3, r1
 8002296:	647b      	str	r3, [r7, #68]	; 0x44
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80022a4:	4649      	mov	r1, r9
 80022a6:	018b      	lsls	r3, r1, #6
 80022a8:	4641      	mov	r1, r8
 80022aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ae:	4641      	mov	r1, r8
 80022b0:	018a      	lsls	r2, r1, #6
 80022b2:	4641      	mov	r1, r8
 80022b4:	1a51      	subs	r1, r2, r1
 80022b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80022b8:	4649      	mov	r1, r9
 80022ba:	eb63 0301 	sbc.w	r3, r3, r1
 80022be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80022cc:	4649      	mov	r1, r9
 80022ce:	00cb      	lsls	r3, r1, #3
 80022d0:	4641      	mov	r1, r8
 80022d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022d6:	4641      	mov	r1, r8
 80022d8:	00ca      	lsls	r2, r1, #3
 80022da:	4610      	mov	r0, r2
 80022dc:	4619      	mov	r1, r3
 80022de:	4603      	mov	r3, r0
 80022e0:	4622      	mov	r2, r4
 80022e2:	189b      	adds	r3, r3, r2
 80022e4:	633b      	str	r3, [r7, #48]	; 0x30
 80022e6:	462b      	mov	r3, r5
 80022e8:	460a      	mov	r2, r1
 80022ea:	eb42 0303 	adc.w	r3, r2, r3
 80022ee:	637b      	str	r3, [r7, #52]	; 0x34
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022fc:	4629      	mov	r1, r5
 80022fe:	024b      	lsls	r3, r1, #9
 8002300:	4621      	mov	r1, r4
 8002302:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002306:	4621      	mov	r1, r4
 8002308:	024a      	lsls	r2, r1, #9
 800230a:	4610      	mov	r0, r2
 800230c:	4619      	mov	r1, r3
 800230e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002312:	2200      	movs	r2, #0
 8002314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002318:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800231c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002320:	f7fd ffde 	bl	80002e0 <__aeabi_uldivmod>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4613      	mov	r3, r2
 800232a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800232e:	e067      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002330:	4b75      	ldr	r3, [pc, #468]	; (8002508 <HAL_RCC_GetSysClockFreq+0x354>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	099b      	lsrs	r3, r3, #6
 8002336:	2200      	movs	r2, #0
 8002338:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800233c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002340:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002348:	67bb      	str	r3, [r7, #120]	; 0x78
 800234a:	2300      	movs	r3, #0
 800234c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800234e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002352:	4622      	mov	r2, r4
 8002354:	462b      	mov	r3, r5
 8002356:	f04f 0000 	mov.w	r0, #0
 800235a:	f04f 0100 	mov.w	r1, #0
 800235e:	0159      	lsls	r1, r3, #5
 8002360:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002364:	0150      	lsls	r0, r2, #5
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4621      	mov	r1, r4
 800236c:	1a51      	subs	r1, r2, r1
 800236e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002370:	4629      	mov	r1, r5
 8002372:	eb63 0301 	sbc.w	r3, r3, r1
 8002376:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002384:	4649      	mov	r1, r9
 8002386:	018b      	lsls	r3, r1, #6
 8002388:	4641      	mov	r1, r8
 800238a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800238e:	4641      	mov	r1, r8
 8002390:	018a      	lsls	r2, r1, #6
 8002392:	4641      	mov	r1, r8
 8002394:	ebb2 0a01 	subs.w	sl, r2, r1
 8002398:	4649      	mov	r1, r9
 800239a:	eb63 0b01 	sbc.w	fp, r3, r1
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	f04f 0300 	mov.w	r3, #0
 80023a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023b2:	4692      	mov	sl, r2
 80023b4:	469b      	mov	fp, r3
 80023b6:	4623      	mov	r3, r4
 80023b8:	eb1a 0303 	adds.w	r3, sl, r3
 80023bc:	623b      	str	r3, [r7, #32]
 80023be:	462b      	mov	r3, r5
 80023c0:	eb4b 0303 	adc.w	r3, fp, r3
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80023d2:	4629      	mov	r1, r5
 80023d4:	028b      	lsls	r3, r1, #10
 80023d6:	4621      	mov	r1, r4
 80023d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023dc:	4621      	mov	r1, r4
 80023de:	028a      	lsls	r2, r1, #10
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023e8:	2200      	movs	r2, #0
 80023ea:	673b      	str	r3, [r7, #112]	; 0x70
 80023ec:	677a      	str	r2, [r7, #116]	; 0x74
 80023ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80023f2:	f7fd ff75 	bl	80002e0 <__aeabi_uldivmod>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4613      	mov	r3, r2
 80023fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002400:	4b41      	ldr	r3, [pc, #260]	; (8002508 <HAL_RCC_GetSysClockFreq+0x354>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	0c1b      	lsrs	r3, r3, #16
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	3301      	adds	r3, #1
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002416:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800241a:	fbb2 f3f3 	udiv	r3, r2, r3
 800241e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002422:	e0eb      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002424:	4b38      	ldr	r3, [pc, #224]	; (8002508 <HAL_RCC_GetSysClockFreq+0x354>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800242c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002430:	4b35      	ldr	r3, [pc, #212]	; (8002508 <HAL_RCC_GetSysClockFreq+0x354>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d06b      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800243c:	4b32      	ldr	r3, [pc, #200]	; (8002508 <HAL_RCC_GetSysClockFreq+0x354>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	099b      	lsrs	r3, r3, #6
 8002442:	2200      	movs	r2, #0
 8002444:	66bb      	str	r3, [r7, #104]	; 0x68
 8002446:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800244a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800244e:	663b      	str	r3, [r7, #96]	; 0x60
 8002450:	2300      	movs	r3, #0
 8002452:	667b      	str	r3, [r7, #100]	; 0x64
 8002454:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002458:	4622      	mov	r2, r4
 800245a:	462b      	mov	r3, r5
 800245c:	f04f 0000 	mov.w	r0, #0
 8002460:	f04f 0100 	mov.w	r1, #0
 8002464:	0159      	lsls	r1, r3, #5
 8002466:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800246a:	0150      	lsls	r0, r2, #5
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4621      	mov	r1, r4
 8002472:	1a51      	subs	r1, r2, r1
 8002474:	61b9      	str	r1, [r7, #24]
 8002476:	4629      	mov	r1, r5
 8002478:	eb63 0301 	sbc.w	r3, r3, r1
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800248a:	4659      	mov	r1, fp
 800248c:	018b      	lsls	r3, r1, #6
 800248e:	4651      	mov	r1, sl
 8002490:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002494:	4651      	mov	r1, sl
 8002496:	018a      	lsls	r2, r1, #6
 8002498:	4651      	mov	r1, sl
 800249a:	ebb2 0801 	subs.w	r8, r2, r1
 800249e:	4659      	mov	r1, fp
 80024a0:	eb63 0901 	sbc.w	r9, r3, r1
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	f04f 0300 	mov.w	r3, #0
 80024ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024b8:	4690      	mov	r8, r2
 80024ba:	4699      	mov	r9, r3
 80024bc:	4623      	mov	r3, r4
 80024be:	eb18 0303 	adds.w	r3, r8, r3
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	462b      	mov	r3, r5
 80024c6:	eb49 0303 	adc.w	r3, r9, r3
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80024d8:	4629      	mov	r1, r5
 80024da:	024b      	lsls	r3, r1, #9
 80024dc:	4621      	mov	r1, r4
 80024de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024e2:	4621      	mov	r1, r4
 80024e4:	024a      	lsls	r2, r1, #9
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024ee:	2200      	movs	r2, #0
 80024f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80024f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80024f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024f8:	f7fd fef2 	bl	80002e0 <__aeabi_uldivmod>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4613      	mov	r3, r2
 8002502:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002506:	e065      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x420>
 8002508:	40023800 	.word	0x40023800
 800250c:	00f42400 	.word	0x00f42400
 8002510:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002514:	4b3d      	ldr	r3, [pc, #244]	; (800260c <HAL_RCC_GetSysClockFreq+0x458>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	099b      	lsrs	r3, r3, #6
 800251a:	2200      	movs	r2, #0
 800251c:	4618      	mov	r0, r3
 800251e:	4611      	mov	r1, r2
 8002520:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002524:	653b      	str	r3, [r7, #80]	; 0x50
 8002526:	2300      	movs	r3, #0
 8002528:	657b      	str	r3, [r7, #84]	; 0x54
 800252a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800252e:	4642      	mov	r2, r8
 8002530:	464b      	mov	r3, r9
 8002532:	f04f 0000 	mov.w	r0, #0
 8002536:	f04f 0100 	mov.w	r1, #0
 800253a:	0159      	lsls	r1, r3, #5
 800253c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002540:	0150      	lsls	r0, r2, #5
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4641      	mov	r1, r8
 8002548:	1a51      	subs	r1, r2, r1
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	4649      	mov	r1, r9
 800254e:	eb63 0301 	sbc.w	r3, r3, r1
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002560:	4659      	mov	r1, fp
 8002562:	018b      	lsls	r3, r1, #6
 8002564:	4651      	mov	r1, sl
 8002566:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800256a:	4651      	mov	r1, sl
 800256c:	018a      	lsls	r2, r1, #6
 800256e:	4651      	mov	r1, sl
 8002570:	1a54      	subs	r4, r2, r1
 8002572:	4659      	mov	r1, fp
 8002574:	eb63 0501 	sbc.w	r5, r3, r1
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	00eb      	lsls	r3, r5, #3
 8002582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002586:	00e2      	lsls	r2, r4, #3
 8002588:	4614      	mov	r4, r2
 800258a:	461d      	mov	r5, r3
 800258c:	4643      	mov	r3, r8
 800258e:	18e3      	adds	r3, r4, r3
 8002590:	603b      	str	r3, [r7, #0]
 8002592:	464b      	mov	r3, r9
 8002594:	eb45 0303 	adc.w	r3, r5, r3
 8002598:	607b      	str	r3, [r7, #4]
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025a6:	4629      	mov	r1, r5
 80025a8:	028b      	lsls	r3, r1, #10
 80025aa:	4621      	mov	r1, r4
 80025ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025b0:	4621      	mov	r1, r4
 80025b2:	028a      	lsls	r2, r1, #10
 80025b4:	4610      	mov	r0, r2
 80025b6:	4619      	mov	r1, r3
 80025b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025bc:	2200      	movs	r2, #0
 80025be:	64bb      	str	r3, [r7, #72]	; 0x48
 80025c0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80025c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025c6:	f7fd fe8b 	bl	80002e0 <__aeabi_uldivmod>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4613      	mov	r3, r2
 80025d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80025d4:	4b0d      	ldr	r3, [pc, #52]	; (800260c <HAL_RCC_GetSysClockFreq+0x458>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	0f1b      	lsrs	r3, r3, #28
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80025e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80025f2:	e003      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_RCC_GetSysClockFreq+0x45c>)
 80025f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80025fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002600:	4618      	mov	r0, r3
 8002602:	37b8      	adds	r7, #184	; 0xb8
 8002604:	46bd      	mov	sp, r7
 8002606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800
 8002610:	00f42400 	.word	0x00f42400

08002614 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e28d      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8083 	beq.w	800273a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002634:	4b94      	ldr	r3, [pc, #592]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 030c 	and.w	r3, r3, #12
 800263c:	2b04      	cmp	r3, #4
 800263e:	d019      	beq.n	8002674 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002640:	4b91      	ldr	r3, [pc, #580]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002648:	2b08      	cmp	r3, #8
 800264a:	d106      	bne.n	800265a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800264c:	4b8e      	ldr	r3, [pc, #568]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002654:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002658:	d00c      	beq.n	8002674 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800265a:	4b8b      	ldr	r3, [pc, #556]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002662:	2b0c      	cmp	r3, #12
 8002664:	d112      	bne.n	800268c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002666:	4b88      	ldr	r3, [pc, #544]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800266e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002672:	d10b      	bne.n	800268c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002674:	4b84      	ldr	r3, [pc, #528]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d05b      	beq.n	8002738 <HAL_RCC_OscConfig+0x124>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d157      	bne.n	8002738 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e25a      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002694:	d106      	bne.n	80026a4 <HAL_RCC_OscConfig+0x90>
 8002696:	4b7c      	ldr	r3, [pc, #496]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a7b      	ldr	r2, [pc, #492]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 800269c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e01d      	b.n	80026e0 <HAL_RCC_OscConfig+0xcc>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0xb4>
 80026ae:	4b76      	ldr	r3, [pc, #472]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a75      	ldr	r2, [pc, #468]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 80026b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b73      	ldr	r3, [pc, #460]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a72      	ldr	r2, [pc, #456]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e00b      	b.n	80026e0 <HAL_RCC_OscConfig+0xcc>
 80026c8:	4b6f      	ldr	r3, [pc, #444]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a6e      	ldr	r2, [pc, #440]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 80026ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	4b6c      	ldr	r3, [pc, #432]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a6b      	ldr	r2, [pc, #428]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 80026da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d013      	beq.n	8002710 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7ff f8c8 	bl	800187c <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f0:	f7ff f8c4 	bl	800187c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	; 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e21f      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	4b61      	ldr	r3, [pc, #388]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0xdc>
 800270e:	e014      	b.n	800273a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7ff f8b4 	bl	800187c <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002718:	f7ff f8b0 	bl	800187c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	; 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e20b      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272a:	4b57      	ldr	r3, [pc, #348]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x104>
 8002736:	e000      	b.n	800273a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d06f      	beq.n	8002826 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002746:	4b50      	ldr	r3, [pc, #320]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b00      	cmp	r3, #0
 8002750:	d017      	beq.n	8002782 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002752:	4b4d      	ldr	r3, [pc, #308]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800275a:	2b08      	cmp	r3, #8
 800275c:	d105      	bne.n	800276a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800275e:	4b4a      	ldr	r3, [pc, #296]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00b      	beq.n	8002782 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800276a:	4b47      	ldr	r3, [pc, #284]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002772:	2b0c      	cmp	r3, #12
 8002774:	d11c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002776:	4b44      	ldr	r3, [pc, #272]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d116      	bne.n	80027b0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002782:	4b41      	ldr	r3, [pc, #260]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <HAL_RCC_OscConfig+0x186>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d001      	beq.n	800279a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e1d3      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279a:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4937      	ldr	r1, [pc, #220]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ae:	e03a      	b.n	8002826 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d020      	beq.n	80027fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b8:	4b34      	ldr	r3, [pc, #208]	; (800288c <HAL_RCC_OscConfig+0x278>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7ff f85d 	bl	800187c <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c6:	f7ff f859 	bl	800187c <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e1b4      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d8:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e4:	4b28      	ldr	r3, [pc, #160]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4925      	ldr	r1, [pc, #148]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]
 80027f8:	e015      	b.n	8002826 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_RCC_OscConfig+0x278>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7ff f83c 	bl	800187c <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002808:	f7ff f838 	bl	800187c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e193      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281a:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d036      	beq.n	80028a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d016      	beq.n	8002868 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <HAL_RCC_OscConfig+0x27c>)
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002840:	f7ff f81c 	bl	800187c <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002848:	f7ff f818 	bl	800187c <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e173      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 800285c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x234>
 8002866:	e01b      	b.n	80028a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_OscConfig+0x27c>)
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286e:	f7ff f805 	bl	800187c <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002874:	e00e      	b.n	8002894 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002876:	f7ff f801 	bl	800187c <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d907      	bls.n	8002894 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e15c      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
 8002888:	40023800 	.word	0x40023800
 800288c:	42470000 	.word	0x42470000
 8002890:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002894:	4b8a      	ldr	r3, [pc, #552]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1ea      	bne.n	8002876 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8097 	beq.w	80029dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ae:	2300      	movs	r3, #0
 80028b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b2:	4b83      	ldr	r3, [pc, #524]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10f      	bne.n	80028de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	4b7f      	ldr	r3, [pc, #508]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a7e      	ldr	r2, [pc, #504]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 80028c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
 80028ce:	4b7c      	ldr	r3, [pc, #496]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028da:	2301      	movs	r3, #1
 80028dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028de:	4b79      	ldr	r3, [pc, #484]	; (8002ac4 <HAL_RCC_OscConfig+0x4b0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d118      	bne.n	800291c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ea:	4b76      	ldr	r3, [pc, #472]	; (8002ac4 <HAL_RCC_OscConfig+0x4b0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a75      	ldr	r2, [pc, #468]	; (8002ac4 <HAL_RCC_OscConfig+0x4b0>)
 80028f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f6:	f7fe ffc1 	bl	800187c <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fe:	f7fe ffbd 	bl	800187c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e118      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002910:	4b6c      	ldr	r3, [pc, #432]	; (8002ac4 <HAL_RCC_OscConfig+0x4b0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d106      	bne.n	8002932 <HAL_RCC_OscConfig+0x31e>
 8002924:	4b66      	ldr	r3, [pc, #408]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	4a65      	ldr	r2, [pc, #404]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6713      	str	r3, [r2, #112]	; 0x70
 8002930:	e01c      	b.n	800296c <HAL_RCC_OscConfig+0x358>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b05      	cmp	r3, #5
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0x340>
 800293a:	4b61      	ldr	r3, [pc, #388]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	4a60      	ldr	r2, [pc, #384]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002940:	f043 0304 	orr.w	r3, r3, #4
 8002944:	6713      	str	r3, [r2, #112]	; 0x70
 8002946:	4b5e      	ldr	r3, [pc, #376]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294a:	4a5d      	ldr	r2, [pc, #372]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	6713      	str	r3, [r2, #112]	; 0x70
 8002952:	e00b      	b.n	800296c <HAL_RCC_OscConfig+0x358>
 8002954:	4b5a      	ldr	r3, [pc, #360]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	4a59      	ldr	r2, [pc, #356]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 800295a:	f023 0301 	bic.w	r3, r3, #1
 800295e:	6713      	str	r3, [r2, #112]	; 0x70
 8002960:	4b57      	ldr	r3, [pc, #348]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	4a56      	ldr	r2, [pc, #344]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002966:	f023 0304 	bic.w	r3, r3, #4
 800296a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d015      	beq.n	80029a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002974:	f7fe ff82 	bl	800187c <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297a:	e00a      	b.n	8002992 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f7fe ff7e 	bl	800187c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e0d7      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002992:	4b4b      	ldr	r3, [pc, #300]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0ee      	beq.n	800297c <HAL_RCC_OscConfig+0x368>
 800299e:	e014      	b.n	80029ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a0:	f7fe ff6c 	bl	800187c <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a6:	e00a      	b.n	80029be <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a8:	f7fe ff68 	bl	800187c <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e0c1      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029be:	4b40      	ldr	r3, [pc, #256]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1ee      	bne.n	80029a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d105      	bne.n	80029dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d0:	4b3b      	ldr	r3, [pc, #236]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	4a3a      	ldr	r2, [pc, #232]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 80029d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80ad 	beq.w	8002b40 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029e6:	4b36      	ldr	r3, [pc, #216]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d060      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d145      	bne.n	8002a86 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fa:	4b33      	ldr	r3, [pc, #204]	; (8002ac8 <HAL_RCC_OscConfig+0x4b4>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7fe ff3c 	bl	800187c <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a08:	f7fe ff38 	bl	800187c <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e093      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	4b29      	ldr	r3, [pc, #164]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69da      	ldr	r2, [r3, #28]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	019b      	lsls	r3, r3, #6
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	085b      	lsrs	r3, r3, #1
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	041b      	lsls	r3, r3, #16
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	061b      	lsls	r3, r3, #24
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	071b      	lsls	r3, r3, #28
 8002a52:	491b      	ldr	r1, [pc, #108]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a58:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <HAL_RCC_OscConfig+0x4b4>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5e:	f7fe ff0d 	bl	800187c <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a66:	f7fe ff09 	bl	800187c <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e064      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a78:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0x452>
 8002a84:	e05c      	b.n	8002b40 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a86:	4b10      	ldr	r3, [pc, #64]	; (8002ac8 <HAL_RCC_OscConfig+0x4b4>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fef6 	bl	800187c <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a94:	f7fe fef2 	bl	800187c <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e04d      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x480>
 8002ab2:	e045      	b.n	8002b40 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d107      	bne.n	8002acc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e040      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40007000 	.word	0x40007000
 8002ac8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002acc:	4b1f      	ldr	r3, [pc, #124]	; (8002b4c <HAL_RCC_OscConfig+0x538>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d030      	beq.n	8002b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d129      	bne.n	8002b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d122      	bne.n	8002b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002afc:	4013      	ands	r3, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d119      	bne.n	8002b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	085b      	lsrs	r3, r3, #1
 8002b14:	3b01      	subs	r3, #1
 8002b16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d10f      	bne.n	8002b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d107      	bne.n	8002b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800

08002b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e03f      	b.n	8002be2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fe fcda 	bl	8001530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2224      	movs	r2, #36	; 0x24
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fc7b 	bl	8003490 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695a      	ldr	r2, [r3, #20]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b0ba      	sub	sp, #232	; 0xe8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002c2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10f      	bne.n	8002c52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <HAL_UART_IRQHandler+0x66>
 8002c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fb65 	bl	800331a <UART_Receive_IT>
      return;
 8002c50:	e256      	b.n	8003100 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 80de 	beq.w	8002e18 <HAL_UART_IRQHandler+0x22c>
 8002c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d106      	bne.n	8002c76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80d1 	beq.w	8002e18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00b      	beq.n	8002c9a <HAL_UART_IRQHandler+0xae>
 8002c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f043 0201 	orr.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00b      	beq.n	8002cbe <HAL_UART_IRQHandler+0xd2>
 8002ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f043 0202 	orr.w	r2, r3, #2
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00b      	beq.n	8002ce2 <HAL_UART_IRQHandler+0xf6>
 8002cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f043 0204 	orr.w	r2, r3, #4
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d011      	beq.n	8002d12 <HAL_UART_IRQHandler+0x126>
 8002cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d105      	bne.n	8002d06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f043 0208 	orr.w	r2, r3, #8
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 81ed 	beq.w	80030f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_UART_IRQHandler+0x14e>
 8002d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d2c:	f003 0320 	and.w	r3, r3, #32
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 faf0 	bl	800331a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d44:	2b40      	cmp	r3, #64	; 0x40
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d103      	bne.n	8002d66 <HAL_UART_IRQHandler+0x17a>
 8002d5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d04f      	beq.n	8002e06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f9f8 	bl	800315c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d76:	2b40      	cmp	r3, #64	; 0x40
 8002d78:	d141      	bne.n	8002dfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3314      	adds	r3, #20
 8002d80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d88:	e853 3f00 	ldrex	r3, [r3]
 8002d8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3314      	adds	r3, #20
 8002da2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002da6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002daa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002db2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002db6:	e841 2300 	strex	r3, r2, [r1]
 8002dba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002dbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1d9      	bne.n	8002d7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d013      	beq.n	8002df6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	4a7d      	ldr	r2, [pc, #500]	; (8002fc8 <HAL_UART_IRQHandler+0x3dc>)
 8002dd4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe feff 	bl	8001bde <HAL_DMA_Abort_IT>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d016      	beq.n	8002e14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002df0:	4610      	mov	r0, r2
 8002df2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df4:	e00e      	b.n	8002e14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f99a 	bl	8003130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dfc:	e00a      	b.n	8002e14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f996 	bl	8003130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e04:	e006      	b.n	8002e14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f992 	bl	8003130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e12:	e170      	b.n	80030f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e14:	bf00      	nop
    return;
 8002e16:	e16e      	b.n	80030f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	f040 814a 	bne.w	80030b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 8143 	beq.w	80030b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 813c 	beq.w	80030b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5e:	2b40      	cmp	r3, #64	; 0x40
 8002e60:	f040 80b4 	bne.w	8002fcc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 8140 	beq.w	80030fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e82:	429a      	cmp	r2, r3
 8002e84:	f080 8139 	bcs.w	80030fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e9a:	f000 8088 	beq.w	8002fae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	330c      	adds	r3, #12
 8002ea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002eac:	e853 3f00 	ldrex	r3, [r3]
 8002eb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ebc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	330c      	adds	r3, #12
 8002ec6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002eca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ece:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ed6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002eda:	e841 2300 	strex	r3, r2, [r1]
 8002ede:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1d9      	bne.n	8002e9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3314      	adds	r3, #20
 8002ef0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ef4:	e853 3f00 	ldrex	r3, [r3]
 8002ef8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3314      	adds	r3, #20
 8002f0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f1a:	e841 2300 	strex	r3, r2, [r1]
 8002f1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1e1      	bne.n	8002eea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	3314      	adds	r3, #20
 8002f2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f30:	e853 3f00 	ldrex	r3, [r3]
 8002f34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3314      	adds	r3, #20
 8002f46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f52:	e841 2300 	strex	r3, r2, [r1]
 8002f56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1e3      	bne.n	8002f26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	330c      	adds	r3, #12
 8002f72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f76:	e853 3f00 	ldrex	r3, [r3]
 8002f7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f7e:	f023 0310 	bic.w	r3, r3, #16
 8002f82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	330c      	adds	r3, #12
 8002f8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002f90:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f98:	e841 2300 	strex	r3, r2, [r1]
 8002f9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1e3      	bne.n	8002f6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe fda8 	bl	8001afe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f8c0 	bl	8003144 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fc4:	e099      	b.n	80030fa <HAL_UART_IRQHandler+0x50e>
 8002fc6:	bf00      	nop
 8002fc8:	08003223 	.word	0x08003223
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 808b 	beq.w	80030fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002fe8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 8086 	beq.w	80030fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	330c      	adds	r3, #12
 8002ff8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffc:	e853 3f00 	ldrex	r3, [r3]
 8003000:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003004:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003008:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	330c      	adds	r3, #12
 8003012:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003016:	647a      	str	r2, [r7, #68]	; 0x44
 8003018:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800301c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800301e:	e841 2300 	strex	r3, r2, [r1]
 8003022:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1e3      	bne.n	8002ff2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3314      	adds	r3, #20
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	e853 3f00 	ldrex	r3, [r3]
 8003038:	623b      	str	r3, [r7, #32]
   return(result);
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3314      	adds	r3, #20
 800304a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800304e:	633a      	str	r2, [r7, #48]	; 0x30
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003052:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003056:	e841 2300 	strex	r3, r2, [r1]
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1e3      	bne.n	800302a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	330c      	adds	r3, #12
 8003076:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	e853 3f00 	ldrex	r3, [r3]
 800307e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0310 	bic.w	r3, r3, #16
 8003086:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	330c      	adds	r3, #12
 8003090:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003094:	61fa      	str	r2, [r7, #28]
 8003096:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003098:	69b9      	ldr	r1, [r7, #24]
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	e841 2300 	strex	r3, r2, [r1]
 80030a0:	617b      	str	r3, [r7, #20]
   return(result);
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e3      	bne.n	8003070 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030ac:	4619      	mov	r1, r3
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f848 	bl	8003144 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030b4:	e023      	b.n	80030fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_UART_IRQHandler+0x4ea>
 80030c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f8bb 	bl	800324a <UART_Transmit_IT>
    return;
 80030d4:	e014      	b.n	8003100 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00e      	beq.n	8003100 <HAL_UART_IRQHandler+0x514>
 80030e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d008      	beq.n	8003100 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f8fb 	bl	80032ea <UART_EndTransmit_IT>
    return;
 80030f4:	e004      	b.n	8003100 <HAL_UART_IRQHandler+0x514>
    return;
 80030f6:	bf00      	nop
 80030f8:	e002      	b.n	8003100 <HAL_UART_IRQHandler+0x514>
      return;
 80030fa:	bf00      	nop
 80030fc:	e000      	b.n	8003100 <HAL_UART_IRQHandler+0x514>
      return;
 80030fe:	bf00      	nop
  }
}
 8003100:	37e8      	adds	r7, #232	; 0xe8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop

08003108 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800315c:	b480      	push	{r7}
 800315e:	b095      	sub	sp, #84	; 0x54
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	330c      	adds	r3, #12
 800316a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800316e:	e853 3f00 	ldrex	r3, [r3]
 8003172:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800317a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	330c      	adds	r3, #12
 8003182:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003184:	643a      	str	r2, [r7, #64]	; 0x40
 8003186:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003188:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800318a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800318c:	e841 2300 	strex	r3, r2, [r1]
 8003190:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1e5      	bne.n	8003164 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3314      	adds	r3, #20
 800319e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	e853 3f00 	ldrex	r3, [r3]
 80031a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f023 0301 	bic.w	r3, r3, #1
 80031ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3314      	adds	r3, #20
 80031b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031c0:	e841 2300 	strex	r3, r2, [r1]
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1e5      	bne.n	8003198 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d119      	bne.n	8003208 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	330c      	adds	r3, #12
 80031da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	e853 3f00 	ldrex	r3, [r3]
 80031e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f023 0310 	bic.w	r3, r3, #16
 80031ea:	647b      	str	r3, [r7, #68]	; 0x44
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	330c      	adds	r3, #12
 80031f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031f4:	61ba      	str	r2, [r7, #24]
 80031f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f8:	6979      	ldr	r1, [r7, #20]
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	e841 2300 	strex	r3, r2, [r1]
 8003200:	613b      	str	r3, [r7, #16]
   return(result);
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e5      	bne.n	80031d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003216:	bf00      	nop
 8003218:	3754      	adds	r7, #84	; 0x54
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b084      	sub	sp, #16
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f7ff ff77 	bl	8003130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800324a:	b480      	push	{r7}
 800324c:	b085      	sub	sp, #20
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b21      	cmp	r3, #33	; 0x21
 800325c:	d13e      	bne.n	80032dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003266:	d114      	bne.n	8003292 <UART_Transmit_IT+0x48>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d110      	bne.n	8003292 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003284:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	1c9a      	adds	r2, r3, #2
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	621a      	str	r2, [r3, #32]
 8003290:	e008      	b.n	80032a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	1c59      	adds	r1, r3, #1
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6211      	str	r1, [r2, #32]
 800329c:	781a      	ldrb	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4619      	mov	r1, r3
 80032b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10f      	bne.n	80032d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	e000      	b.n	80032de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032dc:	2302      	movs	r3, #2
  }
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003300:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff fefc 	bl	8003108 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b08c      	sub	sp, #48	; 0x30
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b22      	cmp	r3, #34	; 0x22
 800332c:	f040 80ab 	bne.w	8003486 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003338:	d117      	bne.n	800336a <UART_Receive_IT+0x50>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d113      	bne.n	800336a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003342:	2300      	movs	r3, #0
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	b29b      	uxth	r3, r3
 8003354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003358:	b29a      	uxth	r2, r3
 800335a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	1c9a      	adds	r2, r3, #2
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
 8003368:	e026      	b.n	80033b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003370:	2300      	movs	r3, #0
 8003372:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337c:	d007      	beq.n	800338e <UART_Receive_IT+0x74>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <UART_Receive_IT+0x82>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	b2da      	uxtb	r2, r3
 8003396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e008      	b.n	80033ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	4619      	mov	r1, r3
 80033c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d15a      	bne.n	8003482 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0220 	bic.w	r2, r2, #32
 80033da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0201 	bic.w	r2, r2, #1
 80033fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	2b01      	cmp	r3, #1
 800340a:	d135      	bne.n	8003478 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	330c      	adds	r3, #12
 8003418:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	e853 3f00 	ldrex	r3, [r3]
 8003420:	613b      	str	r3, [r7, #16]
   return(result);
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f023 0310 	bic.w	r3, r3, #16
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	330c      	adds	r3, #12
 8003430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003432:	623a      	str	r2, [r7, #32]
 8003434:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003436:	69f9      	ldr	r1, [r7, #28]
 8003438:	6a3a      	ldr	r2, [r7, #32]
 800343a:	e841 2300 	strex	r3, r2, [r1]
 800343e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1e5      	bne.n	8003412 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b10      	cmp	r3, #16
 8003452:	d10a      	bne.n	800346a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800346e:	4619      	mov	r1, r3
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff fe67 	bl	8003144 <HAL_UARTEx_RxEventCallback>
 8003476:	e002      	b.n	800347e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff fe4f 	bl	800311c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	e002      	b.n	8003488 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	e000      	b.n	8003488 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003486:	2302      	movs	r3, #2
  }
}
 8003488:	4618      	mov	r0, r3
 800348a:	3730      	adds	r7, #48	; 0x30
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003494:	b0c0      	sub	sp, #256	; 0x100
 8003496:	af00      	add	r7, sp, #0
 8003498:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ac:	68d9      	ldr	r1, [r3, #12]
 80034ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	ea40 0301 	orr.w	r3, r0, r1
 80034b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034e8:	f021 010c 	bic.w	r1, r1, #12
 80034ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034f6:	430b      	orrs	r3, r1
 80034f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350a:	6999      	ldr	r1, [r3, #24]
 800350c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	ea40 0301 	orr.w	r3, r0, r1
 8003516:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4b8f      	ldr	r3, [pc, #572]	; (800375c <UART_SetConfig+0x2cc>)
 8003520:	429a      	cmp	r2, r3
 8003522:	d005      	beq.n	8003530 <UART_SetConfig+0xa0>
 8003524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4b8d      	ldr	r3, [pc, #564]	; (8003760 <UART_SetConfig+0x2d0>)
 800352c:	429a      	cmp	r2, r3
 800352e:	d104      	bne.n	800353a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003530:	f7fe fe2c 	bl	800218c <HAL_RCC_GetPCLK2Freq>
 8003534:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003538:	e003      	b.n	8003542 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800353a:	f7fe fe13 	bl	8002164 <HAL_RCC_GetPCLK1Freq>
 800353e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800354c:	f040 810c 	bne.w	8003768 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003554:	2200      	movs	r2, #0
 8003556:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800355a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800355e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003562:	4622      	mov	r2, r4
 8003564:	462b      	mov	r3, r5
 8003566:	1891      	adds	r1, r2, r2
 8003568:	65b9      	str	r1, [r7, #88]	; 0x58
 800356a:	415b      	adcs	r3, r3
 800356c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800356e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003572:	4621      	mov	r1, r4
 8003574:	eb12 0801 	adds.w	r8, r2, r1
 8003578:	4629      	mov	r1, r5
 800357a:	eb43 0901 	adc.w	r9, r3, r1
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800358a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800358e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003592:	4690      	mov	r8, r2
 8003594:	4699      	mov	r9, r3
 8003596:	4623      	mov	r3, r4
 8003598:	eb18 0303 	adds.w	r3, r8, r3
 800359c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035a0:	462b      	mov	r3, r5
 80035a2:	eb49 0303 	adc.w	r3, r9, r3
 80035a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80035ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035be:	460b      	mov	r3, r1
 80035c0:	18db      	adds	r3, r3, r3
 80035c2:	653b      	str	r3, [r7, #80]	; 0x50
 80035c4:	4613      	mov	r3, r2
 80035c6:	eb42 0303 	adc.w	r3, r2, r3
 80035ca:	657b      	str	r3, [r7, #84]	; 0x54
 80035cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80035d4:	f7fc fe84 	bl	80002e0 <__aeabi_uldivmod>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4b61      	ldr	r3, [pc, #388]	; (8003764 <UART_SetConfig+0x2d4>)
 80035de:	fba3 2302 	umull	r2, r3, r3, r2
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	011c      	lsls	r4, r3, #4
 80035e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035f8:	4642      	mov	r2, r8
 80035fa:	464b      	mov	r3, r9
 80035fc:	1891      	adds	r1, r2, r2
 80035fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003600:	415b      	adcs	r3, r3
 8003602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003604:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003608:	4641      	mov	r1, r8
 800360a:	eb12 0a01 	adds.w	sl, r2, r1
 800360e:	4649      	mov	r1, r9
 8003610:	eb43 0b01 	adc.w	fp, r3, r1
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003620:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003624:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003628:	4692      	mov	sl, r2
 800362a:	469b      	mov	fp, r3
 800362c:	4643      	mov	r3, r8
 800362e:	eb1a 0303 	adds.w	r3, sl, r3
 8003632:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003636:	464b      	mov	r3, r9
 8003638:	eb4b 0303 	adc.w	r3, fp, r3
 800363c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800364c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003650:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003654:	460b      	mov	r3, r1
 8003656:	18db      	adds	r3, r3, r3
 8003658:	643b      	str	r3, [r7, #64]	; 0x40
 800365a:	4613      	mov	r3, r2
 800365c:	eb42 0303 	adc.w	r3, r2, r3
 8003660:	647b      	str	r3, [r7, #68]	; 0x44
 8003662:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003666:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800366a:	f7fc fe39 	bl	80002e0 <__aeabi_uldivmod>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4611      	mov	r1, r2
 8003674:	4b3b      	ldr	r3, [pc, #236]	; (8003764 <UART_SetConfig+0x2d4>)
 8003676:	fba3 2301 	umull	r2, r3, r3, r1
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	2264      	movs	r2, #100	; 0x64
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	1acb      	subs	r3, r1, r3
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800368a:	4b36      	ldr	r3, [pc, #216]	; (8003764 <UART_SetConfig+0x2d4>)
 800368c:	fba3 2302 	umull	r2, r3, r3, r2
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003698:	441c      	add	r4, r3
 800369a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800369e:	2200      	movs	r2, #0
 80036a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036ac:	4642      	mov	r2, r8
 80036ae:	464b      	mov	r3, r9
 80036b0:	1891      	adds	r1, r2, r2
 80036b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80036b4:	415b      	adcs	r3, r3
 80036b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036bc:	4641      	mov	r1, r8
 80036be:	1851      	adds	r1, r2, r1
 80036c0:	6339      	str	r1, [r7, #48]	; 0x30
 80036c2:	4649      	mov	r1, r9
 80036c4:	414b      	adcs	r3, r1
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80036d4:	4659      	mov	r1, fp
 80036d6:	00cb      	lsls	r3, r1, #3
 80036d8:	4651      	mov	r1, sl
 80036da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036de:	4651      	mov	r1, sl
 80036e0:	00ca      	lsls	r2, r1, #3
 80036e2:	4610      	mov	r0, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	4603      	mov	r3, r0
 80036e8:	4642      	mov	r2, r8
 80036ea:	189b      	adds	r3, r3, r2
 80036ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036f0:	464b      	mov	r3, r9
 80036f2:	460a      	mov	r2, r1
 80036f4:	eb42 0303 	adc.w	r3, r2, r3
 80036f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003708:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800370c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003710:	460b      	mov	r3, r1
 8003712:	18db      	adds	r3, r3, r3
 8003714:	62bb      	str	r3, [r7, #40]	; 0x28
 8003716:	4613      	mov	r3, r2
 8003718:	eb42 0303 	adc.w	r3, r2, r3
 800371c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800371e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003722:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003726:	f7fc fddb 	bl	80002e0 <__aeabi_uldivmod>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <UART_SetConfig+0x2d4>)
 8003730:	fba3 1302 	umull	r1, r3, r3, r2
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	2164      	movs	r1, #100	; 0x64
 8003738:	fb01 f303 	mul.w	r3, r1, r3
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	3332      	adds	r3, #50	; 0x32
 8003742:	4a08      	ldr	r2, [pc, #32]	; (8003764 <UART_SetConfig+0x2d4>)
 8003744:	fba2 2303 	umull	r2, r3, r2, r3
 8003748:	095b      	lsrs	r3, r3, #5
 800374a:	f003 0207 	and.w	r2, r3, #7
 800374e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4422      	add	r2, r4
 8003756:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003758:	e105      	b.n	8003966 <UART_SetConfig+0x4d6>
 800375a:	bf00      	nop
 800375c:	40011000 	.word	0x40011000
 8003760:	40011400 	.word	0x40011400
 8003764:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800376c:	2200      	movs	r2, #0
 800376e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003772:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003776:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800377a:	4642      	mov	r2, r8
 800377c:	464b      	mov	r3, r9
 800377e:	1891      	adds	r1, r2, r2
 8003780:	6239      	str	r1, [r7, #32]
 8003782:	415b      	adcs	r3, r3
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
 8003786:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800378a:	4641      	mov	r1, r8
 800378c:	1854      	adds	r4, r2, r1
 800378e:	4649      	mov	r1, r9
 8003790:	eb43 0501 	adc.w	r5, r3, r1
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	00eb      	lsls	r3, r5, #3
 800379e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037a2:	00e2      	lsls	r2, r4, #3
 80037a4:	4614      	mov	r4, r2
 80037a6:	461d      	mov	r5, r3
 80037a8:	4643      	mov	r3, r8
 80037aa:	18e3      	adds	r3, r4, r3
 80037ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037b0:	464b      	mov	r3, r9
 80037b2:	eb45 0303 	adc.w	r3, r5, r3
 80037b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037d6:	4629      	mov	r1, r5
 80037d8:	008b      	lsls	r3, r1, #2
 80037da:	4621      	mov	r1, r4
 80037dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037e0:	4621      	mov	r1, r4
 80037e2:	008a      	lsls	r2, r1, #2
 80037e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80037e8:	f7fc fd7a 	bl	80002e0 <__aeabi_uldivmod>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4b60      	ldr	r3, [pc, #384]	; (8003974 <UART_SetConfig+0x4e4>)
 80037f2:	fba3 2302 	umull	r2, r3, r3, r2
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	011c      	lsls	r4, r3, #4
 80037fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037fe:	2200      	movs	r2, #0
 8003800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003804:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003808:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800380c:	4642      	mov	r2, r8
 800380e:	464b      	mov	r3, r9
 8003810:	1891      	adds	r1, r2, r2
 8003812:	61b9      	str	r1, [r7, #24]
 8003814:	415b      	adcs	r3, r3
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800381c:	4641      	mov	r1, r8
 800381e:	1851      	adds	r1, r2, r1
 8003820:	6139      	str	r1, [r7, #16]
 8003822:	4649      	mov	r1, r9
 8003824:	414b      	adcs	r3, r1
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003834:	4659      	mov	r1, fp
 8003836:	00cb      	lsls	r3, r1, #3
 8003838:	4651      	mov	r1, sl
 800383a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800383e:	4651      	mov	r1, sl
 8003840:	00ca      	lsls	r2, r1, #3
 8003842:	4610      	mov	r0, r2
 8003844:	4619      	mov	r1, r3
 8003846:	4603      	mov	r3, r0
 8003848:	4642      	mov	r2, r8
 800384a:	189b      	adds	r3, r3, r2
 800384c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003850:	464b      	mov	r3, r9
 8003852:	460a      	mov	r2, r1
 8003854:	eb42 0303 	adc.w	r3, r2, r3
 8003858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	67bb      	str	r3, [r7, #120]	; 0x78
 8003866:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003874:	4649      	mov	r1, r9
 8003876:	008b      	lsls	r3, r1, #2
 8003878:	4641      	mov	r1, r8
 800387a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800387e:	4641      	mov	r1, r8
 8003880:	008a      	lsls	r2, r1, #2
 8003882:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003886:	f7fc fd2b 	bl	80002e0 <__aeabi_uldivmod>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4b39      	ldr	r3, [pc, #228]	; (8003974 <UART_SetConfig+0x4e4>)
 8003890:	fba3 1302 	umull	r1, r3, r3, r2
 8003894:	095b      	lsrs	r3, r3, #5
 8003896:	2164      	movs	r1, #100	; 0x64
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	3332      	adds	r3, #50	; 0x32
 80038a2:	4a34      	ldr	r2, [pc, #208]	; (8003974 <UART_SetConfig+0x4e4>)
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038ae:	441c      	add	r4, r3
 80038b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038b4:	2200      	movs	r2, #0
 80038b6:	673b      	str	r3, [r7, #112]	; 0x70
 80038b8:	677a      	str	r2, [r7, #116]	; 0x74
 80038ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80038be:	4642      	mov	r2, r8
 80038c0:	464b      	mov	r3, r9
 80038c2:	1891      	adds	r1, r2, r2
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	415b      	adcs	r3, r3
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ce:	4641      	mov	r1, r8
 80038d0:	1851      	adds	r1, r2, r1
 80038d2:	6039      	str	r1, [r7, #0]
 80038d4:	4649      	mov	r1, r9
 80038d6:	414b      	adcs	r3, r1
 80038d8:	607b      	str	r3, [r7, #4]
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038e6:	4659      	mov	r1, fp
 80038e8:	00cb      	lsls	r3, r1, #3
 80038ea:	4651      	mov	r1, sl
 80038ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038f0:	4651      	mov	r1, sl
 80038f2:	00ca      	lsls	r2, r1, #3
 80038f4:	4610      	mov	r0, r2
 80038f6:	4619      	mov	r1, r3
 80038f8:	4603      	mov	r3, r0
 80038fa:	4642      	mov	r2, r8
 80038fc:	189b      	adds	r3, r3, r2
 80038fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003900:	464b      	mov	r3, r9
 8003902:	460a      	mov	r2, r1
 8003904:	eb42 0303 	adc.w	r3, r2, r3
 8003908:	66fb      	str	r3, [r7, #108]	; 0x6c
 800390a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	663b      	str	r3, [r7, #96]	; 0x60
 8003914:	667a      	str	r2, [r7, #100]	; 0x64
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003922:	4649      	mov	r1, r9
 8003924:	008b      	lsls	r3, r1, #2
 8003926:	4641      	mov	r1, r8
 8003928:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800392c:	4641      	mov	r1, r8
 800392e:	008a      	lsls	r2, r1, #2
 8003930:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003934:	f7fc fcd4 	bl	80002e0 <__aeabi_uldivmod>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <UART_SetConfig+0x4e4>)
 800393e:	fba3 1302 	umull	r1, r3, r3, r2
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	2164      	movs	r1, #100	; 0x64
 8003946:	fb01 f303 	mul.w	r3, r1, r3
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	3332      	adds	r3, #50	; 0x32
 8003950:	4a08      	ldr	r2, [pc, #32]	; (8003974 <UART_SetConfig+0x4e4>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	f003 020f 	and.w	r2, r3, #15
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4422      	add	r2, r4
 8003964:	609a      	str	r2, [r3, #8]
}
 8003966:	bf00      	nop
 8003968:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800396c:	46bd      	mov	sp, r7
 800396e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003972:	bf00      	nop
 8003974:	51eb851f 	.word	0x51eb851f

08003978 <__errno>:
 8003978:	4b01      	ldr	r3, [pc, #4]	; (8003980 <__errno+0x8>)
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	2000001c 	.word	0x2000001c

08003984 <__libc_init_array>:
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	4d0d      	ldr	r5, [pc, #52]	; (80039bc <__libc_init_array+0x38>)
 8003988:	4c0d      	ldr	r4, [pc, #52]	; (80039c0 <__libc_init_array+0x3c>)
 800398a:	1b64      	subs	r4, r4, r5
 800398c:	10a4      	asrs	r4, r4, #2
 800398e:	2600      	movs	r6, #0
 8003990:	42a6      	cmp	r6, r4
 8003992:	d109      	bne.n	80039a8 <__libc_init_array+0x24>
 8003994:	4d0b      	ldr	r5, [pc, #44]	; (80039c4 <__libc_init_array+0x40>)
 8003996:	4c0c      	ldr	r4, [pc, #48]	; (80039c8 <__libc_init_array+0x44>)
 8003998:	f000 fc9c 	bl	80042d4 <_init>
 800399c:	1b64      	subs	r4, r4, r5
 800399e:	10a4      	asrs	r4, r4, #2
 80039a0:	2600      	movs	r6, #0
 80039a2:	42a6      	cmp	r6, r4
 80039a4:	d105      	bne.n	80039b2 <__libc_init_array+0x2e>
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
 80039a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ac:	4798      	blx	r3
 80039ae:	3601      	adds	r6, #1
 80039b0:	e7ee      	b.n	8003990 <__libc_init_array+0xc>
 80039b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b6:	4798      	blx	r3
 80039b8:	3601      	adds	r6, #1
 80039ba:	e7f2      	b.n	80039a2 <__libc_init_array+0x1e>
 80039bc:	08004950 	.word	0x08004950
 80039c0:	08004950 	.word	0x08004950
 80039c4:	08004950 	.word	0x08004950
 80039c8:	08004954 	.word	0x08004954

080039cc <memset>:
 80039cc:	4402      	add	r2, r0
 80039ce:	4603      	mov	r3, r0
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d100      	bne.n	80039d6 <memset+0xa>
 80039d4:	4770      	bx	lr
 80039d6:	f803 1b01 	strb.w	r1, [r3], #1
 80039da:	e7f9      	b.n	80039d0 <memset+0x4>

080039dc <siprintf>:
 80039dc:	b40e      	push	{r1, r2, r3}
 80039de:	b500      	push	{lr}
 80039e0:	b09c      	sub	sp, #112	; 0x70
 80039e2:	ab1d      	add	r3, sp, #116	; 0x74
 80039e4:	9002      	str	r0, [sp, #8]
 80039e6:	9006      	str	r0, [sp, #24]
 80039e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039ec:	4809      	ldr	r0, [pc, #36]	; (8003a14 <siprintf+0x38>)
 80039ee:	9107      	str	r1, [sp, #28]
 80039f0:	9104      	str	r1, [sp, #16]
 80039f2:	4909      	ldr	r1, [pc, #36]	; (8003a18 <siprintf+0x3c>)
 80039f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80039f8:	9105      	str	r1, [sp, #20]
 80039fa:	6800      	ldr	r0, [r0, #0]
 80039fc:	9301      	str	r3, [sp, #4]
 80039fe:	a902      	add	r1, sp, #8
 8003a00:	f000 f876 	bl	8003af0 <_svfiprintf_r>
 8003a04:	9b02      	ldr	r3, [sp, #8]
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]
 8003a0a:	b01c      	add	sp, #112	; 0x70
 8003a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a10:	b003      	add	sp, #12
 8003a12:	4770      	bx	lr
 8003a14:	2000001c 	.word	0x2000001c
 8003a18:	ffff0208 	.word	0xffff0208

08003a1c <strcat>:
 8003a1c:	b510      	push	{r4, lr}
 8003a1e:	4602      	mov	r2, r0
 8003a20:	7814      	ldrb	r4, [r2, #0]
 8003a22:	4613      	mov	r3, r2
 8003a24:	3201      	adds	r2, #1
 8003a26:	2c00      	cmp	r4, #0
 8003a28:	d1fa      	bne.n	8003a20 <strcat+0x4>
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a30:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a34:	2a00      	cmp	r2, #0
 8003a36:	d1f9      	bne.n	8003a2c <strcat+0x10>
 8003a38:	bd10      	pop	{r4, pc}

08003a3a <__ssputs_r>:
 8003a3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a3e:	688e      	ldr	r6, [r1, #8]
 8003a40:	429e      	cmp	r6, r3
 8003a42:	4682      	mov	sl, r0
 8003a44:	460c      	mov	r4, r1
 8003a46:	4690      	mov	r8, r2
 8003a48:	461f      	mov	r7, r3
 8003a4a:	d838      	bhi.n	8003abe <__ssputs_r+0x84>
 8003a4c:	898a      	ldrh	r2, [r1, #12]
 8003a4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a52:	d032      	beq.n	8003aba <__ssputs_r+0x80>
 8003a54:	6825      	ldr	r5, [r4, #0]
 8003a56:	6909      	ldr	r1, [r1, #16]
 8003a58:	eba5 0901 	sub.w	r9, r5, r1
 8003a5c:	6965      	ldr	r5, [r4, #20]
 8003a5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a66:	3301      	adds	r3, #1
 8003a68:	444b      	add	r3, r9
 8003a6a:	106d      	asrs	r5, r5, #1
 8003a6c:	429d      	cmp	r5, r3
 8003a6e:	bf38      	it	cc
 8003a70:	461d      	movcc	r5, r3
 8003a72:	0553      	lsls	r3, r2, #21
 8003a74:	d531      	bpl.n	8003ada <__ssputs_r+0xa0>
 8003a76:	4629      	mov	r1, r5
 8003a78:	f000 fb62 	bl	8004140 <_malloc_r>
 8003a7c:	4606      	mov	r6, r0
 8003a7e:	b950      	cbnz	r0, 8003a96 <__ssputs_r+0x5c>
 8003a80:	230c      	movs	r3, #12
 8003a82:	f8ca 3000 	str.w	r3, [sl]
 8003a86:	89a3      	ldrh	r3, [r4, #12]
 8003a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a8c:	81a3      	strh	r3, [r4, #12]
 8003a8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a96:	6921      	ldr	r1, [r4, #16]
 8003a98:	464a      	mov	r2, r9
 8003a9a:	f000 fabd 	bl	8004018 <memcpy>
 8003a9e:	89a3      	ldrh	r3, [r4, #12]
 8003aa0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa8:	81a3      	strh	r3, [r4, #12]
 8003aaa:	6126      	str	r6, [r4, #16]
 8003aac:	6165      	str	r5, [r4, #20]
 8003aae:	444e      	add	r6, r9
 8003ab0:	eba5 0509 	sub.w	r5, r5, r9
 8003ab4:	6026      	str	r6, [r4, #0]
 8003ab6:	60a5      	str	r5, [r4, #8]
 8003ab8:	463e      	mov	r6, r7
 8003aba:	42be      	cmp	r6, r7
 8003abc:	d900      	bls.n	8003ac0 <__ssputs_r+0x86>
 8003abe:	463e      	mov	r6, r7
 8003ac0:	6820      	ldr	r0, [r4, #0]
 8003ac2:	4632      	mov	r2, r6
 8003ac4:	4641      	mov	r1, r8
 8003ac6:	f000 fab5 	bl	8004034 <memmove>
 8003aca:	68a3      	ldr	r3, [r4, #8]
 8003acc:	1b9b      	subs	r3, r3, r6
 8003ace:	60a3      	str	r3, [r4, #8]
 8003ad0:	6823      	ldr	r3, [r4, #0]
 8003ad2:	4433      	add	r3, r6
 8003ad4:	6023      	str	r3, [r4, #0]
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	e7db      	b.n	8003a92 <__ssputs_r+0x58>
 8003ada:	462a      	mov	r2, r5
 8003adc:	f000 fba4 	bl	8004228 <_realloc_r>
 8003ae0:	4606      	mov	r6, r0
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	d1e1      	bne.n	8003aaa <__ssputs_r+0x70>
 8003ae6:	6921      	ldr	r1, [r4, #16]
 8003ae8:	4650      	mov	r0, sl
 8003aea:	f000 fabd 	bl	8004068 <_free_r>
 8003aee:	e7c7      	b.n	8003a80 <__ssputs_r+0x46>

08003af0 <_svfiprintf_r>:
 8003af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003af4:	4698      	mov	r8, r3
 8003af6:	898b      	ldrh	r3, [r1, #12]
 8003af8:	061b      	lsls	r3, r3, #24
 8003afa:	b09d      	sub	sp, #116	; 0x74
 8003afc:	4607      	mov	r7, r0
 8003afe:	460d      	mov	r5, r1
 8003b00:	4614      	mov	r4, r2
 8003b02:	d50e      	bpl.n	8003b22 <_svfiprintf_r+0x32>
 8003b04:	690b      	ldr	r3, [r1, #16]
 8003b06:	b963      	cbnz	r3, 8003b22 <_svfiprintf_r+0x32>
 8003b08:	2140      	movs	r1, #64	; 0x40
 8003b0a:	f000 fb19 	bl	8004140 <_malloc_r>
 8003b0e:	6028      	str	r0, [r5, #0]
 8003b10:	6128      	str	r0, [r5, #16]
 8003b12:	b920      	cbnz	r0, 8003b1e <_svfiprintf_r+0x2e>
 8003b14:	230c      	movs	r3, #12
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b1c:	e0d1      	b.n	8003cc2 <_svfiprintf_r+0x1d2>
 8003b1e:	2340      	movs	r3, #64	; 0x40
 8003b20:	616b      	str	r3, [r5, #20]
 8003b22:	2300      	movs	r3, #0
 8003b24:	9309      	str	r3, [sp, #36]	; 0x24
 8003b26:	2320      	movs	r3, #32
 8003b28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b30:	2330      	movs	r3, #48	; 0x30
 8003b32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003cdc <_svfiprintf_r+0x1ec>
 8003b36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b3a:	f04f 0901 	mov.w	r9, #1
 8003b3e:	4623      	mov	r3, r4
 8003b40:	469a      	mov	sl, r3
 8003b42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b46:	b10a      	cbz	r2, 8003b4c <_svfiprintf_r+0x5c>
 8003b48:	2a25      	cmp	r2, #37	; 0x25
 8003b4a:	d1f9      	bne.n	8003b40 <_svfiprintf_r+0x50>
 8003b4c:	ebba 0b04 	subs.w	fp, sl, r4
 8003b50:	d00b      	beq.n	8003b6a <_svfiprintf_r+0x7a>
 8003b52:	465b      	mov	r3, fp
 8003b54:	4622      	mov	r2, r4
 8003b56:	4629      	mov	r1, r5
 8003b58:	4638      	mov	r0, r7
 8003b5a:	f7ff ff6e 	bl	8003a3a <__ssputs_r>
 8003b5e:	3001      	adds	r0, #1
 8003b60:	f000 80aa 	beq.w	8003cb8 <_svfiprintf_r+0x1c8>
 8003b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b66:	445a      	add	r2, fp
 8003b68:	9209      	str	r2, [sp, #36]	; 0x24
 8003b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80a2 	beq.w	8003cb8 <_svfiprintf_r+0x1c8>
 8003b74:	2300      	movs	r3, #0
 8003b76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b7e:	f10a 0a01 	add.w	sl, sl, #1
 8003b82:	9304      	str	r3, [sp, #16]
 8003b84:	9307      	str	r3, [sp, #28]
 8003b86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b8a:	931a      	str	r3, [sp, #104]	; 0x68
 8003b8c:	4654      	mov	r4, sl
 8003b8e:	2205      	movs	r2, #5
 8003b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b94:	4851      	ldr	r0, [pc, #324]	; (8003cdc <_svfiprintf_r+0x1ec>)
 8003b96:	f7fc fb53 	bl	8000240 <memchr>
 8003b9a:	9a04      	ldr	r2, [sp, #16]
 8003b9c:	b9d8      	cbnz	r0, 8003bd6 <_svfiprintf_r+0xe6>
 8003b9e:	06d0      	lsls	r0, r2, #27
 8003ba0:	bf44      	itt	mi
 8003ba2:	2320      	movmi	r3, #32
 8003ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ba8:	0711      	lsls	r1, r2, #28
 8003baa:	bf44      	itt	mi
 8003bac:	232b      	movmi	r3, #43	; 0x2b
 8003bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8003bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8003bb8:	d015      	beq.n	8003be6 <_svfiprintf_r+0xf6>
 8003bba:	9a07      	ldr	r2, [sp, #28]
 8003bbc:	4654      	mov	r4, sl
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	f04f 0c0a 	mov.w	ip, #10
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bca:	3b30      	subs	r3, #48	; 0x30
 8003bcc:	2b09      	cmp	r3, #9
 8003bce:	d94e      	bls.n	8003c6e <_svfiprintf_r+0x17e>
 8003bd0:	b1b0      	cbz	r0, 8003c00 <_svfiprintf_r+0x110>
 8003bd2:	9207      	str	r2, [sp, #28]
 8003bd4:	e014      	b.n	8003c00 <_svfiprintf_r+0x110>
 8003bd6:	eba0 0308 	sub.w	r3, r0, r8
 8003bda:	fa09 f303 	lsl.w	r3, r9, r3
 8003bde:	4313      	orrs	r3, r2
 8003be0:	9304      	str	r3, [sp, #16]
 8003be2:	46a2      	mov	sl, r4
 8003be4:	e7d2      	b.n	8003b8c <_svfiprintf_r+0x9c>
 8003be6:	9b03      	ldr	r3, [sp, #12]
 8003be8:	1d19      	adds	r1, r3, #4
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	9103      	str	r1, [sp, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	bfbb      	ittet	lt
 8003bf2:	425b      	neglt	r3, r3
 8003bf4:	f042 0202 	orrlt.w	r2, r2, #2
 8003bf8:	9307      	strge	r3, [sp, #28]
 8003bfa:	9307      	strlt	r3, [sp, #28]
 8003bfc:	bfb8      	it	lt
 8003bfe:	9204      	strlt	r2, [sp, #16]
 8003c00:	7823      	ldrb	r3, [r4, #0]
 8003c02:	2b2e      	cmp	r3, #46	; 0x2e
 8003c04:	d10c      	bne.n	8003c20 <_svfiprintf_r+0x130>
 8003c06:	7863      	ldrb	r3, [r4, #1]
 8003c08:	2b2a      	cmp	r3, #42	; 0x2a
 8003c0a:	d135      	bne.n	8003c78 <_svfiprintf_r+0x188>
 8003c0c:	9b03      	ldr	r3, [sp, #12]
 8003c0e:	1d1a      	adds	r2, r3, #4
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	9203      	str	r2, [sp, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bfb8      	it	lt
 8003c18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003c1c:	3402      	adds	r4, #2
 8003c1e:	9305      	str	r3, [sp, #20]
 8003c20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003cec <_svfiprintf_r+0x1fc>
 8003c24:	7821      	ldrb	r1, [r4, #0]
 8003c26:	2203      	movs	r2, #3
 8003c28:	4650      	mov	r0, sl
 8003c2a:	f7fc fb09 	bl	8000240 <memchr>
 8003c2e:	b140      	cbz	r0, 8003c42 <_svfiprintf_r+0x152>
 8003c30:	2340      	movs	r3, #64	; 0x40
 8003c32:	eba0 000a 	sub.w	r0, r0, sl
 8003c36:	fa03 f000 	lsl.w	r0, r3, r0
 8003c3a:	9b04      	ldr	r3, [sp, #16]
 8003c3c:	4303      	orrs	r3, r0
 8003c3e:	3401      	adds	r4, #1
 8003c40:	9304      	str	r3, [sp, #16]
 8003c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c46:	4826      	ldr	r0, [pc, #152]	; (8003ce0 <_svfiprintf_r+0x1f0>)
 8003c48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c4c:	2206      	movs	r2, #6
 8003c4e:	f7fc faf7 	bl	8000240 <memchr>
 8003c52:	2800      	cmp	r0, #0
 8003c54:	d038      	beq.n	8003cc8 <_svfiprintf_r+0x1d8>
 8003c56:	4b23      	ldr	r3, [pc, #140]	; (8003ce4 <_svfiprintf_r+0x1f4>)
 8003c58:	bb1b      	cbnz	r3, 8003ca2 <_svfiprintf_r+0x1b2>
 8003c5a:	9b03      	ldr	r3, [sp, #12]
 8003c5c:	3307      	adds	r3, #7
 8003c5e:	f023 0307 	bic.w	r3, r3, #7
 8003c62:	3308      	adds	r3, #8
 8003c64:	9303      	str	r3, [sp, #12]
 8003c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c68:	4433      	add	r3, r6
 8003c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c6c:	e767      	b.n	8003b3e <_svfiprintf_r+0x4e>
 8003c6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c72:	460c      	mov	r4, r1
 8003c74:	2001      	movs	r0, #1
 8003c76:	e7a5      	b.n	8003bc4 <_svfiprintf_r+0xd4>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	3401      	adds	r4, #1
 8003c7c:	9305      	str	r3, [sp, #20]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	f04f 0c0a 	mov.w	ip, #10
 8003c84:	4620      	mov	r0, r4
 8003c86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c8a:	3a30      	subs	r2, #48	; 0x30
 8003c8c:	2a09      	cmp	r2, #9
 8003c8e:	d903      	bls.n	8003c98 <_svfiprintf_r+0x1a8>
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0c5      	beq.n	8003c20 <_svfiprintf_r+0x130>
 8003c94:	9105      	str	r1, [sp, #20]
 8003c96:	e7c3      	b.n	8003c20 <_svfiprintf_r+0x130>
 8003c98:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c9c:	4604      	mov	r4, r0
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e7f0      	b.n	8003c84 <_svfiprintf_r+0x194>
 8003ca2:	ab03      	add	r3, sp, #12
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	462a      	mov	r2, r5
 8003ca8:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <_svfiprintf_r+0x1f8>)
 8003caa:	a904      	add	r1, sp, #16
 8003cac:	4638      	mov	r0, r7
 8003cae:	f3af 8000 	nop.w
 8003cb2:	1c42      	adds	r2, r0, #1
 8003cb4:	4606      	mov	r6, r0
 8003cb6:	d1d6      	bne.n	8003c66 <_svfiprintf_r+0x176>
 8003cb8:	89ab      	ldrh	r3, [r5, #12]
 8003cba:	065b      	lsls	r3, r3, #25
 8003cbc:	f53f af2c 	bmi.w	8003b18 <_svfiprintf_r+0x28>
 8003cc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cc2:	b01d      	add	sp, #116	; 0x74
 8003cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cc8:	ab03      	add	r3, sp, #12
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	462a      	mov	r2, r5
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <_svfiprintf_r+0x1f8>)
 8003cd0:	a904      	add	r1, sp, #16
 8003cd2:	4638      	mov	r0, r7
 8003cd4:	f000 f87a 	bl	8003dcc <_printf_i>
 8003cd8:	e7eb      	b.n	8003cb2 <_svfiprintf_r+0x1c2>
 8003cda:	bf00      	nop
 8003cdc:	08004914 	.word	0x08004914
 8003ce0:	0800491e 	.word	0x0800491e
 8003ce4:	00000000 	.word	0x00000000
 8003ce8:	08003a3b 	.word	0x08003a3b
 8003cec:	0800491a 	.word	0x0800491a

08003cf0 <_printf_common>:
 8003cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf4:	4616      	mov	r6, r2
 8003cf6:	4699      	mov	r9, r3
 8003cf8:	688a      	ldr	r2, [r1, #8]
 8003cfa:	690b      	ldr	r3, [r1, #16]
 8003cfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d00:	4293      	cmp	r3, r2
 8003d02:	bfb8      	it	lt
 8003d04:	4613      	movlt	r3, r2
 8003d06:	6033      	str	r3, [r6, #0]
 8003d08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d0c:	4607      	mov	r7, r0
 8003d0e:	460c      	mov	r4, r1
 8003d10:	b10a      	cbz	r2, 8003d16 <_printf_common+0x26>
 8003d12:	3301      	adds	r3, #1
 8003d14:	6033      	str	r3, [r6, #0]
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	0699      	lsls	r1, r3, #26
 8003d1a:	bf42      	ittt	mi
 8003d1c:	6833      	ldrmi	r3, [r6, #0]
 8003d1e:	3302      	addmi	r3, #2
 8003d20:	6033      	strmi	r3, [r6, #0]
 8003d22:	6825      	ldr	r5, [r4, #0]
 8003d24:	f015 0506 	ands.w	r5, r5, #6
 8003d28:	d106      	bne.n	8003d38 <_printf_common+0x48>
 8003d2a:	f104 0a19 	add.w	sl, r4, #25
 8003d2e:	68e3      	ldr	r3, [r4, #12]
 8003d30:	6832      	ldr	r2, [r6, #0]
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	42ab      	cmp	r3, r5
 8003d36:	dc26      	bgt.n	8003d86 <_printf_common+0x96>
 8003d38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d3c:	1e13      	subs	r3, r2, #0
 8003d3e:	6822      	ldr	r2, [r4, #0]
 8003d40:	bf18      	it	ne
 8003d42:	2301      	movne	r3, #1
 8003d44:	0692      	lsls	r2, r2, #26
 8003d46:	d42b      	bmi.n	8003da0 <_printf_common+0xb0>
 8003d48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d4c:	4649      	mov	r1, r9
 8003d4e:	4638      	mov	r0, r7
 8003d50:	47c0      	blx	r8
 8003d52:	3001      	adds	r0, #1
 8003d54:	d01e      	beq.n	8003d94 <_printf_common+0xa4>
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	68e5      	ldr	r5, [r4, #12]
 8003d5a:	6832      	ldr	r2, [r6, #0]
 8003d5c:	f003 0306 	and.w	r3, r3, #6
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	bf08      	it	eq
 8003d64:	1aad      	subeq	r5, r5, r2
 8003d66:	68a3      	ldr	r3, [r4, #8]
 8003d68:	6922      	ldr	r2, [r4, #16]
 8003d6a:	bf0c      	ite	eq
 8003d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d70:	2500      	movne	r5, #0
 8003d72:	4293      	cmp	r3, r2
 8003d74:	bfc4      	itt	gt
 8003d76:	1a9b      	subgt	r3, r3, r2
 8003d78:	18ed      	addgt	r5, r5, r3
 8003d7a:	2600      	movs	r6, #0
 8003d7c:	341a      	adds	r4, #26
 8003d7e:	42b5      	cmp	r5, r6
 8003d80:	d11a      	bne.n	8003db8 <_printf_common+0xc8>
 8003d82:	2000      	movs	r0, #0
 8003d84:	e008      	b.n	8003d98 <_printf_common+0xa8>
 8003d86:	2301      	movs	r3, #1
 8003d88:	4652      	mov	r2, sl
 8003d8a:	4649      	mov	r1, r9
 8003d8c:	4638      	mov	r0, r7
 8003d8e:	47c0      	blx	r8
 8003d90:	3001      	adds	r0, #1
 8003d92:	d103      	bne.n	8003d9c <_printf_common+0xac>
 8003d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d9c:	3501      	adds	r5, #1
 8003d9e:	e7c6      	b.n	8003d2e <_printf_common+0x3e>
 8003da0:	18e1      	adds	r1, r4, r3
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	2030      	movs	r0, #48	; 0x30
 8003da6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003daa:	4422      	add	r2, r4
 8003dac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003db0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003db4:	3302      	adds	r3, #2
 8003db6:	e7c7      	b.n	8003d48 <_printf_common+0x58>
 8003db8:	2301      	movs	r3, #1
 8003dba:	4622      	mov	r2, r4
 8003dbc:	4649      	mov	r1, r9
 8003dbe:	4638      	mov	r0, r7
 8003dc0:	47c0      	blx	r8
 8003dc2:	3001      	adds	r0, #1
 8003dc4:	d0e6      	beq.n	8003d94 <_printf_common+0xa4>
 8003dc6:	3601      	adds	r6, #1
 8003dc8:	e7d9      	b.n	8003d7e <_printf_common+0x8e>
	...

08003dcc <_printf_i>:
 8003dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd0:	7e0f      	ldrb	r7, [r1, #24]
 8003dd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003dd4:	2f78      	cmp	r7, #120	; 0x78
 8003dd6:	4691      	mov	r9, r2
 8003dd8:	4680      	mov	r8, r0
 8003dda:	460c      	mov	r4, r1
 8003ddc:	469a      	mov	sl, r3
 8003dde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003de2:	d807      	bhi.n	8003df4 <_printf_i+0x28>
 8003de4:	2f62      	cmp	r7, #98	; 0x62
 8003de6:	d80a      	bhi.n	8003dfe <_printf_i+0x32>
 8003de8:	2f00      	cmp	r7, #0
 8003dea:	f000 80d8 	beq.w	8003f9e <_printf_i+0x1d2>
 8003dee:	2f58      	cmp	r7, #88	; 0x58
 8003df0:	f000 80a3 	beq.w	8003f3a <_printf_i+0x16e>
 8003df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003df8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003dfc:	e03a      	b.n	8003e74 <_printf_i+0xa8>
 8003dfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e02:	2b15      	cmp	r3, #21
 8003e04:	d8f6      	bhi.n	8003df4 <_printf_i+0x28>
 8003e06:	a101      	add	r1, pc, #4	; (adr r1, 8003e0c <_printf_i+0x40>)
 8003e08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e0c:	08003e65 	.word	0x08003e65
 8003e10:	08003e79 	.word	0x08003e79
 8003e14:	08003df5 	.word	0x08003df5
 8003e18:	08003df5 	.word	0x08003df5
 8003e1c:	08003df5 	.word	0x08003df5
 8003e20:	08003df5 	.word	0x08003df5
 8003e24:	08003e79 	.word	0x08003e79
 8003e28:	08003df5 	.word	0x08003df5
 8003e2c:	08003df5 	.word	0x08003df5
 8003e30:	08003df5 	.word	0x08003df5
 8003e34:	08003df5 	.word	0x08003df5
 8003e38:	08003f85 	.word	0x08003f85
 8003e3c:	08003ea9 	.word	0x08003ea9
 8003e40:	08003f67 	.word	0x08003f67
 8003e44:	08003df5 	.word	0x08003df5
 8003e48:	08003df5 	.word	0x08003df5
 8003e4c:	08003fa7 	.word	0x08003fa7
 8003e50:	08003df5 	.word	0x08003df5
 8003e54:	08003ea9 	.word	0x08003ea9
 8003e58:	08003df5 	.word	0x08003df5
 8003e5c:	08003df5 	.word	0x08003df5
 8003e60:	08003f6f 	.word	0x08003f6f
 8003e64:	682b      	ldr	r3, [r5, #0]
 8003e66:	1d1a      	adds	r2, r3, #4
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	602a      	str	r2, [r5, #0]
 8003e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0a3      	b.n	8003fc0 <_printf_i+0x1f4>
 8003e78:	6820      	ldr	r0, [r4, #0]
 8003e7a:	6829      	ldr	r1, [r5, #0]
 8003e7c:	0606      	lsls	r6, r0, #24
 8003e7e:	f101 0304 	add.w	r3, r1, #4
 8003e82:	d50a      	bpl.n	8003e9a <_printf_i+0xce>
 8003e84:	680e      	ldr	r6, [r1, #0]
 8003e86:	602b      	str	r3, [r5, #0]
 8003e88:	2e00      	cmp	r6, #0
 8003e8a:	da03      	bge.n	8003e94 <_printf_i+0xc8>
 8003e8c:	232d      	movs	r3, #45	; 0x2d
 8003e8e:	4276      	negs	r6, r6
 8003e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e94:	485e      	ldr	r0, [pc, #376]	; (8004010 <_printf_i+0x244>)
 8003e96:	230a      	movs	r3, #10
 8003e98:	e019      	b.n	8003ece <_printf_i+0x102>
 8003e9a:	680e      	ldr	r6, [r1, #0]
 8003e9c:	602b      	str	r3, [r5, #0]
 8003e9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ea2:	bf18      	it	ne
 8003ea4:	b236      	sxthne	r6, r6
 8003ea6:	e7ef      	b.n	8003e88 <_printf_i+0xbc>
 8003ea8:	682b      	ldr	r3, [r5, #0]
 8003eaa:	6820      	ldr	r0, [r4, #0]
 8003eac:	1d19      	adds	r1, r3, #4
 8003eae:	6029      	str	r1, [r5, #0]
 8003eb0:	0601      	lsls	r1, r0, #24
 8003eb2:	d501      	bpl.n	8003eb8 <_printf_i+0xec>
 8003eb4:	681e      	ldr	r6, [r3, #0]
 8003eb6:	e002      	b.n	8003ebe <_printf_i+0xf2>
 8003eb8:	0646      	lsls	r6, r0, #25
 8003eba:	d5fb      	bpl.n	8003eb4 <_printf_i+0xe8>
 8003ebc:	881e      	ldrh	r6, [r3, #0]
 8003ebe:	4854      	ldr	r0, [pc, #336]	; (8004010 <_printf_i+0x244>)
 8003ec0:	2f6f      	cmp	r7, #111	; 0x6f
 8003ec2:	bf0c      	ite	eq
 8003ec4:	2308      	moveq	r3, #8
 8003ec6:	230a      	movne	r3, #10
 8003ec8:	2100      	movs	r1, #0
 8003eca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ece:	6865      	ldr	r5, [r4, #4]
 8003ed0:	60a5      	str	r5, [r4, #8]
 8003ed2:	2d00      	cmp	r5, #0
 8003ed4:	bfa2      	ittt	ge
 8003ed6:	6821      	ldrge	r1, [r4, #0]
 8003ed8:	f021 0104 	bicge.w	r1, r1, #4
 8003edc:	6021      	strge	r1, [r4, #0]
 8003ede:	b90e      	cbnz	r6, 8003ee4 <_printf_i+0x118>
 8003ee0:	2d00      	cmp	r5, #0
 8003ee2:	d04d      	beq.n	8003f80 <_printf_i+0x1b4>
 8003ee4:	4615      	mov	r5, r2
 8003ee6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003eea:	fb03 6711 	mls	r7, r3, r1, r6
 8003eee:	5dc7      	ldrb	r7, [r0, r7]
 8003ef0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ef4:	4637      	mov	r7, r6
 8003ef6:	42bb      	cmp	r3, r7
 8003ef8:	460e      	mov	r6, r1
 8003efa:	d9f4      	bls.n	8003ee6 <_printf_i+0x11a>
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d10b      	bne.n	8003f18 <_printf_i+0x14c>
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	07de      	lsls	r6, r3, #31
 8003f04:	d508      	bpl.n	8003f18 <_printf_i+0x14c>
 8003f06:	6923      	ldr	r3, [r4, #16]
 8003f08:	6861      	ldr	r1, [r4, #4]
 8003f0a:	4299      	cmp	r1, r3
 8003f0c:	bfde      	ittt	le
 8003f0e:	2330      	movle	r3, #48	; 0x30
 8003f10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f14:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003f18:	1b52      	subs	r2, r2, r5
 8003f1a:	6122      	str	r2, [r4, #16]
 8003f1c:	f8cd a000 	str.w	sl, [sp]
 8003f20:	464b      	mov	r3, r9
 8003f22:	aa03      	add	r2, sp, #12
 8003f24:	4621      	mov	r1, r4
 8003f26:	4640      	mov	r0, r8
 8003f28:	f7ff fee2 	bl	8003cf0 <_printf_common>
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	d14c      	bne.n	8003fca <_printf_i+0x1fe>
 8003f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f34:	b004      	add	sp, #16
 8003f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f3a:	4835      	ldr	r0, [pc, #212]	; (8004010 <_printf_i+0x244>)
 8003f3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003f40:	6829      	ldr	r1, [r5, #0]
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f48:	6029      	str	r1, [r5, #0]
 8003f4a:	061d      	lsls	r5, r3, #24
 8003f4c:	d514      	bpl.n	8003f78 <_printf_i+0x1ac>
 8003f4e:	07df      	lsls	r7, r3, #31
 8003f50:	bf44      	itt	mi
 8003f52:	f043 0320 	orrmi.w	r3, r3, #32
 8003f56:	6023      	strmi	r3, [r4, #0]
 8003f58:	b91e      	cbnz	r6, 8003f62 <_printf_i+0x196>
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	f023 0320 	bic.w	r3, r3, #32
 8003f60:	6023      	str	r3, [r4, #0]
 8003f62:	2310      	movs	r3, #16
 8003f64:	e7b0      	b.n	8003ec8 <_printf_i+0xfc>
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	f043 0320 	orr.w	r3, r3, #32
 8003f6c:	6023      	str	r3, [r4, #0]
 8003f6e:	2378      	movs	r3, #120	; 0x78
 8003f70:	4828      	ldr	r0, [pc, #160]	; (8004014 <_printf_i+0x248>)
 8003f72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f76:	e7e3      	b.n	8003f40 <_printf_i+0x174>
 8003f78:	0659      	lsls	r1, r3, #25
 8003f7a:	bf48      	it	mi
 8003f7c:	b2b6      	uxthmi	r6, r6
 8003f7e:	e7e6      	b.n	8003f4e <_printf_i+0x182>
 8003f80:	4615      	mov	r5, r2
 8003f82:	e7bb      	b.n	8003efc <_printf_i+0x130>
 8003f84:	682b      	ldr	r3, [r5, #0]
 8003f86:	6826      	ldr	r6, [r4, #0]
 8003f88:	6961      	ldr	r1, [r4, #20]
 8003f8a:	1d18      	adds	r0, r3, #4
 8003f8c:	6028      	str	r0, [r5, #0]
 8003f8e:	0635      	lsls	r5, r6, #24
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	d501      	bpl.n	8003f98 <_printf_i+0x1cc>
 8003f94:	6019      	str	r1, [r3, #0]
 8003f96:	e002      	b.n	8003f9e <_printf_i+0x1d2>
 8003f98:	0670      	lsls	r0, r6, #25
 8003f9a:	d5fb      	bpl.n	8003f94 <_printf_i+0x1c8>
 8003f9c:	8019      	strh	r1, [r3, #0]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	6123      	str	r3, [r4, #16]
 8003fa2:	4615      	mov	r5, r2
 8003fa4:	e7ba      	b.n	8003f1c <_printf_i+0x150>
 8003fa6:	682b      	ldr	r3, [r5, #0]
 8003fa8:	1d1a      	adds	r2, r3, #4
 8003faa:	602a      	str	r2, [r5, #0]
 8003fac:	681d      	ldr	r5, [r3, #0]
 8003fae:	6862      	ldr	r2, [r4, #4]
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	f7fc f944 	bl	8000240 <memchr>
 8003fb8:	b108      	cbz	r0, 8003fbe <_printf_i+0x1f2>
 8003fba:	1b40      	subs	r0, r0, r5
 8003fbc:	6060      	str	r0, [r4, #4]
 8003fbe:	6863      	ldr	r3, [r4, #4]
 8003fc0:	6123      	str	r3, [r4, #16]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fc8:	e7a8      	b.n	8003f1c <_printf_i+0x150>
 8003fca:	6923      	ldr	r3, [r4, #16]
 8003fcc:	462a      	mov	r2, r5
 8003fce:	4649      	mov	r1, r9
 8003fd0:	4640      	mov	r0, r8
 8003fd2:	47d0      	blx	sl
 8003fd4:	3001      	adds	r0, #1
 8003fd6:	d0ab      	beq.n	8003f30 <_printf_i+0x164>
 8003fd8:	6823      	ldr	r3, [r4, #0]
 8003fda:	079b      	lsls	r3, r3, #30
 8003fdc:	d413      	bmi.n	8004006 <_printf_i+0x23a>
 8003fde:	68e0      	ldr	r0, [r4, #12]
 8003fe0:	9b03      	ldr	r3, [sp, #12]
 8003fe2:	4298      	cmp	r0, r3
 8003fe4:	bfb8      	it	lt
 8003fe6:	4618      	movlt	r0, r3
 8003fe8:	e7a4      	b.n	8003f34 <_printf_i+0x168>
 8003fea:	2301      	movs	r3, #1
 8003fec:	4632      	mov	r2, r6
 8003fee:	4649      	mov	r1, r9
 8003ff0:	4640      	mov	r0, r8
 8003ff2:	47d0      	blx	sl
 8003ff4:	3001      	adds	r0, #1
 8003ff6:	d09b      	beq.n	8003f30 <_printf_i+0x164>
 8003ff8:	3501      	adds	r5, #1
 8003ffa:	68e3      	ldr	r3, [r4, #12]
 8003ffc:	9903      	ldr	r1, [sp, #12]
 8003ffe:	1a5b      	subs	r3, r3, r1
 8004000:	42ab      	cmp	r3, r5
 8004002:	dcf2      	bgt.n	8003fea <_printf_i+0x21e>
 8004004:	e7eb      	b.n	8003fde <_printf_i+0x212>
 8004006:	2500      	movs	r5, #0
 8004008:	f104 0619 	add.w	r6, r4, #25
 800400c:	e7f5      	b.n	8003ffa <_printf_i+0x22e>
 800400e:	bf00      	nop
 8004010:	08004925 	.word	0x08004925
 8004014:	08004936 	.word	0x08004936

08004018 <memcpy>:
 8004018:	440a      	add	r2, r1
 800401a:	4291      	cmp	r1, r2
 800401c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004020:	d100      	bne.n	8004024 <memcpy+0xc>
 8004022:	4770      	bx	lr
 8004024:	b510      	push	{r4, lr}
 8004026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800402a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800402e:	4291      	cmp	r1, r2
 8004030:	d1f9      	bne.n	8004026 <memcpy+0xe>
 8004032:	bd10      	pop	{r4, pc}

08004034 <memmove>:
 8004034:	4288      	cmp	r0, r1
 8004036:	b510      	push	{r4, lr}
 8004038:	eb01 0402 	add.w	r4, r1, r2
 800403c:	d902      	bls.n	8004044 <memmove+0x10>
 800403e:	4284      	cmp	r4, r0
 8004040:	4623      	mov	r3, r4
 8004042:	d807      	bhi.n	8004054 <memmove+0x20>
 8004044:	1e43      	subs	r3, r0, #1
 8004046:	42a1      	cmp	r1, r4
 8004048:	d008      	beq.n	800405c <memmove+0x28>
 800404a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800404e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004052:	e7f8      	b.n	8004046 <memmove+0x12>
 8004054:	4402      	add	r2, r0
 8004056:	4601      	mov	r1, r0
 8004058:	428a      	cmp	r2, r1
 800405a:	d100      	bne.n	800405e <memmove+0x2a>
 800405c:	bd10      	pop	{r4, pc}
 800405e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004066:	e7f7      	b.n	8004058 <memmove+0x24>

08004068 <_free_r>:
 8004068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800406a:	2900      	cmp	r1, #0
 800406c:	d044      	beq.n	80040f8 <_free_r+0x90>
 800406e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004072:	9001      	str	r0, [sp, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f1a1 0404 	sub.w	r4, r1, #4
 800407a:	bfb8      	it	lt
 800407c:	18e4      	addlt	r4, r4, r3
 800407e:	f000 f913 	bl	80042a8 <__malloc_lock>
 8004082:	4a1e      	ldr	r2, [pc, #120]	; (80040fc <_free_r+0x94>)
 8004084:	9801      	ldr	r0, [sp, #4]
 8004086:	6813      	ldr	r3, [r2, #0]
 8004088:	b933      	cbnz	r3, 8004098 <_free_r+0x30>
 800408a:	6063      	str	r3, [r4, #4]
 800408c:	6014      	str	r4, [r2, #0]
 800408e:	b003      	add	sp, #12
 8004090:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004094:	f000 b90e 	b.w	80042b4 <__malloc_unlock>
 8004098:	42a3      	cmp	r3, r4
 800409a:	d908      	bls.n	80040ae <_free_r+0x46>
 800409c:	6825      	ldr	r5, [r4, #0]
 800409e:	1961      	adds	r1, r4, r5
 80040a0:	428b      	cmp	r3, r1
 80040a2:	bf01      	itttt	eq
 80040a4:	6819      	ldreq	r1, [r3, #0]
 80040a6:	685b      	ldreq	r3, [r3, #4]
 80040a8:	1949      	addeq	r1, r1, r5
 80040aa:	6021      	streq	r1, [r4, #0]
 80040ac:	e7ed      	b.n	800408a <_free_r+0x22>
 80040ae:	461a      	mov	r2, r3
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	b10b      	cbz	r3, 80040b8 <_free_r+0x50>
 80040b4:	42a3      	cmp	r3, r4
 80040b6:	d9fa      	bls.n	80040ae <_free_r+0x46>
 80040b8:	6811      	ldr	r1, [r2, #0]
 80040ba:	1855      	adds	r5, r2, r1
 80040bc:	42a5      	cmp	r5, r4
 80040be:	d10b      	bne.n	80040d8 <_free_r+0x70>
 80040c0:	6824      	ldr	r4, [r4, #0]
 80040c2:	4421      	add	r1, r4
 80040c4:	1854      	adds	r4, r2, r1
 80040c6:	42a3      	cmp	r3, r4
 80040c8:	6011      	str	r1, [r2, #0]
 80040ca:	d1e0      	bne.n	800408e <_free_r+0x26>
 80040cc:	681c      	ldr	r4, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	6053      	str	r3, [r2, #4]
 80040d2:	4421      	add	r1, r4
 80040d4:	6011      	str	r1, [r2, #0]
 80040d6:	e7da      	b.n	800408e <_free_r+0x26>
 80040d8:	d902      	bls.n	80040e0 <_free_r+0x78>
 80040da:	230c      	movs	r3, #12
 80040dc:	6003      	str	r3, [r0, #0]
 80040de:	e7d6      	b.n	800408e <_free_r+0x26>
 80040e0:	6825      	ldr	r5, [r4, #0]
 80040e2:	1961      	adds	r1, r4, r5
 80040e4:	428b      	cmp	r3, r1
 80040e6:	bf04      	itt	eq
 80040e8:	6819      	ldreq	r1, [r3, #0]
 80040ea:	685b      	ldreq	r3, [r3, #4]
 80040ec:	6063      	str	r3, [r4, #4]
 80040ee:	bf04      	itt	eq
 80040f0:	1949      	addeq	r1, r1, r5
 80040f2:	6021      	streq	r1, [r4, #0]
 80040f4:	6054      	str	r4, [r2, #4]
 80040f6:	e7ca      	b.n	800408e <_free_r+0x26>
 80040f8:	b003      	add	sp, #12
 80040fa:	bd30      	pop	{r4, r5, pc}
 80040fc:	20000270 	.word	0x20000270

08004100 <sbrk_aligned>:
 8004100:	b570      	push	{r4, r5, r6, lr}
 8004102:	4e0e      	ldr	r6, [pc, #56]	; (800413c <sbrk_aligned+0x3c>)
 8004104:	460c      	mov	r4, r1
 8004106:	6831      	ldr	r1, [r6, #0]
 8004108:	4605      	mov	r5, r0
 800410a:	b911      	cbnz	r1, 8004112 <sbrk_aligned+0x12>
 800410c:	f000 f8bc 	bl	8004288 <_sbrk_r>
 8004110:	6030      	str	r0, [r6, #0]
 8004112:	4621      	mov	r1, r4
 8004114:	4628      	mov	r0, r5
 8004116:	f000 f8b7 	bl	8004288 <_sbrk_r>
 800411a:	1c43      	adds	r3, r0, #1
 800411c:	d00a      	beq.n	8004134 <sbrk_aligned+0x34>
 800411e:	1cc4      	adds	r4, r0, #3
 8004120:	f024 0403 	bic.w	r4, r4, #3
 8004124:	42a0      	cmp	r0, r4
 8004126:	d007      	beq.n	8004138 <sbrk_aligned+0x38>
 8004128:	1a21      	subs	r1, r4, r0
 800412a:	4628      	mov	r0, r5
 800412c:	f000 f8ac 	bl	8004288 <_sbrk_r>
 8004130:	3001      	adds	r0, #1
 8004132:	d101      	bne.n	8004138 <sbrk_aligned+0x38>
 8004134:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004138:	4620      	mov	r0, r4
 800413a:	bd70      	pop	{r4, r5, r6, pc}
 800413c:	20000274 	.word	0x20000274

08004140 <_malloc_r>:
 8004140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004144:	1ccd      	adds	r5, r1, #3
 8004146:	f025 0503 	bic.w	r5, r5, #3
 800414a:	3508      	adds	r5, #8
 800414c:	2d0c      	cmp	r5, #12
 800414e:	bf38      	it	cc
 8004150:	250c      	movcc	r5, #12
 8004152:	2d00      	cmp	r5, #0
 8004154:	4607      	mov	r7, r0
 8004156:	db01      	blt.n	800415c <_malloc_r+0x1c>
 8004158:	42a9      	cmp	r1, r5
 800415a:	d905      	bls.n	8004168 <_malloc_r+0x28>
 800415c:	230c      	movs	r3, #12
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	2600      	movs	r6, #0
 8004162:	4630      	mov	r0, r6
 8004164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004168:	4e2e      	ldr	r6, [pc, #184]	; (8004224 <_malloc_r+0xe4>)
 800416a:	f000 f89d 	bl	80042a8 <__malloc_lock>
 800416e:	6833      	ldr	r3, [r6, #0]
 8004170:	461c      	mov	r4, r3
 8004172:	bb34      	cbnz	r4, 80041c2 <_malloc_r+0x82>
 8004174:	4629      	mov	r1, r5
 8004176:	4638      	mov	r0, r7
 8004178:	f7ff ffc2 	bl	8004100 <sbrk_aligned>
 800417c:	1c43      	adds	r3, r0, #1
 800417e:	4604      	mov	r4, r0
 8004180:	d14d      	bne.n	800421e <_malloc_r+0xde>
 8004182:	6834      	ldr	r4, [r6, #0]
 8004184:	4626      	mov	r6, r4
 8004186:	2e00      	cmp	r6, #0
 8004188:	d140      	bne.n	800420c <_malloc_r+0xcc>
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	4631      	mov	r1, r6
 800418e:	4638      	mov	r0, r7
 8004190:	eb04 0803 	add.w	r8, r4, r3
 8004194:	f000 f878 	bl	8004288 <_sbrk_r>
 8004198:	4580      	cmp	r8, r0
 800419a:	d13a      	bne.n	8004212 <_malloc_r+0xd2>
 800419c:	6821      	ldr	r1, [r4, #0]
 800419e:	3503      	adds	r5, #3
 80041a0:	1a6d      	subs	r5, r5, r1
 80041a2:	f025 0503 	bic.w	r5, r5, #3
 80041a6:	3508      	adds	r5, #8
 80041a8:	2d0c      	cmp	r5, #12
 80041aa:	bf38      	it	cc
 80041ac:	250c      	movcc	r5, #12
 80041ae:	4629      	mov	r1, r5
 80041b0:	4638      	mov	r0, r7
 80041b2:	f7ff ffa5 	bl	8004100 <sbrk_aligned>
 80041b6:	3001      	adds	r0, #1
 80041b8:	d02b      	beq.n	8004212 <_malloc_r+0xd2>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	442b      	add	r3, r5
 80041be:	6023      	str	r3, [r4, #0]
 80041c0:	e00e      	b.n	80041e0 <_malloc_r+0xa0>
 80041c2:	6822      	ldr	r2, [r4, #0]
 80041c4:	1b52      	subs	r2, r2, r5
 80041c6:	d41e      	bmi.n	8004206 <_malloc_r+0xc6>
 80041c8:	2a0b      	cmp	r2, #11
 80041ca:	d916      	bls.n	80041fa <_malloc_r+0xba>
 80041cc:	1961      	adds	r1, r4, r5
 80041ce:	42a3      	cmp	r3, r4
 80041d0:	6025      	str	r5, [r4, #0]
 80041d2:	bf18      	it	ne
 80041d4:	6059      	strne	r1, [r3, #4]
 80041d6:	6863      	ldr	r3, [r4, #4]
 80041d8:	bf08      	it	eq
 80041da:	6031      	streq	r1, [r6, #0]
 80041dc:	5162      	str	r2, [r4, r5]
 80041de:	604b      	str	r3, [r1, #4]
 80041e0:	4638      	mov	r0, r7
 80041e2:	f104 060b 	add.w	r6, r4, #11
 80041e6:	f000 f865 	bl	80042b4 <__malloc_unlock>
 80041ea:	f026 0607 	bic.w	r6, r6, #7
 80041ee:	1d23      	adds	r3, r4, #4
 80041f0:	1af2      	subs	r2, r6, r3
 80041f2:	d0b6      	beq.n	8004162 <_malloc_r+0x22>
 80041f4:	1b9b      	subs	r3, r3, r6
 80041f6:	50a3      	str	r3, [r4, r2]
 80041f8:	e7b3      	b.n	8004162 <_malloc_r+0x22>
 80041fa:	6862      	ldr	r2, [r4, #4]
 80041fc:	42a3      	cmp	r3, r4
 80041fe:	bf0c      	ite	eq
 8004200:	6032      	streq	r2, [r6, #0]
 8004202:	605a      	strne	r2, [r3, #4]
 8004204:	e7ec      	b.n	80041e0 <_malloc_r+0xa0>
 8004206:	4623      	mov	r3, r4
 8004208:	6864      	ldr	r4, [r4, #4]
 800420a:	e7b2      	b.n	8004172 <_malloc_r+0x32>
 800420c:	4634      	mov	r4, r6
 800420e:	6876      	ldr	r6, [r6, #4]
 8004210:	e7b9      	b.n	8004186 <_malloc_r+0x46>
 8004212:	230c      	movs	r3, #12
 8004214:	603b      	str	r3, [r7, #0]
 8004216:	4638      	mov	r0, r7
 8004218:	f000 f84c 	bl	80042b4 <__malloc_unlock>
 800421c:	e7a1      	b.n	8004162 <_malloc_r+0x22>
 800421e:	6025      	str	r5, [r4, #0]
 8004220:	e7de      	b.n	80041e0 <_malloc_r+0xa0>
 8004222:	bf00      	nop
 8004224:	20000270 	.word	0x20000270

08004228 <_realloc_r>:
 8004228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800422c:	4680      	mov	r8, r0
 800422e:	4614      	mov	r4, r2
 8004230:	460e      	mov	r6, r1
 8004232:	b921      	cbnz	r1, 800423e <_realloc_r+0x16>
 8004234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004238:	4611      	mov	r1, r2
 800423a:	f7ff bf81 	b.w	8004140 <_malloc_r>
 800423e:	b92a      	cbnz	r2, 800424c <_realloc_r+0x24>
 8004240:	f7ff ff12 	bl	8004068 <_free_r>
 8004244:	4625      	mov	r5, r4
 8004246:	4628      	mov	r0, r5
 8004248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800424c:	f000 f838 	bl	80042c0 <_malloc_usable_size_r>
 8004250:	4284      	cmp	r4, r0
 8004252:	4607      	mov	r7, r0
 8004254:	d802      	bhi.n	800425c <_realloc_r+0x34>
 8004256:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800425a:	d812      	bhi.n	8004282 <_realloc_r+0x5a>
 800425c:	4621      	mov	r1, r4
 800425e:	4640      	mov	r0, r8
 8004260:	f7ff ff6e 	bl	8004140 <_malloc_r>
 8004264:	4605      	mov	r5, r0
 8004266:	2800      	cmp	r0, #0
 8004268:	d0ed      	beq.n	8004246 <_realloc_r+0x1e>
 800426a:	42bc      	cmp	r4, r7
 800426c:	4622      	mov	r2, r4
 800426e:	4631      	mov	r1, r6
 8004270:	bf28      	it	cs
 8004272:	463a      	movcs	r2, r7
 8004274:	f7ff fed0 	bl	8004018 <memcpy>
 8004278:	4631      	mov	r1, r6
 800427a:	4640      	mov	r0, r8
 800427c:	f7ff fef4 	bl	8004068 <_free_r>
 8004280:	e7e1      	b.n	8004246 <_realloc_r+0x1e>
 8004282:	4635      	mov	r5, r6
 8004284:	e7df      	b.n	8004246 <_realloc_r+0x1e>
	...

08004288 <_sbrk_r>:
 8004288:	b538      	push	{r3, r4, r5, lr}
 800428a:	4d06      	ldr	r5, [pc, #24]	; (80042a4 <_sbrk_r+0x1c>)
 800428c:	2300      	movs	r3, #0
 800428e:	4604      	mov	r4, r0
 8004290:	4608      	mov	r0, r1
 8004292:	602b      	str	r3, [r5, #0]
 8004294:	f7fd fa1a 	bl	80016cc <_sbrk>
 8004298:	1c43      	adds	r3, r0, #1
 800429a:	d102      	bne.n	80042a2 <_sbrk_r+0x1a>
 800429c:	682b      	ldr	r3, [r5, #0]
 800429e:	b103      	cbz	r3, 80042a2 <_sbrk_r+0x1a>
 80042a0:	6023      	str	r3, [r4, #0]
 80042a2:	bd38      	pop	{r3, r4, r5, pc}
 80042a4:	20000278 	.word	0x20000278

080042a8 <__malloc_lock>:
 80042a8:	4801      	ldr	r0, [pc, #4]	; (80042b0 <__malloc_lock+0x8>)
 80042aa:	f000 b811 	b.w	80042d0 <__retarget_lock_acquire_recursive>
 80042ae:	bf00      	nop
 80042b0:	2000027c 	.word	0x2000027c

080042b4 <__malloc_unlock>:
 80042b4:	4801      	ldr	r0, [pc, #4]	; (80042bc <__malloc_unlock+0x8>)
 80042b6:	f000 b80c 	b.w	80042d2 <__retarget_lock_release_recursive>
 80042ba:	bf00      	nop
 80042bc:	2000027c 	.word	0x2000027c

080042c0 <_malloc_usable_size_r>:
 80042c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042c4:	1f18      	subs	r0, r3, #4
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	bfbc      	itt	lt
 80042ca:	580b      	ldrlt	r3, [r1, r0]
 80042cc:	18c0      	addlt	r0, r0, r3
 80042ce:	4770      	bx	lr

080042d0 <__retarget_lock_acquire_recursive>:
 80042d0:	4770      	bx	lr

080042d2 <__retarget_lock_release_recursive>:
 80042d2:	4770      	bx	lr

080042d4 <_init>:
 80042d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d6:	bf00      	nop
 80042d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042da:	bc08      	pop	{r3}
 80042dc:	469e      	mov	lr, r3
 80042de:	4770      	bx	lr

080042e0 <_fini>:
 80042e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e2:	bf00      	nop
 80042e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042e6:	bc08      	pop	{r3}
 80042e8:	469e      	mov	lr, r3
 80042ea:	4770      	bx	lr
