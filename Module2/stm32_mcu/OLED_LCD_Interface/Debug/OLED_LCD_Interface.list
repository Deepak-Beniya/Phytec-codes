
OLED_LCD_Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b00  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000880  08005cd0  08005cd0  00015cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006550  08006550  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006550  08006550  00016550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006558  08006558  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006558  08006558  00016558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800655c  0800655c  0001655c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  20000078  080065d8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  080065d8  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104e2  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002516  00000000  00000000  0003058a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00032aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00033830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022854  00000000  00000000  000344f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c59  00000000  00000000  00056d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0cbf  00000000  00000000  0006899d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013965c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c7c  00000000  00000000  001396ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005cb8 	.word	0x08005cb8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08005cb8 	.word	0x08005cb8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <set_time>:

char time[10];
char date[10];
uint8_t alarm =0;
	void set_time (void)
	{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
		  RTC_TimeTypeDef sTime;
		  RTC_DateTypeDef sDate;
	    /**Initialize RTC and set the Time and Date
	    */
	  sTime.Hours = 0x10;
 80005ba:	2310      	movs	r3, #16
 80005bc:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 0x20;
 80005be:	2320      	movs	r3, #32
 80005c0:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0x30;
 80005c2:	2330      	movs	r3, #48	; 0x30
 80005c4:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	480d      	ldr	r0, [pc, #52]	; (800060c <set_time+0x58>)
 80005d6:	f003 fb69 	bl	8003cac <HAL_RTC_SetTime>
	  }
	  /* USER CODE BEGIN RTC_Init 3 */

	  /* USER CODE END RTC_Init 3 */

	  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80005da:	2302      	movs	r3, #2
 80005dc:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_AUGUST;
 80005de:	2308      	movs	r3, #8
 80005e0:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 0x12;
 80005e2:	2312      	movs	r3, #18
 80005e4:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 0x0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	70fb      	strb	r3, [r7, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	2201      	movs	r2, #1
 80005ee:	4619      	mov	r1, r3
 80005f0:	4806      	ldr	r0, [pc, #24]	; (800060c <set_time+0x58>)
 80005f2:	f003 fc53 	bl	8003e9c <HAL_RTC_SetDate>
	  {
	    //_Error_Handler(__FILE__, __LINE__);
	  }
	  /* USER CODE BEGIN RTC_Init 4 */

	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 80005f6:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80005fa:	2101      	movs	r1, #1
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <set_time+0x58>)
 80005fe:	f003 ff07 	bl	8004410 <HAL_RTCEx_BKUPWrite>

	  /* USER CODE END RTC_Init 4 */
	}
 8000602:	bf00      	nop
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000094 	.word	0x20000094

08000610 <get_time>:

	  /* USER CODE END RTC_Init 5 */
	}

	void get_time(void)
	{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af02      	add	r7, sp, #8
	  RTC_DateTypeDef gDate;
	  RTC_TimeTypeDef gTime;

	  /* Get the RTC current Time */
	  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000616:	463b      	mov	r3, r7
 8000618:	2200      	movs	r2, #0
 800061a:	4619      	mov	r1, r3
 800061c:	4812      	ldr	r0, [pc, #72]	; (8000668 <get_time+0x58>)
 800061e:	f003 fbdf 	bl	8003de0 <HAL_RTC_GetTime>
	  /* Get the RTC current Date */
	  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	2200      	movs	r2, #0
 8000628:	4619      	mov	r1, r3
 800062a:	480f      	ldr	r0, [pc, #60]	; (8000668 <get_time+0x58>)
 800062c:	f003 fcba 	bl	8003fa4 <HAL_RTC_GetDate>

	  /* Display time Format: hh:mm:ss */
	  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000630:	783b      	ldrb	r3, [r7, #0]
 8000632:	461a      	mov	r2, r3
 8000634:	787b      	ldrb	r3, [r7, #1]
 8000636:	4619      	mov	r1, r3
 8000638:	78bb      	ldrb	r3, [r7, #2]
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	460b      	mov	r3, r1
 800063e:	490b      	ldr	r1, [pc, #44]	; (800066c <get_time+0x5c>)
 8000640:	480b      	ldr	r0, [pc, #44]	; (8000670 <get_time+0x60>)
 8000642:	f004 fecb 	bl	80053dc <siprintf>

	  /* Display date Format: mm-dd-yy */
	  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);  // I like the date first
 8000646:	7dbb      	ldrb	r3, [r7, #22]
 8000648:	461a      	mov	r2, r3
 800064a:	7d7b      	ldrb	r3, [r7, #21]
 800064c:	4619      	mov	r1, r3
 800064e:	7dfb      	ldrb	r3, [r7, #23]
 8000650:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	460b      	mov	r3, r1
 8000658:	4906      	ldr	r1, [pc, #24]	; (8000674 <get_time+0x64>)
 800065a:	4807      	ldr	r0, [pc, #28]	; (8000678 <get_time+0x68>)
 800065c:	f004 febe 	bl	80053dc <siprintf>
	}
 8000660:	bf00      	nop
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000094 	.word	0x20000094
 800066c:	08005d2c 	.word	0x08005d2c
 8000670:	200000b4 	.word	0x200000b4
 8000674:	08005d3c 	.word	0x08005d3c
 8000678:	200000c0 	.word	0x200000c0

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f001 f829 	bl	80016d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 f88b 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068a:	f000 fa09 	bl	8000aa0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800068e:	f000 f9dd 	bl	8000a4c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000692:	f000 f8f7 	bl	8000884 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000696:	f000 f9af 	bl	80009f8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800069a:	f000 f921 	bl	80008e0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the display
 800069e:	f000 fa93 	bl	8000bc8 <SSD1306_Init>
  SSD1306_Clear();
 80006a2:	f000 fdb1 	bl	8001208 <SSD1306_Clear>

  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 80006a6:	2101      	movs	r1, #1
 80006a8:	4834      	ldr	r0, [pc, #208]	; (800077c <main+0x100>)
 80006aa:	f003 fecb 	bl	8004444 <HAL_RTCEx_BKUPRead>
 80006ae:	4603      	mov	r3, r0
 80006b0:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d001      	beq.n	80006bc <main+0x40>
        {
        //   Set the time
          set_time();
 80006b8:	f7ff ff7c 	bl	80005b4 <set_time>
        }

    SSD1306_GotoXY (5,15); // goto 10, 10
 80006bc:	210f      	movs	r1, #15
 80006be:	2005      	movs	r0, #5
 80006c0:	f000 fbec 	bl	8000e9c <SSD1306_GotoXY>
    SSD1306_Puts ("WELCOME TO V2 MALL ", &Font_7x10, 1); // print Hello
 80006c4:	2201      	movs	r2, #1
 80006c6:	492e      	ldr	r1, [pc, #184]	; (8000780 <main+0x104>)
 80006c8:	482e      	ldr	r0, [pc, #184]	; (8000784 <main+0x108>)
 80006ca:	f000 fc7d 	bl	8000fc8 <SSD1306_Puts>
    SSD1306_GotoXY (5, 30);
 80006ce:	211e      	movs	r1, #30
 80006d0:	2005      	movs	r0, #5
 80006d2:	f000 fbe3 	bl	8000e9c <SSD1306_GotoXY>
    SSD1306_Puts ("SCAN YOUR ITEMS", &Font_7x10, 1);
 80006d6:	2201      	movs	r2, #1
 80006d8:	4929      	ldr	r1, [pc, #164]	; (8000780 <main+0x104>)
 80006da:	482b      	ldr	r0, [pc, #172]	; (8000788 <main+0x10c>)
 80006dc:	f000 fc74 	bl	8000fc8 <SSD1306_Puts>
    SSD1306_UpdateScreen(); // update screen
 80006e0:	f000 fb36 	bl	8000d50 <SSD1306_UpdateScreen>
    HAL_Delay(1000);
 80006e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006e8:	f001 f868 	bl	80017bc <HAL_Delay>
    SSD1306_Clear();
 80006ec:	f000 fd8c 	bl	8001208 <SSD1306_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
      {
    	//oled_keypad();
    	get_time();
 80006f0:	f7ff ff8e 	bl	8000610 <get_time>
    	HAL_Delay(500);
 80006f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f8:	f001 f860 	bl	80017bc <HAL_Delay>
        SSD1306_GotoXY (70,0);
 80006fc:	2100      	movs	r1, #0
 80006fe:	2046      	movs	r0, #70	; 0x46
 8000700:	f000 fbcc 	bl	8000e9c <SSD1306_GotoXY>
    	SSD1306_Puts (time, &Font_7x10, 1);
 8000704:	2201      	movs	r2, #1
 8000706:	491e      	ldr	r1, [pc, #120]	; (8000780 <main+0x104>)
 8000708:	4820      	ldr	r0, [pc, #128]	; (800078c <main+0x110>)
 800070a:	f000 fc5d 	bl	8000fc8 <SSD1306_Puts>
    	SSD1306_GotoXY (0,0);
 800070e:	2100      	movs	r1, #0
 8000710:	2000      	movs	r0, #0
 8000712:	f000 fbc3 	bl	8000e9c <SSD1306_GotoXY>
    	SSD1306_Puts ("V2 MALL", &Font_7x10, 1);
 8000716:	2201      	movs	r2, #1
 8000718:	4919      	ldr	r1, [pc, #100]	; (8000780 <main+0x104>)
 800071a:	481d      	ldr	r0, [pc, #116]	; (8000790 <main+0x114>)
 800071c:	f000 fc54 	bl	8000fc8 <SSD1306_Puts>

    	SSD1306_UpdateScreen();
 8000720:	f000 fb16 	bl	8000d50 <SSD1306_UpdateScreen>

    	SSD1306_GotoXY (0,8);
 8000724:	2108      	movs	r1, #8
 8000726:	2000      	movs	r0, #0
 8000728:	f000 fbb8 	bl	8000e9c <SSD1306_GotoXY>
    	SSD1306_DrawLine(0,10, 128, 10, 1);
 800072c:	2301      	movs	r3, #1
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	230a      	movs	r3, #10
 8000732:	2280      	movs	r2, #128	; 0x80
 8000734:	210a      	movs	r1, #10
 8000736:	2000      	movs	r0, #0
 8000738:	f000 fc6b 	bl	8001012 <SSD1306_DrawLine>
    	SSD1306_UpdateScreen();
 800073c:	f000 fb08 	bl	8000d50 <SSD1306_UpdateScreen>
//    	SSD1306_Puts (date, &Font_7x10, 1);
//    	SSD1306_UpdateScreen();



  	    HAL_UART_Receive_IT(&huart1, rfid_data, 16);
 8000740:	2210      	movs	r2, #16
 8000742:	4914      	ldr	r1, [pc, #80]	; (8000794 <main+0x118>)
 8000744:	4814      	ldr	r0, [pc, #80]	; (8000798 <main+0x11c>)
 8000746:	f003 fee2 	bl	800450e <HAL_UART_Receive_IT>
        HAL_Delay(500);
 800074a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800074e:	f001 f835 	bl	80017bc <HAL_Delay>
        if(rfid_data >0)
        {

            SSD1306_GotoXY (10,30);
 8000752:	211e      	movs	r1, #30
 8000754:	200a      	movs	r0, #10
 8000756:	f000 fba1 	bl	8000e9c <SSD1306_GotoXY>
        	SSD1306_Puts (rfid_data, &Font_7x10, 1);
 800075a:	2201      	movs	r2, #1
 800075c:	4908      	ldr	r1, [pc, #32]	; (8000780 <main+0x104>)
 800075e:	480d      	ldr	r0, [pc, #52]	; (8000794 <main+0x118>)
 8000760:	f000 fc32 	bl	8000fc8 <SSD1306_Puts>
        	SSD1306_GotoXY (10,50);
 8000764:	2132      	movs	r1, #50	; 0x32
 8000766:	200a      	movs	r0, #10
 8000768:	f000 fb98 	bl	8000e9c <SSD1306_GotoXY>
        	SSD1306_Puts (data, &Font_7x10, 1);
 800076c:	2201      	movs	r2, #1
 800076e:	4904      	ldr	r1, [pc, #16]	; (8000780 <main+0x104>)
 8000770:	480a      	ldr	r0, [pc, #40]	; (800079c <main+0x120>)
 8000772:	f000 fc29 	bl	8000fc8 <SSD1306_Puts>
        	SSD1306_UpdateScreen();
 8000776:	f000 faeb 	bl	8000d50 <SSD1306_UpdateScreen>
    	get_time();
 800077a:	e7b9      	b.n	80006f0 <main+0x74>
 800077c:	20000094 	.word	0x20000094
 8000780:	20000000 	.word	0x20000000
 8000784:	08005d6c 	.word	0x08005d6c
 8000788:	08005d80 	.word	0x08005d80
 800078c:	200000b4 	.word	0x200000b4
 8000790:	08005d90 	.word	0x08005d90
 8000794:	200001a8 	.word	0x200001a8
 8000798:	20000120 	.word	0x20000120
 800079c:	200001b8 	.word	0x200001b8

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	; 0x50
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2234      	movs	r2, #52	; 0x34
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 fe0c 	bl	80053cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	4b2c      	ldr	r3, [pc, #176]	; (800087c <SystemClock_Config+0xdc>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	4a2b      	ldr	r2, [pc, #172]	; (800087c <SystemClock_Config+0xdc>)
 80007ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d2:	6413      	str	r3, [r2, #64]	; 0x40
 80007d4:	4b29      	ldr	r3, [pc, #164]	; (800087c <SystemClock_Config+0xdc>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007e0:	2300      	movs	r3, #0
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	4b26      	ldr	r3, [pc, #152]	; (8000880 <SystemClock_Config+0xe0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007ec:	4a24      	ldr	r2, [pc, #144]	; (8000880 <SystemClock_Config+0xe0>)
 80007ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f2:	6013      	str	r3, [r2, #0]
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <SystemClock_Config+0xe0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000800:	230a      	movs	r3, #10
 8000802:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080c:	2310      	movs	r3, #16
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000810:	2301      	movs	r3, #1
 8000812:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000814:	2302      	movs	r3, #2
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000818:	2300      	movs	r3, #0
 800081a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800081c:	2310      	movs	r3, #16
 800081e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000820:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000824:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000826:	2304      	movs	r3, #4
 8000828:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4618      	mov	r0, r3
 8000838:	f002 ff24 	bl	8003684 <HAL_RCC_OscConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000842:	f000 f9bb 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	230f      	movs	r3, #15
 8000848:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2302      	movs	r3, #2
 800084c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000856:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	2102      	movs	r1, #2
 8000862:	4618      	mov	r0, r3
 8000864:	f002 f89a 	bl	800299c <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800086e:	f000 f9a5 	bl	8000bbc <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3750      	adds	r7, #80	; 0x50
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000

08000884 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_I2C1_Init+0x50>)
 800088a:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <MX_I2C1_Init+0x54>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_I2C1_Init+0x50>)
 8000890:	4a12      	ldr	r2, [pc, #72]	; (80008dc <MX_I2C1_Init+0x58>)
 8000892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_I2C1_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_I2C1_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008c2:	f001 faf1 	bl	8001ea8 <HAL_I2C_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008cc:	f000 f976 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200000cc 	.word	0x200000cc
 80008d8:	40005400 	.word	0x40005400
 80008dc:	00061a80 	.word	0x00061a80

080008e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b090      	sub	sp, #64	; 0x40
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80008e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80008fa:	463b      	mov	r3, r7
 80008fc:	2228      	movs	r2, #40	; 0x28
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f004 fd63 	bl	80053cc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000906:	4b3a      	ldr	r3, [pc, #232]	; (80009f0 <MX_RTC_Init+0x110>)
 8000908:	4a3a      	ldr	r2, [pc, #232]	; (80009f4 <MX_RTC_Init+0x114>)
 800090a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800090c:	4b38      	ldr	r3, [pc, #224]	; (80009f0 <MX_RTC_Init+0x110>)
 800090e:	2200      	movs	r2, #0
 8000910:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000912:	4b37      	ldr	r3, [pc, #220]	; (80009f0 <MX_RTC_Init+0x110>)
 8000914:	227f      	movs	r2, #127	; 0x7f
 8000916:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000918:	4b35      	ldr	r3, [pc, #212]	; (80009f0 <MX_RTC_Init+0x110>)
 800091a:	22ff      	movs	r2, #255	; 0xff
 800091c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800091e:	4b34      	ldr	r3, [pc, #208]	; (80009f0 <MX_RTC_Init+0x110>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000924:	4b32      	ldr	r3, [pc, #200]	; (80009f0 <MX_RTC_Init+0x110>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800092a:	4b31      	ldr	r3, [pc, #196]	; (80009f0 <MX_RTC_Init+0x110>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000930:	482f      	ldr	r0, [pc, #188]	; (80009f0 <MX_RTC_Init+0x110>)
 8000932:	f003 f945 	bl	8003bc0 <HAL_RTC_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800093c:	f000 f93e 	bl	8000bbc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x19;
 8000940:	2319      	movs	r3, #25
 8000942:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000946:	2300      	movs	r3, #0
 8000948:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 800094c:	2300      	movs	r3, #0
 800094e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000952:	2300      	movs	r3, #0
 8000954:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000956:	2300      	movs	r3, #0
 8000958:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800095a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800095e:	2201      	movs	r2, #1
 8000960:	4619      	mov	r1, r3
 8000962:	4823      	ldr	r0, [pc, #140]	; (80009f0 <MX_RTC_Init+0x110>)
 8000964:	f003 f9a2 	bl	8003cac <HAL_RTC_SetTime>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800096e:	f000 f925 	bl	8000bbc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000972:	2302      	movs	r3, #2
 8000974:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_MAY;
 8000978:	2305      	movs	r3, #5
 800097a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x16;
 800097e:	2316      	movs	r3, #22
 8000980:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000984:	2300      	movs	r3, #0
 8000986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800098a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800098e:	2201      	movs	r2, #1
 8000990:	4619      	mov	r1, r3
 8000992:	4817      	ldr	r0, [pc, #92]	; (80009f0 <MX_RTC_Init+0x110>)
 8000994:	f003 fa82 	bl	8003e9c <HAL_RTC_SetDate>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800099e:	f000 f90d 	bl	8000bbc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80009c6:	2301      	movs	r3, #1
 80009c8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80009cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	2201      	movs	r2, #1
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_RTC_Init+0x110>)
 80009da:	f003 fb32 	bl	8004042 <HAL_RTC_SetAlarm>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80009e4:	f000 f8ea 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	3740      	adds	r7, #64	; 0x40
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000094 	.word	0x20000094
 80009f4:	40002800 	.word	0x40002800

080009f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <MX_USART1_UART_Init+0x50>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a30:	f003 fd20 	bl	8004474 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a3a:	f000 f8bf 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000120 	.word	0x20000120
 8000a48:	40011000 	.word	0x40011000

08000a4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <MX_USART2_UART_Init+0x50>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a84:	f003 fcf6 	bl	8004474 <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a8e:	f000 f895 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000164 	.word	0x20000164
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b3d      	ldr	r3, [pc, #244]	; (8000bb0 <MX_GPIO_Init+0x110>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a3c      	ldr	r2, [pc, #240]	; (8000bb0 <MX_GPIO_Init+0x110>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b3a      	ldr	r3, [pc, #232]	; (8000bb0 <MX_GPIO_Init+0x110>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b36      	ldr	r3, [pc, #216]	; (8000bb0 <MX_GPIO_Init+0x110>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a35      	ldr	r2, [pc, #212]	; (8000bb0 <MX_GPIO_Init+0x110>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b33      	ldr	r3, [pc, #204]	; (8000bb0 <MX_GPIO_Init+0x110>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <MX_GPIO_Init+0x110>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a2e      	ldr	r2, [pc, #184]	; (8000bb0 <MX_GPIO_Init+0x110>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b2c      	ldr	r3, [pc, #176]	; (8000bb0 <MX_GPIO_Init+0x110>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <MX_GPIO_Init+0x110>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a27      	ldr	r2, [pc, #156]	; (8000bb0 <MX_GPIO_Init+0x110>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <MX_GPIO_Init+0x110>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	210f      	movs	r1, #15
 8000b2a:	4822      	ldr	r0, [pc, #136]	; (8000bb4 <MX_GPIO_Init+0x114>)
 8000b2c:	f001 f9a2 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2120      	movs	r1, #32
 8000b34:	4820      	ldr	r0, [pc, #128]	; (8000bb8 <MX_GPIO_Init+0x118>)
 8000b36:	f001 f99d 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b40:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4818      	ldr	r0, [pc, #96]	; (8000bb4 <MX_GPIO_Init+0x114>)
 8000b52:	f000 fffb 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b56:	230f      	movs	r3, #15
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <MX_GPIO_Init+0x114>)
 8000b6e:	f000 ffed 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b72:	2320      	movs	r3, #32
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <MX_GPIO_Init+0x118>)
 8000b8a:	f000 ffdf 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b8e:	23f0      	movs	r3, #240	; 0xf0
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_GPIO_Init+0x114>)
 8000ba2:	f000 ffd3 	bl	8001b4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020800 	.word	0x40020800
 8000bb8:	40020000 	.word	0x40020000

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <Error_Handler+0x8>
	...

08000bc8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000bce:	f000 fb25 	bl	800121c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000bd2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2178      	movs	r1, #120	; 0x78
 8000bda:	485b      	ldr	r0, [pc, #364]	; (8000d48 <SSD1306_Init+0x180>)
 8000bdc:	f001 fba6 	bl	800232c <HAL_I2C_IsDeviceReady>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e0a9      	b.n	8000d3e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000bea:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000bee:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bf0:	e002      	b.n	8000bf8 <SSD1306_Init+0x30>
		p--;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1f9      	bne.n	8000bf2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000bfe:	22ae      	movs	r2, #174	; 0xae
 8000c00:	2100      	movs	r1, #0
 8000c02:	2078      	movs	r0, #120	; 0x78
 8000c04:	f000 fb86 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000c08:	2220      	movs	r2, #32
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2078      	movs	r0, #120	; 0x78
 8000c0e:	f000 fb81 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000c12:	2210      	movs	r2, #16
 8000c14:	2100      	movs	r1, #0
 8000c16:	2078      	movs	r0, #120	; 0x78
 8000c18:	f000 fb7c 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c1c:	22b0      	movs	r2, #176	; 0xb0
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2078      	movs	r0, #120	; 0x78
 8000c22:	f000 fb77 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000c26:	22c8      	movs	r2, #200	; 0xc8
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2078      	movs	r0, #120	; 0x78
 8000c2c:	f000 fb72 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000c30:	2200      	movs	r2, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	2078      	movs	r0, #120	; 0x78
 8000c36:	f000 fb6d 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000c3a:	2210      	movs	r2, #16
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2078      	movs	r0, #120	; 0x78
 8000c40:	f000 fb68 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000c44:	2240      	movs	r2, #64	; 0x40
 8000c46:	2100      	movs	r1, #0
 8000c48:	2078      	movs	r0, #120	; 0x78
 8000c4a:	f000 fb63 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000c4e:	2281      	movs	r2, #129	; 0x81
 8000c50:	2100      	movs	r1, #0
 8000c52:	2078      	movs	r0, #120	; 0x78
 8000c54:	f000 fb5e 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000c58:	22ff      	movs	r2, #255	; 0xff
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2078      	movs	r0, #120	; 0x78
 8000c5e:	f000 fb59 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000c62:	22a1      	movs	r2, #161	; 0xa1
 8000c64:	2100      	movs	r1, #0
 8000c66:	2078      	movs	r0, #120	; 0x78
 8000c68:	f000 fb54 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000c6c:	22a6      	movs	r2, #166	; 0xa6
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2078      	movs	r0, #120	; 0x78
 8000c72:	f000 fb4f 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000c76:	22a8      	movs	r2, #168	; 0xa8
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2078      	movs	r0, #120	; 0x78
 8000c7c:	f000 fb4a 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000c80:	223f      	movs	r2, #63	; 0x3f
 8000c82:	2100      	movs	r1, #0
 8000c84:	2078      	movs	r0, #120	; 0x78
 8000c86:	f000 fb45 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c8a:	22a4      	movs	r2, #164	; 0xa4
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2078      	movs	r0, #120	; 0x78
 8000c90:	f000 fb40 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000c94:	22d3      	movs	r2, #211	; 0xd3
 8000c96:	2100      	movs	r1, #0
 8000c98:	2078      	movs	r0, #120	; 0x78
 8000c9a:	f000 fb3b 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2078      	movs	r0, #120	; 0x78
 8000ca4:	f000 fb36 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ca8:	22d5      	movs	r2, #213	; 0xd5
 8000caa:	2100      	movs	r1, #0
 8000cac:	2078      	movs	r0, #120	; 0x78
 8000cae:	f000 fb31 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000cb2:	22f0      	movs	r2, #240	; 0xf0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2078      	movs	r0, #120	; 0x78
 8000cb8:	f000 fb2c 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000cbc:	22d9      	movs	r2, #217	; 0xd9
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2078      	movs	r0, #120	; 0x78
 8000cc2:	f000 fb27 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000cc6:	2222      	movs	r2, #34	; 0x22
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2078      	movs	r0, #120	; 0x78
 8000ccc:	f000 fb22 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000cd0:	22da      	movs	r2, #218	; 0xda
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2078      	movs	r0, #120	; 0x78
 8000cd6:	f000 fb1d 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000cda:	2212      	movs	r2, #18
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2078      	movs	r0, #120	; 0x78
 8000ce0:	f000 fb18 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000ce4:	22db      	movs	r2, #219	; 0xdb
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2078      	movs	r0, #120	; 0x78
 8000cea:	f000 fb13 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000cee:	2220      	movs	r2, #32
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2078      	movs	r0, #120	; 0x78
 8000cf4:	f000 fb0e 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000cf8:	228d      	movs	r2, #141	; 0x8d
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2078      	movs	r0, #120	; 0x78
 8000cfe:	f000 fb09 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000d02:	2214      	movs	r2, #20
 8000d04:	2100      	movs	r1, #0
 8000d06:	2078      	movs	r0, #120	; 0x78
 8000d08:	f000 fb04 	bl	8001314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000d0c:	22af      	movs	r2, #175	; 0xaf
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2078      	movs	r0, #120	; 0x78
 8000d12:	f000 faff 	bl	8001314 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000d16:	222e      	movs	r2, #46	; 0x2e
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2078      	movs	r0, #120	; 0x78
 8000d1c:	f000 fafa 	bl	8001314 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f000 f843 	bl	8000dac <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000d26:	f000 f813 	bl	8000d50 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <SSD1306_Init+0x184>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <SSD1306_Init+0x184>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <SSD1306_Init+0x184>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000d3c:	2301      	movs	r3, #1
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200000cc 	.word	0x200000cc
 8000d4c:	200005bc 	.word	0x200005bc

08000d50 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000d56:	2300      	movs	r3, #0
 8000d58:	71fb      	strb	r3, [r7, #7]
 8000d5a:	e01d      	b.n	8000d98 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	3b50      	subs	r3, #80	; 0x50
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	461a      	mov	r2, r3
 8000d64:	2100      	movs	r1, #0
 8000d66:	2078      	movs	r0, #120	; 0x78
 8000d68:	f000 fad4 	bl	8001314 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2078      	movs	r0, #120	; 0x78
 8000d72:	f000 facf 	bl	8001314 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000d76:	2210      	movs	r2, #16
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2078      	movs	r0, #120	; 0x78
 8000d7c:	f000 faca 	bl	8001314 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	01db      	lsls	r3, r3, #7
 8000d84:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <SSD1306_UpdateScreen+0x58>)
 8000d86:	441a      	add	r2, r3
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	2140      	movs	r1, #64	; 0x40
 8000d8c:	2078      	movs	r0, #120	; 0x78
 8000d8e:	f000 fa5b 	bl	8001248 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	3301      	adds	r3, #1
 8000d96:	71fb      	strb	r3, [r7, #7]
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	2b07      	cmp	r3, #7
 8000d9c:	d9de      	bls.n	8000d5c <SSD1306_UpdateScreen+0xc>
	}
}
 8000d9e:	bf00      	nop
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200001bc 	.word	0x200001bc

08000dac <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d101      	bne.n	8000dc0 <SSD1306_Fill+0x14>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	e000      	b.n	8000dc2 <SSD1306_Fill+0x16>
 8000dc0:	23ff      	movs	r3, #255	; 0xff
 8000dc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <SSD1306_Fill+0x2c>)
 8000dca:	f004 faff 	bl	80053cc <memset>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200001bc 	.word	0x200001bc

08000ddc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	80fb      	strh	r3, [r7, #6]
 8000de6:	460b      	mov	r3, r1
 8000de8:	80bb      	strh	r3, [r7, #4]
 8000dea:	4613      	mov	r3, r2
 8000dec:	70fb      	strb	r3, [r7, #3]
	if (
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	2b7f      	cmp	r3, #127	; 0x7f
 8000df2:	d848      	bhi.n	8000e86 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000df4:	88bb      	ldrh	r3, [r7, #4]
 8000df6:	2b3f      	cmp	r3, #63	; 0x3f
 8000df8:	d845      	bhi.n	8000e86 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000dfa:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <SSD1306_DrawPixel+0xb8>)
 8000dfc:	791b      	ldrb	r3, [r3, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d006      	beq.n	8000e10 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000e02:	78fb      	ldrb	r3, [r7, #3]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	bf0c      	ite	eq
 8000e08:	2301      	moveq	r3, #1
 8000e0a:	2300      	movne	r3, #0
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000e10:	78fb      	ldrb	r3, [r7, #3]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d11a      	bne.n	8000e4c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e16:	88fa      	ldrh	r2, [r7, #6]
 8000e18:	88bb      	ldrh	r3, [r7, #4]
 8000e1a:	08db      	lsrs	r3, r3, #3
 8000e1c:	b298      	uxth	r0, r3
 8000e1e:	4603      	mov	r3, r0
 8000e20:	01db      	lsls	r3, r3, #7
 8000e22:	4413      	add	r3, r2
 8000e24:	4a1c      	ldr	r2, [pc, #112]	; (8000e98 <SSD1306_DrawPixel+0xbc>)
 8000e26:	5cd3      	ldrb	r3, [r2, r3]
 8000e28:	b25a      	sxtb	r2, r3
 8000e2a:	88bb      	ldrh	r3, [r7, #4]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	2101      	movs	r1, #1
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	b259      	sxtb	r1, r3
 8000e3c:	88fa      	ldrh	r2, [r7, #6]
 8000e3e:	4603      	mov	r3, r0
 8000e40:	01db      	lsls	r3, r3, #7
 8000e42:	4413      	add	r3, r2
 8000e44:	b2c9      	uxtb	r1, r1
 8000e46:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <SSD1306_DrawPixel+0xbc>)
 8000e48:	54d1      	strb	r1, [r2, r3]
 8000e4a:	e01d      	b.n	8000e88 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000e4c:	88fa      	ldrh	r2, [r7, #6]
 8000e4e:	88bb      	ldrh	r3, [r7, #4]
 8000e50:	08db      	lsrs	r3, r3, #3
 8000e52:	b298      	uxth	r0, r3
 8000e54:	4603      	mov	r3, r0
 8000e56:	01db      	lsls	r3, r3, #7
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a0f      	ldr	r2, [pc, #60]	; (8000e98 <SSD1306_DrawPixel+0xbc>)
 8000e5c:	5cd3      	ldrb	r3, [r2, r3]
 8000e5e:	b25a      	sxtb	r2, r3
 8000e60:	88bb      	ldrh	r3, [r7, #4]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	2101      	movs	r1, #1
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	4013      	ands	r3, r2
 8000e74:	b259      	sxtb	r1, r3
 8000e76:	88fa      	ldrh	r2, [r7, #6]
 8000e78:	4603      	mov	r3, r0
 8000e7a:	01db      	lsls	r3, r3, #7
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b2c9      	uxtb	r1, r1
 8000e80:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <SSD1306_DrawPixel+0xbc>)
 8000e82:	54d1      	strb	r1, [r2, r3]
 8000e84:	e000      	b.n	8000e88 <SSD1306_DrawPixel+0xac>
		return;
 8000e86:	bf00      	nop
	}
}
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	200005bc 	.word	0x200005bc
 8000e98:	200001bc 	.word	0x200001bc

08000e9c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	460a      	mov	r2, r1
 8000ea6:	80fb      	strh	r3, [r7, #6]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000eac:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <SSD1306_GotoXY+0x28>)
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <SSD1306_GotoXY+0x28>)
 8000eb4:	88bb      	ldrh	r3, [r7, #4]
 8000eb6:	8053      	strh	r3, [r2, #2]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	200005bc 	.word	0x200005bc

08000ec8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ed8:	4b3a      	ldr	r3, [pc, #232]	; (8000fc4 <SSD1306_Putc+0xfc>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
	if (
 8000ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ee6:	dc07      	bgt.n	8000ef8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000ee8:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <SSD1306_Putc+0xfc>)
 8000eea:	885b      	ldrh	r3, [r3, #2]
 8000eec:	461a      	mov	r2, r3
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	785b      	ldrb	r3, [r3, #1]
 8000ef2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ef4:	2b3f      	cmp	r3, #63	; 0x3f
 8000ef6:	dd01      	ble.n	8000efc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	e05e      	b.n	8000fba <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e04b      	b.n	8000f9a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	3b20      	subs	r3, #32
 8000f0a:	6839      	ldr	r1, [r7, #0]
 8000f0c:	7849      	ldrb	r1, [r1, #1]
 8000f0e:	fb01 f303 	mul.w	r3, r1, r3
 8000f12:	4619      	mov	r1, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	440b      	add	r3, r1
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4413      	add	r3, r2
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000f20:	2300      	movs	r3, #0
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	e030      	b.n	8000f88 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d010      	beq.n	8000f58 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000f36:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <SSD1306_Putc+0xfc>)
 8000f38:	881a      	ldrh	r2, [r3, #0]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	4413      	add	r3, r2
 8000f40:	b298      	uxth	r0, r3
 8000f42:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <SSD1306_Putc+0xfc>)
 8000f44:	885a      	ldrh	r2, [r3, #2]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	79ba      	ldrb	r2, [r7, #6]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f7ff ff43 	bl	8000ddc <SSD1306_DrawPixel>
 8000f56:	e014      	b.n	8000f82 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000f58:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <SSD1306_Putc+0xfc>)
 8000f5a:	881a      	ldrh	r2, [r3, #0]
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	4413      	add	r3, r2
 8000f62:	b298      	uxth	r0, r3
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <SSD1306_Putc+0xfc>)
 8000f66:	885a      	ldrh	r2, [r3, #2]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	4413      	add	r3, r2
 8000f6e:	b299      	uxth	r1, r3
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	bf0c      	ite	eq
 8000f76:	2301      	moveq	r3, #1
 8000f78:	2300      	movne	r3, #0
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	f7ff ff2d 	bl	8000ddc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	3301      	adds	r3, #1
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d3c8      	bcc.n	8000f26 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	3301      	adds	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	785b      	ldrb	r3, [r3, #1]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d3ad      	bcc.n	8000f02 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <SSD1306_Putc+0xfc>)
 8000fa8:	881a      	ldrh	r2, [r3, #0]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	4413      	add	r3, r2
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <SSD1306_Putc+0xfc>)
 8000fb6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200005bc 	.word	0x200005bc

08000fc8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000fd6:	e012      	b.n	8000ffe <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	79fa      	ldrb	r2, [r7, #7]
 8000fde:	68b9      	ldr	r1, [r7, #8]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff71 	bl	8000ec8 <SSD1306_Putc>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	461a      	mov	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d002      	beq.n	8000ff8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	e008      	b.n	800100a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1e8      	bne.n	8000fd8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	781b      	ldrb	r3, [r3, #0]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001012:	b590      	push	{r4, r7, lr}
 8001014:	b087      	sub	sp, #28
 8001016:	af00      	add	r7, sp, #0
 8001018:	4604      	mov	r4, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4611      	mov	r1, r2
 800101e:	461a      	mov	r2, r3
 8001020:	4623      	mov	r3, r4
 8001022:	80fb      	strh	r3, [r7, #6]
 8001024:	4603      	mov	r3, r0
 8001026:	80bb      	strh	r3, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	807b      	strh	r3, [r7, #2]
 800102c:	4613      	mov	r3, r2
 800102e:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	2b7f      	cmp	r3, #127	; 0x7f
 8001034:	d901      	bls.n	800103a <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001036:	237f      	movs	r3, #127	; 0x7f
 8001038:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 800103a:	887b      	ldrh	r3, [r7, #2]
 800103c:	2b7f      	cmp	r3, #127	; 0x7f
 800103e:	d901      	bls.n	8001044 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001040:	237f      	movs	r3, #127	; 0x7f
 8001042:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001044:	88bb      	ldrh	r3, [r7, #4]
 8001046:	2b3f      	cmp	r3, #63	; 0x3f
 8001048:	d901      	bls.n	800104e <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 800104a:	233f      	movs	r3, #63	; 0x3f
 800104c:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 800104e:	883b      	ldrh	r3, [r7, #0]
 8001050:	2b3f      	cmp	r3, #63	; 0x3f
 8001052:	d901      	bls.n	8001058 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001054:	233f      	movs	r3, #63	; 0x3f
 8001056:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001058:	88fa      	ldrh	r2, [r7, #6]
 800105a:	887b      	ldrh	r3, [r7, #2]
 800105c:	429a      	cmp	r2, r3
 800105e:	d205      	bcs.n	800106c <SSD1306_DrawLine+0x5a>
 8001060:	887a      	ldrh	r2, [r7, #2]
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	b29b      	uxth	r3, r3
 8001068:	b21b      	sxth	r3, r3
 800106a:	e004      	b.n	8001076 <SSD1306_DrawLine+0x64>
 800106c:	88fa      	ldrh	r2, [r7, #6]
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	b29b      	uxth	r3, r3
 8001074:	b21b      	sxth	r3, r3
 8001076:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001078:	88ba      	ldrh	r2, [r7, #4]
 800107a:	883b      	ldrh	r3, [r7, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	d205      	bcs.n	800108c <SSD1306_DrawLine+0x7a>
 8001080:	883a      	ldrh	r2, [r7, #0]
 8001082:	88bb      	ldrh	r3, [r7, #4]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	b29b      	uxth	r3, r3
 8001088:	b21b      	sxth	r3, r3
 800108a:	e004      	b.n	8001096 <SSD1306_DrawLine+0x84>
 800108c:	88ba      	ldrh	r2, [r7, #4]
 800108e:	883b      	ldrh	r3, [r7, #0]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	b29b      	uxth	r3, r3
 8001094:	b21b      	sxth	r3, r3
 8001096:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001098:	88fa      	ldrh	r2, [r7, #6]
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	429a      	cmp	r2, r3
 800109e:	d201      	bcs.n	80010a4 <SSD1306_DrawLine+0x92>
 80010a0:	2301      	movs	r3, #1
 80010a2:	e001      	b.n	80010a8 <SSD1306_DrawLine+0x96>
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010a8:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80010aa:	88ba      	ldrh	r2, [r7, #4]
 80010ac:	883b      	ldrh	r3, [r7, #0]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d201      	bcs.n	80010b6 <SSD1306_DrawLine+0xa4>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e001      	b.n	80010ba <SSD1306_DrawLine+0xa8>
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ba:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80010bc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80010c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	dd06      	ble.n	80010d6 <SSD1306_DrawLine+0xc4>
 80010c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010cc:	0fda      	lsrs	r2, r3, #31
 80010ce:	4413      	add	r3, r2
 80010d0:	105b      	asrs	r3, r3, #1
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	e006      	b.n	80010e4 <SSD1306_DrawLine+0xd2>
 80010d6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010da:	0fda      	lsrs	r2, r3, #31
 80010dc:	4413      	add	r3, r2
 80010de:	105b      	asrs	r3, r3, #1
 80010e0:	425b      	negs	r3, r3
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80010e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d129      	bne.n	8001142 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 80010ee:	883a      	ldrh	r2, [r7, #0]
 80010f0:	88bb      	ldrh	r3, [r7, #4]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d205      	bcs.n	8001102 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 80010f6:	883b      	ldrh	r3, [r7, #0]
 80010f8:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80010fe:	893b      	ldrh	r3, [r7, #8]
 8001100:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001102:	887a      	ldrh	r2, [r7, #2]
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	429a      	cmp	r2, r3
 8001108:	d205      	bcs.n	8001116 <SSD1306_DrawLine+0x104>
			tmp = x1;
 800110a:	887b      	ldrh	r3, [r7, #2]
 800110c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001112:	893b      	ldrh	r3, [r7, #8]
 8001114:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001116:	88bb      	ldrh	r3, [r7, #4]
 8001118:	82bb      	strh	r3, [r7, #20]
 800111a:	e00c      	b.n	8001136 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 800111c:	8ab9      	ldrh	r1, [r7, #20]
 800111e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fe59 	bl	8000ddc <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 800112a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800112e:	b29b      	uxth	r3, r3
 8001130:	3301      	adds	r3, #1
 8001132:	b29b      	uxth	r3, r3
 8001134:	82bb      	strh	r3, [r7, #20]
 8001136:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800113a:	883b      	ldrh	r3, [r7, #0]
 800113c:	429a      	cmp	r2, r3
 800113e:	dded      	ble.n	800111c <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001140:	e05f      	b.n	8001202 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8001142:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d129      	bne.n	800119e <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 800114a:	883a      	ldrh	r2, [r7, #0]
 800114c:	88bb      	ldrh	r3, [r7, #4]
 800114e:	429a      	cmp	r2, r3
 8001150:	d205      	bcs.n	800115e <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001152:	883b      	ldrh	r3, [r7, #0]
 8001154:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001156:	88bb      	ldrh	r3, [r7, #4]
 8001158:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800115a:	893b      	ldrh	r3, [r7, #8]
 800115c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	429a      	cmp	r2, r3
 8001164:	d205      	bcs.n	8001172 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001166:	887b      	ldrh	r3, [r7, #2]
 8001168:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800116e:	893b      	ldrh	r3, [r7, #8]
 8001170:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	82bb      	strh	r3, [r7, #20]
 8001176:	e00c      	b.n	8001192 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001178:	8abb      	ldrh	r3, [r7, #20]
 800117a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800117e:	88b9      	ldrh	r1, [r7, #4]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fe2b 	bl	8000ddc <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001186:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800118a:	b29b      	uxth	r3, r3
 800118c:	3301      	adds	r3, #1
 800118e:	b29b      	uxth	r3, r3
 8001190:	82bb      	strh	r3, [r7, #20]
 8001192:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001196:	887b      	ldrh	r3, [r7, #2]
 8001198:	429a      	cmp	r2, r3
 800119a:	dded      	ble.n	8001178 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 800119c:	e031      	b.n	8001202 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800119e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80011a2:	88b9      	ldrh	r1, [r7, #4]
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fe18 	bl	8000ddc <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80011ac:	88fa      	ldrh	r2, [r7, #6]
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d103      	bne.n	80011bc <SSD1306_DrawLine+0x1aa>
 80011b4:	88ba      	ldrh	r2, [r7, #4]
 80011b6:	883b      	ldrh	r3, [r7, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d021      	beq.n	8001200 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 80011bc:	8afb      	ldrh	r3, [r7, #22]
 80011be:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80011c0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80011c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011c8:	425b      	negs	r3, r3
 80011ca:	429a      	cmp	r2, r3
 80011cc:	dd08      	ble.n	80011e0 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 80011ce:	8afa      	ldrh	r2, [r7, #22]
 80011d0:	8a3b      	ldrh	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80011d8:	89fa      	ldrh	r2, [r7, #14]
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	4413      	add	r3, r2
 80011de:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 80011e0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80011e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dad8      	bge.n	800119e <SSD1306_DrawLine+0x18c>
			err += dx;
 80011ec:	8afa      	ldrh	r2, [r7, #22]
 80011ee:	8a7b      	ldrh	r3, [r7, #18]
 80011f0:	4413      	add	r3, r2
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80011f6:	89ba      	ldrh	r2, [r7, #12]
 80011f8:	88bb      	ldrh	r3, [r7, #4]
 80011fa:	4413      	add	r3, r2
 80011fc:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 80011fe:	e7ce      	b.n	800119e <SSD1306_DrawLine+0x18c>
			break;
 8001200:	bf00      	nop
		} 
	}
}
 8001202:	371c      	adds	r7, #28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd90      	pop	{r4, r7, pc}

08001208 <SSD1306_Clear>:
}
 


void  SSD1306_Clear(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff fdcd 	bl	8000dac <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001212:	f7ff fd9d 	bl	8000d50 <SSD1306_UpdateScreen>
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <ssd1306_I2C_Init+0x28>)
 8001224:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001226:	e002      	b.n	800122e <ssd1306_I2C_Init+0x12>
		p--;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1f9      	bne.n	8001228 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	0003d090 	.word	0x0003d090

08001248 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b0c7      	sub	sp, #284	; 0x11c
 800124c:	af02      	add	r7, sp, #8
 800124e:	4604      	mov	r4, r0
 8001250:	4608      	mov	r0, r1
 8001252:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001256:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800125a:	600a      	str	r2, [r1, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001262:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001266:	4622      	mov	r2, r4
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800126e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001272:	4602      	mov	r2, r0
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800127a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800127e:	460a      	mov	r2, r1
 8001280:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001282:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800128a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800128e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001292:	7812      	ldrb	r2, [r2, #0]
 8001294:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001296:	2300      	movs	r3, #0
 8001298:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800129c:	e015      	b.n	80012ca <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800129e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80012a2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80012a6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	441a      	add	r2, r3
 80012ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80012b2:	3301      	adds	r3, #1
 80012b4:	7811      	ldrb	r1, [r2, #0]
 80012b6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80012ba:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80012be:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80012c0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80012c4:	3301      	adds	r3, #1
 80012c6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80012ca:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80012d4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80012d8:	8812      	ldrh	r2, [r2, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d8df      	bhi.n	800129e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80012de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012e2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b299      	uxth	r1, r3
 80012ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f107 020c 	add.w	r2, r7, #12
 80012fc:	200a      	movs	r0, #10
 80012fe:	9000      	str	r0, [sp, #0]
 8001300:	4803      	ldr	r0, [pc, #12]	; (8001310 <ssd1306_I2C_WriteMulti+0xc8>)
 8001302:	f000 ff15 	bl	8002130 <HAL_I2C_Master_Transmit>
}
 8001306:	bf00      	nop
 8001308:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}
 8001310:	200000cc 	.word	0x200000cc

08001314 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af02      	add	r7, sp, #8
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
 800131e:	460b      	mov	r3, r1
 8001320:	71bb      	strb	r3, [r7, #6]
 8001322:	4613      	mov	r3, r2
 8001324:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001326:	79bb      	ldrb	r3, [r7, #6]
 8001328:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800132a:	797b      	ldrb	r3, [r7, #5]
 800132c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	b299      	uxth	r1, r3
 8001332:	f107 020c 	add.w	r2, r7, #12
 8001336:	230a      	movs	r3, #10
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2302      	movs	r3, #2
 800133c:	4803      	ldr	r0, [pc, #12]	; (800134c <ssd1306_I2C_Write+0x38>)
 800133e:	f000 fef7 	bl	8002130 <HAL_I2C_Master_Transmit>
}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200000cc 	.word	0x200000cc

08001350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <HAL_MspInit+0x4c>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a0f      	ldr	r2, [pc, #60]	; (800139c <HAL_MspInit+0x4c>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <HAL_MspInit+0x4c>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	603b      	str	r3, [r7, #0]
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_MspInit+0x4c>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a08      	ldr	r2, [pc, #32]	; (800139c <HAL_MspInit+0x4c>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_MspInit+0x4c>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800138e:	2007      	movs	r0, #7
 8001390:	f000 fb08 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40023800 	.word	0x40023800

080013a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a19      	ldr	r2, [pc, #100]	; (8001424 <HAL_I2C_MspInit+0x84>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d12c      	bne.n	800141c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <HAL_I2C_MspInit+0x88>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a17      	ldr	r2, [pc, #92]	; (8001428 <HAL_I2C_MspInit+0x88>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_I2C_MspInit+0x88>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e4:	2312      	movs	r3, #18
 80013e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013f0:	2304      	movs	r3, #4
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	480c      	ldr	r0, [pc, #48]	; (800142c <HAL_I2C_MspInit+0x8c>)
 80013fc:	f000 fba6 	bl	8001b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_I2C_MspInit+0x88>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <HAL_I2C_MspInit+0x88>)
 800140a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800140e:	6413      	str	r3, [r2, #64]	; 0x40
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_I2C_MspInit+0x88>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800141c:	bf00      	nop
 800141e:	3728      	adds	r7, #40	; 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40005400 	.word	0x40005400
 8001428:	40023800 	.word	0x40023800
 800142c:	40020400 	.word	0x40020400

08001430 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b09a      	sub	sp, #104	; 0x68
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	225c      	movs	r2, #92	; 0x5c
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f003 ffc3 	bl	80053cc <memset>
  if(hrtc->Instance==RTC)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a0c      	ldr	r2, [pc, #48]	; (800147c <HAL_RTC_MspInit+0x4c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d111      	bne.n	8001474 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001450:	2320      	movs	r3, #32
 8001452:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001458:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4618      	mov	r0, r3
 8001460:	f001 fbb6 	bl	8002bd0 <HAL_RCCEx_PeriphCLKConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800146a:	f7ff fba7 	bl	8000bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <HAL_RTC_MspInit+0x50>)
 8001470:	2201      	movs	r2, #1
 8001472:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001474:	bf00      	nop
 8001476:	3768      	adds	r7, #104	; 0x68
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40002800 	.word	0x40002800
 8001480:	42470e3c 	.word	0x42470e3c

08001484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08c      	sub	sp, #48	; 0x30
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a36      	ldr	r2, [pc, #216]	; (800157c <HAL_UART_MspInit+0xf8>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d135      	bne.n	8001512 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
 80014aa:	4b35      	ldr	r3, [pc, #212]	; (8001580 <HAL_UART_MspInit+0xfc>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	4a34      	ldr	r2, [pc, #208]	; (8001580 <HAL_UART_MspInit+0xfc>)
 80014b0:	f043 0310 	orr.w	r3, r3, #16
 80014b4:	6453      	str	r3, [r2, #68]	; 0x44
 80014b6:	4b32      	ldr	r3, [pc, #200]	; (8001580 <HAL_UART_MspInit+0xfc>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <HAL_UART_MspInit+0xfc>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a2d      	ldr	r2, [pc, #180]	; (8001580 <HAL_UART_MspInit+0xfc>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <HAL_UART_MspInit+0xfc>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014f0:	2307      	movs	r3, #7
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	4822      	ldr	r0, [pc, #136]	; (8001584 <HAL_UART_MspInit+0x100>)
 80014fc:	f000 fb26 	bl	8001b4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	2025      	movs	r0, #37	; 0x25
 8001506:	f000 fa58 	bl	80019ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800150a:	2025      	movs	r0, #37	; 0x25
 800150c:	f000 fa71 	bl	80019f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001510:	e030      	b.n	8001574 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <HAL_UART_MspInit+0x104>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d12b      	bne.n	8001574 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_UART_MspInit+0xfc>)
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	4a16      	ldr	r2, [pc, #88]	; (8001580 <HAL_UART_MspInit+0xfc>)
 8001526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152a:	6413      	str	r3, [r2, #64]	; 0x40
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <HAL_UART_MspInit+0xfc>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_UART_MspInit+0xfc>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <HAL_UART_MspInit+0xfc>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6313      	str	r3, [r2, #48]	; 0x30
 8001548:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_UART_MspInit+0xfc>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001554:	230c      	movs	r3, #12
 8001556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001564:	2307      	movs	r3, #7
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <HAL_UART_MspInit+0x100>)
 8001570:	f000 faec 	bl	8001b4c <HAL_GPIO_Init>
}
 8001574:	bf00      	nop
 8001576:	3730      	adds	r7, #48	; 0x30
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40011000 	.word	0x40011000
 8001580:	40023800 	.word	0x40023800
 8001584:	40020000 	.word	0x40020000
 8001588:	40004400 	.word	0x40004400

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <NMI_Handler+0x4>

08001592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <HardFault_Handler+0x4>

08001598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <MemManage_Handler+0x4>

0800159e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <BusFault_Handler+0x4>

080015a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <UsageFault_Handler+0x4>

080015aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d8:	f000 f8d0 	bl	800177c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}

080015e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <USART1_IRQHandler+0x10>)
 80015e6:	f002 ffc3 	bl	8004570 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000120 	.word	0x20000120

080015f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015fc:	4a14      	ldr	r2, [pc, #80]	; (8001650 <_sbrk+0x5c>)
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <_sbrk+0x60>)
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d102      	bne.n	8001616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <_sbrk+0x64>)
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <_sbrk+0x68>)
 8001614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	429a      	cmp	r2, r3
 8001622:	d207      	bcs.n	8001634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001624:	f003 fea8 	bl	8005378 <__errno>
 8001628:	4603      	mov	r3, r0
 800162a:	220c      	movs	r2, #12
 800162c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001632:	e009      	b.n	8001648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <_sbrk+0x64>)
 8001644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20020000 	.word	0x20020000
 8001654:	00000400 	.word	0x00000400
 8001658:	200005c4 	.word	0x200005c4
 800165c:	200005e0 	.word	0x200005e0

08001660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <SystemInit+0x20>)
 8001666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <SystemInit+0x20>)
 800166c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001688:	480d      	ldr	r0, [pc, #52]	; (80016c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800168a:	490e      	ldr	r1, [pc, #56]	; (80016c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800168c:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001690:	e002      	b.n	8001698 <LoopCopyDataInit>

08001692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001696:	3304      	adds	r3, #4

08001698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800169c:	d3f9      	bcc.n	8001692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016a0:	4c0b      	ldr	r4, [pc, #44]	; (80016d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a4:	e001      	b.n	80016aa <LoopFillZerobss>

080016a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a8:	3204      	adds	r2, #4

080016aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ac:	d3fb      	bcc.n	80016a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ae:	f7ff ffd7 	bl	8001660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b2:	f003 fe67 	bl	8005384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b6:	f7fe ffe1 	bl	800067c <main>
  bx  lr    
 80016ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80016c8:	08006560 	.word	0x08006560
  ldr r2, =_sbss
 80016cc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80016d0:	200005dc 	.word	0x200005dc

080016d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC_IRQHandler>
	...

080016d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0d      	ldr	r2, [pc, #52]	; (8001718 <HAL_Init+0x40>)
 80016e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <HAL_Init+0x40>)
 80016ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a07      	ldr	r2, [pc, #28]	; (8001718 <HAL_Init+0x40>)
 80016fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001700:	2003      	movs	r0, #3
 8001702:	f000 f94f 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001706:	2000      	movs	r0, #0
 8001708:	f000 f808 	bl	800171c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800170c:	f7ff fe20 	bl	8001350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023c00 	.word	0x40023c00

0800171c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_InitTick+0x54>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_InitTick+0x58>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001732:	fbb3 f3f1 	udiv	r3, r3, r1
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f967 	bl	8001a0e <HAL_SYSTICK_Config>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e00e      	b.n	8001768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b0f      	cmp	r3, #15
 800174e:	d80a      	bhi.n	8001766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001750:	2200      	movs	r2, #0
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001758:	f000 f92f 	bl	80019ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800175c:	4a06      	ldr	r2, [pc, #24]	; (8001778 <HAL_InitTick+0x5c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	e000      	b.n	8001768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000008 	.word	0x20000008
 8001774:	20000010 	.word	0x20000010
 8001778:	2000000c 	.word	0x2000000c

0800177c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_IncTick+0x20>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_IncTick+0x24>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <HAL_IncTick+0x24>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000010 	.word	0x20000010
 80017a0:	200005c8 	.word	0x200005c8

080017a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <HAL_GetTick+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	200005c8 	.word	0x200005c8

080017bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff ffee 	bl	80017a4 <HAL_GetTick>
 80017c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017d4:	d005      	beq.n	80017e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_Delay+0x44>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017e2:	bf00      	nop
 80017e4:	f7ff ffde 	bl	80017a4 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d8f7      	bhi.n	80017e4 <HAL_Delay+0x28>
  {
  }
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000010 	.word	0x20000010

08001804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001820:	4013      	ands	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800182c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001836:	4a04      	ldr	r2, [pc, #16]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <__NVIC_GetPriorityGrouping+0x18>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	f003 0307 	and.w	r3, r3, #7
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	db0b      	blt.n	8001892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	f003 021f 	and.w	r2, r3, #31
 8001880:	4907      	ldr	r1, [pc, #28]	; (80018a0 <__NVIC_EnableIRQ+0x38>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	2001      	movs	r0, #1
 800188a:	fa00 f202 	lsl.w	r2, r0, r2
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000e100 	.word	0xe000e100

080018a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	6039      	str	r1, [r7, #0]
 80018ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	db0a      	blt.n	80018ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	490c      	ldr	r1, [pc, #48]	; (80018f0 <__NVIC_SetPriority+0x4c>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	0112      	lsls	r2, r2, #4
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	440b      	add	r3, r1
 80018c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018cc:	e00a      	b.n	80018e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4908      	ldr	r1, [pc, #32]	; (80018f4 <__NVIC_SetPriority+0x50>)
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	3b04      	subs	r3, #4
 80018dc:	0112      	lsls	r2, r2, #4
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	440b      	add	r3, r1
 80018e2:	761a      	strb	r2, [r3, #24]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000e100 	.word	0xe000e100
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f1c3 0307 	rsb	r3, r3, #7
 8001912:	2b04      	cmp	r3, #4
 8001914:	bf28      	it	cs
 8001916:	2304      	movcs	r3, #4
 8001918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3304      	adds	r3, #4
 800191e:	2b06      	cmp	r3, #6
 8001920:	d902      	bls.n	8001928 <NVIC_EncodePriority+0x30>
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3b03      	subs	r3, #3
 8001926:	e000      	b.n	800192a <NVIC_EncodePriority+0x32>
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43da      	mvns	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	401a      	ands	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001940:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	43d9      	mvns	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	4313      	orrs	r3, r2
         );
}
 8001952:	4618      	mov	r0, r3
 8001954:	3724      	adds	r7, #36	; 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001970:	d301      	bcc.n	8001976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001972:	2301      	movs	r3, #1
 8001974:	e00f      	b.n	8001996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001976:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <SysTick_Config+0x40>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197e:	210f      	movs	r1, #15
 8001980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001984:	f7ff ff8e 	bl	80018a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <SysTick_Config+0x40>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198e:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <SysTick_Config+0x40>)
 8001990:	2207      	movs	r2, #7
 8001992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	e000e010 	.word	0xe000e010

080019a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ff29 	bl	8001804 <__NVIC_SetPriorityGrouping>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019cc:	f7ff ff3e 	bl	800184c <__NVIC_GetPriorityGrouping>
 80019d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	6978      	ldr	r0, [r7, #20]
 80019d8:	f7ff ff8e 	bl	80018f8 <NVIC_EncodePriority>
 80019dc:	4602      	mov	r2, r0
 80019de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff5d 	bl	80018a4 <__NVIC_SetPriority>
}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff31 	bl	8001868 <__NVIC_EnableIRQ>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffa2 	bl	8001960 <SysTick_Config>
 8001a1c:	4603      	mov	r3, r0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b084      	sub	sp, #16
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a32:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a34:	f7ff feb6 	bl	80017a4 <HAL_GetTick>
 8001a38:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d008      	beq.n	8001a58 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2280      	movs	r2, #128	; 0x80
 8001a4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e052      	b.n	8001afe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0216 	bic.w	r2, r2, #22
 8001a66:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a76:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d103      	bne.n	8001a88 <HAL_DMA_Abort+0x62>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d007      	beq.n	8001a98 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0208 	bic.w	r2, r2, #8
 8001a96:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0201 	bic.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aa8:	e013      	b.n	8001ad2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aaa:	f7ff fe7b 	bl	80017a4 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b05      	cmp	r3, #5
 8001ab6:	d90c      	bls.n	8001ad2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2220      	movs	r2, #32
 8001abc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e015      	b.n	8001afe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1e4      	bne.n	8001aaa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae4:	223f      	movs	r2, #63	; 0x3f
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d004      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2280      	movs	r2, #128	; 0x80
 8001b1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e00c      	b.n	8001b3e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2205      	movs	r2, #5
 8001b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0201 	bic.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	e165      	b.n	8001e34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	f040 8154 	bne.w	8001e2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d005      	beq.n	8001b9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d130      	bne.n	8001c00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	2203      	movs	r2, #3
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 0201 	and.w	r2, r3, #1
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d017      	beq.n	8001c3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	2203      	movs	r2, #3
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d123      	bne.n	8001c90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	08da      	lsrs	r2, r3, #3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3208      	adds	r2, #8
 8001c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	220f      	movs	r2, #15
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	08da      	lsrs	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3208      	adds	r2, #8
 8001c8a:	69b9      	ldr	r1, [r7, #24]
 8001c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0203 	and.w	r2, r3, #3
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80ae 	beq.w	8001e2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b5d      	ldr	r3, [pc, #372]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	4a5c      	ldr	r2, [pc, #368]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce2:	4b5a      	ldr	r3, [pc, #360]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cee:	4a58      	ldr	r2, [pc, #352]	; (8001e50 <HAL_GPIO_Init+0x304>)
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	220f      	movs	r2, #15
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4f      	ldr	r2, [pc, #316]	; (8001e54 <HAL_GPIO_Init+0x308>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d025      	beq.n	8001d66 <HAL_GPIO_Init+0x21a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4e      	ldr	r2, [pc, #312]	; (8001e58 <HAL_GPIO_Init+0x30c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d01f      	beq.n	8001d62 <HAL_GPIO_Init+0x216>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4d      	ldr	r2, [pc, #308]	; (8001e5c <HAL_GPIO_Init+0x310>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d019      	beq.n	8001d5e <HAL_GPIO_Init+0x212>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4c      	ldr	r2, [pc, #304]	; (8001e60 <HAL_GPIO_Init+0x314>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0x20e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4b      	ldr	r2, [pc, #300]	; (8001e64 <HAL_GPIO_Init+0x318>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00d      	beq.n	8001d56 <HAL_GPIO_Init+0x20a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4a      	ldr	r2, [pc, #296]	; (8001e68 <HAL_GPIO_Init+0x31c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d007      	beq.n	8001d52 <HAL_GPIO_Init+0x206>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a49      	ldr	r2, [pc, #292]	; (8001e6c <HAL_GPIO_Init+0x320>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_GPIO_Init+0x202>
 8001d4a:	2306      	movs	r3, #6
 8001d4c:	e00c      	b.n	8001d68 <HAL_GPIO_Init+0x21c>
 8001d4e:	2307      	movs	r3, #7
 8001d50:	e00a      	b.n	8001d68 <HAL_GPIO_Init+0x21c>
 8001d52:	2305      	movs	r3, #5
 8001d54:	e008      	b.n	8001d68 <HAL_GPIO_Init+0x21c>
 8001d56:	2304      	movs	r3, #4
 8001d58:	e006      	b.n	8001d68 <HAL_GPIO_Init+0x21c>
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e004      	b.n	8001d68 <HAL_GPIO_Init+0x21c>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e002      	b.n	8001d68 <HAL_GPIO_Init+0x21c>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_GPIO_Init+0x21c>
 8001d66:	2300      	movs	r3, #0
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	f002 0203 	and.w	r2, r2, #3
 8001d6e:	0092      	lsls	r2, r2, #2
 8001d70:	4093      	lsls	r3, r2
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d78:	4935      	ldr	r1, [pc, #212]	; (8001e50 <HAL_GPIO_Init+0x304>)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	3302      	adds	r3, #2
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d86:	4b3a      	ldr	r3, [pc, #232]	; (8001e70 <HAL_GPIO_Init+0x324>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001daa:	4a31      	ldr	r2, [pc, #196]	; (8001e70 <HAL_GPIO_Init+0x324>)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db0:	4b2f      	ldr	r3, [pc, #188]	; (8001e70 <HAL_GPIO_Init+0x324>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dd4:	4a26      	ldr	r2, [pc, #152]	; (8001e70 <HAL_GPIO_Init+0x324>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dda:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <HAL_GPIO_Init+0x324>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dfe:	4a1c      	ldr	r2, [pc, #112]	; (8001e70 <HAL_GPIO_Init+0x324>)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e04:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <HAL_GPIO_Init+0x324>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e28:	4a11      	ldr	r2, [pc, #68]	; (8001e70 <HAL_GPIO_Init+0x324>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3301      	adds	r3, #1
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	2b0f      	cmp	r3, #15
 8001e38:	f67f ae96 	bls.w	8001b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	3724      	adds	r7, #36	; 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40013800 	.word	0x40013800
 8001e54:	40020000 	.word	0x40020000
 8001e58:	40020400 	.word	0x40020400
 8001e5c:	40020800 	.word	0x40020800
 8001e60:	40020c00 	.word	0x40020c00
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40021400 	.word	0x40021400
 8001e6c:	40021800 	.word	0x40021800
 8001e70:	40013c00 	.word	0x40013c00

08001e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	807b      	strh	r3, [r7, #2]
 8001e80:	4613      	mov	r3, r2
 8001e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e84:	787b      	ldrb	r3, [r7, #1]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e90:	e003      	b.n	8001e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e92:	887b      	ldrh	r3, [r7, #2]
 8001e94:	041a      	lsls	r2, r3, #16
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	619a      	str	r2, [r3, #24]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e12b      	b.n	8002112 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d106      	bne.n	8001ed4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fa66 	bl	80013a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2224      	movs	r2, #36	; 0x24
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001efa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f0c:	f000 fe38 	bl	8002b80 <HAL_RCC_GetPCLK1Freq>
 8001f10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	4a81      	ldr	r2, [pc, #516]	; (800211c <HAL_I2C_Init+0x274>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d807      	bhi.n	8001f2c <HAL_I2C_Init+0x84>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4a80      	ldr	r2, [pc, #512]	; (8002120 <HAL_I2C_Init+0x278>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	bf94      	ite	ls
 8001f24:	2301      	movls	r3, #1
 8001f26:	2300      	movhi	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	e006      	b.n	8001f3a <HAL_I2C_Init+0x92>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4a7d      	ldr	r2, [pc, #500]	; (8002124 <HAL_I2C_Init+0x27c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	bf94      	ite	ls
 8001f34:	2301      	movls	r3, #1
 8001f36:	2300      	movhi	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e0e7      	b.n	8002112 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4a78      	ldr	r2, [pc, #480]	; (8002128 <HAL_I2C_Init+0x280>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	0c9b      	lsrs	r3, r3, #18
 8001f4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	4a6a      	ldr	r2, [pc, #424]	; (800211c <HAL_I2C_Init+0x274>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d802      	bhi.n	8001f7c <HAL_I2C_Init+0xd4>
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	e009      	b.n	8001f90 <HAL_I2C_Init+0xe8>
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f82:	fb02 f303 	mul.w	r3, r2, r3
 8001f86:	4a69      	ldr	r2, [pc, #420]	; (800212c <HAL_I2C_Init+0x284>)
 8001f88:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8c:	099b      	lsrs	r3, r3, #6
 8001f8e:	3301      	adds	r3, #1
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	430b      	orrs	r3, r1
 8001f96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fa2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	495c      	ldr	r1, [pc, #368]	; (800211c <HAL_I2C_Init+0x274>)
 8001fac:	428b      	cmp	r3, r1
 8001fae:	d819      	bhi.n	8001fe4 <HAL_I2C_Init+0x13c>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1e59      	subs	r1, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fbe:	1c59      	adds	r1, r3, #1
 8001fc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fc4:	400b      	ands	r3, r1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <HAL_I2C_Init+0x138>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1e59      	subs	r1, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fd8:	3301      	adds	r3, #1
 8001fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fde:	e051      	b.n	8002084 <HAL_I2C_Init+0x1dc>
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	e04f      	b.n	8002084 <HAL_I2C_Init+0x1dc>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d111      	bne.n	8002010 <HAL_I2C_Init+0x168>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1e58      	subs	r0, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	440b      	add	r3, r1
 8001ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	e012      	b.n	8002036 <HAL_I2C_Init+0x18e>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1e58      	subs	r0, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6859      	ldr	r1, [r3, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	0099      	lsls	r1, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	fbb0 f3f3 	udiv	r3, r0, r3
 8002026:	3301      	adds	r3, #1
 8002028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202c:	2b00      	cmp	r3, #0
 800202e:	bf0c      	ite	eq
 8002030:	2301      	moveq	r3, #1
 8002032:	2300      	movne	r3, #0
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_I2C_Init+0x196>
 800203a:	2301      	movs	r3, #1
 800203c:	e022      	b.n	8002084 <HAL_I2C_Init+0x1dc>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10e      	bne.n	8002064 <HAL_I2C_Init+0x1bc>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1e58      	subs	r0, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6859      	ldr	r1, [r3, #4]
 800204e:	460b      	mov	r3, r1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	440b      	add	r3, r1
 8002054:	fbb0 f3f3 	udiv	r3, r0, r3
 8002058:	3301      	adds	r3, #1
 800205a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800205e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002062:	e00f      	b.n	8002084 <HAL_I2C_Init+0x1dc>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1e58      	subs	r0, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6859      	ldr	r1, [r3, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	0099      	lsls	r1, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	fbb0 f3f3 	udiv	r3, r0, r3
 800207a:	3301      	adds	r3, #1
 800207c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002080:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	6809      	ldr	r1, [r1, #0]
 8002088:	4313      	orrs	r3, r2
 800208a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69da      	ldr	r2, [r3, #28]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6911      	ldr	r1, [r2, #16]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68d2      	ldr	r2, [r2, #12]
 80020be:	4311      	orrs	r1, r2
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	430b      	orrs	r3, r1
 80020c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695a      	ldr	r2, [r3, #20]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2220      	movs	r2, #32
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	000186a0 	.word	0x000186a0
 8002120:	001e847f 	.word	0x001e847f
 8002124:	003d08ff 	.word	0x003d08ff
 8002128:	431bde83 	.word	0x431bde83
 800212c:	10624dd3 	.word	0x10624dd3

08002130 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af02      	add	r7, sp, #8
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	461a      	mov	r2, r3
 800213c:	460b      	mov	r3, r1
 800213e:	817b      	strh	r3, [r7, #10]
 8002140:	4613      	mov	r3, r2
 8002142:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002144:	f7ff fb2e 	bl	80017a4 <HAL_GetTick>
 8002148:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b20      	cmp	r3, #32
 8002154:	f040 80e0 	bne.w	8002318 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2319      	movs	r3, #25
 800215e:	2201      	movs	r2, #1
 8002160:	4970      	ldr	r1, [pc, #448]	; (8002324 <HAL_I2C_Master_Transmit+0x1f4>)
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 fa92 	bl	800268c <I2C_WaitOnFlagUntilTimeout>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800216e:	2302      	movs	r3, #2
 8002170:	e0d3      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <HAL_I2C_Master_Transmit+0x50>
 800217c:	2302      	movs	r3, #2
 800217e:	e0cc      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b01      	cmp	r3, #1
 8002194:	d007      	beq.n	80021a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0201 	orr.w	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2221      	movs	r2, #33	; 0x21
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2210      	movs	r2, #16
 80021c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	893a      	ldrh	r2, [r7, #8]
 80021d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4a50      	ldr	r2, [pc, #320]	; (8002328 <HAL_I2C_Master_Transmit+0x1f8>)
 80021e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021e8:	8979      	ldrh	r1, [r7, #10]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	6a3a      	ldr	r2, [r7, #32]
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 f9ca 	bl	8002588 <I2C_MasterRequestWrite>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e08d      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002214:	e066      	b.n	80022e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	6a39      	ldr	r1, [r7, #32]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fb0c 	bl	8002838 <I2C_WaitOnTXEFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00d      	beq.n	8002242 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	2b04      	cmp	r3, #4
 800222c:	d107      	bne.n	800223e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e06b      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29b      	uxth	r3, r3
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b04      	cmp	r3, #4
 800227e:	d11b      	bne.n	80022b8 <HAL_I2C_Master_Transmit+0x188>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002284:	2b00      	cmp	r3, #0
 8002286:	d017      	beq.n	80022b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	6a39      	ldr	r1, [r7, #32]
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 fafc 	bl	80028ba <I2C_WaitOnBTFFlagUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00d      	beq.n	80022e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d107      	bne.n	80022e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e01a      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d194      	bne.n	8002216 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	e000      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002318:	2302      	movs	r3, #2
  }
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	00100002 	.word	0x00100002
 8002328:	ffff0000 	.word	0xffff0000

0800232c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	460b      	mov	r3, r1
 800233a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff fa32 	bl	80017a4 <HAL_GetTick>
 8002340:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b20      	cmp	r3, #32
 8002350:	f040 8111 	bne.w	8002576 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2319      	movs	r3, #25
 800235a:	2201      	movs	r2, #1
 800235c:	4988      	ldr	r1, [pc, #544]	; (8002580 <HAL_I2C_IsDeviceReady+0x254>)
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f994 	bl	800268c <I2C_WaitOnFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800236a:	2302      	movs	r3, #2
 800236c:	e104      	b.n	8002578 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_I2C_IsDeviceReady+0x50>
 8002378:	2302      	movs	r3, #2
 800237a:	e0fd      	b.n	8002578 <HAL_I2C_IsDeviceReady+0x24c>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b01      	cmp	r3, #1
 8002390:	d007      	beq.n	80023a2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 0201 	orr.w	r2, r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2224      	movs	r2, #36	; 0x24
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4a70      	ldr	r2, [pc, #448]	; (8002584 <HAL_I2C_IsDeviceReady+0x258>)
 80023c4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2200      	movs	r2, #0
 80023de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f952 	bl	800268c <I2C_WaitOnFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00d      	beq.n	800240a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023fc:	d103      	bne.n	8002406 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002404:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e0b6      	b.n	8002578 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800240a:	897b      	ldrh	r3, [r7, #10]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002418:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800241a:	f7ff f9c3 	bl	80017a4 <HAL_GetTick>
 800241e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b02      	cmp	r3, #2
 800242c:	bf0c      	ite	eq
 800242e:	2301      	moveq	r3, #1
 8002430:	2300      	movne	r3, #0
 8002432:	b2db      	uxtb	r3, r3
 8002434:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002444:	bf0c      	ite	eq
 8002446:	2301      	moveq	r3, #1
 8002448:	2300      	movne	r3, #0
 800244a:	b2db      	uxtb	r3, r3
 800244c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800244e:	e025      	b.n	800249c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002450:	f7ff f9a8 	bl	80017a4 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d302      	bcc.n	8002466 <HAL_I2C_IsDeviceReady+0x13a>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d103      	bne.n	800246e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	22a0      	movs	r2, #160	; 0xa0
 800246a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b02      	cmp	r3, #2
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2ba0      	cmp	r3, #160	; 0xa0
 80024a6:	d005      	beq.n	80024b4 <HAL_I2C_IsDeviceReady+0x188>
 80024a8:	7dfb      	ldrb	r3, [r7, #23]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <HAL_I2C_IsDeviceReady+0x188>
 80024ae:	7dbb      	ldrb	r3, [r7, #22]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0cd      	beq.n	8002450 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d129      	bne.n	800251e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	2319      	movs	r3, #25
 80024f6:	2201      	movs	r2, #1
 80024f8:	4921      	ldr	r1, [pc, #132]	; (8002580 <HAL_I2C_IsDeviceReady+0x254>)
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f8c6 	bl	800268c <I2C_WaitOnFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e036      	b.n	8002578 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2220      	movs	r2, #32
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	e02c      	b.n	8002578 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002536:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2319      	movs	r3, #25
 800253e:	2201      	movs	r2, #1
 8002540:	490f      	ldr	r1, [pc, #60]	; (8002580 <HAL_I2C_IsDeviceReady+0x254>)
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f8a2 	bl	800268c <I2C_WaitOnFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e012      	b.n	8002578 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	3301      	adds	r3, #1
 8002556:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	429a      	cmp	r2, r3
 800255e:	f4ff af32 	bcc.w	80023c6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002576:	2302      	movs	r3, #2
  }
}
 8002578:	4618      	mov	r0, r3
 800257a:	3720      	adds	r7, #32
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	00100002 	.word	0x00100002
 8002584:	ffff0000 	.word	0xffff0000

08002588 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af02      	add	r7, sp, #8
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	460b      	mov	r3, r1
 8002596:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d006      	beq.n	80025b2 <I2C_MasterRequestWrite+0x2a>
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d003      	beq.n	80025b2 <I2C_MasterRequestWrite+0x2a>
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025b0:	d108      	bne.n	80025c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	e00b      	b.n	80025dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	2b12      	cmp	r3, #18
 80025ca:	d107      	bne.n	80025dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f84f 	bl	800268c <I2C_WaitOnFlagUntilTimeout>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00d      	beq.n	8002610 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002602:	d103      	bne.n	800260c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800260a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e035      	b.n	800267c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002618:	d108      	bne.n	800262c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800261a:	897b      	ldrh	r3, [r7, #10]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002628:	611a      	str	r2, [r3, #16]
 800262a:	e01b      	b.n	8002664 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800262c:	897b      	ldrh	r3, [r7, #10]
 800262e:	11db      	asrs	r3, r3, #7
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f003 0306 	and.w	r3, r3, #6
 8002636:	b2db      	uxtb	r3, r3
 8002638:	f063 030f 	orn	r3, r3, #15
 800263c:	b2da      	uxtb	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	490e      	ldr	r1, [pc, #56]	; (8002684 <I2C_MasterRequestWrite+0xfc>)
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f875 	bl	800273a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e010      	b.n	800267c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800265a:	897b      	ldrh	r3, [r7, #10]
 800265c:	b2da      	uxtb	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	4907      	ldr	r1, [pc, #28]	; (8002688 <I2C_MasterRequestWrite+0x100>)
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f865 	bl	800273a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	00010008 	.word	0x00010008
 8002688:	00010002 	.word	0x00010002

0800268c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	4613      	mov	r3, r2
 800269a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800269c:	e025      	b.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026a4:	d021      	beq.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a6:	f7ff f87d 	bl	80017a4 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d302      	bcc.n	80026bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d116      	bne.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f043 0220 	orr.w	r2, r3, #32
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e023      	b.n	8002732 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	0c1b      	lsrs	r3, r3, #16
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d10d      	bne.n	8002710 <I2C_WaitOnFlagUntilTimeout+0x84>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	43da      	mvns	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	4013      	ands	r3, r2
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	bf0c      	ite	eq
 8002706:	2301      	moveq	r3, #1
 8002708:	2300      	movne	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	e00c      	b.n	800272a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	43da      	mvns	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	4013      	ands	r3, r2
 800271c:	b29b      	uxth	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	bf0c      	ite	eq
 8002722:	2301      	moveq	r3, #1
 8002724:	2300      	movne	r3, #0
 8002726:	b2db      	uxtb	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	429a      	cmp	r2, r3
 800272e:	d0b6      	beq.n	800269e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002748:	e051      	b.n	80027ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002758:	d123      	bne.n	80027a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002768:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002772:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f043 0204 	orr.w	r2, r3, #4
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e046      	b.n	8002830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027a8:	d021      	beq.n	80027ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027aa:	f7fe fffb 	bl	80017a4 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d302      	bcc.n	80027c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d116      	bne.n	80027ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f043 0220 	orr.w	r2, r3, #32
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e020      	b.n	8002830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	0c1b      	lsrs	r3, r3, #16
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d10c      	bne.n	8002812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	43da      	mvns	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4013      	ands	r3, r2
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	bf14      	ite	ne
 800280a:	2301      	movne	r3, #1
 800280c:	2300      	moveq	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	e00b      	b.n	800282a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	43da      	mvns	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	4013      	ands	r3, r2
 800281e:	b29b      	uxth	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf14      	ite	ne
 8002824:	2301      	movne	r3, #1
 8002826:	2300      	moveq	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d18d      	bne.n	800274a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002844:	e02d      	b.n	80028a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f878 	bl	800293c <I2C_IsAcknowledgeFailed>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e02d      	b.n	80028b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800285c:	d021      	beq.n	80028a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285e:	f7fe ffa1 	bl	80017a4 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	429a      	cmp	r2, r3
 800286c:	d302      	bcc.n	8002874 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d116      	bne.n	80028a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f043 0220 	orr.w	r2, r3, #32
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e007      	b.n	80028b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	2b80      	cmp	r3, #128	; 0x80
 80028ae:	d1ca      	bne.n	8002846 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028c6:	e02d      	b.n	8002924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f837 	bl	800293c <I2C_IsAcknowledgeFailed>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e02d      	b.n	8002934 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028de:	d021      	beq.n	8002924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e0:	f7fe ff60 	bl	80017a4 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d302      	bcc.n	80028f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d116      	bne.n	8002924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	f043 0220 	orr.w	r2, r3, #32
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e007      	b.n	8002934 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	2b04      	cmp	r3, #4
 8002930:	d1ca      	bne.n	80028c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002952:	d11b      	bne.n	800298c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800295c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	f043 0204 	orr.w	r2, r3, #4
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0cc      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029b0:	4b68      	ldr	r3, [pc, #416]	; (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 030f 	and.w	r3, r3, #15
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d90c      	bls.n	80029d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b65      	ldr	r3, [pc, #404]	; (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c6:	4b63      	ldr	r3, [pc, #396]	; (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0b8      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d020      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f0:	4b59      	ldr	r3, [pc, #356]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a58      	ldr	r2, [pc, #352]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a08:	4b53      	ldr	r3, [pc, #332]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	4a52      	ldr	r2, [pc, #328]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a14:	4b50      	ldr	r3, [pc, #320]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	494d      	ldr	r1, [pc, #308]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d044      	beq.n	8002abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d107      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	4b47      	ldr	r3, [pc, #284]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d119      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e07f      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d003      	beq.n	8002a5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5a:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d109      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e06f      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6a:	4b3b      	ldr	r3, [pc, #236]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e067      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a7a:	4b37      	ldr	r3, [pc, #220]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f023 0203 	bic.w	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4934      	ldr	r1, [pc, #208]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a8c:	f7fe fe8a 	bl	80017a4 <HAL_GetTick>
 8002a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a94:	f7fe fe86 	bl	80017a4 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e04f      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aaa:	4b2b      	ldr	r3, [pc, #172]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 020c 	and.w	r2, r3, #12
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d1eb      	bne.n	8002a94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002abc:	4b25      	ldr	r3, [pc, #148]	; (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d20c      	bcs.n	8002ae4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aca:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad2:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e032      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af0:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4916      	ldr	r1, [pc, #88]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	490e      	ldr	r1, [pc, #56]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b22:	f000 fb7f 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 8002b26:	4602      	mov	r2, r0
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	490a      	ldr	r1, [pc, #40]	; (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	5ccb      	ldrb	r3, [r1, r3]
 8002b36:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3a:	4a09      	ldr	r2, [pc, #36]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <HAL_RCC_ClockConfig+0x1c8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe fdea 	bl	800171c <HAL_InitTick>

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40023c00 	.word	0x40023c00
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	08006504 	.word	0x08006504
 8002b60:	20000008 	.word	0x20000008
 8002b64:	2000000c 	.word	0x2000000c

08002b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	20000008 	.word	0x20000008

08002b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b84:	f7ff fff0 	bl	8002b68 <HAL_RCC_GetHCLKFreq>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	0a9b      	lsrs	r3, r3, #10
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	4903      	ldr	r1, [pc, #12]	; (8002ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b96:	5ccb      	ldrb	r3, [r1, r3]
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	08006514 	.word	0x08006514

08002ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bac:	f7ff ffdc 	bl	8002b68 <HAL_RCC_GetHCLKFreq>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	0b5b      	lsrs	r3, r3, #13
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	4903      	ldr	r1, [pc, #12]	; (8002bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bbe:	5ccb      	ldrb	r3, [r1, r3]
 8002bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	08006514 	.word	0x08006514

08002bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08c      	sub	sp, #48	; 0x30
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d010      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002c08:	4b6f      	ldr	r3, [pc, #444]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c0e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c16:	496c      	ldr	r1, [pc, #432]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002c26:	2301      	movs	r3, #1
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d010      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002c36:	4b64      	ldr	r3, [pc, #400]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c3c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c44:	4960      	ldr	r1, [pc, #384]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002c54:	2301      	movs	r3, #1
 8002c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d017      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c64:	4b58      	ldr	r3, [pc, #352]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	4955      	ldr	r1, [pc, #340]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c82:	d101      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002c84:	2301      	movs	r3, #1
 8002c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002c90:	2301      	movs	r3, #1
 8002c92:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d017      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ca0:	4b49      	ldr	r3, [pc, #292]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ca6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cae:	4946      	ldr	r1, [pc, #280]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 808a 	beq.w	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	4b39      	ldr	r3, [pc, #228]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	4a38      	ldr	r2, [pc, #224]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cec:	6413      	str	r3, [r2, #64]	; 0x40
 8002cee:	4b36      	ldr	r3, [pc, #216]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002cfa:	4b34      	ldr	r3, [pc, #208]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a33      	ldr	r2, [pc, #204]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d04:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d06:	f7fe fd4d 	bl	80017a4 <HAL_GetTick>
 8002d0a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d0e:	f7fe fd49 	bl	80017a4 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e278      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d20:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d2c:	4b26      	ldr	r3, [pc, #152]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d34:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d02f      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d44:	6a3a      	ldr	r2, [r7, #32]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d028      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d4a:	4b1f      	ldr	r3, [pc, #124]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d52:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d54:	4b1e      	ldr	r3, [pc, #120]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d5a:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d60:	4a19      	ldr	r2, [pc, #100]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d66:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d114      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002d72:	f7fe fd17 	bl	80017a4 <HAL_GetTick>
 8002d76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d78:	e00a      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d7a:	f7fe fd13 	bl	80017a4 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e240      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d90:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0ee      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002da8:	d114      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002daa:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dbe:	4902      	ldr	r1, [pc, #8]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	608b      	str	r3, [r1, #8]
 8002dc4:	e00c      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40007000 	.word	0x40007000
 8002dd0:	42470e40 	.word	0x42470e40
 8002dd4:	4b4a      	ldr	r3, [pc, #296]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	4a49      	ldr	r2, [pc, #292]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dda:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002dde:	6093      	str	r3, [r2, #8]
 8002de0:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002de2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dec:	4944      	ldr	r1, [pc, #272]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d004      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002e04:	4b3f      	ldr	r3, [pc, #252]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002e06:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002e14:	4b3a      	ldr	r3, [pc, #232]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e22:	4937      	ldr	r1, [pc, #220]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e36:	4b32      	ldr	r3, [pc, #200]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e44:	492e      	ldr	r1, [pc, #184]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d011      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e58:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e5e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e66:	4926      	ldr	r1, [pc, #152]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e76:	d101      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00a      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002e88:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	491a      	ldr	r1, [pc, #104]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d011      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002eaa:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb8:	4911      	ldr	r1, [pc, #68]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ec8:	d101      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002edc:	f040 80ff 	bne.w	80030de <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ee0:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ee6:	f7fe fc5d 	bl	80017a4 <HAL_GetTick>
 8002eea:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002eec:	e00e      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002eee:	f7fe fc59 	bl	80017a4 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d907      	bls.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e188      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002f00:	40023800 	.word	0x40023800
 8002f04:	424711e0 	.word	0x424711e0
 8002f08:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f0c:	4b7e      	ldr	r3, [pc, #504]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1ea      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d009      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d028      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d124      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002f40:	4b71      	ldr	r3, [pc, #452]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f46:	0c1b      	lsrs	r3, r3, #16
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f52:	4b6d      	ldr	r3, [pc, #436]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f58:	0e1b      	lsrs	r3, r3, #24
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	019b      	lsls	r3, r3, #6
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	085b      	lsrs	r3, r3, #1
 8002f70:	3b01      	subs	r3, #1
 8002f72:	041b      	lsls	r3, r3, #16
 8002f74:	431a      	orrs	r2, r3
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	061b      	lsls	r3, r3, #24
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	071b      	lsls	r3, r3, #28
 8002f82:	4961      	ldr	r1, [pc, #388]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d004      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f9e:	d00a      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d035      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fb4:	d130      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002fb6:	4b54      	ldr	r3, [pc, #336]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fbc:	0c1b      	lsrs	r3, r3, #16
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fc8:	4b4f      	ldr	r3, [pc, #316]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fce:	0f1b      	lsrs	r3, r3, #28
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	019b      	lsls	r3, r3, #6
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	085b      	lsrs	r3, r3, #1
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	041b      	lsls	r3, r3, #16
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	061b      	lsls	r3, r3, #24
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	071b      	lsls	r3, r3, #28
 8002ff8:	4943      	ldr	r1, [pc, #268]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003000:	4b41      	ldr	r3, [pc, #260]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003006:	f023 021f 	bic.w	r2, r3, #31
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	3b01      	subs	r3, #1
 8003010:	493d      	ldr	r1, [pc, #244]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003020:	2b00      	cmp	r3, #0
 8003022:	d029      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800302c:	d124      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800302e:	4b36      	ldr	r3, [pc, #216]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003034:	0c1b      	lsrs	r3, r3, #16
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	3301      	adds	r3, #1
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003040:	4b31      	ldr	r3, [pc, #196]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003046:	0f1b      	lsrs	r3, r3, #28
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	019b      	lsls	r3, r3, #6
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	085b      	lsrs	r3, r3, #1
 8003060:	3b01      	subs	r3, #1
 8003062:	041b      	lsls	r3, r3, #16
 8003064:	431a      	orrs	r2, r3
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	061b      	lsls	r3, r3, #24
 800306a:	431a      	orrs	r2, r3
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	071b      	lsls	r3, r3, #28
 8003070:	4925      	ldr	r1, [pc, #148]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003080:	2b00      	cmp	r3, #0
 8003082:	d016      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	019b      	lsls	r3, r3, #6
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	085b      	lsrs	r3, r3, #1
 8003096:	3b01      	subs	r3, #1
 8003098:	041b      	lsls	r3, r3, #16
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	061b      	lsls	r3, r3, #24
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	071b      	lsls	r3, r3, #28
 80030aa:	4917      	ldr	r1, [pc, #92]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030b2:	4b16      	ldr	r3, [pc, #88]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030b8:	f7fe fb74 	bl	80017a4 <HAL_GetTick>
 80030bc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030c0:	f7fe fb70 	bl	80017a4 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e09f      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030d2:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	f040 8095 	bne.w	8003210 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030ec:	f7fe fb5a 	bl	80017a4 <HAL_GetTick>
 80030f0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030f2:	e00f      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80030f4:	f7fe fb56 	bl	80017a4 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d908      	bls.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e085      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800
 800310c:	42470068 	.word	0x42470068
 8003110:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003114:	4b41      	ldr	r3, [pc, #260]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800311c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003120:	d0e8      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800313e:	2b00      	cmp	r3, #0
 8003140:	d02b      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003146:	2b00      	cmp	r3, #0
 8003148:	d127      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800314a:	4b34      	ldr	r3, [pc, #208]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800314c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003150:	0c1b      	lsrs	r3, r3, #16
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	3301      	adds	r3, #1
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699a      	ldr	r2, [r3, #24]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	019b      	lsls	r3, r3, #6
 8003166:	431a      	orrs	r2, r3
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	3b01      	subs	r3, #1
 800316e:	041b      	lsls	r3, r3, #16
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	061b      	lsls	r3, r3, #24
 8003178:	4928      	ldr	r1, [pc, #160]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003180:	4b26      	ldr	r3, [pc, #152]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003186:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	3b01      	subs	r3, #1
 8003190:	021b      	lsls	r3, r3, #8
 8003192:	4922      	ldr	r1, [pc, #136]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d01d      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ae:	d118      	bne.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031b0:	4b1a      	ldr	r3, [pc, #104]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b6:	0e1b      	lsrs	r3, r3, #24
 80031b8:	f003 030f 	and.w	r3, r3, #15
 80031bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	019b      	lsls	r3, r3, #6
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	085b      	lsrs	r3, r3, #1
 80031d0:	3b01      	subs	r3, #1
 80031d2:	041b      	lsls	r3, r3, #16
 80031d4:	431a      	orrs	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	061b      	lsls	r3, r3, #24
 80031da:	4910      	ldr	r1, [pc, #64]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80031e2:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031e8:	f7fe fadc 	bl	80017a4 <HAL_GetTick>
 80031ec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80031f0:	f7fe fad8 	bl	80017a4 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e007      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800320a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800320e:	d1ef      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3730      	adds	r7, #48	; 0x30
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40023800 	.word	0x40023800
 8003220:	42470070 	.word	0x42470070

08003224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003228:	b0ae      	sub	sp, #184	; 0xb8
 800322a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800324a:	4bcb      	ldr	r3, [pc, #812]	; (8003578 <HAL_RCC_GetSysClockFreq+0x354>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b0c      	cmp	r3, #12
 8003254:	f200 8206 	bhi.w	8003664 <HAL_RCC_GetSysClockFreq+0x440>
 8003258:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <HAL_RCC_GetSysClockFreq+0x3c>)
 800325a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325e:	bf00      	nop
 8003260:	08003295 	.word	0x08003295
 8003264:	08003665 	.word	0x08003665
 8003268:	08003665 	.word	0x08003665
 800326c:	08003665 	.word	0x08003665
 8003270:	0800329d 	.word	0x0800329d
 8003274:	08003665 	.word	0x08003665
 8003278:	08003665 	.word	0x08003665
 800327c:	08003665 	.word	0x08003665
 8003280:	080032a5 	.word	0x080032a5
 8003284:	08003665 	.word	0x08003665
 8003288:	08003665 	.word	0x08003665
 800328c:	08003665 	.word	0x08003665
 8003290:	08003495 	.word	0x08003495
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003294:	4bb9      	ldr	r3, [pc, #740]	; (800357c <HAL_RCC_GetSysClockFreq+0x358>)
 8003296:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800329a:	e1e7      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800329c:	4bb8      	ldr	r3, [pc, #736]	; (8003580 <HAL_RCC_GetSysClockFreq+0x35c>)
 800329e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032a2:	e1e3      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032a4:	4bb4      	ldr	r3, [pc, #720]	; (8003578 <HAL_RCC_GetSysClockFreq+0x354>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032b0:	4bb1      	ldr	r3, [pc, #708]	; (8003578 <HAL_RCC_GetSysClockFreq+0x354>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d071      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032bc:	4bae      	ldr	r3, [pc, #696]	; (8003578 <HAL_RCC_GetSysClockFreq+0x354>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	099b      	lsrs	r3, r3, #6
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032c8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80032cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032d8:	2300      	movs	r3, #0
 80032da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032e2:	4622      	mov	r2, r4
 80032e4:	462b      	mov	r3, r5
 80032e6:	f04f 0000 	mov.w	r0, #0
 80032ea:	f04f 0100 	mov.w	r1, #0
 80032ee:	0159      	lsls	r1, r3, #5
 80032f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032f4:	0150      	lsls	r0, r2, #5
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4621      	mov	r1, r4
 80032fc:	1a51      	subs	r1, r2, r1
 80032fe:	6439      	str	r1, [r7, #64]	; 0x40
 8003300:	4629      	mov	r1, r5
 8003302:	eb63 0301 	sbc.w	r3, r3, r1
 8003306:	647b      	str	r3, [r7, #68]	; 0x44
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003314:	4649      	mov	r1, r9
 8003316:	018b      	lsls	r3, r1, #6
 8003318:	4641      	mov	r1, r8
 800331a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800331e:	4641      	mov	r1, r8
 8003320:	018a      	lsls	r2, r1, #6
 8003322:	4641      	mov	r1, r8
 8003324:	1a51      	subs	r1, r2, r1
 8003326:	63b9      	str	r1, [r7, #56]	; 0x38
 8003328:	4649      	mov	r1, r9
 800332a:	eb63 0301 	sbc.w	r3, r3, r1
 800332e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800333c:	4649      	mov	r1, r9
 800333e:	00cb      	lsls	r3, r1, #3
 8003340:	4641      	mov	r1, r8
 8003342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003346:	4641      	mov	r1, r8
 8003348:	00ca      	lsls	r2, r1, #3
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	4603      	mov	r3, r0
 8003350:	4622      	mov	r2, r4
 8003352:	189b      	adds	r3, r3, r2
 8003354:	633b      	str	r3, [r7, #48]	; 0x30
 8003356:	462b      	mov	r3, r5
 8003358:	460a      	mov	r2, r1
 800335a:	eb42 0303 	adc.w	r3, r2, r3
 800335e:	637b      	str	r3, [r7, #52]	; 0x34
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800336c:	4629      	mov	r1, r5
 800336e:	024b      	lsls	r3, r1, #9
 8003370:	4621      	mov	r1, r4
 8003372:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003376:	4621      	mov	r1, r4
 8003378:	024a      	lsls	r2, r1, #9
 800337a:	4610      	mov	r0, r2
 800337c:	4619      	mov	r1, r3
 800337e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003382:	2200      	movs	r2, #0
 8003384:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003388:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800338c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003390:	f7fc ff8e 	bl	80002b0 <__aeabi_uldivmod>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4613      	mov	r3, r2
 800339a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800339e:	e067      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a0:	4b75      	ldr	r3, [pc, #468]	; (8003578 <HAL_RCC_GetSysClockFreq+0x354>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	099b      	lsrs	r3, r3, #6
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033ac:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80033b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80033ba:	2300      	movs	r3, #0
 80033bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80033c2:	4622      	mov	r2, r4
 80033c4:	462b      	mov	r3, r5
 80033c6:	f04f 0000 	mov.w	r0, #0
 80033ca:	f04f 0100 	mov.w	r1, #0
 80033ce:	0159      	lsls	r1, r3, #5
 80033d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033d4:	0150      	lsls	r0, r2, #5
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4621      	mov	r1, r4
 80033dc:	1a51      	subs	r1, r2, r1
 80033de:	62b9      	str	r1, [r7, #40]	; 0x28
 80033e0:	4629      	mov	r1, r5
 80033e2:	eb63 0301 	sbc.w	r3, r3, r1
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80033f4:	4649      	mov	r1, r9
 80033f6:	018b      	lsls	r3, r1, #6
 80033f8:	4641      	mov	r1, r8
 80033fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033fe:	4641      	mov	r1, r8
 8003400:	018a      	lsls	r2, r1, #6
 8003402:	4641      	mov	r1, r8
 8003404:	ebb2 0a01 	subs.w	sl, r2, r1
 8003408:	4649      	mov	r1, r9
 800340a:	eb63 0b01 	sbc.w	fp, r3, r1
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800341a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800341e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003422:	4692      	mov	sl, r2
 8003424:	469b      	mov	fp, r3
 8003426:	4623      	mov	r3, r4
 8003428:	eb1a 0303 	adds.w	r3, sl, r3
 800342c:	623b      	str	r3, [r7, #32]
 800342e:	462b      	mov	r3, r5
 8003430:	eb4b 0303 	adc.w	r3, fp, r3
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003442:	4629      	mov	r1, r5
 8003444:	028b      	lsls	r3, r1, #10
 8003446:	4621      	mov	r1, r4
 8003448:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800344c:	4621      	mov	r1, r4
 800344e:	028a      	lsls	r2, r1, #10
 8003450:	4610      	mov	r0, r2
 8003452:	4619      	mov	r1, r3
 8003454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003458:	2200      	movs	r2, #0
 800345a:	673b      	str	r3, [r7, #112]	; 0x70
 800345c:	677a      	str	r2, [r7, #116]	; 0x74
 800345e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003462:	f7fc ff25 	bl	80002b0 <__aeabi_uldivmod>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4613      	mov	r3, r2
 800346c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003470:	4b41      	ldr	r3, [pc, #260]	; (8003578 <HAL_RCC_GetSysClockFreq+0x354>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	0c1b      	lsrs	r3, r3, #16
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	3301      	adds	r3, #1
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003482:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003486:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800348a:	fbb2 f3f3 	udiv	r3, r2, r3
 800348e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003492:	e0eb      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003494:	4b38      	ldr	r3, [pc, #224]	; (8003578 <HAL_RCC_GetSysClockFreq+0x354>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800349c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034a0:	4b35      	ldr	r3, [pc, #212]	; (8003578 <HAL_RCC_GetSysClockFreq+0x354>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d06b      	beq.n	8003584 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ac:	4b32      	ldr	r3, [pc, #200]	; (8003578 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	099b      	lsrs	r3, r3, #6
 80034b2:	2200      	movs	r2, #0
 80034b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80034b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034be:	663b      	str	r3, [r7, #96]	; 0x60
 80034c0:	2300      	movs	r3, #0
 80034c2:	667b      	str	r3, [r7, #100]	; 0x64
 80034c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80034c8:	4622      	mov	r2, r4
 80034ca:	462b      	mov	r3, r5
 80034cc:	f04f 0000 	mov.w	r0, #0
 80034d0:	f04f 0100 	mov.w	r1, #0
 80034d4:	0159      	lsls	r1, r3, #5
 80034d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034da:	0150      	lsls	r0, r2, #5
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4621      	mov	r1, r4
 80034e2:	1a51      	subs	r1, r2, r1
 80034e4:	61b9      	str	r1, [r7, #24]
 80034e6:	4629      	mov	r1, r5
 80034e8:	eb63 0301 	sbc.w	r3, r3, r1
 80034ec:	61fb      	str	r3, [r7, #28]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80034fa:	4659      	mov	r1, fp
 80034fc:	018b      	lsls	r3, r1, #6
 80034fe:	4651      	mov	r1, sl
 8003500:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003504:	4651      	mov	r1, sl
 8003506:	018a      	lsls	r2, r1, #6
 8003508:	4651      	mov	r1, sl
 800350a:	ebb2 0801 	subs.w	r8, r2, r1
 800350e:	4659      	mov	r1, fp
 8003510:	eb63 0901 	sbc.w	r9, r3, r1
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003520:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003524:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003528:	4690      	mov	r8, r2
 800352a:	4699      	mov	r9, r3
 800352c:	4623      	mov	r3, r4
 800352e:	eb18 0303 	adds.w	r3, r8, r3
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	462b      	mov	r3, r5
 8003536:	eb49 0303 	adc.w	r3, r9, r3
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003548:	4629      	mov	r1, r5
 800354a:	024b      	lsls	r3, r1, #9
 800354c:	4621      	mov	r1, r4
 800354e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003552:	4621      	mov	r1, r4
 8003554:	024a      	lsls	r2, r1, #9
 8003556:	4610      	mov	r0, r2
 8003558:	4619      	mov	r1, r3
 800355a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800355e:	2200      	movs	r2, #0
 8003560:	65bb      	str	r3, [r7, #88]	; 0x58
 8003562:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003564:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003568:	f7fc fea2 	bl	80002b0 <__aeabi_uldivmod>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4613      	mov	r3, r2
 8003572:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003576:	e065      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x420>
 8003578:	40023800 	.word	0x40023800
 800357c:	00f42400 	.word	0x00f42400
 8003580:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003584:	4b3d      	ldr	r3, [pc, #244]	; (800367c <HAL_RCC_GetSysClockFreq+0x458>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	099b      	lsrs	r3, r3, #6
 800358a:	2200      	movs	r2, #0
 800358c:	4618      	mov	r0, r3
 800358e:	4611      	mov	r1, r2
 8003590:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003594:	653b      	str	r3, [r7, #80]	; 0x50
 8003596:	2300      	movs	r3, #0
 8003598:	657b      	str	r3, [r7, #84]	; 0x54
 800359a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800359e:	4642      	mov	r2, r8
 80035a0:	464b      	mov	r3, r9
 80035a2:	f04f 0000 	mov.w	r0, #0
 80035a6:	f04f 0100 	mov.w	r1, #0
 80035aa:	0159      	lsls	r1, r3, #5
 80035ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035b0:	0150      	lsls	r0, r2, #5
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4641      	mov	r1, r8
 80035b8:	1a51      	subs	r1, r2, r1
 80035ba:	60b9      	str	r1, [r7, #8]
 80035bc:	4649      	mov	r1, r9
 80035be:	eb63 0301 	sbc.w	r3, r3, r1
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80035d0:	4659      	mov	r1, fp
 80035d2:	018b      	lsls	r3, r1, #6
 80035d4:	4651      	mov	r1, sl
 80035d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035da:	4651      	mov	r1, sl
 80035dc:	018a      	lsls	r2, r1, #6
 80035de:	4651      	mov	r1, sl
 80035e0:	1a54      	subs	r4, r2, r1
 80035e2:	4659      	mov	r1, fp
 80035e4:	eb63 0501 	sbc.w	r5, r3, r1
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	00eb      	lsls	r3, r5, #3
 80035f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035f6:	00e2      	lsls	r2, r4, #3
 80035f8:	4614      	mov	r4, r2
 80035fa:	461d      	mov	r5, r3
 80035fc:	4643      	mov	r3, r8
 80035fe:	18e3      	adds	r3, r4, r3
 8003600:	603b      	str	r3, [r7, #0]
 8003602:	464b      	mov	r3, r9
 8003604:	eb45 0303 	adc.w	r3, r5, r3
 8003608:	607b      	str	r3, [r7, #4]
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003616:	4629      	mov	r1, r5
 8003618:	028b      	lsls	r3, r1, #10
 800361a:	4621      	mov	r1, r4
 800361c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003620:	4621      	mov	r1, r4
 8003622:	028a      	lsls	r2, r1, #10
 8003624:	4610      	mov	r0, r2
 8003626:	4619      	mov	r1, r3
 8003628:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800362c:	2200      	movs	r2, #0
 800362e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003630:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003632:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003636:	f7fc fe3b 	bl	80002b0 <__aeabi_uldivmod>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4613      	mov	r3, r2
 8003640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003644:	4b0d      	ldr	r3, [pc, #52]	; (800367c <HAL_RCC_GetSysClockFreq+0x458>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	0f1b      	lsrs	r3, r3, #28
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003652:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003656:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800365a:	fbb2 f3f3 	udiv	r3, r2, r3
 800365e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003662:	e003      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003664:	4b06      	ldr	r3, [pc, #24]	; (8003680 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003666:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800366a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800366c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003670:	4618      	mov	r0, r3
 8003672:	37b8      	adds	r7, #184	; 0xb8
 8003674:	46bd      	mov	sp, r7
 8003676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800
 8003680:	00f42400 	.word	0x00f42400

08003684 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e28d      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 8083 	beq.w	80037aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036a4:	4b94      	ldr	r3, [pc, #592]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 030c 	and.w	r3, r3, #12
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d019      	beq.n	80036e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036b0:	4b91      	ldr	r3, [pc, #580]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d106      	bne.n	80036ca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036bc:	4b8e      	ldr	r3, [pc, #568]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c8:	d00c      	beq.n	80036e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ca:	4b8b      	ldr	r3, [pc, #556]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036d2:	2b0c      	cmp	r3, #12
 80036d4:	d112      	bne.n	80036fc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036d6:	4b88      	ldr	r3, [pc, #544]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036e2:	d10b      	bne.n	80036fc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e4:	4b84      	ldr	r3, [pc, #528]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d05b      	beq.n	80037a8 <HAL_RCC_OscConfig+0x124>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d157      	bne.n	80037a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e25a      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003704:	d106      	bne.n	8003714 <HAL_RCC_OscConfig+0x90>
 8003706:	4b7c      	ldr	r3, [pc, #496]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a7b      	ldr	r2, [pc, #492]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e01d      	b.n	8003750 <HAL_RCC_OscConfig+0xcc>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800371c:	d10c      	bne.n	8003738 <HAL_RCC_OscConfig+0xb4>
 800371e:	4b76      	ldr	r3, [pc, #472]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a75      	ldr	r2, [pc, #468]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 8003724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	4b73      	ldr	r3, [pc, #460]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a72      	ldr	r2, [pc, #456]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 8003730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e00b      	b.n	8003750 <HAL_RCC_OscConfig+0xcc>
 8003738:	4b6f      	ldr	r3, [pc, #444]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a6e      	ldr	r2, [pc, #440]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 800373e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	4b6c      	ldr	r3, [pc, #432]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a6b      	ldr	r2, [pc, #428]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 800374a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800374e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d013      	beq.n	8003780 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003758:	f7fe f824 	bl	80017a4 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003760:	f7fe f820 	bl	80017a4 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b64      	cmp	r3, #100	; 0x64
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e21f      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003772:	4b61      	ldr	r3, [pc, #388]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0xdc>
 800377e:	e014      	b.n	80037aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7fe f810 	bl	80017a4 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003788:	f7fe f80c 	bl	80017a4 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	; 0x64
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e20b      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379a:	4b57      	ldr	r3, [pc, #348]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x104>
 80037a6:	e000      	b.n	80037aa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d06f      	beq.n	8003896 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037b6:	4b50      	ldr	r3, [pc, #320]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d017      	beq.n	80037f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037c2:	4b4d      	ldr	r3, [pc, #308]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d105      	bne.n	80037da <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037ce:	4b4a      	ldr	r3, [pc, #296]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00b      	beq.n	80037f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037da:	4b47      	ldr	r3, [pc, #284]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037e2:	2b0c      	cmp	r3, #12
 80037e4:	d11c      	bne.n	8003820 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037e6:	4b44      	ldr	r3, [pc, #272]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d116      	bne.n	8003820 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f2:	4b41      	ldr	r3, [pc, #260]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <HAL_RCC_OscConfig+0x186>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d001      	beq.n	800380a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e1d3      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380a:	4b3b      	ldr	r3, [pc, #236]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4937      	ldr	r1, [pc, #220]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381e:	e03a      	b.n	8003896 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d020      	beq.n	800386a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003828:	4b34      	ldr	r3, [pc, #208]	; (80038fc <HAL_RCC_OscConfig+0x278>)
 800382a:	2201      	movs	r2, #1
 800382c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382e:	f7fd ffb9 	bl	80017a4 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003836:	f7fd ffb5 	bl	80017a4 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e1b4      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003848:	4b2b      	ldr	r3, [pc, #172]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003854:	4b28      	ldr	r3, [pc, #160]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4925      	ldr	r1, [pc, #148]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 8003864:	4313      	orrs	r3, r2
 8003866:	600b      	str	r3, [r1, #0]
 8003868:	e015      	b.n	8003896 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800386a:	4b24      	ldr	r3, [pc, #144]	; (80038fc <HAL_RCC_OscConfig+0x278>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fd ff98 	bl	80017a4 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003878:	f7fd ff94 	bl	80017a4 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e193      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388a:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d036      	beq.n	8003910 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d016      	beq.n	80038d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038aa:	4b15      	ldr	r3, [pc, #84]	; (8003900 <HAL_RCC_OscConfig+0x27c>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fd ff78 	bl	80017a4 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038b8:	f7fd ff74 	bl	80017a4 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e173      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ca:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 80038cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0x234>
 80038d6:	e01b      	b.n	8003910 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038d8:	4b09      	ldr	r3, [pc, #36]	; (8003900 <HAL_RCC_OscConfig+0x27c>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038de:	f7fd ff61 	bl	80017a4 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e4:	e00e      	b.n	8003904 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e6:	f7fd ff5d 	bl	80017a4 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d907      	bls.n	8003904 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e15c      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
 80038f8:	40023800 	.word	0x40023800
 80038fc:	42470000 	.word	0x42470000
 8003900:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003904:	4b8a      	ldr	r3, [pc, #552]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1ea      	bne.n	80038e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 8097 	beq.w	8003a4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800391e:	2300      	movs	r3, #0
 8003920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003922:	4b83      	ldr	r3, [pc, #524]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10f      	bne.n	800394e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	4b7f      	ldr	r3, [pc, #508]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	4a7e      	ldr	r2, [pc, #504]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393c:	6413      	str	r3, [r2, #64]	; 0x40
 800393e:	4b7c      	ldr	r3, [pc, #496]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800394a:	2301      	movs	r3, #1
 800394c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394e:	4b79      	ldr	r3, [pc, #484]	; (8003b34 <HAL_RCC_OscConfig+0x4b0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003956:	2b00      	cmp	r3, #0
 8003958:	d118      	bne.n	800398c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800395a:	4b76      	ldr	r3, [pc, #472]	; (8003b34 <HAL_RCC_OscConfig+0x4b0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a75      	ldr	r2, [pc, #468]	; (8003b34 <HAL_RCC_OscConfig+0x4b0>)
 8003960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003966:	f7fd ff1d 	bl	80017a4 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396e:	f7fd ff19 	bl	80017a4 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e118      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003980:	4b6c      	ldr	r3, [pc, #432]	; (8003b34 <HAL_RCC_OscConfig+0x4b0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d106      	bne.n	80039a2 <HAL_RCC_OscConfig+0x31e>
 8003994:	4b66      	ldr	r3, [pc, #408]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003998:	4a65      	ldr	r2, [pc, #404]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	6713      	str	r3, [r2, #112]	; 0x70
 80039a0:	e01c      	b.n	80039dc <HAL_RCC_OscConfig+0x358>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b05      	cmp	r3, #5
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x340>
 80039aa:	4b61      	ldr	r3, [pc, #388]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 80039ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ae:	4a60      	ldr	r2, [pc, #384]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 80039b0:	f043 0304 	orr.w	r3, r3, #4
 80039b4:	6713      	str	r3, [r2, #112]	; 0x70
 80039b6:	4b5e      	ldr	r3, [pc, #376]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	4a5d      	ldr	r2, [pc, #372]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	6713      	str	r3, [r2, #112]	; 0x70
 80039c2:	e00b      	b.n	80039dc <HAL_RCC_OscConfig+0x358>
 80039c4:	4b5a      	ldr	r3, [pc, #360]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 80039c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c8:	4a59      	ldr	r2, [pc, #356]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 80039ca:	f023 0301 	bic.w	r3, r3, #1
 80039ce:	6713      	str	r3, [r2, #112]	; 0x70
 80039d0:	4b57      	ldr	r3, [pc, #348]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 80039d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d4:	4a56      	ldr	r2, [pc, #344]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 80039d6:	f023 0304 	bic.w	r3, r3, #4
 80039da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d015      	beq.n	8003a10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e4:	f7fd fede 	bl	80017a4 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ea:	e00a      	b.n	8003a02 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ec:	f7fd feda 	bl	80017a4 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e0d7      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a02:	4b4b      	ldr	r3, [pc, #300]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0ee      	beq.n	80039ec <HAL_RCC_OscConfig+0x368>
 8003a0e:	e014      	b.n	8003a3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a10:	f7fd fec8 	bl	80017a4 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a16:	e00a      	b.n	8003a2e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a18:	f7fd fec4 	bl	80017a4 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e0c1      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a2e:	4b40      	ldr	r3, [pc, #256]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1ee      	bne.n	8003a18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d105      	bne.n	8003a4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a40:	4b3b      	ldr	r3, [pc, #236]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	4a3a      	ldr	r2, [pc, #232]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80ad 	beq.w	8003bb0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a56:	4b36      	ldr	r3, [pc, #216]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d060      	beq.n	8003b24 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d145      	bne.n	8003af6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a6a:	4b33      	ldr	r3, [pc, #204]	; (8003b38 <HAL_RCC_OscConfig+0x4b4>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a70:	f7fd fe98 	bl	80017a4 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a78:	f7fd fe94 	bl	80017a4 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e093      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8a:	4b29      	ldr	r3, [pc, #164]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69da      	ldr	r2, [r3, #28]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	019b      	lsls	r3, r3, #6
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aac:	085b      	lsrs	r3, r3, #1
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	041b      	lsls	r3, r3, #16
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	061b      	lsls	r3, r3, #24
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	071b      	lsls	r3, r3, #28
 8003ac2:	491b      	ldr	r1, [pc, #108]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac8:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <HAL_RCC_OscConfig+0x4b4>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ace:	f7fd fe69 	bl	80017a4 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad6:	f7fd fe65 	bl	80017a4 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e064      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae8:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0f0      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x452>
 8003af4:	e05c      	b.n	8003bb0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af6:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <HAL_RCC_OscConfig+0x4b4>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fd fe52 	bl	80017a4 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b04:	f7fd fe4e 	bl	80017a4 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e04d      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b16:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x480>
 8003b22:	e045      	b.n	8003bb0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d107      	bne.n	8003b3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e040      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
 8003b30:	40023800 	.word	0x40023800
 8003b34:	40007000 	.word	0x40007000
 8003b38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b3c:	4b1f      	ldr	r3, [pc, #124]	; (8003bbc <HAL_RCC_OscConfig+0x538>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d030      	beq.n	8003bac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d129      	bne.n	8003bac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d122      	bne.n	8003bac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d119      	bne.n	8003bac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b82:	085b      	lsrs	r3, r3, #1
 8003b84:	3b01      	subs	r3, #1
 8003b86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d10f      	bne.n	8003bac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d107      	bne.n	8003bac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800

08003bc0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e066      	b.n	8003ca4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	7f5b      	ldrb	r3, [r3, #29]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d105      	bne.n	8003bec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7fd fc22 	bl	8001430 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	22ca      	movs	r2, #202	; 0xca
 8003bf8:	625a      	str	r2, [r3, #36]	; 0x24
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2253      	movs	r2, #83	; 0x53
 8003c00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fb6f 	bl	80042e6 <RTC_EnterInitMode>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d12c      	bne.n	8003c6c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6812      	ldr	r2, [r2, #0]
 8003c1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c24:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6899      	ldr	r1, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	68d2      	ldr	r2, [r2, #12]
 8003c4c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6919      	ldr	r1, [r3, #16]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	041a      	lsls	r2, r3, #16
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fb76 	bl	8004354 <RTC_ExitInitMode>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d113      	bne.n	8003c9a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699a      	ldr	r2, [r3, #24]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	22ff      	movs	r2, #255	; 0xff
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003cac:	b590      	push	{r4, r7, lr}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	7f1b      	ldrb	r3, [r3, #28]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_RTC_SetTime+0x1c>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e087      	b.n	8003dd8 <HAL_RTC_SetTime+0x12c>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d126      	bne.n	8003d28 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d102      	bne.n	8003cee <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2200      	movs	r2, #0
 8003cec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fb53 	bl	800439e <RTC_ByteToBcd2>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	785b      	ldrb	r3, [r3, #1]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fb4c 	bl	800439e <RTC_ByteToBcd2>
 8003d06:	4603      	mov	r3, r0
 8003d08:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003d0a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	789b      	ldrb	r3, [r3, #2]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fb44 	bl	800439e <RTC_ByteToBcd2>
 8003d16:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003d18:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	78db      	ldrb	r3, [r3, #3]
 8003d20:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	e018      	b.n	8003d5a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d102      	bne.n	8003d3c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	785b      	ldrb	r3, [r3, #1]
 8003d46:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003d48:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003d4e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	78db      	ldrb	r3, [r3, #3]
 8003d54:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003d56:	4313      	orrs	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	22ca      	movs	r2, #202	; 0xca
 8003d60:	625a      	str	r2, [r3, #36]	; 0x24
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2253      	movs	r2, #83	; 0x53
 8003d68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 fabb 	bl	80042e6 <RTC_EnterInitMode>
 8003d70:	4603      	mov	r3, r0
 8003d72:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003d74:	7cfb      	ldrb	r3, [r7, #19]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d120      	bne.n	8003dbc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003d84:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003d88:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d98:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6899      	ldr	r1, [r3, #8]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	431a      	orrs	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 face 	bl	8004354 <RTC_ExitInitMode>
 8003db8:	4603      	mov	r3, r0
 8003dba:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003dbc:	7cfb      	ldrb	r3, [r7, #19]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d102      	bne.n	8003dc8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	22ff      	movs	r2, #255	; 0xff
 8003dce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	771a      	strb	r2, [r3, #28]

  return status;
 8003dd6:	7cfb      	ldrb	r3, [r7, #19]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	371c      	adds	r7, #28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd90      	pop	{r4, r7, pc}

08003de0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003e12:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003e16:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	0c1b      	lsrs	r3, r3, #16
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	0d9b      	lsrs	r3, r3, #22
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d11a      	bne.n	8003e92 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fab9 	bl	80043d8 <RTC_Bcd2ToByte>
 8003e66:	4603      	mov	r3, r0
 8003e68:	461a      	mov	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	785b      	ldrb	r3, [r3, #1]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fab0 	bl	80043d8 <RTC_Bcd2ToByte>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	789b      	ldrb	r3, [r3, #2]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 faa7 	bl	80043d8 <RTC_Bcd2ToByte>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003e9c:	b590      	push	{r4, r7, lr}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	7f1b      	ldrb	r3, [r3, #28]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_RTC_SetDate+0x1c>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e071      	b.n	8003f9c <HAL_RTC_SetDate+0x100>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10e      	bne.n	8003ee8 <HAL_RTC_SetDate+0x4c>
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	785b      	ldrb	r3, [r3, #1]
 8003ece:	f003 0310 	and.w	r3, r3, #16
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d008      	beq.n	8003ee8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	785b      	ldrb	r3, [r3, #1]
 8003eda:	f023 0310 	bic.w	r3, r3, #16
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	330a      	adds	r3, #10
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d11c      	bne.n	8003f28 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	78db      	ldrb	r3, [r3, #3]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fa53 	bl	800439e <RTC_ByteToBcd2>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	785b      	ldrb	r3, [r3, #1]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 fa4c 	bl	800439e <RTC_ByteToBcd2>
 8003f06:	4603      	mov	r3, r0
 8003f08:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003f0a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	789b      	ldrb	r3, [r3, #2]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fa44 	bl	800439e <RTC_ByteToBcd2>
 8003f16:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003f18:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003f22:	4313      	orrs	r3, r2
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	e00e      	b.n	8003f46 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	78db      	ldrb	r3, [r3, #3]
 8003f2c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	785b      	ldrb	r3, [r3, #1]
 8003f32:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003f34:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003f3a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003f42:	4313      	orrs	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	22ca      	movs	r2, #202	; 0xca
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2253      	movs	r2, #83	; 0x53
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f9c5 	bl	80042e6 <RTC_EnterInitMode>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003f60:	7cfb      	ldrb	r3, [r7, #19]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10c      	bne.n	8003f80 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003f70:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003f74:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 f9ec 	bl	8004354 <RTC_ExitInitMode>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003f80:	7cfb      	ldrb	r3, [r7, #19]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d102      	bne.n	8003f8c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	22ff      	movs	r2, #255	; 0xff
 8003f92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	771a      	strb	r2, [r3, #28]

  return status;
 8003f9a:	7cfb      	ldrb	r3, [r7, #19]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd90      	pop	{r4, r7, pc}

08003fa4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003fbe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	0c1b      	lsrs	r3, r3, #16
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	0a1b      	lsrs	r3, r3, #8
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f003 031f 	and.w	r3, r3, #31
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	0b5b      	lsrs	r3, r3, #13
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d11a      	bne.n	8004038 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	78db      	ldrb	r3, [r3, #3]
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f9e6 	bl	80043d8 <RTC_Bcd2ToByte>
 800400c:	4603      	mov	r3, r0
 800400e:	461a      	mov	r2, r3
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	785b      	ldrb	r3, [r3, #1]
 8004018:	4618      	mov	r0, r3
 800401a:	f000 f9dd 	bl	80043d8 <RTC_Bcd2ToByte>
 800401e:	4603      	mov	r3, r0
 8004020:	461a      	mov	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	789b      	ldrb	r3, [r3, #2]
 800402a:	4618      	mov	r0, r3
 800402c:	f000 f9d4 	bl	80043d8 <RTC_Bcd2ToByte>
 8004030:	4603      	mov	r3, r0
 8004032:	461a      	mov	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004042:	b590      	push	{r4, r7, lr}
 8004044:	b089      	sub	sp, #36	; 0x24
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	7f1b      	ldrb	r3, [r3, #28]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d101      	bne.n	8004066 <HAL_RTC_SetAlarm+0x24>
 8004062:	2302      	movs	r3, #2
 8004064:	e113      	b.n	800428e <HAL_RTC_SetAlarm+0x24c>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2201      	movs	r2, #1
 800406a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2202      	movs	r2, #2
 8004070:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d137      	bne.n	80040e8 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	d102      	bne.n	800408c <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2200      	movs	r2, #0
 800408a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f000 f984 	bl	800439e <RTC_ByteToBcd2>
 8004096:	4603      	mov	r3, r0
 8004098:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	785b      	ldrb	r3, [r3, #1]
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 f97d 	bl	800439e <RTC_ByteToBcd2>
 80040a4:	4603      	mov	r3, r0
 80040a6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80040a8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	789b      	ldrb	r3, [r3, #2]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f975 	bl	800439e <RTC_ByteToBcd2>
 80040b4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80040b6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	78db      	ldrb	r3, [r3, #3]
 80040be:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80040c0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 f967 	bl	800439e <RTC_ByteToBcd2>
 80040d0:	4603      	mov	r3, r0
 80040d2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80040d4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80040dc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61fb      	str	r3, [r7, #28]
 80040e6:	e023      	b.n	8004130 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d102      	bne.n	80040fc <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2200      	movs	r2, #0
 80040fa:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	785b      	ldrb	r3, [r3, #1]
 8004106:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004108:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800410e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	78db      	ldrb	r3, [r3, #3]
 8004114:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004116:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800411e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004120:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004126:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800412c:	4313      	orrs	r3, r2
 800412e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	22ca      	movs	r2, #202	; 0xca
 8004142:	625a      	str	r2, [r3, #36]	; 0x24
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2253      	movs	r2, #83	; 0x53
 800414a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004154:	d148      	bne.n	80041e8 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004164:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004174:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	b2da      	uxtb	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004186:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004188:	f7fd fb0c 	bl	80017a4 <HAL_GetTick>
 800418c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800418e:	e013      	b.n	80041b8 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004190:	f7fd fb08 	bl	80017a4 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800419e:	d90b      	bls.n	80041b8 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	22ff      	movs	r2, #255	; 0xff
 80041a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2203      	movs	r2, #3
 80041ac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e06a      	b.n	800428e <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0e4      	beq.n	8004190 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e4:	609a      	str	r2, [r3, #8]
 80041e6:	e047      	b.n	8004278 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041f6:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004206:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	b2da      	uxtb	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004218:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800421a:	f7fd fac3 	bl	80017a4 <HAL_GetTick>
 800421e:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004220:	e013      	b.n	800424a <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004222:	f7fd fabf 	bl	80017a4 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004230:	d90b      	bls.n	800424a <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	22ff      	movs	r2, #255	; 0xff
 8004238:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2203      	movs	r2, #3
 800423e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e021      	b.n	800428e <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0e4      	beq.n	8004222 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	69fa      	ldr	r2, [r7, #28]
 800425e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004276:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	22ff      	movs	r2, #255	; 0xff
 800427e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3724      	adds	r7, #36	; 0x24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd90      	pop	{r4, r7, pc}

08004296 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68da      	ldr	r2, [r3, #12]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042b0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042b2:	f7fd fa77 	bl	80017a4 <HAL_GetTick>
 80042b6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80042b8:	e009      	b.n	80042ce <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042ba:	f7fd fa73 	bl	80017a4 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042c8:	d901      	bls.n	80042ce <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e007      	b.n	80042de <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0ee      	beq.n	80042ba <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	d122      	bne.n	800434a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004312:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004314:	f7fd fa46 	bl	80017a4 <HAL_GetTick>
 8004318:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800431a:	e00c      	b.n	8004336 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800431c:	f7fd fa42 	bl	80017a4 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800432a:	d904      	bls.n	8004336 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2204      	movs	r2, #4
 8004330:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004340:	2b00      	cmp	r3, #0
 8004342:	d102      	bne.n	800434a <RTC_EnterInitMode+0x64>
 8004344:	7bfb      	ldrb	r3, [r7, #15]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d1e8      	bne.n	800431c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800434a:	7bfb      	ldrb	r3, [r7, #15]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800436e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 0320 	and.w	r3, r3, #32
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10a      	bne.n	8004394 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff ff89 	bl	8004296 <HAL_RTC_WaitForSynchro>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d004      	beq.n	8004394 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2204      	movs	r2, #4
 800438e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004394:	7bfb      	ldrb	r3, [r7, #15]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800439e:	b480      	push	{r7}
 80043a0:	b085      	sub	sp, #20
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	4603      	mov	r3, r0
 80043a6:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80043ac:	e005      	b.n	80043ba <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	3301      	adds	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	3b0a      	subs	r3, #10
 80043b8:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	2b09      	cmp	r3, #9
 80043be:	d8f6      	bhi.n	80043ae <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	b2db      	uxtb	r3, r3
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	091b      	lsrs	r3, r3, #4
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	461a      	mov	r2, r3
 80043ee:	0092      	lsls	r2, r2, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	f003 030f 	and.w	r3, r3, #15
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	4413      	add	r3, r2
 8004402:	b2db      	uxtb	r3, r3
}
 8004404:	4618      	mov	r0, r3
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3350      	adds	r3, #80	; 0x50
 8004426:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	4413      	add	r3, r2
 8004430:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	601a      	str	r2, [r3, #0]
}
 8004438:	bf00      	nop
 800443a:	371c      	adds	r7, #28
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3350      	adds	r3, #80	; 0x50
 8004458:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4413      	add	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e03f      	b.n	8004506 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fc fff2 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2224      	movs	r2, #36	; 0x24
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fce9 	bl	8004e90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695a      	ldr	r2, [r3, #20]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	4613      	mov	r3, r2
 800451a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b20      	cmp	r3, #32
 8004526:	d11d      	bne.n	8004564 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <HAL_UART_Receive_IT+0x26>
 800452e:	88fb      	ldrh	r3, [r7, #6]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e016      	b.n	8004566 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_UART_Receive_IT+0x38>
 8004542:	2302      	movs	r3, #2
 8004544:	e00f      	b.n	8004566 <HAL_UART_Receive_IT+0x58>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004554:	88fb      	ldrh	r3, [r7, #6]
 8004556:	461a      	mov	r2, r3
 8004558:	68b9      	ldr	r1, [r7, #8]
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 fac0 	bl	8004ae0 <UART_Start_Receive_IT>
 8004560:	4603      	mov	r3, r0
 8004562:	e000      	b.n	8004566 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004564:	2302      	movs	r3, #2
  }
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b0ba      	sub	sp, #232	; 0xe8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004596:	2300      	movs	r3, #0
 8004598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800459c:	2300      	movs	r3, #0
 800459e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10f      	bne.n	80045d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d009      	beq.n	80045d6 <HAL_UART_IRQHandler+0x66>
 80045c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fba3 	bl	8004d1a <UART_Receive_IT>
      return;
 80045d4:	e256      	b.n	8004a84 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 80de 	beq.w	800479c <HAL_UART_IRQHandler+0x22c>
 80045e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d106      	bne.n	80045fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80d1 	beq.w	800479c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00b      	beq.n	800461e <HAL_UART_IRQHandler+0xae>
 8004606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800460a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f043 0201 	orr.w	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800461e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00b      	beq.n	8004642 <HAL_UART_IRQHandler+0xd2>
 800462a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f043 0202 	orr.w	r2, r3, #2
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00b      	beq.n	8004666 <HAL_UART_IRQHandler+0xf6>
 800464e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f043 0204 	orr.w	r2, r3, #4
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d011      	beq.n	8004696 <HAL_UART_IRQHandler+0x126>
 8004672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d105      	bne.n	800468a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800467e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d005      	beq.n	8004696 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f043 0208 	orr.w	r2, r3, #8
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 81ed 	beq.w	8004a7a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_UART_IRQHandler+0x14e>
 80046ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 fb2e 	bl	8004d1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	bf0c      	ite	eq
 80046cc:	2301      	moveq	r3, #1
 80046ce:	2300      	movne	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d103      	bne.n	80046ea <HAL_UART_IRQHandler+0x17a>
 80046e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d04f      	beq.n	800478a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fa36 	bl	8004b5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	d141      	bne.n	8004782 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3314      	adds	r3, #20
 8004704:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004708:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004714:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800471c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3314      	adds	r3, #20
 8004726:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800472a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800472e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004732:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004736:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800473a:	e841 2300 	strex	r3, r2, [r1]
 800473e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1d9      	bne.n	80046fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	2b00      	cmp	r3, #0
 8004750:	d013      	beq.n	800477a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	4a7d      	ldr	r2, [pc, #500]	; (800494c <HAL_UART_IRQHandler+0x3dc>)
 8004758:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475e:	4618      	mov	r0, r3
 8004760:	f7fd f9d1 	bl	8001b06 <HAL_DMA_Abort_IT>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d016      	beq.n	8004798 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004774:	4610      	mov	r0, r2
 8004776:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004778:	e00e      	b.n	8004798 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f99a 	bl	8004ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004780:	e00a      	b.n	8004798 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f996 	bl	8004ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004788:	e006      	b.n	8004798 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f992 	bl	8004ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004796:	e170      	b.n	8004a7a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004798:	bf00      	nop
    return;
 800479a:	e16e      	b.n	8004a7a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	f040 814a 	bne.w	8004a3a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 8143 	beq.w	8004a3a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 813c 	beq.w	8004a3a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047c2:	2300      	movs	r3, #0
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e2:	2b40      	cmp	r3, #64	; 0x40
 80047e4:	f040 80b4 	bne.w	8004950 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 8140 	beq.w	8004a7e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004806:	429a      	cmp	r2, r3
 8004808:	f080 8139 	bcs.w	8004a7e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004812:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800481e:	f000 8088 	beq.w	8004932 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	330c      	adds	r3, #12
 8004828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004830:	e853 3f00 	ldrex	r3, [r3]
 8004834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004838:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800483c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800484e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004852:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800485a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1d9      	bne.n	8004822 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3314      	adds	r3, #20
 8004874:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004878:	e853 3f00 	ldrex	r3, [r3]
 800487c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800487e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3314      	adds	r3, #20
 800488e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004892:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004896:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004898:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800489a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e1      	bne.n	800486e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3314      	adds	r3, #20
 80048b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3314      	adds	r3, #20
 80048ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e3      	bne.n	80048aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	330c      	adds	r3, #12
 80048f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048fa:	e853 3f00 	ldrex	r3, [r3]
 80048fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004902:	f023 0310 	bic.w	r3, r3, #16
 8004906:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004914:	65ba      	str	r2, [r7, #88]	; 0x58
 8004916:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800491a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800491c:	e841 2300 	strex	r3, r2, [r1]
 8004920:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e3      	bne.n	80048f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492c:	4618      	mov	r0, r3
 800492e:	f7fd f87a 	bl	8001a26 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800493a:	b29b      	uxth	r3, r3
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	b29b      	uxth	r3, r3
 8004940:	4619      	mov	r1, r3
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f8c0 	bl	8004ac8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004948:	e099      	b.n	8004a7e <HAL_UART_IRQHandler+0x50e>
 800494a:	bf00      	nop
 800494c:	08004c23 	.word	0x08004c23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004958:	b29b      	uxth	r3, r3
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 808b 	beq.w	8004a82 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800496c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 8086 	beq.w	8004a82 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	330c      	adds	r3, #12
 800497c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004988:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800498c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	330c      	adds	r3, #12
 8004996:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800499a:	647a      	str	r2, [r7, #68]	; 0x44
 800499c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e3      	bne.n	8004976 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3314      	adds	r3, #20
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	e853 3f00 	ldrex	r3, [r3]
 80049bc:	623b      	str	r3, [r7, #32]
   return(result);
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	f023 0301 	bic.w	r3, r3, #1
 80049c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3314      	adds	r3, #20
 80049ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049d2:	633a      	str	r2, [r7, #48]	; 0x30
 80049d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e3      	bne.n	80049ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	330c      	adds	r3, #12
 80049fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	e853 3f00 	ldrex	r3, [r3]
 8004a02:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0310 	bic.w	r3, r3, #16
 8004a0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	330c      	adds	r3, #12
 8004a14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a18:	61fa      	str	r2, [r7, #28]
 8004a1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1c:	69b9      	ldr	r1, [r7, #24]
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	e841 2300 	strex	r3, r2, [r1]
 8004a24:	617b      	str	r3, [r7, #20]
   return(result);
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1e3      	bne.n	80049f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a30:	4619      	mov	r1, r3
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f848 	bl	8004ac8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a38:	e023      	b.n	8004a82 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d009      	beq.n	8004a5a <HAL_UART_IRQHandler+0x4ea>
 8004a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f8f9 	bl	8004c4a <UART_Transmit_IT>
    return;
 8004a58:	e014      	b.n	8004a84 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00e      	beq.n	8004a84 <HAL_UART_IRQHandler+0x514>
 8004a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d008      	beq.n	8004a84 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f939 	bl	8004cea <UART_EndTransmit_IT>
    return;
 8004a78:	e004      	b.n	8004a84 <HAL_UART_IRQHandler+0x514>
    return;
 8004a7a:	bf00      	nop
 8004a7c:	e002      	b.n	8004a84 <HAL_UART_IRQHandler+0x514>
      return;
 8004a7e:	bf00      	nop
 8004a80:	e000      	b.n	8004a84 <HAL_UART_IRQHandler+0x514>
      return;
 8004a82:	bf00      	nop
  }
}
 8004a84:	37e8      	adds	r7, #232	; 0xe8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop

08004a8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	4613      	mov	r3, r2
 8004aec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	88fa      	ldrh	r2, [r7, #6]
 8004af8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	88fa      	ldrh	r2, [r7, #6]
 8004afe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2222      	movs	r2, #34	; 0x22
 8004b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b2c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695a      	ldr	r2, [r3, #20]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f042 0201 	orr.w	r2, r2, #1
 8004b3c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0220 	orr.w	r2, r2, #32
 8004b4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b095      	sub	sp, #84	; 0x54
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	330c      	adds	r3, #12
 8004b6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6e:	e853 3f00 	ldrex	r3, [r3]
 8004b72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	330c      	adds	r3, #12
 8004b82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b84:	643a      	str	r2, [r7, #64]	; 0x40
 8004b86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b8c:	e841 2300 	strex	r3, r2, [r1]
 8004b90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1e5      	bne.n	8004b64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3314      	adds	r3, #20
 8004b9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	e853 3f00 	ldrex	r3, [r3]
 8004ba6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f023 0301 	bic.w	r3, r3, #1
 8004bae:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3314      	adds	r3, #20
 8004bb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bc0:	e841 2300 	strex	r3, r2, [r1]
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e5      	bne.n	8004b98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d119      	bne.n	8004c08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	330c      	adds	r3, #12
 8004bda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	e853 3f00 	ldrex	r3, [r3]
 8004be2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f023 0310 	bic.w	r3, r3, #16
 8004bea:	647b      	str	r3, [r7, #68]	; 0x44
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	330c      	adds	r3, #12
 8004bf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bf4:	61ba      	str	r2, [r7, #24]
 8004bf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf8:	6979      	ldr	r1, [r7, #20]
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	e841 2300 	strex	r3, r2, [r1]
 8004c00:	613b      	str	r3, [r7, #16]
   return(result);
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e5      	bne.n	8004bd4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c16:	bf00      	nop
 8004c18:	3754      	adds	r7, #84	; 0x54
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f7ff ff39 	bl	8004ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c42:	bf00      	nop
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b085      	sub	sp, #20
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b21      	cmp	r3, #33	; 0x21
 8004c5c:	d13e      	bne.n	8004cdc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c66:	d114      	bne.n	8004c92 <UART_Transmit_IT+0x48>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d110      	bne.n	8004c92 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	1c9a      	adds	r2, r3, #2
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	621a      	str	r2, [r3, #32]
 8004c90:	e008      	b.n	8004ca4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	1c59      	adds	r1, r3, #1
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6211      	str	r1, [r2, #32]
 8004c9c:	781a      	ldrb	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	3b01      	subs	r3, #1
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10f      	bne.n	8004cd8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cc6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cd6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	e000      	b.n	8004cde <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cdc:	2302      	movs	r3, #2
  }
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b082      	sub	sp, #8
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7ff febe 	bl	8004a8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b08c      	sub	sp, #48	; 0x30
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b22      	cmp	r3, #34	; 0x22
 8004d2c:	f040 80ab 	bne.w	8004e86 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d38:	d117      	bne.n	8004d6a <UART_Receive_IT+0x50>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d113      	bne.n	8004d6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	1c9a      	adds	r2, r3, #2
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	629a      	str	r2, [r3, #40]	; 0x28
 8004d68:	e026      	b.n	8004db8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d70:	2300      	movs	r3, #0
 8004d72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7c:	d007      	beq.n	8004d8e <UART_Receive_IT+0x74>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10a      	bne.n	8004d9c <UART_Receive_IT+0x82>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d106      	bne.n	8004d9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	e008      	b.n	8004dae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d15a      	bne.n	8004e82 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0220 	bic.w	r2, r2, #32
 8004dda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695a      	ldr	r2, [r3, #20]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0201 	bic.w	r2, r2, #1
 8004dfa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d135      	bne.n	8004e78 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	330c      	adds	r3, #12
 8004e18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	613b      	str	r3, [r7, #16]
   return(result);
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f023 0310 	bic.w	r3, r3, #16
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	330c      	adds	r3, #12
 8004e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e32:	623a      	str	r2, [r7, #32]
 8004e34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	69f9      	ldr	r1, [r7, #28]
 8004e38:	6a3a      	ldr	r2, [r7, #32]
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e5      	bne.n	8004e12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0310 	and.w	r3, r3, #16
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d10a      	bne.n	8004e6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e54:	2300      	movs	r3, #0
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff fe29 	bl	8004ac8 <HAL_UARTEx_RxEventCallback>
 8004e76:	e002      	b.n	8004e7e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff fe11 	bl	8004aa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	e002      	b.n	8004e88 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e000      	b.n	8004e88 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004e86:	2302      	movs	r3, #2
  }
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3730      	adds	r7, #48	; 0x30
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e94:	b0c0      	sub	sp, #256	; 0x100
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eac:	68d9      	ldr	r1, [r3, #12]
 8004eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	ea40 0301 	orr.w	r3, r0, r1
 8004eb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ee8:	f021 010c 	bic.w	r1, r1, #12
 8004eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ef6:	430b      	orrs	r3, r1
 8004ef8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0a:	6999      	ldr	r1, [r3, #24]
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	ea40 0301 	orr.w	r3, r0, r1
 8004f16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	4b8f      	ldr	r3, [pc, #572]	; (800515c <UART_SetConfig+0x2cc>)
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d005      	beq.n	8004f30 <UART_SetConfig+0xa0>
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	4b8d      	ldr	r3, [pc, #564]	; (8005160 <UART_SetConfig+0x2d0>)
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d104      	bne.n	8004f3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f30:	f7fd fe3a 	bl	8002ba8 <HAL_RCC_GetPCLK2Freq>
 8004f34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f38:	e003      	b.n	8004f42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f3a:	f7fd fe21 	bl	8002b80 <HAL_RCC_GetPCLK1Freq>
 8004f3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f4c:	f040 810c 	bne.w	8005168 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f54:	2200      	movs	r2, #0
 8004f56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f62:	4622      	mov	r2, r4
 8004f64:	462b      	mov	r3, r5
 8004f66:	1891      	adds	r1, r2, r2
 8004f68:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f6a:	415b      	adcs	r3, r3
 8004f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f72:	4621      	mov	r1, r4
 8004f74:	eb12 0801 	adds.w	r8, r2, r1
 8004f78:	4629      	mov	r1, r5
 8004f7a:	eb43 0901 	adc.w	r9, r3, r1
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	f04f 0300 	mov.w	r3, #0
 8004f86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f92:	4690      	mov	r8, r2
 8004f94:	4699      	mov	r9, r3
 8004f96:	4623      	mov	r3, r4
 8004f98:	eb18 0303 	adds.w	r3, r8, r3
 8004f9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004fa0:	462b      	mov	r3, r5
 8004fa2:	eb49 0303 	adc.w	r3, r9, r3
 8004fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004fba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	18db      	adds	r3, r3, r3
 8004fc2:	653b      	str	r3, [r7, #80]	; 0x50
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	eb42 0303 	adc.w	r3, r2, r3
 8004fca:	657b      	str	r3, [r7, #84]	; 0x54
 8004fcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004fd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004fd4:	f7fb f96c 	bl	80002b0 <__aeabi_uldivmod>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4b61      	ldr	r3, [pc, #388]	; (8005164 <UART_SetConfig+0x2d4>)
 8004fde:	fba3 2302 	umull	r2, r3, r3, r2
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	011c      	lsls	r4, r3, #4
 8004fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fea:	2200      	movs	r2, #0
 8004fec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ff0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ff4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ff8:	4642      	mov	r2, r8
 8004ffa:	464b      	mov	r3, r9
 8004ffc:	1891      	adds	r1, r2, r2
 8004ffe:	64b9      	str	r1, [r7, #72]	; 0x48
 8005000:	415b      	adcs	r3, r3
 8005002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005004:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005008:	4641      	mov	r1, r8
 800500a:	eb12 0a01 	adds.w	sl, r2, r1
 800500e:	4649      	mov	r1, r9
 8005010:	eb43 0b01 	adc.w	fp, r3, r1
 8005014:	f04f 0200 	mov.w	r2, #0
 8005018:	f04f 0300 	mov.w	r3, #0
 800501c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005020:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005024:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005028:	4692      	mov	sl, r2
 800502a:	469b      	mov	fp, r3
 800502c:	4643      	mov	r3, r8
 800502e:	eb1a 0303 	adds.w	r3, sl, r3
 8005032:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005036:	464b      	mov	r3, r9
 8005038:	eb4b 0303 	adc.w	r3, fp, r3
 800503c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800504c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005050:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005054:	460b      	mov	r3, r1
 8005056:	18db      	adds	r3, r3, r3
 8005058:	643b      	str	r3, [r7, #64]	; 0x40
 800505a:	4613      	mov	r3, r2
 800505c:	eb42 0303 	adc.w	r3, r2, r3
 8005060:	647b      	str	r3, [r7, #68]	; 0x44
 8005062:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005066:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800506a:	f7fb f921 	bl	80002b0 <__aeabi_uldivmod>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4611      	mov	r1, r2
 8005074:	4b3b      	ldr	r3, [pc, #236]	; (8005164 <UART_SetConfig+0x2d4>)
 8005076:	fba3 2301 	umull	r2, r3, r3, r1
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	2264      	movs	r2, #100	; 0x64
 800507e:	fb02 f303 	mul.w	r3, r2, r3
 8005082:	1acb      	subs	r3, r1, r3
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800508a:	4b36      	ldr	r3, [pc, #216]	; (8005164 <UART_SetConfig+0x2d4>)
 800508c:	fba3 2302 	umull	r2, r3, r3, r2
 8005090:	095b      	lsrs	r3, r3, #5
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005098:	441c      	add	r4, r3
 800509a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80050a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80050ac:	4642      	mov	r2, r8
 80050ae:	464b      	mov	r3, r9
 80050b0:	1891      	adds	r1, r2, r2
 80050b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80050b4:	415b      	adcs	r3, r3
 80050b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050bc:	4641      	mov	r1, r8
 80050be:	1851      	adds	r1, r2, r1
 80050c0:	6339      	str	r1, [r7, #48]	; 0x30
 80050c2:	4649      	mov	r1, r9
 80050c4:	414b      	adcs	r3, r1
 80050c6:	637b      	str	r3, [r7, #52]	; 0x34
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80050d4:	4659      	mov	r1, fp
 80050d6:	00cb      	lsls	r3, r1, #3
 80050d8:	4651      	mov	r1, sl
 80050da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050de:	4651      	mov	r1, sl
 80050e0:	00ca      	lsls	r2, r1, #3
 80050e2:	4610      	mov	r0, r2
 80050e4:	4619      	mov	r1, r3
 80050e6:	4603      	mov	r3, r0
 80050e8:	4642      	mov	r2, r8
 80050ea:	189b      	adds	r3, r3, r2
 80050ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050f0:	464b      	mov	r3, r9
 80050f2:	460a      	mov	r2, r1
 80050f4:	eb42 0303 	adc.w	r3, r2, r3
 80050f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005108:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800510c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005110:	460b      	mov	r3, r1
 8005112:	18db      	adds	r3, r3, r3
 8005114:	62bb      	str	r3, [r7, #40]	; 0x28
 8005116:	4613      	mov	r3, r2
 8005118:	eb42 0303 	adc.w	r3, r2, r3
 800511c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800511e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005122:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005126:	f7fb f8c3 	bl	80002b0 <__aeabi_uldivmod>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4b0d      	ldr	r3, [pc, #52]	; (8005164 <UART_SetConfig+0x2d4>)
 8005130:	fba3 1302 	umull	r1, r3, r3, r2
 8005134:	095b      	lsrs	r3, r3, #5
 8005136:	2164      	movs	r1, #100	; 0x64
 8005138:	fb01 f303 	mul.w	r3, r1, r3
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	3332      	adds	r3, #50	; 0x32
 8005142:	4a08      	ldr	r2, [pc, #32]	; (8005164 <UART_SetConfig+0x2d4>)
 8005144:	fba2 2303 	umull	r2, r3, r2, r3
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	f003 0207 	and.w	r2, r3, #7
 800514e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4422      	add	r2, r4
 8005156:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005158:	e105      	b.n	8005366 <UART_SetConfig+0x4d6>
 800515a:	bf00      	nop
 800515c:	40011000 	.word	0x40011000
 8005160:	40011400 	.word	0x40011400
 8005164:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800516c:	2200      	movs	r2, #0
 800516e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005172:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005176:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800517a:	4642      	mov	r2, r8
 800517c:	464b      	mov	r3, r9
 800517e:	1891      	adds	r1, r2, r2
 8005180:	6239      	str	r1, [r7, #32]
 8005182:	415b      	adcs	r3, r3
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
 8005186:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800518a:	4641      	mov	r1, r8
 800518c:	1854      	adds	r4, r2, r1
 800518e:	4649      	mov	r1, r9
 8005190:	eb43 0501 	adc.w	r5, r3, r1
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	00eb      	lsls	r3, r5, #3
 800519e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051a2:	00e2      	lsls	r2, r4, #3
 80051a4:	4614      	mov	r4, r2
 80051a6:	461d      	mov	r5, r3
 80051a8:	4643      	mov	r3, r8
 80051aa:	18e3      	adds	r3, r4, r3
 80051ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051b0:	464b      	mov	r3, r9
 80051b2:	eb45 0303 	adc.w	r3, r5, r3
 80051b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051d6:	4629      	mov	r1, r5
 80051d8:	008b      	lsls	r3, r1, #2
 80051da:	4621      	mov	r1, r4
 80051dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051e0:	4621      	mov	r1, r4
 80051e2:	008a      	lsls	r2, r1, #2
 80051e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80051e8:	f7fb f862 	bl	80002b0 <__aeabi_uldivmod>
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4b60      	ldr	r3, [pc, #384]	; (8005374 <UART_SetConfig+0x4e4>)
 80051f2:	fba3 2302 	umull	r2, r3, r3, r2
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	011c      	lsls	r4, r3, #4
 80051fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051fe:	2200      	movs	r2, #0
 8005200:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005204:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005208:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800520c:	4642      	mov	r2, r8
 800520e:	464b      	mov	r3, r9
 8005210:	1891      	adds	r1, r2, r2
 8005212:	61b9      	str	r1, [r7, #24]
 8005214:	415b      	adcs	r3, r3
 8005216:	61fb      	str	r3, [r7, #28]
 8005218:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800521c:	4641      	mov	r1, r8
 800521e:	1851      	adds	r1, r2, r1
 8005220:	6139      	str	r1, [r7, #16]
 8005222:	4649      	mov	r1, r9
 8005224:	414b      	adcs	r3, r1
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005234:	4659      	mov	r1, fp
 8005236:	00cb      	lsls	r3, r1, #3
 8005238:	4651      	mov	r1, sl
 800523a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800523e:	4651      	mov	r1, sl
 8005240:	00ca      	lsls	r2, r1, #3
 8005242:	4610      	mov	r0, r2
 8005244:	4619      	mov	r1, r3
 8005246:	4603      	mov	r3, r0
 8005248:	4642      	mov	r2, r8
 800524a:	189b      	adds	r3, r3, r2
 800524c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005250:	464b      	mov	r3, r9
 8005252:	460a      	mov	r2, r1
 8005254:	eb42 0303 	adc.w	r3, r2, r3
 8005258:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	67bb      	str	r3, [r7, #120]	; 0x78
 8005266:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005274:	4649      	mov	r1, r9
 8005276:	008b      	lsls	r3, r1, #2
 8005278:	4641      	mov	r1, r8
 800527a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800527e:	4641      	mov	r1, r8
 8005280:	008a      	lsls	r2, r1, #2
 8005282:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005286:	f7fb f813 	bl	80002b0 <__aeabi_uldivmod>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	4b39      	ldr	r3, [pc, #228]	; (8005374 <UART_SetConfig+0x4e4>)
 8005290:	fba3 1302 	umull	r1, r3, r3, r2
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	2164      	movs	r1, #100	; 0x64
 8005298:	fb01 f303 	mul.w	r3, r1, r3
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	3332      	adds	r3, #50	; 0x32
 80052a2:	4a34      	ldr	r2, [pc, #208]	; (8005374 <UART_SetConfig+0x4e4>)
 80052a4:	fba2 2303 	umull	r2, r3, r2, r3
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052ae:	441c      	add	r4, r3
 80052b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052b4:	2200      	movs	r2, #0
 80052b6:	673b      	str	r3, [r7, #112]	; 0x70
 80052b8:	677a      	str	r2, [r7, #116]	; 0x74
 80052ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052be:	4642      	mov	r2, r8
 80052c0:	464b      	mov	r3, r9
 80052c2:	1891      	adds	r1, r2, r2
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	415b      	adcs	r3, r3
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052ce:	4641      	mov	r1, r8
 80052d0:	1851      	adds	r1, r2, r1
 80052d2:	6039      	str	r1, [r7, #0]
 80052d4:	4649      	mov	r1, r9
 80052d6:	414b      	adcs	r3, r1
 80052d8:	607b      	str	r3, [r7, #4]
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052e6:	4659      	mov	r1, fp
 80052e8:	00cb      	lsls	r3, r1, #3
 80052ea:	4651      	mov	r1, sl
 80052ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052f0:	4651      	mov	r1, sl
 80052f2:	00ca      	lsls	r2, r1, #3
 80052f4:	4610      	mov	r0, r2
 80052f6:	4619      	mov	r1, r3
 80052f8:	4603      	mov	r3, r0
 80052fa:	4642      	mov	r2, r8
 80052fc:	189b      	adds	r3, r3, r2
 80052fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005300:	464b      	mov	r3, r9
 8005302:	460a      	mov	r2, r1
 8005304:	eb42 0303 	adc.w	r3, r2, r3
 8005308:	66fb      	str	r3, [r7, #108]	; 0x6c
 800530a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	663b      	str	r3, [r7, #96]	; 0x60
 8005314:	667a      	str	r2, [r7, #100]	; 0x64
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	f04f 0300 	mov.w	r3, #0
 800531e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005322:	4649      	mov	r1, r9
 8005324:	008b      	lsls	r3, r1, #2
 8005326:	4641      	mov	r1, r8
 8005328:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800532c:	4641      	mov	r1, r8
 800532e:	008a      	lsls	r2, r1, #2
 8005330:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005334:	f7fa ffbc 	bl	80002b0 <__aeabi_uldivmod>
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4b0d      	ldr	r3, [pc, #52]	; (8005374 <UART_SetConfig+0x4e4>)
 800533e:	fba3 1302 	umull	r1, r3, r3, r2
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	2164      	movs	r1, #100	; 0x64
 8005346:	fb01 f303 	mul.w	r3, r1, r3
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	3332      	adds	r3, #50	; 0x32
 8005350:	4a08      	ldr	r2, [pc, #32]	; (8005374 <UART_SetConfig+0x4e4>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	f003 020f 	and.w	r2, r3, #15
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4422      	add	r2, r4
 8005364:	609a      	str	r2, [r3, #8]
}
 8005366:	bf00      	nop
 8005368:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800536c:	46bd      	mov	sp, r7
 800536e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005372:	bf00      	nop
 8005374:	51eb851f 	.word	0x51eb851f

08005378 <__errno>:
 8005378:	4b01      	ldr	r3, [pc, #4]	; (8005380 <__errno+0x8>)
 800537a:	6818      	ldr	r0, [r3, #0]
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	20000014 	.word	0x20000014

08005384 <__libc_init_array>:
 8005384:	b570      	push	{r4, r5, r6, lr}
 8005386:	4d0d      	ldr	r5, [pc, #52]	; (80053bc <__libc_init_array+0x38>)
 8005388:	4c0d      	ldr	r4, [pc, #52]	; (80053c0 <__libc_init_array+0x3c>)
 800538a:	1b64      	subs	r4, r4, r5
 800538c:	10a4      	asrs	r4, r4, #2
 800538e:	2600      	movs	r6, #0
 8005390:	42a6      	cmp	r6, r4
 8005392:	d109      	bne.n	80053a8 <__libc_init_array+0x24>
 8005394:	4d0b      	ldr	r5, [pc, #44]	; (80053c4 <__libc_init_array+0x40>)
 8005396:	4c0c      	ldr	r4, [pc, #48]	; (80053c8 <__libc_init_array+0x44>)
 8005398:	f000 fc8e 	bl	8005cb8 <_init>
 800539c:	1b64      	subs	r4, r4, r5
 800539e:	10a4      	asrs	r4, r4, #2
 80053a0:	2600      	movs	r6, #0
 80053a2:	42a6      	cmp	r6, r4
 80053a4:	d105      	bne.n	80053b2 <__libc_init_array+0x2e>
 80053a6:	bd70      	pop	{r4, r5, r6, pc}
 80053a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ac:	4798      	blx	r3
 80053ae:	3601      	adds	r6, #1
 80053b0:	e7ee      	b.n	8005390 <__libc_init_array+0xc>
 80053b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053b6:	4798      	blx	r3
 80053b8:	3601      	adds	r6, #1
 80053ba:	e7f2      	b.n	80053a2 <__libc_init_array+0x1e>
 80053bc:	08006558 	.word	0x08006558
 80053c0:	08006558 	.word	0x08006558
 80053c4:	08006558 	.word	0x08006558
 80053c8:	0800655c 	.word	0x0800655c

080053cc <memset>:
 80053cc:	4402      	add	r2, r0
 80053ce:	4603      	mov	r3, r0
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d100      	bne.n	80053d6 <memset+0xa>
 80053d4:	4770      	bx	lr
 80053d6:	f803 1b01 	strb.w	r1, [r3], #1
 80053da:	e7f9      	b.n	80053d0 <memset+0x4>

080053dc <siprintf>:
 80053dc:	b40e      	push	{r1, r2, r3}
 80053de:	b500      	push	{lr}
 80053e0:	b09c      	sub	sp, #112	; 0x70
 80053e2:	ab1d      	add	r3, sp, #116	; 0x74
 80053e4:	9002      	str	r0, [sp, #8]
 80053e6:	9006      	str	r0, [sp, #24]
 80053e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053ec:	4809      	ldr	r0, [pc, #36]	; (8005414 <siprintf+0x38>)
 80053ee:	9107      	str	r1, [sp, #28]
 80053f0:	9104      	str	r1, [sp, #16]
 80053f2:	4909      	ldr	r1, [pc, #36]	; (8005418 <siprintf+0x3c>)
 80053f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80053f8:	9105      	str	r1, [sp, #20]
 80053fa:	6800      	ldr	r0, [r0, #0]
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	a902      	add	r1, sp, #8
 8005400:	f000 f868 	bl	80054d4 <_svfiprintf_r>
 8005404:	9b02      	ldr	r3, [sp, #8]
 8005406:	2200      	movs	r2, #0
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	b01c      	add	sp, #112	; 0x70
 800540c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005410:	b003      	add	sp, #12
 8005412:	4770      	bx	lr
 8005414:	20000014 	.word	0x20000014
 8005418:	ffff0208 	.word	0xffff0208

0800541c <__ssputs_r>:
 800541c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005420:	688e      	ldr	r6, [r1, #8]
 8005422:	429e      	cmp	r6, r3
 8005424:	4682      	mov	sl, r0
 8005426:	460c      	mov	r4, r1
 8005428:	4690      	mov	r8, r2
 800542a:	461f      	mov	r7, r3
 800542c:	d838      	bhi.n	80054a0 <__ssputs_r+0x84>
 800542e:	898a      	ldrh	r2, [r1, #12]
 8005430:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005434:	d032      	beq.n	800549c <__ssputs_r+0x80>
 8005436:	6825      	ldr	r5, [r4, #0]
 8005438:	6909      	ldr	r1, [r1, #16]
 800543a:	eba5 0901 	sub.w	r9, r5, r1
 800543e:	6965      	ldr	r5, [r4, #20]
 8005440:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005444:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005448:	3301      	adds	r3, #1
 800544a:	444b      	add	r3, r9
 800544c:	106d      	asrs	r5, r5, #1
 800544e:	429d      	cmp	r5, r3
 8005450:	bf38      	it	cc
 8005452:	461d      	movcc	r5, r3
 8005454:	0553      	lsls	r3, r2, #21
 8005456:	d531      	bpl.n	80054bc <__ssputs_r+0xa0>
 8005458:	4629      	mov	r1, r5
 800545a:	f000 fb63 	bl	8005b24 <_malloc_r>
 800545e:	4606      	mov	r6, r0
 8005460:	b950      	cbnz	r0, 8005478 <__ssputs_r+0x5c>
 8005462:	230c      	movs	r3, #12
 8005464:	f8ca 3000 	str.w	r3, [sl]
 8005468:	89a3      	ldrh	r3, [r4, #12]
 800546a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800546e:	81a3      	strh	r3, [r4, #12]
 8005470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005478:	6921      	ldr	r1, [r4, #16]
 800547a:	464a      	mov	r2, r9
 800547c:	f000 fabe 	bl	80059fc <memcpy>
 8005480:	89a3      	ldrh	r3, [r4, #12]
 8005482:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800548a:	81a3      	strh	r3, [r4, #12]
 800548c:	6126      	str	r6, [r4, #16]
 800548e:	6165      	str	r5, [r4, #20]
 8005490:	444e      	add	r6, r9
 8005492:	eba5 0509 	sub.w	r5, r5, r9
 8005496:	6026      	str	r6, [r4, #0]
 8005498:	60a5      	str	r5, [r4, #8]
 800549a:	463e      	mov	r6, r7
 800549c:	42be      	cmp	r6, r7
 800549e:	d900      	bls.n	80054a2 <__ssputs_r+0x86>
 80054a0:	463e      	mov	r6, r7
 80054a2:	6820      	ldr	r0, [r4, #0]
 80054a4:	4632      	mov	r2, r6
 80054a6:	4641      	mov	r1, r8
 80054a8:	f000 fab6 	bl	8005a18 <memmove>
 80054ac:	68a3      	ldr	r3, [r4, #8]
 80054ae:	1b9b      	subs	r3, r3, r6
 80054b0:	60a3      	str	r3, [r4, #8]
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	4433      	add	r3, r6
 80054b6:	6023      	str	r3, [r4, #0]
 80054b8:	2000      	movs	r0, #0
 80054ba:	e7db      	b.n	8005474 <__ssputs_r+0x58>
 80054bc:	462a      	mov	r2, r5
 80054be:	f000 fba5 	bl	8005c0c <_realloc_r>
 80054c2:	4606      	mov	r6, r0
 80054c4:	2800      	cmp	r0, #0
 80054c6:	d1e1      	bne.n	800548c <__ssputs_r+0x70>
 80054c8:	6921      	ldr	r1, [r4, #16]
 80054ca:	4650      	mov	r0, sl
 80054cc:	f000 fabe 	bl	8005a4c <_free_r>
 80054d0:	e7c7      	b.n	8005462 <__ssputs_r+0x46>
	...

080054d4 <_svfiprintf_r>:
 80054d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d8:	4698      	mov	r8, r3
 80054da:	898b      	ldrh	r3, [r1, #12]
 80054dc:	061b      	lsls	r3, r3, #24
 80054de:	b09d      	sub	sp, #116	; 0x74
 80054e0:	4607      	mov	r7, r0
 80054e2:	460d      	mov	r5, r1
 80054e4:	4614      	mov	r4, r2
 80054e6:	d50e      	bpl.n	8005506 <_svfiprintf_r+0x32>
 80054e8:	690b      	ldr	r3, [r1, #16]
 80054ea:	b963      	cbnz	r3, 8005506 <_svfiprintf_r+0x32>
 80054ec:	2140      	movs	r1, #64	; 0x40
 80054ee:	f000 fb19 	bl	8005b24 <_malloc_r>
 80054f2:	6028      	str	r0, [r5, #0]
 80054f4:	6128      	str	r0, [r5, #16]
 80054f6:	b920      	cbnz	r0, 8005502 <_svfiprintf_r+0x2e>
 80054f8:	230c      	movs	r3, #12
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005500:	e0d1      	b.n	80056a6 <_svfiprintf_r+0x1d2>
 8005502:	2340      	movs	r3, #64	; 0x40
 8005504:	616b      	str	r3, [r5, #20]
 8005506:	2300      	movs	r3, #0
 8005508:	9309      	str	r3, [sp, #36]	; 0x24
 800550a:	2320      	movs	r3, #32
 800550c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005510:	f8cd 800c 	str.w	r8, [sp, #12]
 8005514:	2330      	movs	r3, #48	; 0x30
 8005516:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80056c0 <_svfiprintf_r+0x1ec>
 800551a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800551e:	f04f 0901 	mov.w	r9, #1
 8005522:	4623      	mov	r3, r4
 8005524:	469a      	mov	sl, r3
 8005526:	f813 2b01 	ldrb.w	r2, [r3], #1
 800552a:	b10a      	cbz	r2, 8005530 <_svfiprintf_r+0x5c>
 800552c:	2a25      	cmp	r2, #37	; 0x25
 800552e:	d1f9      	bne.n	8005524 <_svfiprintf_r+0x50>
 8005530:	ebba 0b04 	subs.w	fp, sl, r4
 8005534:	d00b      	beq.n	800554e <_svfiprintf_r+0x7a>
 8005536:	465b      	mov	r3, fp
 8005538:	4622      	mov	r2, r4
 800553a:	4629      	mov	r1, r5
 800553c:	4638      	mov	r0, r7
 800553e:	f7ff ff6d 	bl	800541c <__ssputs_r>
 8005542:	3001      	adds	r0, #1
 8005544:	f000 80aa 	beq.w	800569c <_svfiprintf_r+0x1c8>
 8005548:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800554a:	445a      	add	r2, fp
 800554c:	9209      	str	r2, [sp, #36]	; 0x24
 800554e:	f89a 3000 	ldrb.w	r3, [sl]
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 80a2 	beq.w	800569c <_svfiprintf_r+0x1c8>
 8005558:	2300      	movs	r3, #0
 800555a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800555e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005562:	f10a 0a01 	add.w	sl, sl, #1
 8005566:	9304      	str	r3, [sp, #16]
 8005568:	9307      	str	r3, [sp, #28]
 800556a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800556e:	931a      	str	r3, [sp, #104]	; 0x68
 8005570:	4654      	mov	r4, sl
 8005572:	2205      	movs	r2, #5
 8005574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005578:	4851      	ldr	r0, [pc, #324]	; (80056c0 <_svfiprintf_r+0x1ec>)
 800557a:	f7fa fe49 	bl	8000210 <memchr>
 800557e:	9a04      	ldr	r2, [sp, #16]
 8005580:	b9d8      	cbnz	r0, 80055ba <_svfiprintf_r+0xe6>
 8005582:	06d0      	lsls	r0, r2, #27
 8005584:	bf44      	itt	mi
 8005586:	2320      	movmi	r3, #32
 8005588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800558c:	0711      	lsls	r1, r2, #28
 800558e:	bf44      	itt	mi
 8005590:	232b      	movmi	r3, #43	; 0x2b
 8005592:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005596:	f89a 3000 	ldrb.w	r3, [sl]
 800559a:	2b2a      	cmp	r3, #42	; 0x2a
 800559c:	d015      	beq.n	80055ca <_svfiprintf_r+0xf6>
 800559e:	9a07      	ldr	r2, [sp, #28]
 80055a0:	4654      	mov	r4, sl
 80055a2:	2000      	movs	r0, #0
 80055a4:	f04f 0c0a 	mov.w	ip, #10
 80055a8:	4621      	mov	r1, r4
 80055aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055ae:	3b30      	subs	r3, #48	; 0x30
 80055b0:	2b09      	cmp	r3, #9
 80055b2:	d94e      	bls.n	8005652 <_svfiprintf_r+0x17e>
 80055b4:	b1b0      	cbz	r0, 80055e4 <_svfiprintf_r+0x110>
 80055b6:	9207      	str	r2, [sp, #28]
 80055b8:	e014      	b.n	80055e4 <_svfiprintf_r+0x110>
 80055ba:	eba0 0308 	sub.w	r3, r0, r8
 80055be:	fa09 f303 	lsl.w	r3, r9, r3
 80055c2:	4313      	orrs	r3, r2
 80055c4:	9304      	str	r3, [sp, #16]
 80055c6:	46a2      	mov	sl, r4
 80055c8:	e7d2      	b.n	8005570 <_svfiprintf_r+0x9c>
 80055ca:	9b03      	ldr	r3, [sp, #12]
 80055cc:	1d19      	adds	r1, r3, #4
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	9103      	str	r1, [sp, #12]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	bfbb      	ittet	lt
 80055d6:	425b      	neglt	r3, r3
 80055d8:	f042 0202 	orrlt.w	r2, r2, #2
 80055dc:	9307      	strge	r3, [sp, #28]
 80055de:	9307      	strlt	r3, [sp, #28]
 80055e0:	bfb8      	it	lt
 80055e2:	9204      	strlt	r2, [sp, #16]
 80055e4:	7823      	ldrb	r3, [r4, #0]
 80055e6:	2b2e      	cmp	r3, #46	; 0x2e
 80055e8:	d10c      	bne.n	8005604 <_svfiprintf_r+0x130>
 80055ea:	7863      	ldrb	r3, [r4, #1]
 80055ec:	2b2a      	cmp	r3, #42	; 0x2a
 80055ee:	d135      	bne.n	800565c <_svfiprintf_r+0x188>
 80055f0:	9b03      	ldr	r3, [sp, #12]
 80055f2:	1d1a      	adds	r2, r3, #4
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	9203      	str	r2, [sp, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bfb8      	it	lt
 80055fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005600:	3402      	adds	r4, #2
 8005602:	9305      	str	r3, [sp, #20]
 8005604:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80056d0 <_svfiprintf_r+0x1fc>
 8005608:	7821      	ldrb	r1, [r4, #0]
 800560a:	2203      	movs	r2, #3
 800560c:	4650      	mov	r0, sl
 800560e:	f7fa fdff 	bl	8000210 <memchr>
 8005612:	b140      	cbz	r0, 8005626 <_svfiprintf_r+0x152>
 8005614:	2340      	movs	r3, #64	; 0x40
 8005616:	eba0 000a 	sub.w	r0, r0, sl
 800561a:	fa03 f000 	lsl.w	r0, r3, r0
 800561e:	9b04      	ldr	r3, [sp, #16]
 8005620:	4303      	orrs	r3, r0
 8005622:	3401      	adds	r4, #1
 8005624:	9304      	str	r3, [sp, #16]
 8005626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800562a:	4826      	ldr	r0, [pc, #152]	; (80056c4 <_svfiprintf_r+0x1f0>)
 800562c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005630:	2206      	movs	r2, #6
 8005632:	f7fa fded 	bl	8000210 <memchr>
 8005636:	2800      	cmp	r0, #0
 8005638:	d038      	beq.n	80056ac <_svfiprintf_r+0x1d8>
 800563a:	4b23      	ldr	r3, [pc, #140]	; (80056c8 <_svfiprintf_r+0x1f4>)
 800563c:	bb1b      	cbnz	r3, 8005686 <_svfiprintf_r+0x1b2>
 800563e:	9b03      	ldr	r3, [sp, #12]
 8005640:	3307      	adds	r3, #7
 8005642:	f023 0307 	bic.w	r3, r3, #7
 8005646:	3308      	adds	r3, #8
 8005648:	9303      	str	r3, [sp, #12]
 800564a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800564c:	4433      	add	r3, r6
 800564e:	9309      	str	r3, [sp, #36]	; 0x24
 8005650:	e767      	b.n	8005522 <_svfiprintf_r+0x4e>
 8005652:	fb0c 3202 	mla	r2, ip, r2, r3
 8005656:	460c      	mov	r4, r1
 8005658:	2001      	movs	r0, #1
 800565a:	e7a5      	b.n	80055a8 <_svfiprintf_r+0xd4>
 800565c:	2300      	movs	r3, #0
 800565e:	3401      	adds	r4, #1
 8005660:	9305      	str	r3, [sp, #20]
 8005662:	4619      	mov	r1, r3
 8005664:	f04f 0c0a 	mov.w	ip, #10
 8005668:	4620      	mov	r0, r4
 800566a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800566e:	3a30      	subs	r2, #48	; 0x30
 8005670:	2a09      	cmp	r2, #9
 8005672:	d903      	bls.n	800567c <_svfiprintf_r+0x1a8>
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0c5      	beq.n	8005604 <_svfiprintf_r+0x130>
 8005678:	9105      	str	r1, [sp, #20]
 800567a:	e7c3      	b.n	8005604 <_svfiprintf_r+0x130>
 800567c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005680:	4604      	mov	r4, r0
 8005682:	2301      	movs	r3, #1
 8005684:	e7f0      	b.n	8005668 <_svfiprintf_r+0x194>
 8005686:	ab03      	add	r3, sp, #12
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	462a      	mov	r2, r5
 800568c:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <_svfiprintf_r+0x1f8>)
 800568e:	a904      	add	r1, sp, #16
 8005690:	4638      	mov	r0, r7
 8005692:	f3af 8000 	nop.w
 8005696:	1c42      	adds	r2, r0, #1
 8005698:	4606      	mov	r6, r0
 800569a:	d1d6      	bne.n	800564a <_svfiprintf_r+0x176>
 800569c:	89ab      	ldrh	r3, [r5, #12]
 800569e:	065b      	lsls	r3, r3, #25
 80056a0:	f53f af2c 	bmi.w	80054fc <_svfiprintf_r+0x28>
 80056a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056a6:	b01d      	add	sp, #116	; 0x74
 80056a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ac:	ab03      	add	r3, sp, #12
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	462a      	mov	r2, r5
 80056b2:	4b06      	ldr	r3, [pc, #24]	; (80056cc <_svfiprintf_r+0x1f8>)
 80056b4:	a904      	add	r1, sp, #16
 80056b6:	4638      	mov	r0, r7
 80056b8:	f000 f87a 	bl	80057b0 <_printf_i>
 80056bc:	e7eb      	b.n	8005696 <_svfiprintf_r+0x1c2>
 80056be:	bf00      	nop
 80056c0:	0800651c 	.word	0x0800651c
 80056c4:	08006526 	.word	0x08006526
 80056c8:	00000000 	.word	0x00000000
 80056cc:	0800541d 	.word	0x0800541d
 80056d0:	08006522 	.word	0x08006522

080056d4 <_printf_common>:
 80056d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d8:	4616      	mov	r6, r2
 80056da:	4699      	mov	r9, r3
 80056dc:	688a      	ldr	r2, [r1, #8]
 80056de:	690b      	ldr	r3, [r1, #16]
 80056e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056e4:	4293      	cmp	r3, r2
 80056e6:	bfb8      	it	lt
 80056e8:	4613      	movlt	r3, r2
 80056ea:	6033      	str	r3, [r6, #0]
 80056ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056f0:	4607      	mov	r7, r0
 80056f2:	460c      	mov	r4, r1
 80056f4:	b10a      	cbz	r2, 80056fa <_printf_common+0x26>
 80056f6:	3301      	adds	r3, #1
 80056f8:	6033      	str	r3, [r6, #0]
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	0699      	lsls	r1, r3, #26
 80056fe:	bf42      	ittt	mi
 8005700:	6833      	ldrmi	r3, [r6, #0]
 8005702:	3302      	addmi	r3, #2
 8005704:	6033      	strmi	r3, [r6, #0]
 8005706:	6825      	ldr	r5, [r4, #0]
 8005708:	f015 0506 	ands.w	r5, r5, #6
 800570c:	d106      	bne.n	800571c <_printf_common+0x48>
 800570e:	f104 0a19 	add.w	sl, r4, #25
 8005712:	68e3      	ldr	r3, [r4, #12]
 8005714:	6832      	ldr	r2, [r6, #0]
 8005716:	1a9b      	subs	r3, r3, r2
 8005718:	42ab      	cmp	r3, r5
 800571a:	dc26      	bgt.n	800576a <_printf_common+0x96>
 800571c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005720:	1e13      	subs	r3, r2, #0
 8005722:	6822      	ldr	r2, [r4, #0]
 8005724:	bf18      	it	ne
 8005726:	2301      	movne	r3, #1
 8005728:	0692      	lsls	r2, r2, #26
 800572a:	d42b      	bmi.n	8005784 <_printf_common+0xb0>
 800572c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005730:	4649      	mov	r1, r9
 8005732:	4638      	mov	r0, r7
 8005734:	47c0      	blx	r8
 8005736:	3001      	adds	r0, #1
 8005738:	d01e      	beq.n	8005778 <_printf_common+0xa4>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	68e5      	ldr	r5, [r4, #12]
 800573e:	6832      	ldr	r2, [r6, #0]
 8005740:	f003 0306 	and.w	r3, r3, #6
 8005744:	2b04      	cmp	r3, #4
 8005746:	bf08      	it	eq
 8005748:	1aad      	subeq	r5, r5, r2
 800574a:	68a3      	ldr	r3, [r4, #8]
 800574c:	6922      	ldr	r2, [r4, #16]
 800574e:	bf0c      	ite	eq
 8005750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005754:	2500      	movne	r5, #0
 8005756:	4293      	cmp	r3, r2
 8005758:	bfc4      	itt	gt
 800575a:	1a9b      	subgt	r3, r3, r2
 800575c:	18ed      	addgt	r5, r5, r3
 800575e:	2600      	movs	r6, #0
 8005760:	341a      	adds	r4, #26
 8005762:	42b5      	cmp	r5, r6
 8005764:	d11a      	bne.n	800579c <_printf_common+0xc8>
 8005766:	2000      	movs	r0, #0
 8005768:	e008      	b.n	800577c <_printf_common+0xa8>
 800576a:	2301      	movs	r3, #1
 800576c:	4652      	mov	r2, sl
 800576e:	4649      	mov	r1, r9
 8005770:	4638      	mov	r0, r7
 8005772:	47c0      	blx	r8
 8005774:	3001      	adds	r0, #1
 8005776:	d103      	bne.n	8005780 <_printf_common+0xac>
 8005778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800577c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005780:	3501      	adds	r5, #1
 8005782:	e7c6      	b.n	8005712 <_printf_common+0x3e>
 8005784:	18e1      	adds	r1, r4, r3
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	2030      	movs	r0, #48	; 0x30
 800578a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800578e:	4422      	add	r2, r4
 8005790:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005794:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005798:	3302      	adds	r3, #2
 800579a:	e7c7      	b.n	800572c <_printf_common+0x58>
 800579c:	2301      	movs	r3, #1
 800579e:	4622      	mov	r2, r4
 80057a0:	4649      	mov	r1, r9
 80057a2:	4638      	mov	r0, r7
 80057a4:	47c0      	blx	r8
 80057a6:	3001      	adds	r0, #1
 80057a8:	d0e6      	beq.n	8005778 <_printf_common+0xa4>
 80057aa:	3601      	adds	r6, #1
 80057ac:	e7d9      	b.n	8005762 <_printf_common+0x8e>
	...

080057b0 <_printf_i>:
 80057b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057b4:	7e0f      	ldrb	r7, [r1, #24]
 80057b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057b8:	2f78      	cmp	r7, #120	; 0x78
 80057ba:	4691      	mov	r9, r2
 80057bc:	4680      	mov	r8, r0
 80057be:	460c      	mov	r4, r1
 80057c0:	469a      	mov	sl, r3
 80057c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057c6:	d807      	bhi.n	80057d8 <_printf_i+0x28>
 80057c8:	2f62      	cmp	r7, #98	; 0x62
 80057ca:	d80a      	bhi.n	80057e2 <_printf_i+0x32>
 80057cc:	2f00      	cmp	r7, #0
 80057ce:	f000 80d8 	beq.w	8005982 <_printf_i+0x1d2>
 80057d2:	2f58      	cmp	r7, #88	; 0x58
 80057d4:	f000 80a3 	beq.w	800591e <_printf_i+0x16e>
 80057d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057e0:	e03a      	b.n	8005858 <_printf_i+0xa8>
 80057e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057e6:	2b15      	cmp	r3, #21
 80057e8:	d8f6      	bhi.n	80057d8 <_printf_i+0x28>
 80057ea:	a101      	add	r1, pc, #4	; (adr r1, 80057f0 <_printf_i+0x40>)
 80057ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057f0:	08005849 	.word	0x08005849
 80057f4:	0800585d 	.word	0x0800585d
 80057f8:	080057d9 	.word	0x080057d9
 80057fc:	080057d9 	.word	0x080057d9
 8005800:	080057d9 	.word	0x080057d9
 8005804:	080057d9 	.word	0x080057d9
 8005808:	0800585d 	.word	0x0800585d
 800580c:	080057d9 	.word	0x080057d9
 8005810:	080057d9 	.word	0x080057d9
 8005814:	080057d9 	.word	0x080057d9
 8005818:	080057d9 	.word	0x080057d9
 800581c:	08005969 	.word	0x08005969
 8005820:	0800588d 	.word	0x0800588d
 8005824:	0800594b 	.word	0x0800594b
 8005828:	080057d9 	.word	0x080057d9
 800582c:	080057d9 	.word	0x080057d9
 8005830:	0800598b 	.word	0x0800598b
 8005834:	080057d9 	.word	0x080057d9
 8005838:	0800588d 	.word	0x0800588d
 800583c:	080057d9 	.word	0x080057d9
 8005840:	080057d9 	.word	0x080057d9
 8005844:	08005953 	.word	0x08005953
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	1d1a      	adds	r2, r3, #4
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	602a      	str	r2, [r5, #0]
 8005850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005858:	2301      	movs	r3, #1
 800585a:	e0a3      	b.n	80059a4 <_printf_i+0x1f4>
 800585c:	6820      	ldr	r0, [r4, #0]
 800585e:	6829      	ldr	r1, [r5, #0]
 8005860:	0606      	lsls	r6, r0, #24
 8005862:	f101 0304 	add.w	r3, r1, #4
 8005866:	d50a      	bpl.n	800587e <_printf_i+0xce>
 8005868:	680e      	ldr	r6, [r1, #0]
 800586a:	602b      	str	r3, [r5, #0]
 800586c:	2e00      	cmp	r6, #0
 800586e:	da03      	bge.n	8005878 <_printf_i+0xc8>
 8005870:	232d      	movs	r3, #45	; 0x2d
 8005872:	4276      	negs	r6, r6
 8005874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005878:	485e      	ldr	r0, [pc, #376]	; (80059f4 <_printf_i+0x244>)
 800587a:	230a      	movs	r3, #10
 800587c:	e019      	b.n	80058b2 <_printf_i+0x102>
 800587e:	680e      	ldr	r6, [r1, #0]
 8005880:	602b      	str	r3, [r5, #0]
 8005882:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005886:	bf18      	it	ne
 8005888:	b236      	sxthne	r6, r6
 800588a:	e7ef      	b.n	800586c <_printf_i+0xbc>
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	6820      	ldr	r0, [r4, #0]
 8005890:	1d19      	adds	r1, r3, #4
 8005892:	6029      	str	r1, [r5, #0]
 8005894:	0601      	lsls	r1, r0, #24
 8005896:	d501      	bpl.n	800589c <_printf_i+0xec>
 8005898:	681e      	ldr	r6, [r3, #0]
 800589a:	e002      	b.n	80058a2 <_printf_i+0xf2>
 800589c:	0646      	lsls	r6, r0, #25
 800589e:	d5fb      	bpl.n	8005898 <_printf_i+0xe8>
 80058a0:	881e      	ldrh	r6, [r3, #0]
 80058a2:	4854      	ldr	r0, [pc, #336]	; (80059f4 <_printf_i+0x244>)
 80058a4:	2f6f      	cmp	r7, #111	; 0x6f
 80058a6:	bf0c      	ite	eq
 80058a8:	2308      	moveq	r3, #8
 80058aa:	230a      	movne	r3, #10
 80058ac:	2100      	movs	r1, #0
 80058ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058b2:	6865      	ldr	r5, [r4, #4]
 80058b4:	60a5      	str	r5, [r4, #8]
 80058b6:	2d00      	cmp	r5, #0
 80058b8:	bfa2      	ittt	ge
 80058ba:	6821      	ldrge	r1, [r4, #0]
 80058bc:	f021 0104 	bicge.w	r1, r1, #4
 80058c0:	6021      	strge	r1, [r4, #0]
 80058c2:	b90e      	cbnz	r6, 80058c8 <_printf_i+0x118>
 80058c4:	2d00      	cmp	r5, #0
 80058c6:	d04d      	beq.n	8005964 <_printf_i+0x1b4>
 80058c8:	4615      	mov	r5, r2
 80058ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80058ce:	fb03 6711 	mls	r7, r3, r1, r6
 80058d2:	5dc7      	ldrb	r7, [r0, r7]
 80058d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058d8:	4637      	mov	r7, r6
 80058da:	42bb      	cmp	r3, r7
 80058dc:	460e      	mov	r6, r1
 80058de:	d9f4      	bls.n	80058ca <_printf_i+0x11a>
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d10b      	bne.n	80058fc <_printf_i+0x14c>
 80058e4:	6823      	ldr	r3, [r4, #0]
 80058e6:	07de      	lsls	r6, r3, #31
 80058e8:	d508      	bpl.n	80058fc <_printf_i+0x14c>
 80058ea:	6923      	ldr	r3, [r4, #16]
 80058ec:	6861      	ldr	r1, [r4, #4]
 80058ee:	4299      	cmp	r1, r3
 80058f0:	bfde      	ittt	le
 80058f2:	2330      	movle	r3, #48	; 0x30
 80058f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80058fc:	1b52      	subs	r2, r2, r5
 80058fe:	6122      	str	r2, [r4, #16]
 8005900:	f8cd a000 	str.w	sl, [sp]
 8005904:	464b      	mov	r3, r9
 8005906:	aa03      	add	r2, sp, #12
 8005908:	4621      	mov	r1, r4
 800590a:	4640      	mov	r0, r8
 800590c:	f7ff fee2 	bl	80056d4 <_printf_common>
 8005910:	3001      	adds	r0, #1
 8005912:	d14c      	bne.n	80059ae <_printf_i+0x1fe>
 8005914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005918:	b004      	add	sp, #16
 800591a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800591e:	4835      	ldr	r0, [pc, #212]	; (80059f4 <_printf_i+0x244>)
 8005920:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005924:	6829      	ldr	r1, [r5, #0]
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	f851 6b04 	ldr.w	r6, [r1], #4
 800592c:	6029      	str	r1, [r5, #0]
 800592e:	061d      	lsls	r5, r3, #24
 8005930:	d514      	bpl.n	800595c <_printf_i+0x1ac>
 8005932:	07df      	lsls	r7, r3, #31
 8005934:	bf44      	itt	mi
 8005936:	f043 0320 	orrmi.w	r3, r3, #32
 800593a:	6023      	strmi	r3, [r4, #0]
 800593c:	b91e      	cbnz	r6, 8005946 <_printf_i+0x196>
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	f023 0320 	bic.w	r3, r3, #32
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	2310      	movs	r3, #16
 8005948:	e7b0      	b.n	80058ac <_printf_i+0xfc>
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	f043 0320 	orr.w	r3, r3, #32
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	2378      	movs	r3, #120	; 0x78
 8005954:	4828      	ldr	r0, [pc, #160]	; (80059f8 <_printf_i+0x248>)
 8005956:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800595a:	e7e3      	b.n	8005924 <_printf_i+0x174>
 800595c:	0659      	lsls	r1, r3, #25
 800595e:	bf48      	it	mi
 8005960:	b2b6      	uxthmi	r6, r6
 8005962:	e7e6      	b.n	8005932 <_printf_i+0x182>
 8005964:	4615      	mov	r5, r2
 8005966:	e7bb      	b.n	80058e0 <_printf_i+0x130>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	6826      	ldr	r6, [r4, #0]
 800596c:	6961      	ldr	r1, [r4, #20]
 800596e:	1d18      	adds	r0, r3, #4
 8005970:	6028      	str	r0, [r5, #0]
 8005972:	0635      	lsls	r5, r6, #24
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	d501      	bpl.n	800597c <_printf_i+0x1cc>
 8005978:	6019      	str	r1, [r3, #0]
 800597a:	e002      	b.n	8005982 <_printf_i+0x1d2>
 800597c:	0670      	lsls	r0, r6, #25
 800597e:	d5fb      	bpl.n	8005978 <_printf_i+0x1c8>
 8005980:	8019      	strh	r1, [r3, #0]
 8005982:	2300      	movs	r3, #0
 8005984:	6123      	str	r3, [r4, #16]
 8005986:	4615      	mov	r5, r2
 8005988:	e7ba      	b.n	8005900 <_printf_i+0x150>
 800598a:	682b      	ldr	r3, [r5, #0]
 800598c:	1d1a      	adds	r2, r3, #4
 800598e:	602a      	str	r2, [r5, #0]
 8005990:	681d      	ldr	r5, [r3, #0]
 8005992:	6862      	ldr	r2, [r4, #4]
 8005994:	2100      	movs	r1, #0
 8005996:	4628      	mov	r0, r5
 8005998:	f7fa fc3a 	bl	8000210 <memchr>
 800599c:	b108      	cbz	r0, 80059a2 <_printf_i+0x1f2>
 800599e:	1b40      	subs	r0, r0, r5
 80059a0:	6060      	str	r0, [r4, #4]
 80059a2:	6863      	ldr	r3, [r4, #4]
 80059a4:	6123      	str	r3, [r4, #16]
 80059a6:	2300      	movs	r3, #0
 80059a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059ac:	e7a8      	b.n	8005900 <_printf_i+0x150>
 80059ae:	6923      	ldr	r3, [r4, #16]
 80059b0:	462a      	mov	r2, r5
 80059b2:	4649      	mov	r1, r9
 80059b4:	4640      	mov	r0, r8
 80059b6:	47d0      	blx	sl
 80059b8:	3001      	adds	r0, #1
 80059ba:	d0ab      	beq.n	8005914 <_printf_i+0x164>
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	079b      	lsls	r3, r3, #30
 80059c0:	d413      	bmi.n	80059ea <_printf_i+0x23a>
 80059c2:	68e0      	ldr	r0, [r4, #12]
 80059c4:	9b03      	ldr	r3, [sp, #12]
 80059c6:	4298      	cmp	r0, r3
 80059c8:	bfb8      	it	lt
 80059ca:	4618      	movlt	r0, r3
 80059cc:	e7a4      	b.n	8005918 <_printf_i+0x168>
 80059ce:	2301      	movs	r3, #1
 80059d0:	4632      	mov	r2, r6
 80059d2:	4649      	mov	r1, r9
 80059d4:	4640      	mov	r0, r8
 80059d6:	47d0      	blx	sl
 80059d8:	3001      	adds	r0, #1
 80059da:	d09b      	beq.n	8005914 <_printf_i+0x164>
 80059dc:	3501      	adds	r5, #1
 80059de:	68e3      	ldr	r3, [r4, #12]
 80059e0:	9903      	ldr	r1, [sp, #12]
 80059e2:	1a5b      	subs	r3, r3, r1
 80059e4:	42ab      	cmp	r3, r5
 80059e6:	dcf2      	bgt.n	80059ce <_printf_i+0x21e>
 80059e8:	e7eb      	b.n	80059c2 <_printf_i+0x212>
 80059ea:	2500      	movs	r5, #0
 80059ec:	f104 0619 	add.w	r6, r4, #25
 80059f0:	e7f5      	b.n	80059de <_printf_i+0x22e>
 80059f2:	bf00      	nop
 80059f4:	0800652d 	.word	0x0800652d
 80059f8:	0800653e 	.word	0x0800653e

080059fc <memcpy>:
 80059fc:	440a      	add	r2, r1
 80059fe:	4291      	cmp	r1, r2
 8005a00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005a04:	d100      	bne.n	8005a08 <memcpy+0xc>
 8005a06:	4770      	bx	lr
 8005a08:	b510      	push	{r4, lr}
 8005a0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a12:	4291      	cmp	r1, r2
 8005a14:	d1f9      	bne.n	8005a0a <memcpy+0xe>
 8005a16:	bd10      	pop	{r4, pc}

08005a18 <memmove>:
 8005a18:	4288      	cmp	r0, r1
 8005a1a:	b510      	push	{r4, lr}
 8005a1c:	eb01 0402 	add.w	r4, r1, r2
 8005a20:	d902      	bls.n	8005a28 <memmove+0x10>
 8005a22:	4284      	cmp	r4, r0
 8005a24:	4623      	mov	r3, r4
 8005a26:	d807      	bhi.n	8005a38 <memmove+0x20>
 8005a28:	1e43      	subs	r3, r0, #1
 8005a2a:	42a1      	cmp	r1, r4
 8005a2c:	d008      	beq.n	8005a40 <memmove+0x28>
 8005a2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a36:	e7f8      	b.n	8005a2a <memmove+0x12>
 8005a38:	4402      	add	r2, r0
 8005a3a:	4601      	mov	r1, r0
 8005a3c:	428a      	cmp	r2, r1
 8005a3e:	d100      	bne.n	8005a42 <memmove+0x2a>
 8005a40:	bd10      	pop	{r4, pc}
 8005a42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a4a:	e7f7      	b.n	8005a3c <memmove+0x24>

08005a4c <_free_r>:
 8005a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a4e:	2900      	cmp	r1, #0
 8005a50:	d044      	beq.n	8005adc <_free_r+0x90>
 8005a52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a56:	9001      	str	r0, [sp, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f1a1 0404 	sub.w	r4, r1, #4
 8005a5e:	bfb8      	it	lt
 8005a60:	18e4      	addlt	r4, r4, r3
 8005a62:	f000 f913 	bl	8005c8c <__malloc_lock>
 8005a66:	4a1e      	ldr	r2, [pc, #120]	; (8005ae0 <_free_r+0x94>)
 8005a68:	9801      	ldr	r0, [sp, #4]
 8005a6a:	6813      	ldr	r3, [r2, #0]
 8005a6c:	b933      	cbnz	r3, 8005a7c <_free_r+0x30>
 8005a6e:	6063      	str	r3, [r4, #4]
 8005a70:	6014      	str	r4, [r2, #0]
 8005a72:	b003      	add	sp, #12
 8005a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a78:	f000 b90e 	b.w	8005c98 <__malloc_unlock>
 8005a7c:	42a3      	cmp	r3, r4
 8005a7e:	d908      	bls.n	8005a92 <_free_r+0x46>
 8005a80:	6825      	ldr	r5, [r4, #0]
 8005a82:	1961      	adds	r1, r4, r5
 8005a84:	428b      	cmp	r3, r1
 8005a86:	bf01      	itttt	eq
 8005a88:	6819      	ldreq	r1, [r3, #0]
 8005a8a:	685b      	ldreq	r3, [r3, #4]
 8005a8c:	1949      	addeq	r1, r1, r5
 8005a8e:	6021      	streq	r1, [r4, #0]
 8005a90:	e7ed      	b.n	8005a6e <_free_r+0x22>
 8005a92:	461a      	mov	r2, r3
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	b10b      	cbz	r3, 8005a9c <_free_r+0x50>
 8005a98:	42a3      	cmp	r3, r4
 8005a9a:	d9fa      	bls.n	8005a92 <_free_r+0x46>
 8005a9c:	6811      	ldr	r1, [r2, #0]
 8005a9e:	1855      	adds	r5, r2, r1
 8005aa0:	42a5      	cmp	r5, r4
 8005aa2:	d10b      	bne.n	8005abc <_free_r+0x70>
 8005aa4:	6824      	ldr	r4, [r4, #0]
 8005aa6:	4421      	add	r1, r4
 8005aa8:	1854      	adds	r4, r2, r1
 8005aaa:	42a3      	cmp	r3, r4
 8005aac:	6011      	str	r1, [r2, #0]
 8005aae:	d1e0      	bne.n	8005a72 <_free_r+0x26>
 8005ab0:	681c      	ldr	r4, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	6053      	str	r3, [r2, #4]
 8005ab6:	4421      	add	r1, r4
 8005ab8:	6011      	str	r1, [r2, #0]
 8005aba:	e7da      	b.n	8005a72 <_free_r+0x26>
 8005abc:	d902      	bls.n	8005ac4 <_free_r+0x78>
 8005abe:	230c      	movs	r3, #12
 8005ac0:	6003      	str	r3, [r0, #0]
 8005ac2:	e7d6      	b.n	8005a72 <_free_r+0x26>
 8005ac4:	6825      	ldr	r5, [r4, #0]
 8005ac6:	1961      	adds	r1, r4, r5
 8005ac8:	428b      	cmp	r3, r1
 8005aca:	bf04      	itt	eq
 8005acc:	6819      	ldreq	r1, [r3, #0]
 8005ace:	685b      	ldreq	r3, [r3, #4]
 8005ad0:	6063      	str	r3, [r4, #4]
 8005ad2:	bf04      	itt	eq
 8005ad4:	1949      	addeq	r1, r1, r5
 8005ad6:	6021      	streq	r1, [r4, #0]
 8005ad8:	6054      	str	r4, [r2, #4]
 8005ada:	e7ca      	b.n	8005a72 <_free_r+0x26>
 8005adc:	b003      	add	sp, #12
 8005ade:	bd30      	pop	{r4, r5, pc}
 8005ae0:	200005cc 	.word	0x200005cc

08005ae4 <sbrk_aligned>:
 8005ae4:	b570      	push	{r4, r5, r6, lr}
 8005ae6:	4e0e      	ldr	r6, [pc, #56]	; (8005b20 <sbrk_aligned+0x3c>)
 8005ae8:	460c      	mov	r4, r1
 8005aea:	6831      	ldr	r1, [r6, #0]
 8005aec:	4605      	mov	r5, r0
 8005aee:	b911      	cbnz	r1, 8005af6 <sbrk_aligned+0x12>
 8005af0:	f000 f8bc 	bl	8005c6c <_sbrk_r>
 8005af4:	6030      	str	r0, [r6, #0]
 8005af6:	4621      	mov	r1, r4
 8005af8:	4628      	mov	r0, r5
 8005afa:	f000 f8b7 	bl	8005c6c <_sbrk_r>
 8005afe:	1c43      	adds	r3, r0, #1
 8005b00:	d00a      	beq.n	8005b18 <sbrk_aligned+0x34>
 8005b02:	1cc4      	adds	r4, r0, #3
 8005b04:	f024 0403 	bic.w	r4, r4, #3
 8005b08:	42a0      	cmp	r0, r4
 8005b0a:	d007      	beq.n	8005b1c <sbrk_aligned+0x38>
 8005b0c:	1a21      	subs	r1, r4, r0
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f000 f8ac 	bl	8005c6c <_sbrk_r>
 8005b14:	3001      	adds	r0, #1
 8005b16:	d101      	bne.n	8005b1c <sbrk_aligned+0x38>
 8005b18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	200005d0 	.word	0x200005d0

08005b24 <_malloc_r>:
 8005b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b28:	1ccd      	adds	r5, r1, #3
 8005b2a:	f025 0503 	bic.w	r5, r5, #3
 8005b2e:	3508      	adds	r5, #8
 8005b30:	2d0c      	cmp	r5, #12
 8005b32:	bf38      	it	cc
 8005b34:	250c      	movcc	r5, #12
 8005b36:	2d00      	cmp	r5, #0
 8005b38:	4607      	mov	r7, r0
 8005b3a:	db01      	blt.n	8005b40 <_malloc_r+0x1c>
 8005b3c:	42a9      	cmp	r1, r5
 8005b3e:	d905      	bls.n	8005b4c <_malloc_r+0x28>
 8005b40:	230c      	movs	r3, #12
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	2600      	movs	r6, #0
 8005b46:	4630      	mov	r0, r6
 8005b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b4c:	4e2e      	ldr	r6, [pc, #184]	; (8005c08 <_malloc_r+0xe4>)
 8005b4e:	f000 f89d 	bl	8005c8c <__malloc_lock>
 8005b52:	6833      	ldr	r3, [r6, #0]
 8005b54:	461c      	mov	r4, r3
 8005b56:	bb34      	cbnz	r4, 8005ba6 <_malloc_r+0x82>
 8005b58:	4629      	mov	r1, r5
 8005b5a:	4638      	mov	r0, r7
 8005b5c:	f7ff ffc2 	bl	8005ae4 <sbrk_aligned>
 8005b60:	1c43      	adds	r3, r0, #1
 8005b62:	4604      	mov	r4, r0
 8005b64:	d14d      	bne.n	8005c02 <_malloc_r+0xde>
 8005b66:	6834      	ldr	r4, [r6, #0]
 8005b68:	4626      	mov	r6, r4
 8005b6a:	2e00      	cmp	r6, #0
 8005b6c:	d140      	bne.n	8005bf0 <_malloc_r+0xcc>
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	4631      	mov	r1, r6
 8005b72:	4638      	mov	r0, r7
 8005b74:	eb04 0803 	add.w	r8, r4, r3
 8005b78:	f000 f878 	bl	8005c6c <_sbrk_r>
 8005b7c:	4580      	cmp	r8, r0
 8005b7e:	d13a      	bne.n	8005bf6 <_malloc_r+0xd2>
 8005b80:	6821      	ldr	r1, [r4, #0]
 8005b82:	3503      	adds	r5, #3
 8005b84:	1a6d      	subs	r5, r5, r1
 8005b86:	f025 0503 	bic.w	r5, r5, #3
 8005b8a:	3508      	adds	r5, #8
 8005b8c:	2d0c      	cmp	r5, #12
 8005b8e:	bf38      	it	cc
 8005b90:	250c      	movcc	r5, #12
 8005b92:	4629      	mov	r1, r5
 8005b94:	4638      	mov	r0, r7
 8005b96:	f7ff ffa5 	bl	8005ae4 <sbrk_aligned>
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	d02b      	beq.n	8005bf6 <_malloc_r+0xd2>
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	442b      	add	r3, r5
 8005ba2:	6023      	str	r3, [r4, #0]
 8005ba4:	e00e      	b.n	8005bc4 <_malloc_r+0xa0>
 8005ba6:	6822      	ldr	r2, [r4, #0]
 8005ba8:	1b52      	subs	r2, r2, r5
 8005baa:	d41e      	bmi.n	8005bea <_malloc_r+0xc6>
 8005bac:	2a0b      	cmp	r2, #11
 8005bae:	d916      	bls.n	8005bde <_malloc_r+0xba>
 8005bb0:	1961      	adds	r1, r4, r5
 8005bb2:	42a3      	cmp	r3, r4
 8005bb4:	6025      	str	r5, [r4, #0]
 8005bb6:	bf18      	it	ne
 8005bb8:	6059      	strne	r1, [r3, #4]
 8005bba:	6863      	ldr	r3, [r4, #4]
 8005bbc:	bf08      	it	eq
 8005bbe:	6031      	streq	r1, [r6, #0]
 8005bc0:	5162      	str	r2, [r4, r5]
 8005bc2:	604b      	str	r3, [r1, #4]
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	f104 060b 	add.w	r6, r4, #11
 8005bca:	f000 f865 	bl	8005c98 <__malloc_unlock>
 8005bce:	f026 0607 	bic.w	r6, r6, #7
 8005bd2:	1d23      	adds	r3, r4, #4
 8005bd4:	1af2      	subs	r2, r6, r3
 8005bd6:	d0b6      	beq.n	8005b46 <_malloc_r+0x22>
 8005bd8:	1b9b      	subs	r3, r3, r6
 8005bda:	50a3      	str	r3, [r4, r2]
 8005bdc:	e7b3      	b.n	8005b46 <_malloc_r+0x22>
 8005bde:	6862      	ldr	r2, [r4, #4]
 8005be0:	42a3      	cmp	r3, r4
 8005be2:	bf0c      	ite	eq
 8005be4:	6032      	streq	r2, [r6, #0]
 8005be6:	605a      	strne	r2, [r3, #4]
 8005be8:	e7ec      	b.n	8005bc4 <_malloc_r+0xa0>
 8005bea:	4623      	mov	r3, r4
 8005bec:	6864      	ldr	r4, [r4, #4]
 8005bee:	e7b2      	b.n	8005b56 <_malloc_r+0x32>
 8005bf0:	4634      	mov	r4, r6
 8005bf2:	6876      	ldr	r6, [r6, #4]
 8005bf4:	e7b9      	b.n	8005b6a <_malloc_r+0x46>
 8005bf6:	230c      	movs	r3, #12
 8005bf8:	603b      	str	r3, [r7, #0]
 8005bfa:	4638      	mov	r0, r7
 8005bfc:	f000 f84c 	bl	8005c98 <__malloc_unlock>
 8005c00:	e7a1      	b.n	8005b46 <_malloc_r+0x22>
 8005c02:	6025      	str	r5, [r4, #0]
 8005c04:	e7de      	b.n	8005bc4 <_malloc_r+0xa0>
 8005c06:	bf00      	nop
 8005c08:	200005cc 	.word	0x200005cc

08005c0c <_realloc_r>:
 8005c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c10:	4680      	mov	r8, r0
 8005c12:	4614      	mov	r4, r2
 8005c14:	460e      	mov	r6, r1
 8005c16:	b921      	cbnz	r1, 8005c22 <_realloc_r+0x16>
 8005c18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	f7ff bf81 	b.w	8005b24 <_malloc_r>
 8005c22:	b92a      	cbnz	r2, 8005c30 <_realloc_r+0x24>
 8005c24:	f7ff ff12 	bl	8005a4c <_free_r>
 8005c28:	4625      	mov	r5, r4
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c30:	f000 f838 	bl	8005ca4 <_malloc_usable_size_r>
 8005c34:	4284      	cmp	r4, r0
 8005c36:	4607      	mov	r7, r0
 8005c38:	d802      	bhi.n	8005c40 <_realloc_r+0x34>
 8005c3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c3e:	d812      	bhi.n	8005c66 <_realloc_r+0x5a>
 8005c40:	4621      	mov	r1, r4
 8005c42:	4640      	mov	r0, r8
 8005c44:	f7ff ff6e 	bl	8005b24 <_malloc_r>
 8005c48:	4605      	mov	r5, r0
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	d0ed      	beq.n	8005c2a <_realloc_r+0x1e>
 8005c4e:	42bc      	cmp	r4, r7
 8005c50:	4622      	mov	r2, r4
 8005c52:	4631      	mov	r1, r6
 8005c54:	bf28      	it	cs
 8005c56:	463a      	movcs	r2, r7
 8005c58:	f7ff fed0 	bl	80059fc <memcpy>
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	4640      	mov	r0, r8
 8005c60:	f7ff fef4 	bl	8005a4c <_free_r>
 8005c64:	e7e1      	b.n	8005c2a <_realloc_r+0x1e>
 8005c66:	4635      	mov	r5, r6
 8005c68:	e7df      	b.n	8005c2a <_realloc_r+0x1e>
	...

08005c6c <_sbrk_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	4d06      	ldr	r5, [pc, #24]	; (8005c88 <_sbrk_r+0x1c>)
 8005c70:	2300      	movs	r3, #0
 8005c72:	4604      	mov	r4, r0
 8005c74:	4608      	mov	r0, r1
 8005c76:	602b      	str	r3, [r5, #0]
 8005c78:	f7fb fcbc 	bl	80015f4 <_sbrk>
 8005c7c:	1c43      	adds	r3, r0, #1
 8005c7e:	d102      	bne.n	8005c86 <_sbrk_r+0x1a>
 8005c80:	682b      	ldr	r3, [r5, #0]
 8005c82:	b103      	cbz	r3, 8005c86 <_sbrk_r+0x1a>
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	bd38      	pop	{r3, r4, r5, pc}
 8005c88:	200005d4 	.word	0x200005d4

08005c8c <__malloc_lock>:
 8005c8c:	4801      	ldr	r0, [pc, #4]	; (8005c94 <__malloc_lock+0x8>)
 8005c8e:	f000 b811 	b.w	8005cb4 <__retarget_lock_acquire_recursive>
 8005c92:	bf00      	nop
 8005c94:	200005d8 	.word	0x200005d8

08005c98 <__malloc_unlock>:
 8005c98:	4801      	ldr	r0, [pc, #4]	; (8005ca0 <__malloc_unlock+0x8>)
 8005c9a:	f000 b80c 	b.w	8005cb6 <__retarget_lock_release_recursive>
 8005c9e:	bf00      	nop
 8005ca0:	200005d8 	.word	0x200005d8

08005ca4 <_malloc_usable_size_r>:
 8005ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ca8:	1f18      	subs	r0, r3, #4
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	bfbc      	itt	lt
 8005cae:	580b      	ldrlt	r3, [r1, r0]
 8005cb0:	18c0      	addlt	r0, r0, r3
 8005cb2:	4770      	bx	lr

08005cb4 <__retarget_lock_acquire_recursive>:
 8005cb4:	4770      	bx	lr

08005cb6 <__retarget_lock_release_recursive>:
 8005cb6:	4770      	bx	lr

08005cb8 <_init>:
 8005cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cba:	bf00      	nop
 8005cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cbe:	bc08      	pop	{r3}
 8005cc0:	469e      	mov	lr, r3
 8005cc2:	4770      	bx	lr

08005cc4 <_fini>:
 8005cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc6:	bf00      	nop
 8005cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cca:	bc08      	pop	{r3}
 8005ccc:	469e      	mov	lr, r3
 8005cce:	4770      	bx	lr
