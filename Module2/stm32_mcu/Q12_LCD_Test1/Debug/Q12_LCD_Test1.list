
Q12_LCD_Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002610  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080027e0  080027e0  000127e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800284c  0800284c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800284c  0800284c  0001284c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002854  08002854  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002854  08002854  00012854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002858  08002858  00012858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800285c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  080028cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080028cc  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d8b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012c6  00000000  00000000  00024e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004f0  00000000  00000000  000260f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000438  00000000  00000000  000265e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002107a  00000000  00000000  00026a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006d0c  00000000  00000000  00047a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c600d  00000000  00000000  0004e7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001147b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015cc  00000000  00000000  00114804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080027c8 	.word	0x080027c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080027c8 	.word	0x080027c8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80005d2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80005d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80005da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80005de:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80005e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005e2:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80005e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80005e6:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f80e 	bl	800061a <Lcd_init>

	return lcd;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	461d      	mov	r5, r3
 8000602:	f107 0410 	add.w	r4, r7, #16
 8000606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800060a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800060e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000612:	68f8      	ldr	r0, [r7, #12]
 8000614:	3728      	adds	r7, #40	; 0x28
 8000616:	46bd      	mov	sp, r7
 8000618:	bdb0      	pop	{r4, r5, r7, pc}

0800061a <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b082      	sub	sp, #8
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	7d9b      	ldrb	r3, [r3, #22]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d10c      	bne.n	8000644 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 800062a:	2133      	movs	r1, #51	; 0x33
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f000 f86f 	bl	8000710 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000632:	2132      	movs	r1, #50	; 0x32
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f000 f86b 	bl	8000710 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 800063a:	2128      	movs	r1, #40	; 0x28
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f000 f867 	bl	8000710 <lcd_write_command>
 8000642:	e003      	b.n	800064c <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000644:	2138      	movs	r1, #56	; 0x38
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f000 f862 	bl	8000710 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 800064c:	2101      	movs	r1, #1
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 f85e 	bl	8000710 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000654:	210c      	movs	r1, #12
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f000 f85a 	bl	8000710 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 800065c:	2106      	movs	r1, #6
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f000 f856 	bl	8000710 <lcd_write_command>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	683a      	ldr	r2, [r7, #0]
 800067c:	4906      	ldr	r1, [pc, #24]	; (8000698 <Lcd_int+0x2c>)
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fc34 	bl	8001eec <siprintf>

	Lcd_string(lcd, buffer);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f000 f806 	bl	800069c <Lcd_string>
}
 8000690:	bf00      	nop
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	080027e0 	.word	0x080027e0

0800069c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80006a6:	2300      	movs	r3, #0
 80006a8:	73fb      	strb	r3, [r7, #15]
 80006aa:	e00a      	b.n	80006c2 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	4413      	add	r3, r2
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 f858 	bl	800076c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	3301      	adds	r3, #1
 80006c0:	73fb      	strb	r3, [r7, #15]
 80006c2:	7bfc      	ldrb	r4, [r7, #15]
 80006c4:	6838      	ldr	r0, [r7, #0]
 80006c6:	f7ff fda3 	bl	8000210 <strlen>
 80006ca:	4603      	mov	r3, r0
 80006cc:	429c      	cmp	r4, r3
 80006ce:	d3ed      	bcc.n	80006ac <Lcd_string+0x10>
	}
}
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd90      	pop	{r4, r7, pc}
	...

080006dc <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	70fb      	strb	r3, [r7, #3]
 80006e8:	4613      	mov	r3, r2
 80006ea:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80006ec:	78fb      	ldrb	r3, [r7, #3]
 80006ee:	4a07      	ldr	r2, [pc, #28]	; (800070c <Lcd_cursor+0x30>)
 80006f0:	5cd2      	ldrb	r2, [r2, r3]
 80006f2:	78bb      	ldrb	r3, [r7, #2]
 80006f4:	4413      	add	r3, r2
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	3b80      	subs	r3, #128	; 0x80
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	4619      	mov	r1, r3
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f000 f806 	bl	8000710 <lcd_write_command>
	#endif
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	08002804 	.word	0x08002804

08000710 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6898      	ldr	r0, [r3, #8]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	899b      	ldrh	r3, [r3, #12]
 8000724:	2200      	movs	r2, #0
 8000726:	4619      	mov	r1, r3
 8000728:	f000 fde0 	bl	80012ec <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	7d9b      	ldrb	r3, [r3, #22]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d111      	bne.n	8000758 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	091b      	lsrs	r3, r3, #4
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2204      	movs	r2, #4
 800073c:	4619      	mov	r1, r3
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f000 f842 	bl	80007c8 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000744:	78fb      	ldrb	r3, [r7, #3]
 8000746:	f003 030f 	and.w	r3, r3, #15
 800074a:	b2db      	uxtb	r3, r3
 800074c:	2204      	movs	r2, #4
 800074e:	4619      	mov	r1, r3
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f000 f839 	bl	80007c8 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000756:	e005      	b.n	8000764 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	2208      	movs	r2, #8
 800075c:	4619      	mov	r1, r3
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f000 f832 	bl	80007c8 <lcd_write>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6898      	ldr	r0, [r3, #8]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	899b      	ldrh	r3, [r3, #12]
 8000780:	2201      	movs	r2, #1
 8000782:	4619      	mov	r1, r3
 8000784:	f000 fdb2 	bl	80012ec <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	7d9b      	ldrb	r3, [r3, #22]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d111      	bne.n	80007b4 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	091b      	lsrs	r3, r3, #4
 8000794:	b2db      	uxtb	r3, r3
 8000796:	2204      	movs	r2, #4
 8000798:	4619      	mov	r1, r3
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f000 f814 	bl	80007c8 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	f003 030f 	and.w	r3, r3, #15
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2204      	movs	r2, #4
 80007aa:	4619      	mov	r1, r3
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f000 f80b 	bl	80007c8 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80007b2:	e005      	b.n	80007c0 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80007b4:	78fb      	ldrb	r3, [r7, #3]
 80007b6:	2208      	movs	r2, #8
 80007b8:	4619      	mov	r1, r3
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f000 f804 	bl	80007c8 <lcd_write>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	70fb      	strb	r3, [r7, #3]
 80007d4:	4613      	mov	r3, r2
 80007d6:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80007d8:	2300      	movs	r3, #0
 80007da:	73fb      	strb	r3, [r7, #15]
 80007dc:	e019      	b.n	8000812 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	6818      	ldr	r0, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	685a      	ldr	r2, [r3, #4]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	4413      	add	r3, r2
 80007f4:	8819      	ldrh	r1, [r3, #0]
 80007f6:	78fa      	ldrb	r2, [r7, #3]
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	fa42 f303 	asr.w	r3, r2, r3
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	b2db      	uxtb	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	f000 fd70 	bl	80012ec <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	3301      	adds	r3, #1
 8000810:	73fb      	strb	r3, [r7, #15]
 8000812:	7bfa      	ldrb	r2, [r7, #15]
 8000814:	78bb      	ldrb	r3, [r7, #2]
 8000816:	429a      	cmp	r2, r3
 8000818:	d3e1      	bcc.n	80007de <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6918      	ldr	r0, [r3, #16]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	8a9b      	ldrh	r3, [r3, #20]
 8000822:	2201      	movs	r2, #1
 8000824:	4619      	mov	r1, r3
 8000826:	f000 fd61 	bl	80012ec <HAL_GPIO_WritePin>
	DELAY(1);
 800082a:	2001      	movs	r0, #1
 800082c:	f000 fac0 	bl	8000db0 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6918      	ldr	r0, [r3, #16]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	8a9b      	ldrh	r3, [r3, #20]
 8000838:	2200      	movs	r2, #0
 800083a:	4619      	mov	r1, r3
 800083c:	f000 fd56 	bl	80012ec <HAL_GPIO_WritePin>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000848:	b5b0      	push	{r4, r5, r7, lr}
 800084a:	b098      	sub	sp, #96	; 0x60
 800084c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084e:	f000 fa3d 	bl	8000ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000852:	f000 f859 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000856:	f000 f8c5 	bl	80009e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
    Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 800085a:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <main+0xb0>)
 800085c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000860:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000862:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
    Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_6};
 8000866:	4a25      	ldr	r2, [pc, #148]	; (80008fc <main+0xb4>)
 8000868:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800086c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000870:	e883 0003 	stmia.w	r3, {r0, r1}
    Lcd_HandleTypeDef lcd;
    // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
    lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 8000874:	4638      	mov	r0, r7
 8000876:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800087a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800087e:	2300      	movs	r3, #0
 8000880:	9303      	str	r3, [sp, #12]
 8000882:	2310      	movs	r3, #16
 8000884:	9302      	str	r3, [sp, #8]
 8000886:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <main+0xb8>)
 8000888:	9301      	str	r3, [sp, #4]
 800088a:	2320      	movs	r3, #32
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <main+0xb8>)
 8000890:	f7ff fe98 	bl	80005c4 <Lcd_create>
 8000894:	f107 041c 	add.w	r4, r7, #28
 8000898:	463d      	mov	r5, r7
 800089a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800089c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800089e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008a2:	e884 0003 	stmia.w	r4, {r0, r1}
    Lcd_cursor(&lcd, 0,5);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	2205      	movs	r2, #5
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ff14 	bl	80006dc <Lcd_cursor>
    Lcd_string(&lcd, "Deepak");
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4912      	ldr	r1, [pc, #72]	; (8000904 <main+0xbc>)
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff feee 	bl	800069c <Lcd_string>
      for ( int x = 1; x <= 200 ; x++ )
 80008c0:	2301      	movs	r3, #1
 80008c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80008c4:	e013      	b.n	80008ee <main+0xa6>
      {
        Lcd_cursor(&lcd, 1,7);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	2207      	movs	r2, #7
 80008cc:	2101      	movs	r1, #1
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ff04 	bl	80006dc <Lcd_cursor>
        Lcd_int(&lcd, x);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fec6 	bl	800066c <Lcd_int>
        HAL_Delay (1000);
 80008e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e4:	f000 fa64 	bl	8000db0 <HAL_Delay>
      for ( int x = 1; x <= 200 ; x++ )
 80008e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008ea:	3301      	adds	r3, #1
 80008ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80008ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008f0:	2bc8      	cmp	r3, #200	; 0xc8
 80008f2:	dde8      	ble.n	80008c6 <main+0x7e>
      }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <main+0xac>
 80008f6:	bf00      	nop
 80008f8:	080027ec 	.word	0x080027ec
 80008fc:	080027fc 	.word	0x080027fc
 8000900:	40020400 	.word	0x40020400
 8000904:	080027e4 	.word	0x080027e4

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b094      	sub	sp, #80	; 0x50
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	2234      	movs	r2, #52	; 0x34
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f001 fae0 	bl	8001edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <SystemClock_Config+0xd4>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	4a29      	ldr	r2, [pc, #164]	; (80009dc <SystemClock_Config+0xd4>)
 8000936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093a:	6413      	str	r3, [r2, #64]	; 0x40
 800093c:	4b27      	ldr	r3, [pc, #156]	; (80009dc <SystemClock_Config+0xd4>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000948:	2300      	movs	r3, #0
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <SystemClock_Config+0xd8>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000954:	4a22      	ldr	r2, [pc, #136]	; (80009e0 <SystemClock_Config+0xd8>)
 8000956:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095a:	6013      	str	r3, [r2, #0]
 800095c:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <SystemClock_Config+0xd8>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000968:	2302      	movs	r3, #2
 800096a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800096c:	2301      	movs	r3, #1
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000970:	2310      	movs	r3, #16
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000974:	2302      	movs	r3, #2
 8000976:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000978:	2300      	movs	r3, #0
 800097a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800097c:	2310      	movs	r3, #16
 800097e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000980:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000984:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000986:	2304      	movs	r3, #4
 8000988:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800098a:	2302      	movs	r3, #2
 800098c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800098e:	2302      	movs	r3, #2
 8000990:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4618      	mov	r0, r3
 8000998:	f000 ffd8 	bl	800194c <HAL_RCC_OscConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009a2:	f000 f8c9 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a6:	230f      	movs	r3, #15
 80009a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009aa:	2302      	movs	r3, #2
 80009ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009bc:	f107 0308 	add.w	r3, r7, #8
 80009c0:	2102      	movs	r1, #2
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fcac 	bl	8001320 <HAL_RCC_ClockConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80009ce:	f000 f8b3 	bl	8000b38 <Error_Handler>
  }
}
 80009d2:	bf00      	nop
 80009d4:	3750      	adds	r7, #80	; 0x50
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40007000 	.word	0x40007000

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b4a      	ldr	r3, [pc, #296]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a49      	ldr	r2, [pc, #292]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a04:	f043 0304 	orr.w	r3, r3, #4
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b47      	ldr	r3, [pc, #284]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0304 	and.w	r3, r3, #4
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b43      	ldr	r3, [pc, #268]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a42      	ldr	r2, [pc, #264]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b40      	ldr	r3, [pc, #256]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	4b3c      	ldr	r3, [pc, #240]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a3b      	ldr	r2, [pc, #236]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b39      	ldr	r3, [pc, #228]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a34      	ldr	r2, [pc, #208]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b32      	ldr	r3, [pc, #200]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000a70:	482e      	ldr	r0, [pc, #184]	; (8000b2c <MX_GPIO_Init+0x148>)
 8000a72:	f000 fc3b 	bl	80012ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8000a7c:	482c      	ldr	r0, [pc, #176]	; (8000b30 <MX_GPIO_Init+0x14c>)
 8000a7e:	f000 fc35 	bl	80012ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	482b      	ldr	r0, [pc, #172]	; (8000b34 <MX_GPIO_Init+0x150>)
 8000a88:	f000 fc30 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a92:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4824      	ldr	r0, [pc, #144]	; (8000b34 <MX_GPIO_Init+0x150>)
 8000aa4:	f000 fa8e 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa8:	230c      	movs	r3, #12
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab8:	2307      	movs	r3, #7
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	481a      	ldr	r0, [pc, #104]	; (8000b2c <MX_GPIO_Init+0x148>)
 8000ac4:	f000 fa7e 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8
                           PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000ac8:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000acc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4812      	ldr	r0, [pc, #72]	; (8000b2c <MX_GPIO_Init+0x148>)
 8000ae2:	f000 fa6f 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000ae6:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8000aea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	480c      	ldr	r0, [pc, #48]	; (8000b30 <MX_GPIO_Init+0x14c>)
 8000b00:	f000 fa60 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4806      	ldr	r0, [pc, #24]	; (8000b34 <MX_GPIO_Init+0x150>)
 8000b1c:	f000 fa52 	bl	8000fc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020000 	.word	0x40020000
 8000b30:	40020400 	.word	0x40020400
 8000b34:	40020800 	.word	0x40020800

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <Error_Handler+0x8>
	...

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b58:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b82:	2007      	movs	r0, #7
 8000b84:	f000 f9ea 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <NMI_Handler+0x4>

08000b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be0:	f000 f8c6 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf0:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <_sbrk+0x5c>)
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <_sbrk+0x60>)
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <_sbrk+0x64>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <_sbrk+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d207      	bcs.n	8000c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c18:	f001 f936 	bl	8001e88 <__errno>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	220c      	movs	r2, #12
 8000c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c26:	e009      	b.n	8000c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <_sbrk+0x64>)
 8000c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20020000 	.word	0x20020000
 8000c48:	00000400 	.word	0x00000400
 8000c4c:	2000008c 	.word	0x2000008c
 8000c50:	200000a8 	.word	0x200000a8

08000c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <SystemInit+0x20>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <SystemInit+0x20>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c7c:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c7e:	490e      	ldr	r1, [pc, #56]	; (8000cb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c80:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c94:	4c0b      	ldr	r4, [pc, #44]	; (8000cc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ca2:	f7ff ffd7 	bl	8000c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f001 f8f5 	bl	8001e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000caa:	f7ff fdcd 	bl	8000848 <main>
  bx  lr    
 8000cae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cbc:	0800285c 	.word	0x0800285c
  ldr r2, =_sbss
 8000cc0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cc4:	200000a4 	.word	0x200000a4

08000cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC_IRQHandler>
	...

08000ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <HAL_Init+0x40>)
 8000cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <HAL_Init+0x40>)
 8000ce2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <HAL_Init+0x40>)
 8000cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 f931 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 f808 	bl	8000d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d00:	f7ff ff20 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023c00 	.word	0x40023c00

08000d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_InitTick+0x54>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_InitTick+0x58>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f93b 	bl	8000faa <HAL_SYSTICK_Config>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00e      	b.n	8000d5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d80a      	bhi.n	8000d5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d44:	2200      	movs	r2, #0
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d4c:	f000 f911 	bl	8000f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <HAL_InitTick+0x5c>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e000      	b.n	8000d5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20000004 	.word	0x20000004

08000d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_IncTick+0x20>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x24>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <HAL_IncTick+0x24>)
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000090 	.word	0x20000090

08000d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <HAL_GetTick+0x14>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000090 	.word	0x20000090

08000db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db8:	f7ff ffee 	bl	8000d98 <HAL_GetTick>
 8000dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dc8:	d005      	beq.n	8000dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_Delay+0x44>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dd6:	bf00      	nop
 8000dd8:	f7ff ffde 	bl	8000d98 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d8f7      	bhi.n	8000dd8 <HAL_Delay+0x28>
  {
  }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f28:	d301      	bcc.n	8000f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00f      	b.n	8000f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <SysTick_Config+0x40>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f36:	210f      	movs	r1, #15
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f3c:	f7ff ff8e 	bl	8000e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <SysTick_Config+0x40>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <SysTick_Config+0x40>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff47 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f84:	f7ff ff5c 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f7ff ff8e 	bl	8000eb0 <NVIC_EncodePriority>
 8000f94:	4602      	mov	r2, r0
 8000f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff5d 	bl	8000e5c <__NVIC_SetPriority>
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ffb0 	bl	8000f18 <SysTick_Config>
 8000fb8:	4603      	mov	r3, r0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
 8000fde:	e165      	b.n	80012ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	f040 8154 	bne.w	80012a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b01      	cmp	r3, #1
 8001008:	d005      	beq.n	8001016 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001012:	2b02      	cmp	r3, #2
 8001014:	d130      	bne.n	8001078 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	091b      	lsrs	r3, r3, #4
 8001062:	f003 0201 	and.w	r2, r3, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b03      	cmp	r3, #3
 8001082:	d017      	beq.n	80010b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d123      	bne.n	8001108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	220f      	movs	r2, #15
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	691a      	ldr	r2, [r3, #16]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	08da      	lsrs	r2, r3, #3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3208      	adds	r2, #8
 8001102:	69b9      	ldr	r1, [r7, #24]
 8001104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0203 	and.w	r2, r3, #3
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 80ae 	beq.w	80012a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b5d      	ldr	r3, [pc, #372]	; (80012c4 <HAL_GPIO_Init+0x300>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	4a5c      	ldr	r2, [pc, #368]	; (80012c4 <HAL_GPIO_Init+0x300>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001158:	6453      	str	r3, [r2, #68]	; 0x44
 800115a:	4b5a      	ldr	r3, [pc, #360]	; (80012c4 <HAL_GPIO_Init+0x300>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001166:	4a58      	ldr	r2, [pc, #352]	; (80012c8 <HAL_GPIO_Init+0x304>)
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	220f      	movs	r2, #15
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4f      	ldr	r2, [pc, #316]	; (80012cc <HAL_GPIO_Init+0x308>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d025      	beq.n	80011de <HAL_GPIO_Init+0x21a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4e      	ldr	r2, [pc, #312]	; (80012d0 <HAL_GPIO_Init+0x30c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d01f      	beq.n	80011da <HAL_GPIO_Init+0x216>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4d      	ldr	r2, [pc, #308]	; (80012d4 <HAL_GPIO_Init+0x310>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d019      	beq.n	80011d6 <HAL_GPIO_Init+0x212>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4c      	ldr	r2, [pc, #304]	; (80012d8 <HAL_GPIO_Init+0x314>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0x20e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4b      	ldr	r2, [pc, #300]	; (80012dc <HAL_GPIO_Init+0x318>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00d      	beq.n	80011ce <HAL_GPIO_Init+0x20a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4a      	ldr	r2, [pc, #296]	; (80012e0 <HAL_GPIO_Init+0x31c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d007      	beq.n	80011ca <HAL_GPIO_Init+0x206>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a49      	ldr	r2, [pc, #292]	; (80012e4 <HAL_GPIO_Init+0x320>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_GPIO_Init+0x202>
 80011c2:	2306      	movs	r3, #6
 80011c4:	e00c      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011c6:	2307      	movs	r3, #7
 80011c8:	e00a      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011ca:	2305      	movs	r3, #5
 80011cc:	e008      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011ce:	2304      	movs	r3, #4
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011d2:	2303      	movs	r3, #3
 80011d4:	e004      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e002      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011de:	2300      	movs	r3, #0
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	f002 0203 	and.w	r2, r2, #3
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	4093      	lsls	r3, r2
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f0:	4935      	ldr	r1, [pc, #212]	; (80012c8 <HAL_GPIO_Init+0x304>)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fe:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <HAL_GPIO_Init+0x324>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001222:	4a31      	ldr	r2, [pc, #196]	; (80012e8 <HAL_GPIO_Init+0x324>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001228:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <HAL_GPIO_Init+0x324>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800124c:	4a26      	ldr	r2, [pc, #152]	; (80012e8 <HAL_GPIO_Init+0x324>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001252:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <HAL_GPIO_Init+0x324>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001276:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <HAL_GPIO_Init+0x324>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HAL_GPIO_Init+0x324>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a0:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <HAL_GPIO_Init+0x324>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3301      	adds	r3, #1
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	2b0f      	cmp	r3, #15
 80012b0:	f67f ae96 	bls.w	8000fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40013800 	.word	0x40013800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40021400 	.word	0x40021400
 80012e4:	40021800 	.word	0x40021800
 80012e8:	40013c00 	.word	0x40013c00

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	4613      	mov	r3, r2
 80012fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001308:	e003      	b.n	8001312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	041a      	lsls	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	619a      	str	r2, [r3, #24]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e0cc      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001334:	4b68      	ldr	r3, [pc, #416]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d90c      	bls.n	800135c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001342:	4b65      	ldr	r3, [pc, #404]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800134a:	4b63      	ldr	r3, [pc, #396]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d001      	beq.n	800135c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e0b8      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d020      	beq.n	80013aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001374:	4b59      	ldr	r3, [pc, #356]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	4a58      	ldr	r2, [pc, #352]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800137a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800137e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	2b00      	cmp	r3, #0
 800138a:	d005      	beq.n	8001398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800138c:	4b53      	ldr	r3, [pc, #332]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	4a52      	ldr	r2, [pc, #328]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001392:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001398:	4b50      	ldr	r3, [pc, #320]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	494d      	ldr	r1, [pc, #308]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d044      	beq.n	8001440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d107      	bne.n	80013ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013be:	4b47      	ldr	r3, [pc, #284]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d119      	bne.n	80013fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e07f      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d003      	beq.n	80013de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d107      	bne.n	80013ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013de:	4b3f      	ldr	r3, [pc, #252]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e06f      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ee:	4b3b      	ldr	r3, [pc, #236]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e067      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013fe:	4b37      	ldr	r3, [pc, #220]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f023 0203 	bic.w	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4934      	ldr	r1, [pc, #208]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800140c:	4313      	orrs	r3, r2
 800140e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001410:	f7ff fcc2 	bl	8000d98 <HAL_GetTick>
 8001414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001416:	e00a      	b.n	800142e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001418:	f7ff fcbe 	bl	8000d98 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	f241 3288 	movw	r2, #5000	; 0x1388
 8001426:	4293      	cmp	r3, r2
 8001428:	d901      	bls.n	800142e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e04f      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142e:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 020c 	and.w	r2, r3, #12
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	429a      	cmp	r2, r3
 800143e:	d1eb      	bne.n	8001418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001440:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 030f 	and.w	r3, r3, #15
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d20c      	bcs.n	8001468 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144e:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d001      	beq.n	8001468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e032      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	d008      	beq.n	8001486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	4916      	ldr	r1, [pc, #88]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	4313      	orrs	r3, r2
 8001484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d009      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	490e      	ldr	r1, [pc, #56]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014a6:	f000 f821 	bl	80014ec <HAL_RCC_GetSysClockFreq>
 80014aa:	4602      	mov	r2, r0
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	091b      	lsrs	r3, r3, #4
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	490a      	ldr	r1, [pc, #40]	; (80014e0 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	5ccb      	ldrb	r3, [r1, r3]
 80014ba:	fa22 f303 	lsr.w	r3, r2, r3
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 80014c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fc22 	bl	8000d10 <HAL_InitTick>

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023c00 	.word	0x40023c00
 80014dc:	40023800 	.word	0x40023800
 80014e0:	08002808 	.word	0x08002808
 80014e4:	20000000 	.word	0x20000000
 80014e8:	20000004 	.word	0x20000004

080014ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014f0:	b0ae      	sub	sp, #184	; 0xb8
 80014f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001512:	4bcb      	ldr	r3, [pc, #812]	; (8001840 <HAL_RCC_GetSysClockFreq+0x354>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	2b0c      	cmp	r3, #12
 800151c:	f200 8206 	bhi.w	800192c <HAL_RCC_GetSysClockFreq+0x440>
 8001520:	a201      	add	r2, pc, #4	; (adr r2, 8001528 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001526:	bf00      	nop
 8001528:	0800155d 	.word	0x0800155d
 800152c:	0800192d 	.word	0x0800192d
 8001530:	0800192d 	.word	0x0800192d
 8001534:	0800192d 	.word	0x0800192d
 8001538:	08001565 	.word	0x08001565
 800153c:	0800192d 	.word	0x0800192d
 8001540:	0800192d 	.word	0x0800192d
 8001544:	0800192d 	.word	0x0800192d
 8001548:	0800156d 	.word	0x0800156d
 800154c:	0800192d 	.word	0x0800192d
 8001550:	0800192d 	.word	0x0800192d
 8001554:	0800192d 	.word	0x0800192d
 8001558:	0800175d 	.word	0x0800175d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800155c:	4bb9      	ldr	r3, [pc, #740]	; (8001844 <HAL_RCC_GetSysClockFreq+0x358>)
 800155e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001562:	e1e7      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001564:	4bb8      	ldr	r3, [pc, #736]	; (8001848 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001566:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800156a:	e1e3      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800156c:	4bb4      	ldr	r3, [pc, #720]	; (8001840 <HAL_RCC_GetSysClockFreq+0x354>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001574:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001578:	4bb1      	ldr	r3, [pc, #708]	; (8001840 <HAL_RCC_GetSysClockFreq+0x354>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d071      	beq.n	8001668 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001584:	4bae      	ldr	r3, [pc, #696]	; (8001840 <HAL_RCC_GetSysClockFreq+0x354>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	099b      	lsrs	r3, r3, #6
 800158a:	2200      	movs	r2, #0
 800158c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001590:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001594:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800159c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80015a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80015aa:	4622      	mov	r2, r4
 80015ac:	462b      	mov	r3, r5
 80015ae:	f04f 0000 	mov.w	r0, #0
 80015b2:	f04f 0100 	mov.w	r1, #0
 80015b6:	0159      	lsls	r1, r3, #5
 80015b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015bc:	0150      	lsls	r0, r2, #5
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4621      	mov	r1, r4
 80015c4:	1a51      	subs	r1, r2, r1
 80015c6:	6439      	str	r1, [r7, #64]	; 0x40
 80015c8:	4629      	mov	r1, r5
 80015ca:	eb63 0301 	sbc.w	r3, r3, r1
 80015ce:	647b      	str	r3, [r7, #68]	; 0x44
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80015dc:	4649      	mov	r1, r9
 80015de:	018b      	lsls	r3, r1, #6
 80015e0:	4641      	mov	r1, r8
 80015e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015e6:	4641      	mov	r1, r8
 80015e8:	018a      	lsls	r2, r1, #6
 80015ea:	4641      	mov	r1, r8
 80015ec:	1a51      	subs	r1, r2, r1
 80015ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80015f0:	4649      	mov	r1, r9
 80015f2:	eb63 0301 	sbc.w	r3, r3, r1
 80015f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	f04f 0300 	mov.w	r3, #0
 8001600:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001604:	4649      	mov	r1, r9
 8001606:	00cb      	lsls	r3, r1, #3
 8001608:	4641      	mov	r1, r8
 800160a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800160e:	4641      	mov	r1, r8
 8001610:	00ca      	lsls	r2, r1, #3
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	4603      	mov	r3, r0
 8001618:	4622      	mov	r2, r4
 800161a:	189b      	adds	r3, r3, r2
 800161c:	633b      	str	r3, [r7, #48]	; 0x30
 800161e:	462b      	mov	r3, r5
 8001620:	460a      	mov	r2, r1
 8001622:	eb42 0303 	adc.w	r3, r2, r3
 8001626:	637b      	str	r3, [r7, #52]	; 0x34
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001634:	4629      	mov	r1, r5
 8001636:	024b      	lsls	r3, r1, #9
 8001638:	4621      	mov	r1, r4
 800163a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800163e:	4621      	mov	r1, r4
 8001640:	024a      	lsls	r2, r1, #9
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800164a:	2200      	movs	r2, #0
 800164c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001650:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001654:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001658:	f7fe fe32 	bl	80002c0 <__aeabi_uldivmod>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4613      	mov	r3, r2
 8001662:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001666:	e067      	b.n	8001738 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001668:	4b75      	ldr	r3, [pc, #468]	; (8001840 <HAL_RCC_GetSysClockFreq+0x354>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	099b      	lsrs	r3, r3, #6
 800166e:	2200      	movs	r2, #0
 8001670:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001674:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001678:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800167c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001680:	67bb      	str	r3, [r7, #120]	; 0x78
 8001682:	2300      	movs	r3, #0
 8001684:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001686:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800168a:	4622      	mov	r2, r4
 800168c:	462b      	mov	r3, r5
 800168e:	f04f 0000 	mov.w	r0, #0
 8001692:	f04f 0100 	mov.w	r1, #0
 8001696:	0159      	lsls	r1, r3, #5
 8001698:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800169c:	0150      	lsls	r0, r2, #5
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4621      	mov	r1, r4
 80016a4:	1a51      	subs	r1, r2, r1
 80016a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80016a8:	4629      	mov	r1, r5
 80016aa:	eb63 0301 	sbc.w	r3, r3, r1
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80016bc:	4649      	mov	r1, r9
 80016be:	018b      	lsls	r3, r1, #6
 80016c0:	4641      	mov	r1, r8
 80016c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016c6:	4641      	mov	r1, r8
 80016c8:	018a      	lsls	r2, r1, #6
 80016ca:	4641      	mov	r1, r8
 80016cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80016d0:	4649      	mov	r1, r9
 80016d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80016ea:	4692      	mov	sl, r2
 80016ec:	469b      	mov	fp, r3
 80016ee:	4623      	mov	r3, r4
 80016f0:	eb1a 0303 	adds.w	r3, sl, r3
 80016f4:	623b      	str	r3, [r7, #32]
 80016f6:	462b      	mov	r3, r5
 80016f8:	eb4b 0303 	adc.w	r3, fp, r3
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800170a:	4629      	mov	r1, r5
 800170c:	028b      	lsls	r3, r1, #10
 800170e:	4621      	mov	r1, r4
 8001710:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001714:	4621      	mov	r1, r4
 8001716:	028a      	lsls	r2, r1, #10
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001720:	2200      	movs	r2, #0
 8001722:	673b      	str	r3, [r7, #112]	; 0x70
 8001724:	677a      	str	r2, [r7, #116]	; 0x74
 8001726:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800172a:	f7fe fdc9 	bl	80002c0 <__aeabi_uldivmod>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4613      	mov	r3, r2
 8001734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001738:	4b41      	ldr	r3, [pc, #260]	; (8001840 <HAL_RCC_GetSysClockFreq+0x354>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	0c1b      	lsrs	r3, r3, #16
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	3301      	adds	r3, #1
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800174a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800174e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001752:	fbb2 f3f3 	udiv	r3, r2, r3
 8001756:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800175a:	e0eb      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800175c:	4b38      	ldr	r3, [pc, #224]	; (8001840 <HAL_RCC_GetSysClockFreq+0x354>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001768:	4b35      	ldr	r3, [pc, #212]	; (8001840 <HAL_RCC_GetSysClockFreq+0x354>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d06b      	beq.n	800184c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001774:	4b32      	ldr	r3, [pc, #200]	; (8001840 <HAL_RCC_GetSysClockFreq+0x354>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	099b      	lsrs	r3, r3, #6
 800177a:	2200      	movs	r2, #0
 800177c:	66bb      	str	r3, [r7, #104]	; 0x68
 800177e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001780:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001786:	663b      	str	r3, [r7, #96]	; 0x60
 8001788:	2300      	movs	r3, #0
 800178a:	667b      	str	r3, [r7, #100]	; 0x64
 800178c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001790:	4622      	mov	r2, r4
 8001792:	462b      	mov	r3, r5
 8001794:	f04f 0000 	mov.w	r0, #0
 8001798:	f04f 0100 	mov.w	r1, #0
 800179c:	0159      	lsls	r1, r3, #5
 800179e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017a2:	0150      	lsls	r0, r2, #5
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4621      	mov	r1, r4
 80017aa:	1a51      	subs	r1, r2, r1
 80017ac:	61b9      	str	r1, [r7, #24]
 80017ae:	4629      	mov	r1, r5
 80017b0:	eb63 0301 	sbc.w	r3, r3, r1
 80017b4:	61fb      	str	r3, [r7, #28]
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80017c2:	4659      	mov	r1, fp
 80017c4:	018b      	lsls	r3, r1, #6
 80017c6:	4651      	mov	r1, sl
 80017c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017cc:	4651      	mov	r1, sl
 80017ce:	018a      	lsls	r2, r1, #6
 80017d0:	4651      	mov	r1, sl
 80017d2:	ebb2 0801 	subs.w	r8, r2, r1
 80017d6:	4659      	mov	r1, fp
 80017d8:	eb63 0901 	sbc.w	r9, r3, r1
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017f0:	4690      	mov	r8, r2
 80017f2:	4699      	mov	r9, r3
 80017f4:	4623      	mov	r3, r4
 80017f6:	eb18 0303 	adds.w	r3, r8, r3
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	462b      	mov	r3, r5
 80017fe:	eb49 0303 	adc.w	r3, r9, r3
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001810:	4629      	mov	r1, r5
 8001812:	024b      	lsls	r3, r1, #9
 8001814:	4621      	mov	r1, r4
 8001816:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800181a:	4621      	mov	r1, r4
 800181c:	024a      	lsls	r2, r1, #9
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001826:	2200      	movs	r2, #0
 8001828:	65bb      	str	r3, [r7, #88]	; 0x58
 800182a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800182c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001830:	f7fe fd46 	bl	80002c0 <__aeabi_uldivmod>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4613      	mov	r3, r2
 800183a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800183e:	e065      	b.n	800190c <HAL_RCC_GetSysClockFreq+0x420>
 8001840:	40023800 	.word	0x40023800
 8001844:	00f42400 	.word	0x00f42400
 8001848:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800184c:	4b3d      	ldr	r3, [pc, #244]	; (8001944 <HAL_RCC_GetSysClockFreq+0x458>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	099b      	lsrs	r3, r3, #6
 8001852:	2200      	movs	r2, #0
 8001854:	4618      	mov	r0, r3
 8001856:	4611      	mov	r1, r2
 8001858:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800185c:	653b      	str	r3, [r7, #80]	; 0x50
 800185e:	2300      	movs	r3, #0
 8001860:	657b      	str	r3, [r7, #84]	; 0x54
 8001862:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001866:	4642      	mov	r2, r8
 8001868:	464b      	mov	r3, r9
 800186a:	f04f 0000 	mov.w	r0, #0
 800186e:	f04f 0100 	mov.w	r1, #0
 8001872:	0159      	lsls	r1, r3, #5
 8001874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001878:	0150      	lsls	r0, r2, #5
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4641      	mov	r1, r8
 8001880:	1a51      	subs	r1, r2, r1
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	4649      	mov	r1, r9
 8001886:	eb63 0301 	sbc.w	r3, r3, r1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001898:	4659      	mov	r1, fp
 800189a:	018b      	lsls	r3, r1, #6
 800189c:	4651      	mov	r1, sl
 800189e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018a2:	4651      	mov	r1, sl
 80018a4:	018a      	lsls	r2, r1, #6
 80018a6:	4651      	mov	r1, sl
 80018a8:	1a54      	subs	r4, r2, r1
 80018aa:	4659      	mov	r1, fp
 80018ac:	eb63 0501 	sbc.w	r5, r3, r1
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	f04f 0300 	mov.w	r3, #0
 80018b8:	00eb      	lsls	r3, r5, #3
 80018ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018be:	00e2      	lsls	r2, r4, #3
 80018c0:	4614      	mov	r4, r2
 80018c2:	461d      	mov	r5, r3
 80018c4:	4643      	mov	r3, r8
 80018c6:	18e3      	adds	r3, r4, r3
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	464b      	mov	r3, r9
 80018cc:	eb45 0303 	adc.w	r3, r5, r3
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018de:	4629      	mov	r1, r5
 80018e0:	028b      	lsls	r3, r1, #10
 80018e2:	4621      	mov	r1, r4
 80018e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018e8:	4621      	mov	r1, r4
 80018ea:	028a      	lsls	r2, r1, #10
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018f4:	2200      	movs	r2, #0
 80018f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80018f8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80018fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80018fe:	f7fe fcdf 	bl	80002c0 <__aeabi_uldivmod>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4613      	mov	r3, r2
 8001908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800190c:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <HAL_RCC_GetSysClockFreq+0x458>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	0f1b      	lsrs	r3, r3, #28
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800191a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800191e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001922:	fbb2 f3f3 	udiv	r3, r2, r3
 8001926:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800192a:	e003      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_RCC_GetSysClockFreq+0x45c>)
 800192e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001932:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001934:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001938:	4618      	mov	r0, r3
 800193a:	37b8      	adds	r7, #184	; 0xb8
 800193c:	46bd      	mov	sp, r7
 800193e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	00f42400 	.word	0x00f42400

0800194c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e28d      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8083 	beq.w	8001a72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800196c:	4b94      	ldr	r3, [pc, #592]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b04      	cmp	r3, #4
 8001976:	d019      	beq.n	80019ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001978:	4b91      	ldr	r3, [pc, #580]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001980:	2b08      	cmp	r3, #8
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001984:	4b8e      	ldr	r3, [pc, #568]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001990:	d00c      	beq.n	80019ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001992:	4b8b      	ldr	r3, [pc, #556]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800199a:	2b0c      	cmp	r3, #12
 800199c:	d112      	bne.n	80019c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199e:	4b88      	ldr	r3, [pc, #544]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019aa:	d10b      	bne.n	80019c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	4b84      	ldr	r3, [pc, #528]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d05b      	beq.n	8001a70 <HAL_RCC_OscConfig+0x124>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d157      	bne.n	8001a70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e25a      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019cc:	d106      	bne.n	80019dc <HAL_RCC_OscConfig+0x90>
 80019ce:	4b7c      	ldr	r3, [pc, #496]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a7b      	ldr	r2, [pc, #492]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e01d      	b.n	8001a18 <HAL_RCC_OscConfig+0xcc>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0xb4>
 80019e6:	4b76      	ldr	r3, [pc, #472]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a75      	ldr	r2, [pc, #468]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b73      	ldr	r3, [pc, #460]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a72      	ldr	r2, [pc, #456]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e00b      	b.n	8001a18 <HAL_RCC_OscConfig+0xcc>
 8001a00:	4b6f      	ldr	r3, [pc, #444]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a6e      	ldr	r2, [pc, #440]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b6c      	ldr	r3, [pc, #432]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a6b      	ldr	r2, [pc, #428]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d013      	beq.n	8001a48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff f9ba 	bl	8000d98 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff f9b6 	bl	8000d98 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e21f      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b61      	ldr	r3, [pc, #388]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0xdc>
 8001a46:	e014      	b.n	8001a72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff f9a6 	bl	8000d98 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff f9a2 	bl	8000d98 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	; 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e20b      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	4b57      	ldr	r3, [pc, #348]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x104>
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d06f      	beq.n	8001b5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a7e:	4b50      	ldr	r3, [pc, #320]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d017      	beq.n	8001aba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a8a:	4b4d      	ldr	r3, [pc, #308]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d105      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a96:	4b4a      	ldr	r3, [pc, #296]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00b      	beq.n	8001aba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aa2:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001aaa:	2b0c      	cmp	r3, #12
 8001aac:	d11c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aae:	4b44      	ldr	r3, [pc, #272]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d116      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aba:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x186>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d001      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e1d3      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4937      	ldr	r1, [pc, #220]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	e03a      	b.n	8001b5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d020      	beq.n	8001b32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af0:	4b34      	ldr	r3, [pc, #208]	; (8001bc4 <HAL_RCC_OscConfig+0x278>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff f94f 	bl	8000d98 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001afe:	f7ff f94b 	bl	8000d98 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e1b4      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b10:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1c:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4925      	ldr	r1, [pc, #148]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
 8001b30:	e015      	b.n	8001b5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b32:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <HAL_RCC_OscConfig+0x278>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff f92e 	bl	8000d98 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b40:	f7ff f92a 	bl	8000d98 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e193      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b52:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d036      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d016      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_RCC_OscConfig+0x27c>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b78:	f7ff f90e 	bl	8000d98 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b80:	f7ff f90a 	bl	8000d98 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e173      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x234>
 8001b9e:	e01b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_RCC_OscConfig+0x27c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba6:	f7ff f8f7 	bl	8000d98 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bac:	e00e      	b.n	8001bcc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bae:	f7ff f8f3 	bl	8000d98 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d907      	bls.n	8001bcc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e15c      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	42470000 	.word	0x42470000
 8001bc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bcc:	4b8a      	ldr	r3, [pc, #552]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1ea      	bne.n	8001bae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 8097 	beq.w	8001d14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bea:	4b83      	ldr	r3, [pc, #524]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10f      	bne.n	8001c16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	4b7f      	ldr	r3, [pc, #508]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a7e      	ldr	r2, [pc, #504]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b7c      	ldr	r3, [pc, #496]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c12:	2301      	movs	r3, #1
 8001c14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c16:	4b79      	ldr	r3, [pc, #484]	; (8001dfc <HAL_RCC_OscConfig+0x4b0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d118      	bne.n	8001c54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c22:	4b76      	ldr	r3, [pc, #472]	; (8001dfc <HAL_RCC_OscConfig+0x4b0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a75      	ldr	r2, [pc, #468]	; (8001dfc <HAL_RCC_OscConfig+0x4b0>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f8b3 	bl	8000d98 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c36:	f7ff f8af 	bl	8000d98 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e118      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	4b6c      	ldr	r3, [pc, #432]	; (8001dfc <HAL_RCC_OscConfig+0x4b0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_OscConfig+0x31e>
 8001c5c:	4b66      	ldr	r3, [pc, #408]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c60:	4a65      	ldr	r2, [pc, #404]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6713      	str	r3, [r2, #112]	; 0x70
 8001c68:	e01c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b05      	cmp	r3, #5
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x340>
 8001c72:	4b61      	ldr	r3, [pc, #388]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c76:	4a60      	ldr	r2, [pc, #384]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c78:	f043 0304 	orr.w	r3, r3, #4
 8001c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7e:	4b5e      	ldr	r3, [pc, #376]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	4a5d      	ldr	r2, [pc, #372]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c8c:	4b5a      	ldr	r3, [pc, #360]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	4a59      	ldr	r2, [pc, #356]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c92:	f023 0301 	bic.w	r3, r3, #1
 8001c96:	6713      	str	r3, [r2, #112]	; 0x70
 8001c98:	4b57      	ldr	r3, [pc, #348]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9c:	4a56      	ldr	r2, [pc, #344]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c9e:	f023 0304 	bic.w	r3, r3, #4
 8001ca2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d015      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cac:	f7ff f874 	bl	8000d98 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb4:	f7ff f870 	bl	8000d98 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e0d7      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cca:	4b4b      	ldr	r3, [pc, #300]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0ee      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x368>
 8001cd6:	e014      	b.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd8:	f7ff f85e 	bl	8000d98 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce0:	f7ff f85a 	bl	8000d98 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0c1      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf6:	4b40      	ldr	r3, [pc, #256]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1ee      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d105      	bne.n	8001d14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d08:	4b3b      	ldr	r3, [pc, #236]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	4a3a      	ldr	r2, [pc, #232]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80ad 	beq.w	8001e78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d1e:	4b36      	ldr	r3, [pc, #216]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d060      	beq.n	8001dec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d145      	bne.n	8001dbe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d32:	4b33      	ldr	r3, [pc, #204]	; (8001e00 <HAL_RCC_OscConfig+0x4b4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff f82e 	bl	8000d98 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d40:	f7ff f82a 	bl	8000d98 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e093      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d52:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69da      	ldr	r2, [r3, #28]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	019b      	lsls	r3, r3, #6
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d74:	085b      	lsrs	r3, r3, #1
 8001d76:	3b01      	subs	r3, #1
 8001d78:	041b      	lsls	r3, r3, #16
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	061b      	lsls	r3, r3, #24
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	071b      	lsls	r3, r3, #28
 8001d8a:	491b      	ldr	r1, [pc, #108]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d90:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <HAL_RCC_OscConfig+0x4b4>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d96:	f7fe ffff 	bl	8000d98 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9e:	f7fe fffb 	bl	8000d98 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e064      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x452>
 8001dbc:	e05c      	b.n	8001e78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_RCC_OscConfig+0x4b4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7fe ffe8 	bl	8000d98 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dcc:	f7fe ffe4 	bl	8000d98 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e04d      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x480>
 8001dea:	e045      	b.n	8001e78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d107      	bne.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e040      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40007000 	.word	0x40007000
 8001e00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <HAL_RCC_OscConfig+0x538>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d030      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d129      	bne.n	8001e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d122      	bne.n	8001e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e34:	4013      	ands	r3, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d119      	bne.n	8001e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	085b      	lsrs	r3, r3, #1
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d10f      	bne.n	8001e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800

08001e88 <__errno>:
 8001e88:	4b01      	ldr	r3, [pc, #4]	; (8001e90 <__errno+0x8>)
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	2000000c 	.word	0x2000000c

08001e94 <__libc_init_array>:
 8001e94:	b570      	push	{r4, r5, r6, lr}
 8001e96:	4d0d      	ldr	r5, [pc, #52]	; (8001ecc <__libc_init_array+0x38>)
 8001e98:	4c0d      	ldr	r4, [pc, #52]	; (8001ed0 <__libc_init_array+0x3c>)
 8001e9a:	1b64      	subs	r4, r4, r5
 8001e9c:	10a4      	asrs	r4, r4, #2
 8001e9e:	2600      	movs	r6, #0
 8001ea0:	42a6      	cmp	r6, r4
 8001ea2:	d109      	bne.n	8001eb8 <__libc_init_array+0x24>
 8001ea4:	4d0b      	ldr	r5, [pc, #44]	; (8001ed4 <__libc_init_array+0x40>)
 8001ea6:	4c0c      	ldr	r4, [pc, #48]	; (8001ed8 <__libc_init_array+0x44>)
 8001ea8:	f000 fc8e 	bl	80027c8 <_init>
 8001eac:	1b64      	subs	r4, r4, r5
 8001eae:	10a4      	asrs	r4, r4, #2
 8001eb0:	2600      	movs	r6, #0
 8001eb2:	42a6      	cmp	r6, r4
 8001eb4:	d105      	bne.n	8001ec2 <__libc_init_array+0x2e>
 8001eb6:	bd70      	pop	{r4, r5, r6, pc}
 8001eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ebc:	4798      	blx	r3
 8001ebe:	3601      	adds	r6, #1
 8001ec0:	e7ee      	b.n	8001ea0 <__libc_init_array+0xc>
 8001ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ec6:	4798      	blx	r3
 8001ec8:	3601      	adds	r6, #1
 8001eca:	e7f2      	b.n	8001eb2 <__libc_init_array+0x1e>
 8001ecc:	08002854 	.word	0x08002854
 8001ed0:	08002854 	.word	0x08002854
 8001ed4:	08002854 	.word	0x08002854
 8001ed8:	08002858 	.word	0x08002858

08001edc <memset>:
 8001edc:	4402      	add	r2, r0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d100      	bne.n	8001ee6 <memset+0xa>
 8001ee4:	4770      	bx	lr
 8001ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8001eea:	e7f9      	b.n	8001ee0 <memset+0x4>

08001eec <siprintf>:
 8001eec:	b40e      	push	{r1, r2, r3}
 8001eee:	b500      	push	{lr}
 8001ef0:	b09c      	sub	sp, #112	; 0x70
 8001ef2:	ab1d      	add	r3, sp, #116	; 0x74
 8001ef4:	9002      	str	r0, [sp, #8]
 8001ef6:	9006      	str	r0, [sp, #24]
 8001ef8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001efc:	4809      	ldr	r0, [pc, #36]	; (8001f24 <siprintf+0x38>)
 8001efe:	9107      	str	r1, [sp, #28]
 8001f00:	9104      	str	r1, [sp, #16]
 8001f02:	4909      	ldr	r1, [pc, #36]	; (8001f28 <siprintf+0x3c>)
 8001f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f08:	9105      	str	r1, [sp, #20]
 8001f0a:	6800      	ldr	r0, [r0, #0]
 8001f0c:	9301      	str	r3, [sp, #4]
 8001f0e:	a902      	add	r1, sp, #8
 8001f10:	f000 f868 	bl	8001fe4 <_svfiprintf_r>
 8001f14:	9b02      	ldr	r3, [sp, #8]
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]
 8001f1a:	b01c      	add	sp, #112	; 0x70
 8001f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f20:	b003      	add	sp, #12
 8001f22:	4770      	bx	lr
 8001f24:	2000000c 	.word	0x2000000c
 8001f28:	ffff0208 	.word	0xffff0208

08001f2c <__ssputs_r>:
 8001f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f30:	688e      	ldr	r6, [r1, #8]
 8001f32:	429e      	cmp	r6, r3
 8001f34:	4682      	mov	sl, r0
 8001f36:	460c      	mov	r4, r1
 8001f38:	4690      	mov	r8, r2
 8001f3a:	461f      	mov	r7, r3
 8001f3c:	d838      	bhi.n	8001fb0 <__ssputs_r+0x84>
 8001f3e:	898a      	ldrh	r2, [r1, #12]
 8001f40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001f44:	d032      	beq.n	8001fac <__ssputs_r+0x80>
 8001f46:	6825      	ldr	r5, [r4, #0]
 8001f48:	6909      	ldr	r1, [r1, #16]
 8001f4a:	eba5 0901 	sub.w	r9, r5, r1
 8001f4e:	6965      	ldr	r5, [r4, #20]
 8001f50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001f58:	3301      	adds	r3, #1
 8001f5a:	444b      	add	r3, r9
 8001f5c:	106d      	asrs	r5, r5, #1
 8001f5e:	429d      	cmp	r5, r3
 8001f60:	bf38      	it	cc
 8001f62:	461d      	movcc	r5, r3
 8001f64:	0553      	lsls	r3, r2, #21
 8001f66:	d531      	bpl.n	8001fcc <__ssputs_r+0xa0>
 8001f68:	4629      	mov	r1, r5
 8001f6a:	f000 fb63 	bl	8002634 <_malloc_r>
 8001f6e:	4606      	mov	r6, r0
 8001f70:	b950      	cbnz	r0, 8001f88 <__ssputs_r+0x5c>
 8001f72:	230c      	movs	r3, #12
 8001f74:	f8ca 3000 	str.w	r3, [sl]
 8001f78:	89a3      	ldrh	r3, [r4, #12]
 8001f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f7e:	81a3      	strh	r3, [r4, #12]
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f88:	6921      	ldr	r1, [r4, #16]
 8001f8a:	464a      	mov	r2, r9
 8001f8c:	f000 fabe 	bl	800250c <memcpy>
 8001f90:	89a3      	ldrh	r3, [r4, #12]
 8001f92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f9a:	81a3      	strh	r3, [r4, #12]
 8001f9c:	6126      	str	r6, [r4, #16]
 8001f9e:	6165      	str	r5, [r4, #20]
 8001fa0:	444e      	add	r6, r9
 8001fa2:	eba5 0509 	sub.w	r5, r5, r9
 8001fa6:	6026      	str	r6, [r4, #0]
 8001fa8:	60a5      	str	r5, [r4, #8]
 8001faa:	463e      	mov	r6, r7
 8001fac:	42be      	cmp	r6, r7
 8001fae:	d900      	bls.n	8001fb2 <__ssputs_r+0x86>
 8001fb0:	463e      	mov	r6, r7
 8001fb2:	6820      	ldr	r0, [r4, #0]
 8001fb4:	4632      	mov	r2, r6
 8001fb6:	4641      	mov	r1, r8
 8001fb8:	f000 fab6 	bl	8002528 <memmove>
 8001fbc:	68a3      	ldr	r3, [r4, #8]
 8001fbe:	1b9b      	subs	r3, r3, r6
 8001fc0:	60a3      	str	r3, [r4, #8]
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	4433      	add	r3, r6
 8001fc6:	6023      	str	r3, [r4, #0]
 8001fc8:	2000      	movs	r0, #0
 8001fca:	e7db      	b.n	8001f84 <__ssputs_r+0x58>
 8001fcc:	462a      	mov	r2, r5
 8001fce:	f000 fba5 	bl	800271c <_realloc_r>
 8001fd2:	4606      	mov	r6, r0
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	d1e1      	bne.n	8001f9c <__ssputs_r+0x70>
 8001fd8:	6921      	ldr	r1, [r4, #16]
 8001fda:	4650      	mov	r0, sl
 8001fdc:	f000 fabe 	bl	800255c <_free_r>
 8001fe0:	e7c7      	b.n	8001f72 <__ssputs_r+0x46>
	...

08001fe4 <_svfiprintf_r>:
 8001fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fe8:	4698      	mov	r8, r3
 8001fea:	898b      	ldrh	r3, [r1, #12]
 8001fec:	061b      	lsls	r3, r3, #24
 8001fee:	b09d      	sub	sp, #116	; 0x74
 8001ff0:	4607      	mov	r7, r0
 8001ff2:	460d      	mov	r5, r1
 8001ff4:	4614      	mov	r4, r2
 8001ff6:	d50e      	bpl.n	8002016 <_svfiprintf_r+0x32>
 8001ff8:	690b      	ldr	r3, [r1, #16]
 8001ffa:	b963      	cbnz	r3, 8002016 <_svfiprintf_r+0x32>
 8001ffc:	2140      	movs	r1, #64	; 0x40
 8001ffe:	f000 fb19 	bl	8002634 <_malloc_r>
 8002002:	6028      	str	r0, [r5, #0]
 8002004:	6128      	str	r0, [r5, #16]
 8002006:	b920      	cbnz	r0, 8002012 <_svfiprintf_r+0x2e>
 8002008:	230c      	movs	r3, #12
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002010:	e0d1      	b.n	80021b6 <_svfiprintf_r+0x1d2>
 8002012:	2340      	movs	r3, #64	; 0x40
 8002014:	616b      	str	r3, [r5, #20]
 8002016:	2300      	movs	r3, #0
 8002018:	9309      	str	r3, [sp, #36]	; 0x24
 800201a:	2320      	movs	r3, #32
 800201c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002020:	f8cd 800c 	str.w	r8, [sp, #12]
 8002024:	2330      	movs	r3, #48	; 0x30
 8002026:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80021d0 <_svfiprintf_r+0x1ec>
 800202a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800202e:	f04f 0901 	mov.w	r9, #1
 8002032:	4623      	mov	r3, r4
 8002034:	469a      	mov	sl, r3
 8002036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800203a:	b10a      	cbz	r2, 8002040 <_svfiprintf_r+0x5c>
 800203c:	2a25      	cmp	r2, #37	; 0x25
 800203e:	d1f9      	bne.n	8002034 <_svfiprintf_r+0x50>
 8002040:	ebba 0b04 	subs.w	fp, sl, r4
 8002044:	d00b      	beq.n	800205e <_svfiprintf_r+0x7a>
 8002046:	465b      	mov	r3, fp
 8002048:	4622      	mov	r2, r4
 800204a:	4629      	mov	r1, r5
 800204c:	4638      	mov	r0, r7
 800204e:	f7ff ff6d 	bl	8001f2c <__ssputs_r>
 8002052:	3001      	adds	r0, #1
 8002054:	f000 80aa 	beq.w	80021ac <_svfiprintf_r+0x1c8>
 8002058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800205a:	445a      	add	r2, fp
 800205c:	9209      	str	r2, [sp, #36]	; 0x24
 800205e:	f89a 3000 	ldrb.w	r3, [sl]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 80a2 	beq.w	80021ac <_svfiprintf_r+0x1c8>
 8002068:	2300      	movs	r3, #0
 800206a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800206e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002072:	f10a 0a01 	add.w	sl, sl, #1
 8002076:	9304      	str	r3, [sp, #16]
 8002078:	9307      	str	r3, [sp, #28]
 800207a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800207e:	931a      	str	r3, [sp, #104]	; 0x68
 8002080:	4654      	mov	r4, sl
 8002082:	2205      	movs	r2, #5
 8002084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002088:	4851      	ldr	r0, [pc, #324]	; (80021d0 <_svfiprintf_r+0x1ec>)
 800208a:	f7fe f8c9 	bl	8000220 <memchr>
 800208e:	9a04      	ldr	r2, [sp, #16]
 8002090:	b9d8      	cbnz	r0, 80020ca <_svfiprintf_r+0xe6>
 8002092:	06d0      	lsls	r0, r2, #27
 8002094:	bf44      	itt	mi
 8002096:	2320      	movmi	r3, #32
 8002098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800209c:	0711      	lsls	r1, r2, #28
 800209e:	bf44      	itt	mi
 80020a0:	232b      	movmi	r3, #43	; 0x2b
 80020a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020a6:	f89a 3000 	ldrb.w	r3, [sl]
 80020aa:	2b2a      	cmp	r3, #42	; 0x2a
 80020ac:	d015      	beq.n	80020da <_svfiprintf_r+0xf6>
 80020ae:	9a07      	ldr	r2, [sp, #28]
 80020b0:	4654      	mov	r4, sl
 80020b2:	2000      	movs	r0, #0
 80020b4:	f04f 0c0a 	mov.w	ip, #10
 80020b8:	4621      	mov	r1, r4
 80020ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80020be:	3b30      	subs	r3, #48	; 0x30
 80020c0:	2b09      	cmp	r3, #9
 80020c2:	d94e      	bls.n	8002162 <_svfiprintf_r+0x17e>
 80020c4:	b1b0      	cbz	r0, 80020f4 <_svfiprintf_r+0x110>
 80020c6:	9207      	str	r2, [sp, #28]
 80020c8:	e014      	b.n	80020f4 <_svfiprintf_r+0x110>
 80020ca:	eba0 0308 	sub.w	r3, r0, r8
 80020ce:	fa09 f303 	lsl.w	r3, r9, r3
 80020d2:	4313      	orrs	r3, r2
 80020d4:	9304      	str	r3, [sp, #16]
 80020d6:	46a2      	mov	sl, r4
 80020d8:	e7d2      	b.n	8002080 <_svfiprintf_r+0x9c>
 80020da:	9b03      	ldr	r3, [sp, #12]
 80020dc:	1d19      	adds	r1, r3, #4
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	9103      	str	r1, [sp, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bfbb      	ittet	lt
 80020e6:	425b      	neglt	r3, r3
 80020e8:	f042 0202 	orrlt.w	r2, r2, #2
 80020ec:	9307      	strge	r3, [sp, #28]
 80020ee:	9307      	strlt	r3, [sp, #28]
 80020f0:	bfb8      	it	lt
 80020f2:	9204      	strlt	r2, [sp, #16]
 80020f4:	7823      	ldrb	r3, [r4, #0]
 80020f6:	2b2e      	cmp	r3, #46	; 0x2e
 80020f8:	d10c      	bne.n	8002114 <_svfiprintf_r+0x130>
 80020fa:	7863      	ldrb	r3, [r4, #1]
 80020fc:	2b2a      	cmp	r3, #42	; 0x2a
 80020fe:	d135      	bne.n	800216c <_svfiprintf_r+0x188>
 8002100:	9b03      	ldr	r3, [sp, #12]
 8002102:	1d1a      	adds	r2, r3, #4
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	9203      	str	r2, [sp, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	bfb8      	it	lt
 800210c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002110:	3402      	adds	r4, #2
 8002112:	9305      	str	r3, [sp, #20]
 8002114:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80021e0 <_svfiprintf_r+0x1fc>
 8002118:	7821      	ldrb	r1, [r4, #0]
 800211a:	2203      	movs	r2, #3
 800211c:	4650      	mov	r0, sl
 800211e:	f7fe f87f 	bl	8000220 <memchr>
 8002122:	b140      	cbz	r0, 8002136 <_svfiprintf_r+0x152>
 8002124:	2340      	movs	r3, #64	; 0x40
 8002126:	eba0 000a 	sub.w	r0, r0, sl
 800212a:	fa03 f000 	lsl.w	r0, r3, r0
 800212e:	9b04      	ldr	r3, [sp, #16]
 8002130:	4303      	orrs	r3, r0
 8002132:	3401      	adds	r4, #1
 8002134:	9304      	str	r3, [sp, #16]
 8002136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800213a:	4826      	ldr	r0, [pc, #152]	; (80021d4 <_svfiprintf_r+0x1f0>)
 800213c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002140:	2206      	movs	r2, #6
 8002142:	f7fe f86d 	bl	8000220 <memchr>
 8002146:	2800      	cmp	r0, #0
 8002148:	d038      	beq.n	80021bc <_svfiprintf_r+0x1d8>
 800214a:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <_svfiprintf_r+0x1f4>)
 800214c:	bb1b      	cbnz	r3, 8002196 <_svfiprintf_r+0x1b2>
 800214e:	9b03      	ldr	r3, [sp, #12]
 8002150:	3307      	adds	r3, #7
 8002152:	f023 0307 	bic.w	r3, r3, #7
 8002156:	3308      	adds	r3, #8
 8002158:	9303      	str	r3, [sp, #12]
 800215a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800215c:	4433      	add	r3, r6
 800215e:	9309      	str	r3, [sp, #36]	; 0x24
 8002160:	e767      	b.n	8002032 <_svfiprintf_r+0x4e>
 8002162:	fb0c 3202 	mla	r2, ip, r2, r3
 8002166:	460c      	mov	r4, r1
 8002168:	2001      	movs	r0, #1
 800216a:	e7a5      	b.n	80020b8 <_svfiprintf_r+0xd4>
 800216c:	2300      	movs	r3, #0
 800216e:	3401      	adds	r4, #1
 8002170:	9305      	str	r3, [sp, #20]
 8002172:	4619      	mov	r1, r3
 8002174:	f04f 0c0a 	mov.w	ip, #10
 8002178:	4620      	mov	r0, r4
 800217a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800217e:	3a30      	subs	r2, #48	; 0x30
 8002180:	2a09      	cmp	r2, #9
 8002182:	d903      	bls.n	800218c <_svfiprintf_r+0x1a8>
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0c5      	beq.n	8002114 <_svfiprintf_r+0x130>
 8002188:	9105      	str	r1, [sp, #20]
 800218a:	e7c3      	b.n	8002114 <_svfiprintf_r+0x130>
 800218c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002190:	4604      	mov	r4, r0
 8002192:	2301      	movs	r3, #1
 8002194:	e7f0      	b.n	8002178 <_svfiprintf_r+0x194>
 8002196:	ab03      	add	r3, sp, #12
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	462a      	mov	r2, r5
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <_svfiprintf_r+0x1f8>)
 800219e:	a904      	add	r1, sp, #16
 80021a0:	4638      	mov	r0, r7
 80021a2:	f3af 8000 	nop.w
 80021a6:	1c42      	adds	r2, r0, #1
 80021a8:	4606      	mov	r6, r0
 80021aa:	d1d6      	bne.n	800215a <_svfiprintf_r+0x176>
 80021ac:	89ab      	ldrh	r3, [r5, #12]
 80021ae:	065b      	lsls	r3, r3, #25
 80021b0:	f53f af2c 	bmi.w	800200c <_svfiprintf_r+0x28>
 80021b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80021b6:	b01d      	add	sp, #116	; 0x74
 80021b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021bc:	ab03      	add	r3, sp, #12
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	462a      	mov	r2, r5
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <_svfiprintf_r+0x1f8>)
 80021c4:	a904      	add	r1, sp, #16
 80021c6:	4638      	mov	r0, r7
 80021c8:	f000 f87a 	bl	80022c0 <_printf_i>
 80021cc:	e7eb      	b.n	80021a6 <_svfiprintf_r+0x1c2>
 80021ce:	bf00      	nop
 80021d0:	08002818 	.word	0x08002818
 80021d4:	08002822 	.word	0x08002822
 80021d8:	00000000 	.word	0x00000000
 80021dc:	08001f2d 	.word	0x08001f2d
 80021e0:	0800281e 	.word	0x0800281e

080021e4 <_printf_common>:
 80021e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021e8:	4616      	mov	r6, r2
 80021ea:	4699      	mov	r9, r3
 80021ec:	688a      	ldr	r2, [r1, #8]
 80021ee:	690b      	ldr	r3, [r1, #16]
 80021f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80021f4:	4293      	cmp	r3, r2
 80021f6:	bfb8      	it	lt
 80021f8:	4613      	movlt	r3, r2
 80021fa:	6033      	str	r3, [r6, #0]
 80021fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002200:	4607      	mov	r7, r0
 8002202:	460c      	mov	r4, r1
 8002204:	b10a      	cbz	r2, 800220a <_printf_common+0x26>
 8002206:	3301      	adds	r3, #1
 8002208:	6033      	str	r3, [r6, #0]
 800220a:	6823      	ldr	r3, [r4, #0]
 800220c:	0699      	lsls	r1, r3, #26
 800220e:	bf42      	ittt	mi
 8002210:	6833      	ldrmi	r3, [r6, #0]
 8002212:	3302      	addmi	r3, #2
 8002214:	6033      	strmi	r3, [r6, #0]
 8002216:	6825      	ldr	r5, [r4, #0]
 8002218:	f015 0506 	ands.w	r5, r5, #6
 800221c:	d106      	bne.n	800222c <_printf_common+0x48>
 800221e:	f104 0a19 	add.w	sl, r4, #25
 8002222:	68e3      	ldr	r3, [r4, #12]
 8002224:	6832      	ldr	r2, [r6, #0]
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	42ab      	cmp	r3, r5
 800222a:	dc26      	bgt.n	800227a <_printf_common+0x96>
 800222c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002230:	1e13      	subs	r3, r2, #0
 8002232:	6822      	ldr	r2, [r4, #0]
 8002234:	bf18      	it	ne
 8002236:	2301      	movne	r3, #1
 8002238:	0692      	lsls	r2, r2, #26
 800223a:	d42b      	bmi.n	8002294 <_printf_common+0xb0>
 800223c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002240:	4649      	mov	r1, r9
 8002242:	4638      	mov	r0, r7
 8002244:	47c0      	blx	r8
 8002246:	3001      	adds	r0, #1
 8002248:	d01e      	beq.n	8002288 <_printf_common+0xa4>
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	68e5      	ldr	r5, [r4, #12]
 800224e:	6832      	ldr	r2, [r6, #0]
 8002250:	f003 0306 	and.w	r3, r3, #6
 8002254:	2b04      	cmp	r3, #4
 8002256:	bf08      	it	eq
 8002258:	1aad      	subeq	r5, r5, r2
 800225a:	68a3      	ldr	r3, [r4, #8]
 800225c:	6922      	ldr	r2, [r4, #16]
 800225e:	bf0c      	ite	eq
 8002260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002264:	2500      	movne	r5, #0
 8002266:	4293      	cmp	r3, r2
 8002268:	bfc4      	itt	gt
 800226a:	1a9b      	subgt	r3, r3, r2
 800226c:	18ed      	addgt	r5, r5, r3
 800226e:	2600      	movs	r6, #0
 8002270:	341a      	adds	r4, #26
 8002272:	42b5      	cmp	r5, r6
 8002274:	d11a      	bne.n	80022ac <_printf_common+0xc8>
 8002276:	2000      	movs	r0, #0
 8002278:	e008      	b.n	800228c <_printf_common+0xa8>
 800227a:	2301      	movs	r3, #1
 800227c:	4652      	mov	r2, sl
 800227e:	4649      	mov	r1, r9
 8002280:	4638      	mov	r0, r7
 8002282:	47c0      	blx	r8
 8002284:	3001      	adds	r0, #1
 8002286:	d103      	bne.n	8002290 <_printf_common+0xac>
 8002288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800228c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002290:	3501      	adds	r5, #1
 8002292:	e7c6      	b.n	8002222 <_printf_common+0x3e>
 8002294:	18e1      	adds	r1, r4, r3
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	2030      	movs	r0, #48	; 0x30
 800229a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800229e:	4422      	add	r2, r4
 80022a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80022a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80022a8:	3302      	adds	r3, #2
 80022aa:	e7c7      	b.n	800223c <_printf_common+0x58>
 80022ac:	2301      	movs	r3, #1
 80022ae:	4622      	mov	r2, r4
 80022b0:	4649      	mov	r1, r9
 80022b2:	4638      	mov	r0, r7
 80022b4:	47c0      	blx	r8
 80022b6:	3001      	adds	r0, #1
 80022b8:	d0e6      	beq.n	8002288 <_printf_common+0xa4>
 80022ba:	3601      	adds	r6, #1
 80022bc:	e7d9      	b.n	8002272 <_printf_common+0x8e>
	...

080022c0 <_printf_i>:
 80022c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80022c4:	7e0f      	ldrb	r7, [r1, #24]
 80022c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80022c8:	2f78      	cmp	r7, #120	; 0x78
 80022ca:	4691      	mov	r9, r2
 80022cc:	4680      	mov	r8, r0
 80022ce:	460c      	mov	r4, r1
 80022d0:	469a      	mov	sl, r3
 80022d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80022d6:	d807      	bhi.n	80022e8 <_printf_i+0x28>
 80022d8:	2f62      	cmp	r7, #98	; 0x62
 80022da:	d80a      	bhi.n	80022f2 <_printf_i+0x32>
 80022dc:	2f00      	cmp	r7, #0
 80022de:	f000 80d8 	beq.w	8002492 <_printf_i+0x1d2>
 80022e2:	2f58      	cmp	r7, #88	; 0x58
 80022e4:	f000 80a3 	beq.w	800242e <_printf_i+0x16e>
 80022e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80022f0:	e03a      	b.n	8002368 <_printf_i+0xa8>
 80022f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80022f6:	2b15      	cmp	r3, #21
 80022f8:	d8f6      	bhi.n	80022e8 <_printf_i+0x28>
 80022fa:	a101      	add	r1, pc, #4	; (adr r1, 8002300 <_printf_i+0x40>)
 80022fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002300:	08002359 	.word	0x08002359
 8002304:	0800236d 	.word	0x0800236d
 8002308:	080022e9 	.word	0x080022e9
 800230c:	080022e9 	.word	0x080022e9
 8002310:	080022e9 	.word	0x080022e9
 8002314:	080022e9 	.word	0x080022e9
 8002318:	0800236d 	.word	0x0800236d
 800231c:	080022e9 	.word	0x080022e9
 8002320:	080022e9 	.word	0x080022e9
 8002324:	080022e9 	.word	0x080022e9
 8002328:	080022e9 	.word	0x080022e9
 800232c:	08002479 	.word	0x08002479
 8002330:	0800239d 	.word	0x0800239d
 8002334:	0800245b 	.word	0x0800245b
 8002338:	080022e9 	.word	0x080022e9
 800233c:	080022e9 	.word	0x080022e9
 8002340:	0800249b 	.word	0x0800249b
 8002344:	080022e9 	.word	0x080022e9
 8002348:	0800239d 	.word	0x0800239d
 800234c:	080022e9 	.word	0x080022e9
 8002350:	080022e9 	.word	0x080022e9
 8002354:	08002463 	.word	0x08002463
 8002358:	682b      	ldr	r3, [r5, #0]
 800235a:	1d1a      	adds	r2, r3, #4
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	602a      	str	r2, [r5, #0]
 8002360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002368:	2301      	movs	r3, #1
 800236a:	e0a3      	b.n	80024b4 <_printf_i+0x1f4>
 800236c:	6820      	ldr	r0, [r4, #0]
 800236e:	6829      	ldr	r1, [r5, #0]
 8002370:	0606      	lsls	r6, r0, #24
 8002372:	f101 0304 	add.w	r3, r1, #4
 8002376:	d50a      	bpl.n	800238e <_printf_i+0xce>
 8002378:	680e      	ldr	r6, [r1, #0]
 800237a:	602b      	str	r3, [r5, #0]
 800237c:	2e00      	cmp	r6, #0
 800237e:	da03      	bge.n	8002388 <_printf_i+0xc8>
 8002380:	232d      	movs	r3, #45	; 0x2d
 8002382:	4276      	negs	r6, r6
 8002384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002388:	485e      	ldr	r0, [pc, #376]	; (8002504 <_printf_i+0x244>)
 800238a:	230a      	movs	r3, #10
 800238c:	e019      	b.n	80023c2 <_printf_i+0x102>
 800238e:	680e      	ldr	r6, [r1, #0]
 8002390:	602b      	str	r3, [r5, #0]
 8002392:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002396:	bf18      	it	ne
 8002398:	b236      	sxthne	r6, r6
 800239a:	e7ef      	b.n	800237c <_printf_i+0xbc>
 800239c:	682b      	ldr	r3, [r5, #0]
 800239e:	6820      	ldr	r0, [r4, #0]
 80023a0:	1d19      	adds	r1, r3, #4
 80023a2:	6029      	str	r1, [r5, #0]
 80023a4:	0601      	lsls	r1, r0, #24
 80023a6:	d501      	bpl.n	80023ac <_printf_i+0xec>
 80023a8:	681e      	ldr	r6, [r3, #0]
 80023aa:	e002      	b.n	80023b2 <_printf_i+0xf2>
 80023ac:	0646      	lsls	r6, r0, #25
 80023ae:	d5fb      	bpl.n	80023a8 <_printf_i+0xe8>
 80023b0:	881e      	ldrh	r6, [r3, #0]
 80023b2:	4854      	ldr	r0, [pc, #336]	; (8002504 <_printf_i+0x244>)
 80023b4:	2f6f      	cmp	r7, #111	; 0x6f
 80023b6:	bf0c      	ite	eq
 80023b8:	2308      	moveq	r3, #8
 80023ba:	230a      	movne	r3, #10
 80023bc:	2100      	movs	r1, #0
 80023be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80023c2:	6865      	ldr	r5, [r4, #4]
 80023c4:	60a5      	str	r5, [r4, #8]
 80023c6:	2d00      	cmp	r5, #0
 80023c8:	bfa2      	ittt	ge
 80023ca:	6821      	ldrge	r1, [r4, #0]
 80023cc:	f021 0104 	bicge.w	r1, r1, #4
 80023d0:	6021      	strge	r1, [r4, #0]
 80023d2:	b90e      	cbnz	r6, 80023d8 <_printf_i+0x118>
 80023d4:	2d00      	cmp	r5, #0
 80023d6:	d04d      	beq.n	8002474 <_printf_i+0x1b4>
 80023d8:	4615      	mov	r5, r2
 80023da:	fbb6 f1f3 	udiv	r1, r6, r3
 80023de:	fb03 6711 	mls	r7, r3, r1, r6
 80023e2:	5dc7      	ldrb	r7, [r0, r7]
 80023e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80023e8:	4637      	mov	r7, r6
 80023ea:	42bb      	cmp	r3, r7
 80023ec:	460e      	mov	r6, r1
 80023ee:	d9f4      	bls.n	80023da <_printf_i+0x11a>
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d10b      	bne.n	800240c <_printf_i+0x14c>
 80023f4:	6823      	ldr	r3, [r4, #0]
 80023f6:	07de      	lsls	r6, r3, #31
 80023f8:	d508      	bpl.n	800240c <_printf_i+0x14c>
 80023fa:	6923      	ldr	r3, [r4, #16]
 80023fc:	6861      	ldr	r1, [r4, #4]
 80023fe:	4299      	cmp	r1, r3
 8002400:	bfde      	ittt	le
 8002402:	2330      	movle	r3, #48	; 0x30
 8002404:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002408:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800240c:	1b52      	subs	r2, r2, r5
 800240e:	6122      	str	r2, [r4, #16]
 8002410:	f8cd a000 	str.w	sl, [sp]
 8002414:	464b      	mov	r3, r9
 8002416:	aa03      	add	r2, sp, #12
 8002418:	4621      	mov	r1, r4
 800241a:	4640      	mov	r0, r8
 800241c:	f7ff fee2 	bl	80021e4 <_printf_common>
 8002420:	3001      	adds	r0, #1
 8002422:	d14c      	bne.n	80024be <_printf_i+0x1fe>
 8002424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002428:	b004      	add	sp, #16
 800242a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800242e:	4835      	ldr	r0, [pc, #212]	; (8002504 <_printf_i+0x244>)
 8002430:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002434:	6829      	ldr	r1, [r5, #0]
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	f851 6b04 	ldr.w	r6, [r1], #4
 800243c:	6029      	str	r1, [r5, #0]
 800243e:	061d      	lsls	r5, r3, #24
 8002440:	d514      	bpl.n	800246c <_printf_i+0x1ac>
 8002442:	07df      	lsls	r7, r3, #31
 8002444:	bf44      	itt	mi
 8002446:	f043 0320 	orrmi.w	r3, r3, #32
 800244a:	6023      	strmi	r3, [r4, #0]
 800244c:	b91e      	cbnz	r6, 8002456 <_printf_i+0x196>
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	f023 0320 	bic.w	r3, r3, #32
 8002454:	6023      	str	r3, [r4, #0]
 8002456:	2310      	movs	r3, #16
 8002458:	e7b0      	b.n	80023bc <_printf_i+0xfc>
 800245a:	6823      	ldr	r3, [r4, #0]
 800245c:	f043 0320 	orr.w	r3, r3, #32
 8002460:	6023      	str	r3, [r4, #0]
 8002462:	2378      	movs	r3, #120	; 0x78
 8002464:	4828      	ldr	r0, [pc, #160]	; (8002508 <_printf_i+0x248>)
 8002466:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800246a:	e7e3      	b.n	8002434 <_printf_i+0x174>
 800246c:	0659      	lsls	r1, r3, #25
 800246e:	bf48      	it	mi
 8002470:	b2b6      	uxthmi	r6, r6
 8002472:	e7e6      	b.n	8002442 <_printf_i+0x182>
 8002474:	4615      	mov	r5, r2
 8002476:	e7bb      	b.n	80023f0 <_printf_i+0x130>
 8002478:	682b      	ldr	r3, [r5, #0]
 800247a:	6826      	ldr	r6, [r4, #0]
 800247c:	6961      	ldr	r1, [r4, #20]
 800247e:	1d18      	adds	r0, r3, #4
 8002480:	6028      	str	r0, [r5, #0]
 8002482:	0635      	lsls	r5, r6, #24
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	d501      	bpl.n	800248c <_printf_i+0x1cc>
 8002488:	6019      	str	r1, [r3, #0]
 800248a:	e002      	b.n	8002492 <_printf_i+0x1d2>
 800248c:	0670      	lsls	r0, r6, #25
 800248e:	d5fb      	bpl.n	8002488 <_printf_i+0x1c8>
 8002490:	8019      	strh	r1, [r3, #0]
 8002492:	2300      	movs	r3, #0
 8002494:	6123      	str	r3, [r4, #16]
 8002496:	4615      	mov	r5, r2
 8002498:	e7ba      	b.n	8002410 <_printf_i+0x150>
 800249a:	682b      	ldr	r3, [r5, #0]
 800249c:	1d1a      	adds	r2, r3, #4
 800249e:	602a      	str	r2, [r5, #0]
 80024a0:	681d      	ldr	r5, [r3, #0]
 80024a2:	6862      	ldr	r2, [r4, #4]
 80024a4:	2100      	movs	r1, #0
 80024a6:	4628      	mov	r0, r5
 80024a8:	f7fd feba 	bl	8000220 <memchr>
 80024ac:	b108      	cbz	r0, 80024b2 <_printf_i+0x1f2>
 80024ae:	1b40      	subs	r0, r0, r5
 80024b0:	6060      	str	r0, [r4, #4]
 80024b2:	6863      	ldr	r3, [r4, #4]
 80024b4:	6123      	str	r3, [r4, #16]
 80024b6:	2300      	movs	r3, #0
 80024b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024bc:	e7a8      	b.n	8002410 <_printf_i+0x150>
 80024be:	6923      	ldr	r3, [r4, #16]
 80024c0:	462a      	mov	r2, r5
 80024c2:	4649      	mov	r1, r9
 80024c4:	4640      	mov	r0, r8
 80024c6:	47d0      	blx	sl
 80024c8:	3001      	adds	r0, #1
 80024ca:	d0ab      	beq.n	8002424 <_printf_i+0x164>
 80024cc:	6823      	ldr	r3, [r4, #0]
 80024ce:	079b      	lsls	r3, r3, #30
 80024d0:	d413      	bmi.n	80024fa <_printf_i+0x23a>
 80024d2:	68e0      	ldr	r0, [r4, #12]
 80024d4:	9b03      	ldr	r3, [sp, #12]
 80024d6:	4298      	cmp	r0, r3
 80024d8:	bfb8      	it	lt
 80024da:	4618      	movlt	r0, r3
 80024dc:	e7a4      	b.n	8002428 <_printf_i+0x168>
 80024de:	2301      	movs	r3, #1
 80024e0:	4632      	mov	r2, r6
 80024e2:	4649      	mov	r1, r9
 80024e4:	4640      	mov	r0, r8
 80024e6:	47d0      	blx	sl
 80024e8:	3001      	adds	r0, #1
 80024ea:	d09b      	beq.n	8002424 <_printf_i+0x164>
 80024ec:	3501      	adds	r5, #1
 80024ee:	68e3      	ldr	r3, [r4, #12]
 80024f0:	9903      	ldr	r1, [sp, #12]
 80024f2:	1a5b      	subs	r3, r3, r1
 80024f4:	42ab      	cmp	r3, r5
 80024f6:	dcf2      	bgt.n	80024de <_printf_i+0x21e>
 80024f8:	e7eb      	b.n	80024d2 <_printf_i+0x212>
 80024fa:	2500      	movs	r5, #0
 80024fc:	f104 0619 	add.w	r6, r4, #25
 8002500:	e7f5      	b.n	80024ee <_printf_i+0x22e>
 8002502:	bf00      	nop
 8002504:	08002829 	.word	0x08002829
 8002508:	0800283a 	.word	0x0800283a

0800250c <memcpy>:
 800250c:	440a      	add	r2, r1
 800250e:	4291      	cmp	r1, r2
 8002510:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002514:	d100      	bne.n	8002518 <memcpy+0xc>
 8002516:	4770      	bx	lr
 8002518:	b510      	push	{r4, lr}
 800251a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800251e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002522:	4291      	cmp	r1, r2
 8002524:	d1f9      	bne.n	800251a <memcpy+0xe>
 8002526:	bd10      	pop	{r4, pc}

08002528 <memmove>:
 8002528:	4288      	cmp	r0, r1
 800252a:	b510      	push	{r4, lr}
 800252c:	eb01 0402 	add.w	r4, r1, r2
 8002530:	d902      	bls.n	8002538 <memmove+0x10>
 8002532:	4284      	cmp	r4, r0
 8002534:	4623      	mov	r3, r4
 8002536:	d807      	bhi.n	8002548 <memmove+0x20>
 8002538:	1e43      	subs	r3, r0, #1
 800253a:	42a1      	cmp	r1, r4
 800253c:	d008      	beq.n	8002550 <memmove+0x28>
 800253e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002542:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002546:	e7f8      	b.n	800253a <memmove+0x12>
 8002548:	4402      	add	r2, r0
 800254a:	4601      	mov	r1, r0
 800254c:	428a      	cmp	r2, r1
 800254e:	d100      	bne.n	8002552 <memmove+0x2a>
 8002550:	bd10      	pop	{r4, pc}
 8002552:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002556:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800255a:	e7f7      	b.n	800254c <memmove+0x24>

0800255c <_free_r>:
 800255c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800255e:	2900      	cmp	r1, #0
 8002560:	d044      	beq.n	80025ec <_free_r+0x90>
 8002562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002566:	9001      	str	r0, [sp, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	f1a1 0404 	sub.w	r4, r1, #4
 800256e:	bfb8      	it	lt
 8002570:	18e4      	addlt	r4, r4, r3
 8002572:	f000 f913 	bl	800279c <__malloc_lock>
 8002576:	4a1e      	ldr	r2, [pc, #120]	; (80025f0 <_free_r+0x94>)
 8002578:	9801      	ldr	r0, [sp, #4]
 800257a:	6813      	ldr	r3, [r2, #0]
 800257c:	b933      	cbnz	r3, 800258c <_free_r+0x30>
 800257e:	6063      	str	r3, [r4, #4]
 8002580:	6014      	str	r4, [r2, #0]
 8002582:	b003      	add	sp, #12
 8002584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002588:	f000 b90e 	b.w	80027a8 <__malloc_unlock>
 800258c:	42a3      	cmp	r3, r4
 800258e:	d908      	bls.n	80025a2 <_free_r+0x46>
 8002590:	6825      	ldr	r5, [r4, #0]
 8002592:	1961      	adds	r1, r4, r5
 8002594:	428b      	cmp	r3, r1
 8002596:	bf01      	itttt	eq
 8002598:	6819      	ldreq	r1, [r3, #0]
 800259a:	685b      	ldreq	r3, [r3, #4]
 800259c:	1949      	addeq	r1, r1, r5
 800259e:	6021      	streq	r1, [r4, #0]
 80025a0:	e7ed      	b.n	800257e <_free_r+0x22>
 80025a2:	461a      	mov	r2, r3
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	b10b      	cbz	r3, 80025ac <_free_r+0x50>
 80025a8:	42a3      	cmp	r3, r4
 80025aa:	d9fa      	bls.n	80025a2 <_free_r+0x46>
 80025ac:	6811      	ldr	r1, [r2, #0]
 80025ae:	1855      	adds	r5, r2, r1
 80025b0:	42a5      	cmp	r5, r4
 80025b2:	d10b      	bne.n	80025cc <_free_r+0x70>
 80025b4:	6824      	ldr	r4, [r4, #0]
 80025b6:	4421      	add	r1, r4
 80025b8:	1854      	adds	r4, r2, r1
 80025ba:	42a3      	cmp	r3, r4
 80025bc:	6011      	str	r1, [r2, #0]
 80025be:	d1e0      	bne.n	8002582 <_free_r+0x26>
 80025c0:	681c      	ldr	r4, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	6053      	str	r3, [r2, #4]
 80025c6:	4421      	add	r1, r4
 80025c8:	6011      	str	r1, [r2, #0]
 80025ca:	e7da      	b.n	8002582 <_free_r+0x26>
 80025cc:	d902      	bls.n	80025d4 <_free_r+0x78>
 80025ce:	230c      	movs	r3, #12
 80025d0:	6003      	str	r3, [r0, #0]
 80025d2:	e7d6      	b.n	8002582 <_free_r+0x26>
 80025d4:	6825      	ldr	r5, [r4, #0]
 80025d6:	1961      	adds	r1, r4, r5
 80025d8:	428b      	cmp	r3, r1
 80025da:	bf04      	itt	eq
 80025dc:	6819      	ldreq	r1, [r3, #0]
 80025de:	685b      	ldreq	r3, [r3, #4]
 80025e0:	6063      	str	r3, [r4, #4]
 80025e2:	bf04      	itt	eq
 80025e4:	1949      	addeq	r1, r1, r5
 80025e6:	6021      	streq	r1, [r4, #0]
 80025e8:	6054      	str	r4, [r2, #4]
 80025ea:	e7ca      	b.n	8002582 <_free_r+0x26>
 80025ec:	b003      	add	sp, #12
 80025ee:	bd30      	pop	{r4, r5, pc}
 80025f0:	20000094 	.word	0x20000094

080025f4 <sbrk_aligned>:
 80025f4:	b570      	push	{r4, r5, r6, lr}
 80025f6:	4e0e      	ldr	r6, [pc, #56]	; (8002630 <sbrk_aligned+0x3c>)
 80025f8:	460c      	mov	r4, r1
 80025fa:	6831      	ldr	r1, [r6, #0]
 80025fc:	4605      	mov	r5, r0
 80025fe:	b911      	cbnz	r1, 8002606 <sbrk_aligned+0x12>
 8002600:	f000 f8bc 	bl	800277c <_sbrk_r>
 8002604:	6030      	str	r0, [r6, #0]
 8002606:	4621      	mov	r1, r4
 8002608:	4628      	mov	r0, r5
 800260a:	f000 f8b7 	bl	800277c <_sbrk_r>
 800260e:	1c43      	adds	r3, r0, #1
 8002610:	d00a      	beq.n	8002628 <sbrk_aligned+0x34>
 8002612:	1cc4      	adds	r4, r0, #3
 8002614:	f024 0403 	bic.w	r4, r4, #3
 8002618:	42a0      	cmp	r0, r4
 800261a:	d007      	beq.n	800262c <sbrk_aligned+0x38>
 800261c:	1a21      	subs	r1, r4, r0
 800261e:	4628      	mov	r0, r5
 8002620:	f000 f8ac 	bl	800277c <_sbrk_r>
 8002624:	3001      	adds	r0, #1
 8002626:	d101      	bne.n	800262c <sbrk_aligned+0x38>
 8002628:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800262c:	4620      	mov	r0, r4
 800262e:	bd70      	pop	{r4, r5, r6, pc}
 8002630:	20000098 	.word	0x20000098

08002634 <_malloc_r>:
 8002634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002638:	1ccd      	adds	r5, r1, #3
 800263a:	f025 0503 	bic.w	r5, r5, #3
 800263e:	3508      	adds	r5, #8
 8002640:	2d0c      	cmp	r5, #12
 8002642:	bf38      	it	cc
 8002644:	250c      	movcc	r5, #12
 8002646:	2d00      	cmp	r5, #0
 8002648:	4607      	mov	r7, r0
 800264a:	db01      	blt.n	8002650 <_malloc_r+0x1c>
 800264c:	42a9      	cmp	r1, r5
 800264e:	d905      	bls.n	800265c <_malloc_r+0x28>
 8002650:	230c      	movs	r3, #12
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	2600      	movs	r6, #0
 8002656:	4630      	mov	r0, r6
 8002658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800265c:	4e2e      	ldr	r6, [pc, #184]	; (8002718 <_malloc_r+0xe4>)
 800265e:	f000 f89d 	bl	800279c <__malloc_lock>
 8002662:	6833      	ldr	r3, [r6, #0]
 8002664:	461c      	mov	r4, r3
 8002666:	bb34      	cbnz	r4, 80026b6 <_malloc_r+0x82>
 8002668:	4629      	mov	r1, r5
 800266a:	4638      	mov	r0, r7
 800266c:	f7ff ffc2 	bl	80025f4 <sbrk_aligned>
 8002670:	1c43      	adds	r3, r0, #1
 8002672:	4604      	mov	r4, r0
 8002674:	d14d      	bne.n	8002712 <_malloc_r+0xde>
 8002676:	6834      	ldr	r4, [r6, #0]
 8002678:	4626      	mov	r6, r4
 800267a:	2e00      	cmp	r6, #0
 800267c:	d140      	bne.n	8002700 <_malloc_r+0xcc>
 800267e:	6823      	ldr	r3, [r4, #0]
 8002680:	4631      	mov	r1, r6
 8002682:	4638      	mov	r0, r7
 8002684:	eb04 0803 	add.w	r8, r4, r3
 8002688:	f000 f878 	bl	800277c <_sbrk_r>
 800268c:	4580      	cmp	r8, r0
 800268e:	d13a      	bne.n	8002706 <_malloc_r+0xd2>
 8002690:	6821      	ldr	r1, [r4, #0]
 8002692:	3503      	adds	r5, #3
 8002694:	1a6d      	subs	r5, r5, r1
 8002696:	f025 0503 	bic.w	r5, r5, #3
 800269a:	3508      	adds	r5, #8
 800269c:	2d0c      	cmp	r5, #12
 800269e:	bf38      	it	cc
 80026a0:	250c      	movcc	r5, #12
 80026a2:	4629      	mov	r1, r5
 80026a4:	4638      	mov	r0, r7
 80026a6:	f7ff ffa5 	bl	80025f4 <sbrk_aligned>
 80026aa:	3001      	adds	r0, #1
 80026ac:	d02b      	beq.n	8002706 <_malloc_r+0xd2>
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	442b      	add	r3, r5
 80026b2:	6023      	str	r3, [r4, #0]
 80026b4:	e00e      	b.n	80026d4 <_malloc_r+0xa0>
 80026b6:	6822      	ldr	r2, [r4, #0]
 80026b8:	1b52      	subs	r2, r2, r5
 80026ba:	d41e      	bmi.n	80026fa <_malloc_r+0xc6>
 80026bc:	2a0b      	cmp	r2, #11
 80026be:	d916      	bls.n	80026ee <_malloc_r+0xba>
 80026c0:	1961      	adds	r1, r4, r5
 80026c2:	42a3      	cmp	r3, r4
 80026c4:	6025      	str	r5, [r4, #0]
 80026c6:	bf18      	it	ne
 80026c8:	6059      	strne	r1, [r3, #4]
 80026ca:	6863      	ldr	r3, [r4, #4]
 80026cc:	bf08      	it	eq
 80026ce:	6031      	streq	r1, [r6, #0]
 80026d0:	5162      	str	r2, [r4, r5]
 80026d2:	604b      	str	r3, [r1, #4]
 80026d4:	4638      	mov	r0, r7
 80026d6:	f104 060b 	add.w	r6, r4, #11
 80026da:	f000 f865 	bl	80027a8 <__malloc_unlock>
 80026de:	f026 0607 	bic.w	r6, r6, #7
 80026e2:	1d23      	adds	r3, r4, #4
 80026e4:	1af2      	subs	r2, r6, r3
 80026e6:	d0b6      	beq.n	8002656 <_malloc_r+0x22>
 80026e8:	1b9b      	subs	r3, r3, r6
 80026ea:	50a3      	str	r3, [r4, r2]
 80026ec:	e7b3      	b.n	8002656 <_malloc_r+0x22>
 80026ee:	6862      	ldr	r2, [r4, #4]
 80026f0:	42a3      	cmp	r3, r4
 80026f2:	bf0c      	ite	eq
 80026f4:	6032      	streq	r2, [r6, #0]
 80026f6:	605a      	strne	r2, [r3, #4]
 80026f8:	e7ec      	b.n	80026d4 <_malloc_r+0xa0>
 80026fa:	4623      	mov	r3, r4
 80026fc:	6864      	ldr	r4, [r4, #4]
 80026fe:	e7b2      	b.n	8002666 <_malloc_r+0x32>
 8002700:	4634      	mov	r4, r6
 8002702:	6876      	ldr	r6, [r6, #4]
 8002704:	e7b9      	b.n	800267a <_malloc_r+0x46>
 8002706:	230c      	movs	r3, #12
 8002708:	603b      	str	r3, [r7, #0]
 800270a:	4638      	mov	r0, r7
 800270c:	f000 f84c 	bl	80027a8 <__malloc_unlock>
 8002710:	e7a1      	b.n	8002656 <_malloc_r+0x22>
 8002712:	6025      	str	r5, [r4, #0]
 8002714:	e7de      	b.n	80026d4 <_malloc_r+0xa0>
 8002716:	bf00      	nop
 8002718:	20000094 	.word	0x20000094

0800271c <_realloc_r>:
 800271c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002720:	4680      	mov	r8, r0
 8002722:	4614      	mov	r4, r2
 8002724:	460e      	mov	r6, r1
 8002726:	b921      	cbnz	r1, 8002732 <_realloc_r+0x16>
 8002728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800272c:	4611      	mov	r1, r2
 800272e:	f7ff bf81 	b.w	8002634 <_malloc_r>
 8002732:	b92a      	cbnz	r2, 8002740 <_realloc_r+0x24>
 8002734:	f7ff ff12 	bl	800255c <_free_r>
 8002738:	4625      	mov	r5, r4
 800273a:	4628      	mov	r0, r5
 800273c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002740:	f000 f838 	bl	80027b4 <_malloc_usable_size_r>
 8002744:	4284      	cmp	r4, r0
 8002746:	4607      	mov	r7, r0
 8002748:	d802      	bhi.n	8002750 <_realloc_r+0x34>
 800274a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800274e:	d812      	bhi.n	8002776 <_realloc_r+0x5a>
 8002750:	4621      	mov	r1, r4
 8002752:	4640      	mov	r0, r8
 8002754:	f7ff ff6e 	bl	8002634 <_malloc_r>
 8002758:	4605      	mov	r5, r0
 800275a:	2800      	cmp	r0, #0
 800275c:	d0ed      	beq.n	800273a <_realloc_r+0x1e>
 800275e:	42bc      	cmp	r4, r7
 8002760:	4622      	mov	r2, r4
 8002762:	4631      	mov	r1, r6
 8002764:	bf28      	it	cs
 8002766:	463a      	movcs	r2, r7
 8002768:	f7ff fed0 	bl	800250c <memcpy>
 800276c:	4631      	mov	r1, r6
 800276e:	4640      	mov	r0, r8
 8002770:	f7ff fef4 	bl	800255c <_free_r>
 8002774:	e7e1      	b.n	800273a <_realloc_r+0x1e>
 8002776:	4635      	mov	r5, r6
 8002778:	e7df      	b.n	800273a <_realloc_r+0x1e>
	...

0800277c <_sbrk_r>:
 800277c:	b538      	push	{r3, r4, r5, lr}
 800277e:	4d06      	ldr	r5, [pc, #24]	; (8002798 <_sbrk_r+0x1c>)
 8002780:	2300      	movs	r3, #0
 8002782:	4604      	mov	r4, r0
 8002784:	4608      	mov	r0, r1
 8002786:	602b      	str	r3, [r5, #0]
 8002788:	f7fe fa2e 	bl	8000be8 <_sbrk>
 800278c:	1c43      	adds	r3, r0, #1
 800278e:	d102      	bne.n	8002796 <_sbrk_r+0x1a>
 8002790:	682b      	ldr	r3, [r5, #0]
 8002792:	b103      	cbz	r3, 8002796 <_sbrk_r+0x1a>
 8002794:	6023      	str	r3, [r4, #0]
 8002796:	bd38      	pop	{r3, r4, r5, pc}
 8002798:	2000009c 	.word	0x2000009c

0800279c <__malloc_lock>:
 800279c:	4801      	ldr	r0, [pc, #4]	; (80027a4 <__malloc_lock+0x8>)
 800279e:	f000 b811 	b.w	80027c4 <__retarget_lock_acquire_recursive>
 80027a2:	bf00      	nop
 80027a4:	200000a0 	.word	0x200000a0

080027a8 <__malloc_unlock>:
 80027a8:	4801      	ldr	r0, [pc, #4]	; (80027b0 <__malloc_unlock+0x8>)
 80027aa:	f000 b80c 	b.w	80027c6 <__retarget_lock_release_recursive>
 80027ae:	bf00      	nop
 80027b0:	200000a0 	.word	0x200000a0

080027b4 <_malloc_usable_size_r>:
 80027b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027b8:	1f18      	subs	r0, r3, #4
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	bfbc      	itt	lt
 80027be:	580b      	ldrlt	r3, [r1, r0]
 80027c0:	18c0      	addlt	r0, r0, r3
 80027c2:	4770      	bx	lr

080027c4 <__retarget_lock_acquire_recursive>:
 80027c4:	4770      	bx	lr

080027c6 <__retarget_lock_release_recursive>:
 80027c6:	4770      	bx	lr

080027c8 <_init>:
 80027c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ca:	bf00      	nop
 80027cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ce:	bc08      	pop	{r3}
 80027d0:	469e      	mov	lr, r3
 80027d2:	4770      	bx	lr

080027d4 <_fini>:
 80027d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d6:	bf00      	nop
 80027d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027da:	bc08      	pop	{r3}
 80027dc:	469e      	mov	lr, r3
 80027de:	4770      	bx	lr
