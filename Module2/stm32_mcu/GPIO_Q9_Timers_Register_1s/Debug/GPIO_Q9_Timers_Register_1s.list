
GPIO_Q9_Timers_Register_1s.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000228  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ec  080003ec  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ec  080003ec  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003ec  080003ec  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ec  080003ec  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ec  080003ec  000103ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f0  080003f0  000103f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003f4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003f8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003f8  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001516  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000470  00000000  00000000  0002154a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  000219c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000180  00000000  00000000  00021b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f3cf  00000000  00000000  00021d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e53  00000000  00000000  000410d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0ecc  00000000  00000000  00042f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103df6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000548  00000000  00000000  00103e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003d4 	.word	0x080003d4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080003d4 	.word	0x080003d4

08000204 <timer_delay>:

 */

#include<main.h>

void timer_delay(){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	RCC->APB1ENR |=0x1;
 8000208:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <timer_delay+0x40>)
 800020a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800020c:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <timer_delay+0x40>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6413      	str	r3, [r2, #64]	; 0x40
//	GPIOB->MODER |=0x20000;
//	GPIOB->AFR[1] |=0x3;
	TIM2->PSC = 15999-1;
 8000214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000218:	f643 627e 	movw	r2, #15998	; 0x3e7e
 800021c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 1000-1;
 800021e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000222:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000226:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT =0;
 8000228:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800022c:	2200      	movs	r2, #0
 800022e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 =1;
 8000230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000234:	2201      	movs	r2, #1
 8000236:	601a      	str	r2, [r3, #0]

}
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	40023800 	.word	0x40023800

08000248 <main>:

int main(){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=0x1;
 800024c:	4b10      	ldr	r3, [pc, #64]	; (8000290 <main+0x48>)
 800024e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000250:	4a0f      	ldr	r2, [pc, #60]	; (8000290 <main+0x48>)
 8000252:	f043 0301 	orr.w	r3, r3, #1
 8000256:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= 0x400;
 8000258:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <main+0x4c>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a0d      	ldr	r2, [pc, #52]	; (8000294 <main+0x4c>)
 800025e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000262:	6013      	str	r3, [r2, #0]
	timer_delay();
 8000264:	f7ff ffce 	bl	8000204 <timer_delay>

	while(1){
		while(!(TIM2->SR & 1));
 8000268:	bf00      	nop
 800026a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800026e:	691b      	ldr	r3, [r3, #16]
 8000270:	f003 0301 	and.w	r3, r3, #1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d0f8      	beq.n	800026a <main+0x22>
		GPIOA->ODR ^=0x20;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <main+0x4c>)
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	4a05      	ldr	r2, [pc, #20]	; (8000294 <main+0x4c>)
 800027e:	f083 0320 	eor.w	r3, r3, #32
 8000282:	6153      	str	r3, [r2, #20]
		TIM2->SR =0;
 8000284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000288:	2200      	movs	r2, #0
 800028a:	611a      	str	r2, [r3, #16]
		while(!(TIM2->SR & 1));
 800028c:	e7ec      	b.n	8000268 <main+0x20>
 800028e:	bf00      	nop
 8000290:	40023800 	.word	0x40023800
 8000294:	40020000 	.word	0x40020000

08000298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800029c:	e7fe      	b.n	800029c <NMI_Handler+0x4>

0800029e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002a2:	e7fe      	b.n	80002a2 <HardFault_Handler+0x4>

080002a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <MemManage_Handler+0x4>

080002aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002aa:	b480      	push	{r7}
 80002ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002ae:	e7fe      	b.n	80002ae <BusFault_Handler+0x4>

080002b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002b4:	e7fe      	b.n	80002b4 <UsageFault_Handler+0x4>

080002b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002b6:	b480      	push	{r7}
 80002b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ba:	bf00      	nop
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr

080002c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr

080002d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002d2:	b480      	push	{r7}
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002d6:	bf00      	nop
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr

080002e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002e4:	f000 f83e 	bl	8000364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}

080002ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <SystemInit+0x20>)
 80002f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002f6:	4a05      	ldr	r2, [pc, #20]	; (800030c <SystemInit+0x20>)
 80002f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000348 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000314:	480d      	ldr	r0, [pc, #52]	; (800034c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000316:	490e      	ldr	r1, [pc, #56]	; (8000350 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000318:	4a0e      	ldr	r2, [pc, #56]	; (8000354 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800031c:	e002      	b.n	8000324 <LoopCopyDataInit>

0800031e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000322:	3304      	adds	r3, #4

08000324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000328:	d3f9      	bcc.n	800031e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032a:	4a0b      	ldr	r2, [pc, #44]	; (8000358 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800032c:	4c0b      	ldr	r4, [pc, #44]	; (800035c <LoopFillZerobss+0x26>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000330:	e001      	b.n	8000336 <LoopFillZerobss>

08000332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000334:	3204      	adds	r2, #4

08000336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000338:	d3fb      	bcc.n	8000332 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800033a:	f7ff ffd7 	bl	80002ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800033e:	f000 f825 	bl	800038c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000342:	f7ff ff81 	bl	8000248 <main>
  bx  lr    
 8000346:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000348:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800034c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000350:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000354:	080003f4 	.word	0x080003f4
  ldr r2, =_sbss
 8000358:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800035c:	20000024 	.word	0x20000024

08000360 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000360:	e7fe      	b.n	8000360 <ADC_IRQHandler>
	...

08000364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <HAL_IncTick+0x20>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	461a      	mov	r2, r3
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <HAL_IncTick+0x24>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4413      	add	r3, r2
 8000374:	4a04      	ldr	r2, [pc, #16]	; (8000388 <HAL_IncTick+0x24>)
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	20000000 	.word	0x20000000
 8000388:	20000020 	.word	0x20000020

0800038c <__libc_init_array>:
 800038c:	b570      	push	{r4, r5, r6, lr}
 800038e:	4d0d      	ldr	r5, [pc, #52]	; (80003c4 <__libc_init_array+0x38>)
 8000390:	4c0d      	ldr	r4, [pc, #52]	; (80003c8 <__libc_init_array+0x3c>)
 8000392:	1b64      	subs	r4, r4, r5
 8000394:	10a4      	asrs	r4, r4, #2
 8000396:	2600      	movs	r6, #0
 8000398:	42a6      	cmp	r6, r4
 800039a:	d109      	bne.n	80003b0 <__libc_init_array+0x24>
 800039c:	4d0b      	ldr	r5, [pc, #44]	; (80003cc <__libc_init_array+0x40>)
 800039e:	4c0c      	ldr	r4, [pc, #48]	; (80003d0 <__libc_init_array+0x44>)
 80003a0:	f000 f818 	bl	80003d4 <_init>
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	10a4      	asrs	r4, r4, #2
 80003a8:	2600      	movs	r6, #0
 80003aa:	42a6      	cmp	r6, r4
 80003ac:	d105      	bne.n	80003ba <__libc_init_array+0x2e>
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b4:	4798      	blx	r3
 80003b6:	3601      	adds	r6, #1
 80003b8:	e7ee      	b.n	8000398 <__libc_init_array+0xc>
 80003ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80003be:	4798      	blx	r3
 80003c0:	3601      	adds	r6, #1
 80003c2:	e7f2      	b.n	80003aa <__libc_init_array+0x1e>
 80003c4:	080003ec 	.word	0x080003ec
 80003c8:	080003ec 	.word	0x080003ec
 80003cc:	080003ec 	.word	0x080003ec
 80003d0:	080003f0 	.word	0x080003f0

080003d4 <_init>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr

080003e0 <_fini>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr
