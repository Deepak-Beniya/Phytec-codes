
LCD_I2C_Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fa0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003164  08003164  00013164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031e8  080031e8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080031e8  080031e8  000131e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031f0  080031f0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031f0  080031f0  000131f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031f4  080031f4  000131f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080031f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000001c  08003214  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003214  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcaa  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019cb  00000000  00000000  0002bcf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002d6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002e110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a80  00000000  00000000  0002ead8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cdce  00000000  00000000  0004f558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7008  00000000  00000000  0005c326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012332e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ac0  00000000  00000000  00123380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800314c 	.word	0x0800314c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	0800314c 	.word	0x0800314c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000512:	4a38      	ldr	r2, [pc, #224]	; (80005f4 <HD44780_Init+0xec>)
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000518:	4b37      	ldr	r3, [pc, #220]	; (80005f8 <HD44780_Init+0xf0>)
 800051a:	2208      	movs	r2, #8
 800051c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800051e:	4b37      	ldr	r3, [pc, #220]	; (80005fc <HD44780_Init+0xf4>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000524:	4b33      	ldr	r3, [pc, #204]	; (80005f4 <HD44780_Init+0xec>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d907      	bls.n	800053c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800052c:	4b33      	ldr	r3, [pc, #204]	; (80005fc <HD44780_Init+0xf4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0308 	orr.w	r3, r3, #8
 8000534:	b2da      	uxtb	r2, r3
 8000536:	4b31      	ldr	r3, [pc, #196]	; (80005fc <HD44780_Init+0xf4>)
 8000538:	701a      	strb	r2, [r3, #0]
 800053a:	e006      	b.n	800054a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800053c:	4b2f      	ldr	r3, [pc, #188]	; (80005fc <HD44780_Init+0xf4>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4b2d      	ldr	r3, [pc, #180]	; (80005fc <HD44780_Init+0xf4>)
 8000548:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800054a:	f000 fa13 	bl	8000974 <DelayInit>
  HAL_Delay(50);
 800054e:	2032      	movs	r0, #50	; 0x32
 8000550:	f000 fdc6 	bl	80010e0 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <HD44780_Init+0xf0>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4618      	mov	r0, r3
 800055a:	f000 f9d1 	bl	8000900 <ExpanderWrite>
  HAL_Delay(1000);
 800055e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000562:	f000 fdbd 	bl	80010e0 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000566:	2030      	movs	r0, #48	; 0x30
 8000568:	f000 f9b9 	bl	80008de <Write4Bits>
  DelayUS(4500);
 800056c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000570:	f000 fa2a 	bl	80009c8 <DelayUS>

  Write4Bits(0x03 << 4);
 8000574:	2030      	movs	r0, #48	; 0x30
 8000576:	f000 f9b2 	bl	80008de <Write4Bits>
  DelayUS(4500);
 800057a:	f241 1094 	movw	r0, #4500	; 0x1194
 800057e:	f000 fa23 	bl	80009c8 <DelayUS>

  Write4Bits(0x03 << 4);
 8000582:	2030      	movs	r0, #48	; 0x30
 8000584:	f000 f9ab 	bl	80008de <Write4Bits>
  DelayUS(4500);
 8000588:	f241 1094 	movw	r0, #4500	; 0x1194
 800058c:	f000 fa1c 	bl	80009c8 <DelayUS>

  Write4Bits(0x02 << 4);
 8000590:	2020      	movs	r0, #32
 8000592:	f000 f9a4 	bl	80008de <Write4Bits>
  DelayUS(100);
 8000596:	2064      	movs	r0, #100	; 0x64
 8000598:	f000 fa16 	bl	80009c8 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <HD44780_Init+0xf4>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	f043 0320 	orr.w	r3, r3, #32
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f95c 	bl	8000864 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <HD44780_Init+0xf8>)
 80005ae:	2204      	movs	r2, #4
 80005b0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80005b2:	f000 f88b 	bl	80006cc <HD44780_Display>
  HD44780_Clear();
 80005b6:	f000 f82b 	bl	8000610 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <HD44780_Init+0xfc>)
 80005bc:	2202      	movs	r2, #2
 80005be:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <HD44780_Init+0xfc>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f94a 	bl	8000864 <SendCommand>
  DelayUS(4500);
 80005d0:	f241 1094 	movw	r0, #4500	; 0x1194
 80005d4:	f000 f9f8 	bl	80009c8 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80005d8:	490b      	ldr	r1, [pc, #44]	; (8000608 <HD44780_Init+0x100>)
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 f8eb 	bl	80007b6 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80005e0:	490a      	ldr	r1, [pc, #40]	; (800060c <HD44780_Init+0x104>)
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 f8e7 	bl	80007b6 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80005e8:	f000 f81d 	bl	8000626 <HD44780_Home>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2000003b 	.word	0x2000003b
 80005f8:	2000003c 	.word	0x2000003c
 80005fc:	20000038 	.word	0x20000038
 8000600:	20000039 	.word	0x20000039
 8000604:	2000003a 	.word	0x2000003a
 8000608:	20000000 	.word	0x20000000
 800060c:	20000008 	.word	0x20000008

08000610 <HD44780_Clear>:

void HD44780_Clear()
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000614:	2001      	movs	r0, #1
 8000616:	f000 f925 	bl	8000864 <SendCommand>
  DelayUS(2000);
 800061a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800061e:	f000 f9d3 	bl	80009c8 <DelayUS>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}

08000626 <HD44780_Home>:

void HD44780_Home()
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800062a:	2002      	movs	r0, #2
 800062c:	f000 f91a 	bl	8000864 <SendCommand>
  DelayUS(2000);
 8000630:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000634:	f000 f9c8 	bl	80009c8 <DelayUS>
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}

0800063c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b087      	sub	sp, #28
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	460a      	mov	r2, r1
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	4613      	mov	r3, r2
 800064a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HD44780_SetCursor+0x5c>)
 800064e:	f107 0408 	add.w	r4, r7, #8
 8000652:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000654:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <HD44780_SetCursor+0x60>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	79ba      	ldrb	r2, [r7, #6]
 800065e:	429a      	cmp	r2, r3
 8000660:	d303      	bcc.n	800066a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <HD44780_SetCursor+0x60>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	3b01      	subs	r3, #1
 8000668:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800066a:	79bb      	ldrb	r3, [r7, #6]
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	3318      	adds	r3, #24
 8000670:	443b      	add	r3, r7
 8000672:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000676:	b2da      	uxtb	r2, r3
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	4413      	add	r3, r2
 800067c:	b2db      	uxtb	r3, r3
 800067e:	b25b      	sxtb	r3, r3
 8000680:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000684:	b25b      	sxtb	r3, r3
 8000686:	b2db      	uxtb	r3, r3
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f8eb 	bl	8000864 <SendCommand>
}
 800068e:	bf00      	nop
 8000690:	371c      	adds	r7, #28
 8000692:	46bd      	mov	sp, r7
 8000694:	bd90      	pop	{r4, r7, pc}
 8000696:	bf00      	nop
 8000698:	08003164 	.word	0x08003164
 800069c:	2000003b 	.word	0x2000003b

080006a0 <HD44780_NoDisplay>:

void HD44780_NoDisplay()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_DISPLAYON;
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <HD44780_NoDisplay+0x28>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	f023 0304 	bic.w	r3, r3, #4
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HD44780_NoDisplay+0x28>)
 80006b0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HD44780_NoDisplay+0x28>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	f043 0308 	orr.w	r3, r3, #8
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 f8d1 	bl	8000864 <SendCommand>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000039 	.word	0x20000039

080006cc <HD44780_Display>:

void HD44780_Display()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <HD44780_Display+0x28>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HD44780_Display+0x28>)
 80006dc:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <HD44780_Display+0x28>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	f043 0308 	orr.w	r3, r3, #8
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 f8bb 	bl	8000864 <SendCommand>
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000039 	.word	0x20000039

080006f8 <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <HD44780_NoCursor+0x28>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	f023 0302 	bic.w	r3, r3, #2
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HD44780_NoCursor+0x28>)
 8000708:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <HD44780_NoCursor+0x28>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	f043 0308 	orr.w	r3, r3, #8
 8000712:	b2db      	uxtb	r3, r3
 8000714:	4618      	mov	r0, r3
 8000716:	f000 f8a5 	bl	8000864 <SendCommand>
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000039 	.word	0x20000039

08000724 <HD44780_Cursor>:

void HD44780_Cursor()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <HD44780_Cursor+0x28>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <HD44780_Cursor+0x28>)
 8000734:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <HD44780_Cursor+0x28>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	f043 0308 	orr.w	r3, r3, #8
 800073e:	b2db      	uxtb	r3, r3
 8000740:	4618      	mov	r0, r3
 8000742:	f000 f88f 	bl	8000864 <SendCommand>
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000039 	.word	0x20000039

08000750 <HD44780_NoBlink>:

void HD44780_NoBlink()
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_BLINKON;
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <HD44780_NoBlink+0x28>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	f023 0301 	bic.w	r3, r3, #1
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HD44780_NoBlink+0x28>)
 8000760:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000762:	4b05      	ldr	r3, [pc, #20]	; (8000778 <HD44780_NoBlink+0x28>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	f043 0308 	orr.w	r3, r3, #8
 800076a:	b2db      	uxtb	r3, r3
 800076c:	4618      	mov	r0, r3
 800076e:	f000 f879 	bl	8000864 <SendCommand>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000039 	.word	0x20000039

0800077c <HD44780_Blink>:

void HD44780_Blink()
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <HD44780_Blink+0x28>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HD44780_Blink+0x28>)
 800078c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <HD44780_Blink+0x28>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	f043 0308 	orr.w	r3, r3, #8
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f863 	bl	8000864 <SendCommand>
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000039 	.word	0x20000039

080007a8 <HD44780_ScrollDisplayLeft>:

void HD44780_ScrollDisplayLeft(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 80007ac:	2018      	movs	r0, #24
 80007ae:	f000 f859 	bl	8000864 <SendCommand>
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b084      	sub	sp, #16
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	6039      	str	r1, [r7, #0]
 80007c0:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f003 0307 	and.w	r3, r3, #7
 80007c8:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	00db      	lsls	r3, r3, #3
 80007ce:	b25b      	sxtb	r3, r3
 80007d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d4:	b25b      	sxtb	r3, r3
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f843 	bl	8000864 <SendCommand>
  for (int i=0; i<8; i++)
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	e009      	b.n	80007f8 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	4413      	add	r3, r2
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 f847 	bl	8000880 <SendChar>
  for (int i=0; i<8; i++)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	3301      	adds	r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2b07      	cmp	r3, #7
 80007fc:	ddf2      	ble.n	80007e4 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80007fe:	bf00      	nop
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000810:	e006      	b.n	8000820 <HD44780_PrintStr+0x18>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	1c5a      	adds	r2, r3, #1
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f830 	bl	8000880 <SendChar>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d1f4      	bne.n	8000812 <HD44780_PrintStr+0xa>
}
 8000828:	bf00      	nop
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <HD44780_NoBacklight>:
  if(new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <HD44780_NoBacklight+0x14>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 800083e:	2000      	movs	r0, #0
 8000840:	f000 f85e 	bl	8000900 <ExpanderWrite>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	2000003c 	.word	0x2000003c

0800084c <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8000850:	4b03      	ldr	r3, [pc, #12]	; (8000860 <HD44780_Backlight+0x14>)
 8000852:	2208      	movs	r2, #8
 8000854:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8000856:	2000      	movs	r0, #0
 8000858:	f000 f852 	bl	8000900 <ExpanderWrite>
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	2000003c 	.word	0x2000003c

08000864 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f812 	bl	800089c <Send>
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2101      	movs	r1, #1
 800088e:	4618      	mov	r0, r3
 8000890:	f000 f804 	bl	800089c <Send>
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	460a      	mov	r2, r1
 80008a6:	71fb      	strb	r3, [r7, #7]
 80008a8:	4613      	mov	r3, r2
 80008aa:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	f023 030f 	bic.w	r3, r3, #15
 80008b2:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	011b      	lsls	r3, r3, #4
 80008b8:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80008ba:	7bfa      	ldrb	r2, [r7, #15]
 80008bc:	79bb      	ldrb	r3, [r7, #6]
 80008be:	4313      	orrs	r3, r2
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f80b 	bl	80008de <Write4Bits>
  Write4Bits((lownib)|mode);
 80008c8:	7bba      	ldrb	r2, [r7, #14]
 80008ca:	79bb      	ldrb	r3, [r7, #6]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 f804 	bl	80008de <Write4Bits>
}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	4603      	mov	r3, r0
 80008e6:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f808 	bl	8000900 <ExpanderWrite>
  PulseEnable(value);
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f820 	bl	8000938 <PulseEnable>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <ExpanderWrite+0x30>)
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	4313      	orrs	r3, r2
 8000912:	b2db      	uxtb	r3, r3
 8000914:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000916:	f107 020f 	add.w	r2, r7, #15
 800091a:	230a      	movs	r3, #10
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	2301      	movs	r3, #1
 8000920:	214e      	movs	r1, #78	; 0x4e
 8000922:	4804      	ldr	r0, [pc, #16]	; (8000934 <ExpanderWrite+0x34>)
 8000924:	f000 ffd8 	bl	80018d8 <HAL_I2C_Master_Transmit>
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000003c 	.word	0x2000003c
 8000934:	20000040 	.word	0x20000040

08000938 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff ffd8 	bl	8000900 <ExpanderWrite>
  DelayUS(20);
 8000950:	2014      	movs	r0, #20
 8000952:	f000 f839 	bl	80009c8 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	f023 0304 	bic.w	r3, r3, #4
 800095c:	b2db      	uxtb	r3, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ffce 	bl	8000900 <ExpanderWrite>
  DelayUS(20);
 8000964:	2014      	movs	r0, #20
 8000966:	f000 f82f 	bl	80009c8 <DelayUS>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <DelayInit>:

static void DelayInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <DelayInit+0x4c>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	4a10      	ldr	r2, [pc, #64]	; (80009c0 <DelayInit+0x4c>)
 800097e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000982:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <DelayInit+0x4c>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <DelayInit+0x4c>)
 800098a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800098e:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <DelayInit+0x50>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <DelayInit+0x50>)
 8000996:	f023 0301 	bic.w	r3, r3, #1
 800099a:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <DelayInit+0x50>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <DelayInit+0x50>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <DelayInit+0x50>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80009ae:	bf00      	nop
  __ASM volatile ("NOP");
 80009b0:	bf00      	nop
  __ASM volatile ("NOP");
 80009b2:	bf00      	nop
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000edf0 	.word	0xe000edf0
 80009c4:	e0001000 	.word	0xe0001000

080009c8 <DelayUS>:

static void DelayUS(uint32_t us) {
 80009c8:	b480      	push	{r7}
 80009ca:	b087      	sub	sp, #28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <DelayUS+0x44>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <DelayUS+0x48>)
 80009d6:	fba2 2303 	umull	r2, r3, r2, r3
 80009da:	0c9a      	lsrs	r2, r3, #18
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	fb02 f303 	mul.w	r3, r2, r3
 80009e2:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80009e4:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <DelayUS+0x4c>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <DelayUS+0x4c>)
 80009ec:	685a      	ldr	r2, [r3, #4]
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	697a      	ldr	r2, [r7, #20]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d8f6      	bhi.n	80009ea <DelayUS+0x22>
}
 80009fc:	bf00      	nop
 80009fe:	bf00      	nop
 8000a00:	371c      	adds	r7, #28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000010 	.word	0x20000010
 8000a10:	431bde83 	.word	0x431bde83
 8000a14:	e0001000 	.word	0xe0001000

08000a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1e:	f000 faed 	bl	8000ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a22:	f000 f893 	bl	8000b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a26:	f000 f957 	bl	8000cd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a2a:	f000 f92b 	bl	8000c84 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a2e:	f000 f8fb 	bl	8000c28 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    HD44780_Init(2);
 8000a32:	2002      	movs	r0, #2
 8000a34:	f7ff fd68 	bl	8000508 <HD44780_Init>
    HD44780_Clear();
 8000a38:	f7ff fdea 	bl	8000610 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff fdfc 	bl	800063c <HD44780_SetCursor>
    HD44780_PrintStr("HELLO");
 8000a44:	483e      	ldr	r0, [pc, #248]	; (8000b40 <main+0x128>)
 8000a46:	f7ff fedf 	bl	8000808 <HD44780_PrintStr>
    HD44780_SetCursor(10,1);
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	200a      	movs	r0, #10
 8000a4e:	f7ff fdf5 	bl	800063c <HD44780_SetCursor>
    HD44780_PrintStr("WORLD");
 8000a52:	483c      	ldr	r0, [pc, #240]	; (8000b44 <main+0x12c>)
 8000a54:	f7ff fed8 	bl	8000808 <HD44780_PrintStr>
    HAL_Delay(2000);
 8000a58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a5c:	f000 fb40 	bl	80010e0 <HAL_Delay>

    HD44780_Clear();
 8000a60:	f7ff fdd6 	bl	8000610 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8000a64:	2100      	movs	r1, #0
 8000a66:	2000      	movs	r0, #0
 8000a68:	f7ff fde8 	bl	800063c <HD44780_SetCursor>
    HD44780_PrintStr("HELLO");
 8000a6c:	4834      	ldr	r0, [pc, #208]	; (8000b40 <main+0x128>)
 8000a6e:	f7ff fecb 	bl	8000808 <HD44780_PrintStr>
    HAL_Delay(2000);
 8000a72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a76:	f000 fb33 	bl	80010e0 <HAL_Delay>
    HD44780_NoBacklight();
 8000a7a:	f7ff fedb 	bl	8000834 <HD44780_NoBacklight>
    HAL_Delay(2000);
 8000a7e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a82:	f000 fb2d 	bl	80010e0 <HAL_Delay>
    HD44780_Backlight();
 8000a86:	f7ff fee1 	bl	800084c <HD44780_Backlight>

    HAL_Delay(2000);
 8000a8a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a8e:	f000 fb27 	bl	80010e0 <HAL_Delay>
    HD44780_Cursor();
 8000a92:	f7ff fe47 	bl	8000724 <HD44780_Cursor>
    HAL_Delay(2000);
 8000a96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a9a:	f000 fb21 	bl	80010e0 <HAL_Delay>
    HD44780_Blink();
 8000a9e:	f7ff fe6d 	bl	800077c <HD44780_Blink>
    HAL_Delay(5000);
 8000aa2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000aa6:	f000 fb1b 	bl	80010e0 <HAL_Delay>
    HD44780_NoBlink();
 8000aaa:	f7ff fe51 	bl	8000750 <HD44780_NoBlink>
    HAL_Delay(2000);
 8000aae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ab2:	f000 fb15 	bl	80010e0 <HAL_Delay>
    HD44780_NoCursor();
 8000ab6:	f7ff fe1f 	bl	80006f8 <HD44780_NoCursor>
    HAL_Delay(2000);
 8000aba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000abe:	f000 fb0f 	bl	80010e0 <HAL_Delay>

    HD44780_NoDisplay();
 8000ac2:	f7ff fded 	bl	80006a0 <HD44780_NoDisplay>
    HAL_Delay(2000);
 8000ac6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000aca:	f000 fb09 	bl	80010e0 <HAL_Delay>
    HD44780_Display();
 8000ace:	f7ff fdfd 	bl	80006cc <HD44780_Display>

    HD44780_Clear();
 8000ad2:	f7ff fd9d 	bl	8000610 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f7ff fdaf 	bl	800063c <HD44780_SetCursor>
    HD44780_PrintStr("Learning STM32 with LCD is fun :-)");
 8000ade:	481a      	ldr	r0, [pc, #104]	; (8000b48 <main+0x130>)
 8000ae0:	f7ff fe92 	bl	8000808 <HD44780_PrintStr>
    int x;
    for(int x=0; x<40; x=x+1)
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	e008      	b.n	8000afc <main+0xe4>
    {
      HD44780_ScrollDisplayLeft();  //HD44780_ScrollDisplayRight();
 8000aea:	f7ff fe5d 	bl	80007a8 <HD44780_ScrollDisplayLeft>
      HAL_Delay(500);
 8000aee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af2:	f000 faf5 	bl	80010e0 <HAL_Delay>
    for(int x=0; x<40; x=x+1)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	3301      	adds	r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2b27      	cmp	r3, #39	; 0x27
 8000b00:	ddf3      	ble.n	8000aea <main+0xd2>
    }

    char snum[5];
    for ( int x = 1; x <= 200 ; x++ )
 8000b02:	2301      	movs	r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	e016      	b.n	8000b36 <main+0x11e>
    {
      itoa(x, snum, 10);
 8000b08:	463b      	mov	r3, r7
 8000b0a:	220a      	movs	r2, #10
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	68b8      	ldr	r0, [r7, #8]
 8000b10:	f002 fad0 	bl	80030b4 <itoa>
      HD44780_Clear();
 8000b14:	f7ff fd7c 	bl	8000610 <HD44780_Clear>
      HD44780_SetCursor(0,0);
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff fd8e 	bl	800063c <HD44780_SetCursor>
      HD44780_PrintStr(snum);
 8000b20:	463b      	mov	r3, r7
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fe70 	bl	8000808 <HD44780_PrintStr>
      HAL_Delay (1000);
 8000b28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b2c:	f000 fad8 	bl	80010e0 <HAL_Delay>
    for ( int x = 1; x <= 200 ; x++ )
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	3301      	adds	r3, #1
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	2bc8      	cmp	r3, #200	; 0xc8
 8000b3a:	dde5      	ble.n	8000b08 <main+0xf0>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <main+0x124>
 8000b3e:	bf00      	nop
 8000b40:	08003174 	.word	0x08003174
 8000b44:	0800317c 	.word	0x0800317c
 8000b48:	08003184 	.word	0x08003184

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b094      	sub	sp, #80	; 0x50
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	2234      	movs	r2, #52	; 0x34
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f002 faac 	bl	80030b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	f107 0308 	add.w	r3, r7, #8
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <SystemClock_Config+0xd4>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	4a29      	ldr	r2, [pc, #164]	; (8000c20 <SystemClock_Config+0xd4>)
 8000b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b80:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <SystemClock_Config+0xd4>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <SystemClock_Config+0xd8>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b98:	4a22      	ldr	r2, [pc, #136]	; (8000c24 <SystemClock_Config+0xd8>)
 8000b9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <SystemClock_Config+0xd8>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb4:	2310      	movs	r3, #16
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bc0:	2310      	movs	r3, #16
 8000bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bc4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bc8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 fcce 	bl	800257c <HAL_RCC_OscConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000be6:	f000 f8e5 	bl	8000db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bea:	230f      	movs	r3, #15
 8000bec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	2102      	movs	r1, #2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f001 f96e 	bl	8001ee8 <HAL_RCC_ClockConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c12:	f000 f8cf 	bl	8000db4 <Error_Handler>
  }
}
 8000c16:	bf00      	nop
 8000c18:	3750      	adds	r7, #80	; 0x50
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40007000 	.word	0x40007000

08000c28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c2e:	4a13      	ldr	r2, [pc, #76]	; (8000c7c <MX_I2C1_Init+0x54>)
 8000c30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c34:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <MX_I2C1_Init+0x58>)
 8000c36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c66:	f000 fcf3 	bl	8001650 <HAL_I2C_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c70:	f000 f8a0 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000040 	.word	0x20000040
 8000c7c:	40005400 	.word	0x40005400
 8000c80:	000186a0 	.word	0x000186a0

08000c84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <MX_USART2_UART_Init+0x50>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000c90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000cbc:	f001 fefc 	bl	8002ab8 <HAL_UART_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cc6:	f000 f875 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000094 	.word	0x20000094
 8000cd4:	40004400 	.word	0x40004400

08000cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	4b2d      	ldr	r3, [pc, #180]	; (8000da8 <MX_GPIO_Init+0xd0>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a2c      	ldr	r2, [pc, #176]	; (8000da8 <MX_GPIO_Init+0xd0>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b2a      	ldr	r3, [pc, #168]	; (8000da8 <MX_GPIO_Init+0xd0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <MX_GPIO_Init+0xd0>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a25      	ldr	r2, [pc, #148]	; (8000da8 <MX_GPIO_Init+0xd0>)
 8000d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <MX_GPIO_Init+0xd0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <MX_GPIO_Init+0xd0>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a1e      	ldr	r2, [pc, #120]	; (8000da8 <MX_GPIO_Init+0xd0>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <MX_GPIO_Init+0xd0>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <MX_GPIO_Init+0xd0>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <MX_GPIO_Init+0xd0>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_GPIO_Init+0xd0>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2120      	movs	r1, #32
 8000d62:	4812      	ldr	r0, [pc, #72]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000d64:	f000 fc5a 	bl	800161c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d6e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480c      	ldr	r0, [pc, #48]	; (8000db0 <MX_GPIO_Init+0xd8>)
 8000d80:	f000 fab8 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d84:	2320      	movs	r3, #32
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4804      	ldr	r0, [pc, #16]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000d9c:	f000 faaa 	bl	80012f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	; 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020000 	.word	0x40020000
 8000db0:	40020800 	.word	0x40020800

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
}
 8000dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <Error_Handler+0x8>
	...

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <HAL_MspInit+0x4c>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a0f      	ldr	r2, [pc, #60]	; (8000e0c <HAL_MspInit+0x4c>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <HAL_MspInit+0x4c>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_MspInit+0x4c>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a08      	ldr	r2, [pc, #32]	; (8000e0c <HAL_MspInit+0x4c>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_MspInit+0x4c>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dfe:	2007      	movs	r0, #7
 8000e00:	f000 fa44 	bl	800128c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40023800 	.word	0x40023800

08000e10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a19      	ldr	r2, [pc, #100]	; (8000e94 <HAL_I2C_MspInit+0x84>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d12c      	bne.n	8000e8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <HAL_I2C_MspInit+0x88>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a17      	ldr	r2, [pc, #92]	; (8000e98 <HAL_I2C_MspInit+0x88>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_I2C_MspInit+0x88>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e54:	2312      	movs	r3, #18
 8000e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e60:	2304      	movs	r3, #4
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480c      	ldr	r0, [pc, #48]	; (8000e9c <HAL_I2C_MspInit+0x8c>)
 8000e6c:	f000 fa42 	bl	80012f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_I2C_MspInit+0x88>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_I2C_MspInit+0x88>)
 8000e7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <HAL_I2C_MspInit+0x88>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e8c:	bf00      	nop
 8000e8e:	3728      	adds	r7, #40	; 0x28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40005400 	.word	0x40005400
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020400 	.word	0x40020400

08000ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a19      	ldr	r2, [pc, #100]	; (8000f24 <HAL_UART_MspInit+0x84>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d12b      	bne.n	8000f1a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <HAL_UART_MspInit+0x88>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a17      	ldr	r2, [pc, #92]	; (8000f28 <HAL_UART_MspInit+0x88>)
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_UART_MspInit+0x88>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_UART_MspInit+0x88>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <HAL_UART_MspInit+0x88>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_UART_MspInit+0x88>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000efa:	230c      	movs	r3, #12
 8000efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <HAL_UART_MspInit+0x8c>)
 8000f16:	f000 f9ed 	bl	80012f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f1a:	bf00      	nop
 8000f1c:	3728      	adds	r7, #40	; 0x28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40004400 	.word	0x40004400
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020000 	.word	0x40020000

08000f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <NMI_Handler+0x4>

08000f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <HardFault_Handler+0x4>

08000f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <MemManage_Handler+0x4>

08000f42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <BusFault_Handler+0x4>

08000f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <UsageFault_Handler+0x4>

08000f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7c:	f000 f890 	bl	80010a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <SystemInit+0x20>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <SystemInit+0x20>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fae:	490e      	ldr	r1, [pc, #56]	; (8000fe8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fc4:	4c0b      	ldr	r4, [pc, #44]	; (8000ff4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fd2:	f7ff ffd7 	bl	8000f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f002 f831 	bl	800303c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fda:	f7ff fd1d 	bl	8000a18 <main>
  bx  lr    
 8000fde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fe0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000fec:	080031f8 	.word	0x080031f8
  ldr r2, =_sbss
 8000ff0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000ff4:	200000dc 	.word	0x200000dc

08000ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC_IRQHandler>
	...

08000ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <HAL_Init+0x40>)
 8001006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800100a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <HAL_Init+0x40>)
 8001012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001016:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <HAL_Init+0x40>)
 800101e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001024:	2003      	movs	r0, #3
 8001026:	f000 f931 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800102a:	2000      	movs	r0, #0
 800102c:	f000 f808 	bl	8001040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001030:	f7ff fec6 	bl	8000dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40023c00 	.word	0x40023c00

08001040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_InitTick+0x54>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_InitTick+0x58>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001056:	fbb3 f3f1 	udiv	r3, r3, r1
 800105a:	fbb2 f3f3 	udiv	r3, r2, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f000 f93b 	bl	80012da <HAL_SYSTICK_Config>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e00e      	b.n	800108c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b0f      	cmp	r3, #15
 8001072:	d80a      	bhi.n	800108a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001074:	2200      	movs	r2, #0
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800107c:	f000 f911 	bl	80012a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001080:	4a06      	ldr	r2, [pc, #24]	; (800109c <HAL_InitTick+0x5c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	e000      	b.n	800108c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000010 	.word	0x20000010
 8001098:	20000018 	.word	0x20000018
 800109c:	20000014 	.word	0x20000014

080010a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x20>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x24>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <HAL_IncTick+0x24>)
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000018 	.word	0x20000018
 80010c4:	200000d8 	.word	0x200000d8

080010c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <HAL_GetTick+0x14>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	200000d8 	.word	0x200000d8

080010e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e8:	f7ff ffee 	bl	80010c8 <HAL_GetTick>
 80010ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010f8:	d005      	beq.n	8001106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_Delay+0x44>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4413      	add	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001106:	bf00      	nop
 8001108:	f7ff ffde 	bl	80010c8 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	429a      	cmp	r2, r3
 8001116:	d8f7      	bhi.n	8001108 <HAL_Delay+0x28>
  {
  }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000018 	.word	0x20000018

08001128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001144:	4013      	ands	r3, r2
 8001146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115a:	4a04      	ldr	r2, [pc, #16]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	60d3      	str	r3, [r2, #12]
}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <__NVIC_GetPriorityGrouping+0x18>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	f003 0307 	and.w	r3, r3, #7
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	; (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	; (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	; 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001258:	d301      	bcc.n	800125e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <SysTick_Config+0x40>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001266:	210f      	movs	r1, #15
 8001268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800126c:	f7ff ff8e 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <SysTick_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <SysTick_Config+0x40>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff47 	bl	8001128 <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b4:	f7ff ff5c 	bl	8001170 <__NVIC_GetPriorityGrouping>
 80012b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff ff8e 	bl	80011e0 <NVIC_EncodePriority>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff5d 	bl	800118c <__NVIC_SetPriority>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ffb0 	bl	8001248 <SysTick_Config>
 80012e8:	4603      	mov	r3, r0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
 800130e:	e165      	b.n	80015dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001310:	2201      	movs	r2, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	429a      	cmp	r2, r3
 800132a:	f040 8154 	bne.w	80015d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b01      	cmp	r3, #1
 8001338:	d005      	beq.n	8001346 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001342:	2b02      	cmp	r3, #2
 8001344:	d130      	bne.n	80013a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	2203      	movs	r2, #3
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800137c:	2201      	movs	r2, #1
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	f003 0201 	and.w	r2, r3, #1
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d017      	beq.n	80013e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d123      	bne.n	8001438 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	08da      	lsrs	r2, r3, #3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3208      	adds	r2, #8
 80013f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	220f      	movs	r2, #15
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	691a      	ldr	r2, [r3, #16]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	08da      	lsrs	r2, r3, #3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3208      	adds	r2, #8
 8001432:	69b9      	ldr	r1, [r7, #24]
 8001434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	2203      	movs	r2, #3
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0203 	and.w	r2, r3, #3
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80ae 	beq.w	80015d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b5d      	ldr	r3, [pc, #372]	; (80015f4 <HAL_GPIO_Init+0x300>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	4a5c      	ldr	r2, [pc, #368]	; (80015f4 <HAL_GPIO_Init+0x300>)
 8001484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001488:	6453      	str	r3, [r2, #68]	; 0x44
 800148a:	4b5a      	ldr	r3, [pc, #360]	; (80015f4 <HAL_GPIO_Init+0x300>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001496:	4a58      	ldr	r2, [pc, #352]	; (80015f8 <HAL_GPIO_Init+0x304>)
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	089b      	lsrs	r3, r3, #2
 800149c:	3302      	adds	r3, #2
 800149e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	220f      	movs	r2, #15
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4f      	ldr	r2, [pc, #316]	; (80015fc <HAL_GPIO_Init+0x308>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d025      	beq.n	800150e <HAL_GPIO_Init+0x21a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4e      	ldr	r2, [pc, #312]	; (8001600 <HAL_GPIO_Init+0x30c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d01f      	beq.n	800150a <HAL_GPIO_Init+0x216>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4d      	ldr	r2, [pc, #308]	; (8001604 <HAL_GPIO_Init+0x310>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d019      	beq.n	8001506 <HAL_GPIO_Init+0x212>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a4c      	ldr	r2, [pc, #304]	; (8001608 <HAL_GPIO_Init+0x314>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d013      	beq.n	8001502 <HAL_GPIO_Init+0x20e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a4b      	ldr	r2, [pc, #300]	; (800160c <HAL_GPIO_Init+0x318>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d00d      	beq.n	80014fe <HAL_GPIO_Init+0x20a>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4a      	ldr	r2, [pc, #296]	; (8001610 <HAL_GPIO_Init+0x31c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d007      	beq.n	80014fa <HAL_GPIO_Init+0x206>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a49      	ldr	r2, [pc, #292]	; (8001614 <HAL_GPIO_Init+0x320>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d101      	bne.n	80014f6 <HAL_GPIO_Init+0x202>
 80014f2:	2306      	movs	r3, #6
 80014f4:	e00c      	b.n	8001510 <HAL_GPIO_Init+0x21c>
 80014f6:	2307      	movs	r3, #7
 80014f8:	e00a      	b.n	8001510 <HAL_GPIO_Init+0x21c>
 80014fa:	2305      	movs	r3, #5
 80014fc:	e008      	b.n	8001510 <HAL_GPIO_Init+0x21c>
 80014fe:	2304      	movs	r3, #4
 8001500:	e006      	b.n	8001510 <HAL_GPIO_Init+0x21c>
 8001502:	2303      	movs	r3, #3
 8001504:	e004      	b.n	8001510 <HAL_GPIO_Init+0x21c>
 8001506:	2302      	movs	r3, #2
 8001508:	e002      	b.n	8001510 <HAL_GPIO_Init+0x21c>
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <HAL_GPIO_Init+0x21c>
 800150e:	2300      	movs	r3, #0
 8001510:	69fa      	ldr	r2, [r7, #28]
 8001512:	f002 0203 	and.w	r2, r2, #3
 8001516:	0092      	lsls	r2, r2, #2
 8001518:	4093      	lsls	r3, r2
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001520:	4935      	ldr	r1, [pc, #212]	; (80015f8 <HAL_GPIO_Init+0x304>)
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	3302      	adds	r3, #2
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800152e:	4b3a      	ldr	r3, [pc, #232]	; (8001618 <HAL_GPIO_Init+0x324>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001552:	4a31      	ldr	r2, [pc, #196]	; (8001618 <HAL_GPIO_Init+0x324>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001558:	4b2f      	ldr	r3, [pc, #188]	; (8001618 <HAL_GPIO_Init+0x324>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800157c:	4a26      	ldr	r2, [pc, #152]	; (8001618 <HAL_GPIO_Init+0x324>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001582:	4b25      	ldr	r3, [pc, #148]	; (8001618 <HAL_GPIO_Init+0x324>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015a6:	4a1c      	ldr	r2, [pc, #112]	; (8001618 <HAL_GPIO_Init+0x324>)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <HAL_GPIO_Init+0x324>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015d0:	4a11      	ldr	r2, [pc, #68]	; (8001618 <HAL_GPIO_Init+0x324>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3301      	adds	r3, #1
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	2b0f      	cmp	r3, #15
 80015e0:	f67f ae96 	bls.w	8001310 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40013800 	.word	0x40013800
 80015fc:	40020000 	.word	0x40020000
 8001600:	40020400 	.word	0x40020400
 8001604:	40020800 	.word	0x40020800
 8001608:	40020c00 	.word	0x40020c00
 800160c:	40021000 	.word	0x40021000
 8001610:	40021400 	.word	0x40021400
 8001614:	40021800 	.word	0x40021800
 8001618:	40013c00 	.word	0x40013c00

0800161c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
 8001628:	4613      	mov	r3, r2
 800162a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800162c:	787b      	ldrb	r3, [r7, #1]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001632:	887a      	ldrh	r2, [r7, #2]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001638:	e003      	b.n	8001642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800163a:	887b      	ldrh	r3, [r7, #2]
 800163c:	041a      	lsls	r2, r3, #16
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	619a      	str	r2, [r3, #24]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e12b      	b.n	80018ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d106      	bne.n	800167c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff fbca 	bl	8000e10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2224      	movs	r2, #36	; 0x24
 8001680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0201 	bic.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016b4:	f000 fd0a 	bl	80020cc <HAL_RCC_GetPCLK1Freq>
 80016b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a81      	ldr	r2, [pc, #516]	; (80018c4 <HAL_I2C_Init+0x274>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d807      	bhi.n	80016d4 <HAL_I2C_Init+0x84>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4a80      	ldr	r2, [pc, #512]	; (80018c8 <HAL_I2C_Init+0x278>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	bf94      	ite	ls
 80016cc:	2301      	movls	r3, #1
 80016ce:	2300      	movhi	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	e006      	b.n	80016e2 <HAL_I2C_Init+0x92>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4a7d      	ldr	r2, [pc, #500]	; (80018cc <HAL_I2C_Init+0x27c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	bf94      	ite	ls
 80016dc:	2301      	movls	r3, #1
 80016de:	2300      	movhi	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e0e7      	b.n	80018ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4a78      	ldr	r2, [pc, #480]	; (80018d0 <HAL_I2C_Init+0x280>)
 80016ee:	fba2 2303 	umull	r2, r3, r2, r3
 80016f2:	0c9b      	lsrs	r3, r3, #18
 80016f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	430a      	orrs	r2, r1
 8001708:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4a6a      	ldr	r2, [pc, #424]	; (80018c4 <HAL_I2C_Init+0x274>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d802      	bhi.n	8001724 <HAL_I2C_Init+0xd4>
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	3301      	adds	r3, #1
 8001722:	e009      	b.n	8001738 <HAL_I2C_Init+0xe8>
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800172a:	fb02 f303 	mul.w	r3, r2, r3
 800172e:	4a69      	ldr	r2, [pc, #420]	; (80018d4 <HAL_I2C_Init+0x284>)
 8001730:	fba2 2303 	umull	r2, r3, r2, r3
 8001734:	099b      	lsrs	r3, r3, #6
 8001736:	3301      	adds	r3, #1
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	430b      	orrs	r3, r1
 800173e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800174a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	495c      	ldr	r1, [pc, #368]	; (80018c4 <HAL_I2C_Init+0x274>)
 8001754:	428b      	cmp	r3, r1
 8001756:	d819      	bhi.n	800178c <HAL_I2C_Init+0x13c>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1e59      	subs	r1, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	fbb1 f3f3 	udiv	r3, r1, r3
 8001766:	1c59      	adds	r1, r3, #1
 8001768:	f640 73fc 	movw	r3, #4092	; 0xffc
 800176c:	400b      	ands	r3, r1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00a      	beq.n	8001788 <HAL_I2C_Init+0x138>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1e59      	subs	r1, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001780:	3301      	adds	r3, #1
 8001782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001786:	e051      	b.n	800182c <HAL_I2C_Init+0x1dc>
 8001788:	2304      	movs	r3, #4
 800178a:	e04f      	b.n	800182c <HAL_I2C_Init+0x1dc>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d111      	bne.n	80017b8 <HAL_I2C_Init+0x168>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1e58      	subs	r0, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6859      	ldr	r1, [r3, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	440b      	add	r3, r1
 80017a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a6:	3301      	adds	r3, #1
 80017a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bf0c      	ite	eq
 80017b0:	2301      	moveq	r3, #1
 80017b2:	2300      	movne	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	e012      	b.n	80017de <HAL_I2C_Init+0x18e>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1e58      	subs	r0, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6859      	ldr	r1, [r3, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	440b      	add	r3, r1
 80017c6:	0099      	lsls	r1, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ce:	3301      	adds	r3, #1
 80017d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_I2C_Init+0x196>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e022      	b.n	800182c <HAL_I2C_Init+0x1dc>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10e      	bne.n	800180c <HAL_I2C_Init+0x1bc>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1e58      	subs	r0, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6859      	ldr	r1, [r3, #4]
 80017f6:	460b      	mov	r3, r1
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	440b      	add	r3, r1
 80017fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001800:	3301      	adds	r3, #1
 8001802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800180a:	e00f      	b.n	800182c <HAL_I2C_Init+0x1dc>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	1e58      	subs	r0, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6859      	ldr	r1, [r3, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	0099      	lsls	r1, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001822:	3301      	adds	r3, #1
 8001824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001828:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	6809      	ldr	r1, [r1, #0]
 8001830:	4313      	orrs	r3, r2
 8001832:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69da      	ldr	r2, [r3, #28]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800185a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6911      	ldr	r1, [r2, #16]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68d2      	ldr	r2, [r2, #12]
 8001866:	4311      	orrs	r1, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	430b      	orrs	r3, r1
 800186e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2220      	movs	r2, #32
 80018a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	000186a0 	.word	0x000186a0
 80018c8:	001e847f 	.word	0x001e847f
 80018cc:	003d08ff 	.word	0x003d08ff
 80018d0:	431bde83 	.word	0x431bde83
 80018d4:	10624dd3 	.word	0x10624dd3

080018d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af02      	add	r7, sp, #8
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	461a      	mov	r2, r3
 80018e4:	460b      	mov	r3, r1
 80018e6:	817b      	strh	r3, [r7, #10]
 80018e8:	4613      	mov	r3, r2
 80018ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff fbec 	bl	80010c8 <HAL_GetTick>
 80018f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b20      	cmp	r3, #32
 80018fc:	f040 80e0 	bne.w	8001ac0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	2319      	movs	r3, #25
 8001906:	2201      	movs	r2, #1
 8001908:	4970      	ldr	r1, [pc, #448]	; (8001acc <HAL_I2C_Master_Transmit+0x1f4>)
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 f964 	bl	8001bd8 <I2C_WaitOnFlagUntilTimeout>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001916:	2302      	movs	r3, #2
 8001918:	e0d3      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_I2C_Master_Transmit+0x50>
 8001924:	2302      	movs	r3, #2
 8001926:	e0cc      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x1ea>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b01      	cmp	r3, #1
 800193c:	d007      	beq.n	800194e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f042 0201 	orr.w	r2, r2, #1
 800194c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800195c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2221      	movs	r2, #33	; 0x21
 8001962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2210      	movs	r2, #16
 800196a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	893a      	ldrh	r2, [r7, #8]
 800197e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001984:	b29a      	uxth	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4a50      	ldr	r2, [pc, #320]	; (8001ad0 <HAL_I2C_Master_Transmit+0x1f8>)
 800198e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001990:	8979      	ldrh	r1, [r7, #10]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	6a3a      	ldr	r2, [r7, #32]
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 f89c 	bl	8001ad4 <I2C_MasterRequestWrite>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e08d      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019bc:	e066      	b.n	8001a8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	6a39      	ldr	r1, [r7, #32]
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 f9de 	bl	8001d84 <I2C_WaitOnTXEFlagUntilTimeout>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00d      	beq.n	80019ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d107      	bne.n	80019e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e06b      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	781a      	ldrb	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a12:	3b01      	subs	r3, #1
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d11b      	bne.n	8001a60 <HAL_I2C_Master_Transmit+0x188>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d017      	beq.n	8001a60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	781a      	ldrb	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	6a39      	ldr	r1, [r7, #32]
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 f9ce 	bl	8001e06 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00d      	beq.n	8001a8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d107      	bne.n	8001a88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e01a      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d194      	bne.n	80019be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	e000      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ac0:	2302      	movs	r3, #2
  }
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	00100002 	.word	0x00100002
 8001ad0:	ffff0000 	.word	0xffff0000

08001ad4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d006      	beq.n	8001afe <I2C_MasterRequestWrite+0x2a>
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d003      	beq.n	8001afe <I2C_MasterRequestWrite+0x2a>
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001afc:	d108      	bne.n	8001b10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e00b      	b.n	8001b28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	2b12      	cmp	r3, #18
 8001b16:	d107      	bne.n	8001b28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 f84f 	bl	8001bd8 <I2C_WaitOnFlagUntilTimeout>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00d      	beq.n	8001b5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b4e:	d103      	bne.n	8001b58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e035      	b.n	8001bc8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b64:	d108      	bne.n	8001b78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b66:	897b      	ldrh	r3, [r7, #10]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b74:	611a      	str	r2, [r3, #16]
 8001b76:	e01b      	b.n	8001bb0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b78:	897b      	ldrh	r3, [r7, #10]
 8001b7a:	11db      	asrs	r3, r3, #7
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	f003 0306 	and.w	r3, r3, #6
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	f063 030f 	orn	r3, r3, #15
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	490e      	ldr	r1, [pc, #56]	; (8001bd0 <I2C_MasterRequestWrite+0xfc>)
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 f875 	bl	8001c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e010      	b.n	8001bc8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ba6:	897b      	ldrh	r3, [r7, #10]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	4907      	ldr	r1, [pc, #28]	; (8001bd4 <I2C_MasterRequestWrite+0x100>)
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 f865 	bl	8001c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	00010008 	.word	0x00010008
 8001bd4:	00010002 	.word	0x00010002

08001bd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	4613      	mov	r3, r2
 8001be6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001be8:	e025      	b.n	8001c36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bf0:	d021      	beq.n	8001c36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf2:	f7ff fa69 	bl	80010c8 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d302      	bcc.n	8001c08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d116      	bne.n	8001c36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2220      	movs	r2, #32
 8001c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f043 0220 	orr.w	r2, r3, #32
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e023      	b.n	8001c7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	0c1b      	lsrs	r3, r3, #16
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d10d      	bne.n	8001c5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	43da      	mvns	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	bf0c      	ite	eq
 8001c52:	2301      	moveq	r3, #1
 8001c54:	2300      	movne	r3, #0
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	e00c      	b.n	8001c76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4013      	ands	r3, r2
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	bf0c      	ite	eq
 8001c6e:	2301      	moveq	r3, #1
 8001c70:	2300      	movne	r3, #0
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	461a      	mov	r2, r3
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d0b6      	beq.n	8001bea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b084      	sub	sp, #16
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c94:	e051      	b.n	8001d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca4:	d123      	bne.n	8001cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cb4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cbe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2220      	movs	r2, #32
 8001cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f043 0204 	orr.w	r2, r3, #4
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e046      	b.n	8001d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cf4:	d021      	beq.n	8001d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf6:	f7ff f9e7 	bl	80010c8 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d302      	bcc.n	8001d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d116      	bne.n	8001d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2220      	movs	r2, #32
 8001d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f043 0220 	orr.w	r2, r3, #32
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e020      	b.n	8001d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	0c1b      	lsrs	r3, r3, #16
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d10c      	bne.n	8001d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	bf14      	ite	ne
 8001d56:	2301      	movne	r3, #1
 8001d58:	2300      	moveq	r3, #0
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	e00b      	b.n	8001d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	43da      	mvns	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bf14      	ite	ne
 8001d70:	2301      	movne	r3, #1
 8001d72:	2300      	moveq	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d18d      	bne.n	8001c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d90:	e02d      	b.n	8001dee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 f878 	bl	8001e88 <I2C_IsAcknowledgeFailed>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e02d      	b.n	8001dfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001da8:	d021      	beq.n	8001dee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001daa:	f7ff f98d 	bl	80010c8 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d302      	bcc.n	8001dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d116      	bne.n	8001dee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f043 0220 	orr.w	r2, r3, #32
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e007      	b.n	8001dfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df8:	2b80      	cmp	r3, #128	; 0x80
 8001dfa:	d1ca      	bne.n	8001d92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b084      	sub	sp, #16
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e12:	e02d      	b.n	8001e70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 f837 	bl	8001e88 <I2C_IsAcknowledgeFailed>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e02d      	b.n	8001e80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e2a:	d021      	beq.n	8001e70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e2c:	f7ff f94c 	bl	80010c8 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d302      	bcc.n	8001e42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d116      	bne.n	8001e70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	f043 0220 	orr.w	r2, r3, #32
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e007      	b.n	8001e80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d1ca      	bne.n	8001e14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e9e:	d11b      	bne.n	8001ed8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ea8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	f043 0204 	orr.w	r2, r3, #4
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0cc      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001efc:	4b68      	ldr	r3, [pc, #416]	; (80020a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d90c      	bls.n	8001f24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b65      	ldr	r3, [pc, #404]	; (80020a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	4b63      	ldr	r3, [pc, #396]	; (80020a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0b8      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d020      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f3c:	4b59      	ldr	r3, [pc, #356]	; (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4a58      	ldr	r2, [pc, #352]	; (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f54:	4b53      	ldr	r3, [pc, #332]	; (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4a52      	ldr	r2, [pc, #328]	; (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f60:	4b50      	ldr	r3, [pc, #320]	; (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	494d      	ldr	r1, [pc, #308]	; (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d044      	beq.n	8002008 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d107      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f86:	4b47      	ldr	r3, [pc, #284]	; (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d119      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e07f      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d003      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa6:	4b3f      	ldr	r3, [pc, #252]	; (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d109      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e06f      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e067      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc6:	4b37      	ldr	r3, [pc, #220]	; (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f023 0203 	bic.w	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	4934      	ldr	r1, [pc, #208]	; (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd8:	f7ff f876 	bl	80010c8 <HAL_GetTick>
 8001fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	e00a      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe0:	f7ff f872 	bl	80010c8 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e04f      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff6:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 020c 	and.w	r2, r3, #12
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	429a      	cmp	r2, r3
 8002006:	d1eb      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002008:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <HAL_RCC_ClockConfig+0x1b8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d20c      	bcs.n	8002030 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201e:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d001      	beq.n	8002030 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e032      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4916      	ldr	r1, [pc, #88]	; (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d009      	beq.n	800206e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	490e      	ldr	r1, [pc, #56]	; (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	4313      	orrs	r3, r2
 800206c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800206e:	f000 f855 	bl	800211c <HAL_RCC_GetSysClockFreq>
 8002072:	4602      	mov	r2, r0
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	490a      	ldr	r1, [pc, #40]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002080:	5ccb      	ldrb	r3, [r1, r3]
 8002082:	fa22 f303 	lsr.w	r3, r2, r3
 8002086:	4a09      	ldr	r2, [pc, #36]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_RCC_ClockConfig+0x1c8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe ffd6 	bl	8001040 <HAL_InitTick>

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40023c00 	.word	0x40023c00
 80020a4:	40023800 	.word	0x40023800
 80020a8:	080031a8 	.word	0x080031a8
 80020ac:	20000010 	.word	0x20000010
 80020b0:	20000014 	.word	0x20000014

080020b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020ba:	681b      	ldr	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20000010 	.word	0x20000010

080020cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020d0:	f7ff fff0 	bl	80020b4 <HAL_RCC_GetHCLKFreq>
 80020d4:	4602      	mov	r2, r0
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	0a9b      	lsrs	r3, r3, #10
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	4903      	ldr	r1, [pc, #12]	; (80020f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020e2:	5ccb      	ldrb	r3, [r1, r3]
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40023800 	.word	0x40023800
 80020f0:	080031b8 	.word	0x080031b8

080020f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020f8:	f7ff ffdc 	bl	80020b4 <HAL_RCC_GetHCLKFreq>
 80020fc:	4602      	mov	r2, r0
 80020fe:	4b05      	ldr	r3, [pc, #20]	; (8002114 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	0b5b      	lsrs	r3, r3, #13
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	4903      	ldr	r1, [pc, #12]	; (8002118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800210a:	5ccb      	ldrb	r3, [r1, r3]
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002110:	4618      	mov	r0, r3
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40023800 	.word	0x40023800
 8002118:	080031b8 	.word	0x080031b8

0800211c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800211c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002120:	b0ae      	sub	sp, #184	; 0xb8
 8002122:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002142:	4bcb      	ldr	r3, [pc, #812]	; (8002470 <HAL_RCC_GetSysClockFreq+0x354>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b0c      	cmp	r3, #12
 800214c:	f200 8206 	bhi.w	800255c <HAL_RCC_GetSysClockFreq+0x440>
 8002150:	a201      	add	r2, pc, #4	; (adr r2, 8002158 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002156:	bf00      	nop
 8002158:	0800218d 	.word	0x0800218d
 800215c:	0800255d 	.word	0x0800255d
 8002160:	0800255d 	.word	0x0800255d
 8002164:	0800255d 	.word	0x0800255d
 8002168:	08002195 	.word	0x08002195
 800216c:	0800255d 	.word	0x0800255d
 8002170:	0800255d 	.word	0x0800255d
 8002174:	0800255d 	.word	0x0800255d
 8002178:	0800219d 	.word	0x0800219d
 800217c:	0800255d 	.word	0x0800255d
 8002180:	0800255d 	.word	0x0800255d
 8002184:	0800255d 	.word	0x0800255d
 8002188:	0800238d 	.word	0x0800238d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800218c:	4bb9      	ldr	r3, [pc, #740]	; (8002474 <HAL_RCC_GetSysClockFreq+0x358>)
 800218e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002192:	e1e7      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002194:	4bb8      	ldr	r3, [pc, #736]	; (8002478 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002196:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800219a:	e1e3      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800219c:	4bb4      	ldr	r3, [pc, #720]	; (8002470 <HAL_RCC_GetSysClockFreq+0x354>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021a8:	4bb1      	ldr	r3, [pc, #708]	; (8002470 <HAL_RCC_GetSysClockFreq+0x354>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d071      	beq.n	8002298 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b4:	4bae      	ldr	r3, [pc, #696]	; (8002470 <HAL_RCC_GetSysClockFreq+0x354>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	2200      	movs	r2, #0
 80021bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021c0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80021c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80021d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80021da:	4622      	mov	r2, r4
 80021dc:	462b      	mov	r3, r5
 80021de:	f04f 0000 	mov.w	r0, #0
 80021e2:	f04f 0100 	mov.w	r1, #0
 80021e6:	0159      	lsls	r1, r3, #5
 80021e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021ec:	0150      	lsls	r0, r2, #5
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4621      	mov	r1, r4
 80021f4:	1a51      	subs	r1, r2, r1
 80021f6:	6439      	str	r1, [r7, #64]	; 0x40
 80021f8:	4629      	mov	r1, r5
 80021fa:	eb63 0301 	sbc.w	r3, r3, r1
 80021fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800220c:	4649      	mov	r1, r9
 800220e:	018b      	lsls	r3, r1, #6
 8002210:	4641      	mov	r1, r8
 8002212:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002216:	4641      	mov	r1, r8
 8002218:	018a      	lsls	r2, r1, #6
 800221a:	4641      	mov	r1, r8
 800221c:	1a51      	subs	r1, r2, r1
 800221e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002220:	4649      	mov	r1, r9
 8002222:	eb63 0301 	sbc.w	r3, r3, r1
 8002226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002234:	4649      	mov	r1, r9
 8002236:	00cb      	lsls	r3, r1, #3
 8002238:	4641      	mov	r1, r8
 800223a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800223e:	4641      	mov	r1, r8
 8002240:	00ca      	lsls	r2, r1, #3
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	4603      	mov	r3, r0
 8002248:	4622      	mov	r2, r4
 800224a:	189b      	adds	r3, r3, r2
 800224c:	633b      	str	r3, [r7, #48]	; 0x30
 800224e:	462b      	mov	r3, r5
 8002250:	460a      	mov	r2, r1
 8002252:	eb42 0303 	adc.w	r3, r2, r3
 8002256:	637b      	str	r3, [r7, #52]	; 0x34
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002264:	4629      	mov	r1, r5
 8002266:	024b      	lsls	r3, r1, #9
 8002268:	4621      	mov	r1, r4
 800226a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800226e:	4621      	mov	r1, r4
 8002270:	024a      	lsls	r2, r1, #9
 8002272:	4610      	mov	r0, r2
 8002274:	4619      	mov	r1, r3
 8002276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800227a:	2200      	movs	r2, #0
 800227c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002280:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002284:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002288:	f7fd ffbc 	bl	8000204 <__aeabi_uldivmod>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4613      	mov	r3, r2
 8002292:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002296:	e067      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002298:	4b75      	ldr	r3, [pc, #468]	; (8002470 <HAL_RCC_GetSysClockFreq+0x354>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	099b      	lsrs	r3, r3, #6
 800229e:	2200      	movs	r2, #0
 80022a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022a4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80022a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80022b2:	2300      	movs	r3, #0
 80022b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80022ba:	4622      	mov	r2, r4
 80022bc:	462b      	mov	r3, r5
 80022be:	f04f 0000 	mov.w	r0, #0
 80022c2:	f04f 0100 	mov.w	r1, #0
 80022c6:	0159      	lsls	r1, r3, #5
 80022c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022cc:	0150      	lsls	r0, r2, #5
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4621      	mov	r1, r4
 80022d4:	1a51      	subs	r1, r2, r1
 80022d6:	62b9      	str	r1, [r7, #40]	; 0x28
 80022d8:	4629      	mov	r1, r5
 80022da:	eb63 0301 	sbc.w	r3, r3, r1
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80022ec:	4649      	mov	r1, r9
 80022ee:	018b      	lsls	r3, r1, #6
 80022f0:	4641      	mov	r1, r8
 80022f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022f6:	4641      	mov	r1, r8
 80022f8:	018a      	lsls	r2, r1, #6
 80022fa:	4641      	mov	r1, r8
 80022fc:	ebb2 0a01 	subs.w	sl, r2, r1
 8002300:	4649      	mov	r1, r9
 8002302:	eb63 0b01 	sbc.w	fp, r3, r1
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002312:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002316:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800231a:	4692      	mov	sl, r2
 800231c:	469b      	mov	fp, r3
 800231e:	4623      	mov	r3, r4
 8002320:	eb1a 0303 	adds.w	r3, sl, r3
 8002324:	623b      	str	r3, [r7, #32]
 8002326:	462b      	mov	r3, r5
 8002328:	eb4b 0303 	adc.w	r3, fp, r3
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800233a:	4629      	mov	r1, r5
 800233c:	028b      	lsls	r3, r1, #10
 800233e:	4621      	mov	r1, r4
 8002340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002344:	4621      	mov	r1, r4
 8002346:	028a      	lsls	r2, r1, #10
 8002348:	4610      	mov	r0, r2
 800234a:	4619      	mov	r1, r3
 800234c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002350:	2200      	movs	r2, #0
 8002352:	673b      	str	r3, [r7, #112]	; 0x70
 8002354:	677a      	str	r2, [r7, #116]	; 0x74
 8002356:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800235a:	f7fd ff53 	bl	8000204 <__aeabi_uldivmod>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4613      	mov	r3, r2
 8002364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002368:	4b41      	ldr	r3, [pc, #260]	; (8002470 <HAL_RCC_GetSysClockFreq+0x354>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	0c1b      	lsrs	r3, r3, #16
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	3301      	adds	r3, #1
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800237a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800237e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002382:	fbb2 f3f3 	udiv	r3, r2, r3
 8002386:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800238a:	e0eb      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800238c:	4b38      	ldr	r3, [pc, #224]	; (8002470 <HAL_RCC_GetSysClockFreq+0x354>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002394:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002398:	4b35      	ldr	r3, [pc, #212]	; (8002470 <HAL_RCC_GetSysClockFreq+0x354>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d06b      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a4:	4b32      	ldr	r3, [pc, #200]	; (8002470 <HAL_RCC_GetSysClockFreq+0x354>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	099b      	lsrs	r3, r3, #6
 80023aa:	2200      	movs	r2, #0
 80023ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80023ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80023b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023b6:	663b      	str	r3, [r7, #96]	; 0x60
 80023b8:	2300      	movs	r3, #0
 80023ba:	667b      	str	r3, [r7, #100]	; 0x64
 80023bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80023c0:	4622      	mov	r2, r4
 80023c2:	462b      	mov	r3, r5
 80023c4:	f04f 0000 	mov.w	r0, #0
 80023c8:	f04f 0100 	mov.w	r1, #0
 80023cc:	0159      	lsls	r1, r3, #5
 80023ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023d2:	0150      	lsls	r0, r2, #5
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4621      	mov	r1, r4
 80023da:	1a51      	subs	r1, r2, r1
 80023dc:	61b9      	str	r1, [r7, #24]
 80023de:	4629      	mov	r1, r5
 80023e0:	eb63 0301 	sbc.w	r3, r3, r1
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80023f2:	4659      	mov	r1, fp
 80023f4:	018b      	lsls	r3, r1, #6
 80023f6:	4651      	mov	r1, sl
 80023f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023fc:	4651      	mov	r1, sl
 80023fe:	018a      	lsls	r2, r1, #6
 8002400:	4651      	mov	r1, sl
 8002402:	ebb2 0801 	subs.w	r8, r2, r1
 8002406:	4659      	mov	r1, fp
 8002408:	eb63 0901 	sbc.w	r9, r3, r1
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002418:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800241c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002420:	4690      	mov	r8, r2
 8002422:	4699      	mov	r9, r3
 8002424:	4623      	mov	r3, r4
 8002426:	eb18 0303 	adds.w	r3, r8, r3
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	462b      	mov	r3, r5
 800242e:	eb49 0303 	adc.w	r3, r9, r3
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002440:	4629      	mov	r1, r5
 8002442:	024b      	lsls	r3, r1, #9
 8002444:	4621      	mov	r1, r4
 8002446:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800244a:	4621      	mov	r1, r4
 800244c:	024a      	lsls	r2, r1, #9
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002456:	2200      	movs	r2, #0
 8002458:	65bb      	str	r3, [r7, #88]	; 0x58
 800245a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800245c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002460:	f7fd fed0 	bl	8000204 <__aeabi_uldivmod>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4613      	mov	r3, r2
 800246a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800246e:	e065      	b.n	800253c <HAL_RCC_GetSysClockFreq+0x420>
 8002470:	40023800 	.word	0x40023800
 8002474:	00f42400 	.word	0x00f42400
 8002478:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247c:	4b3d      	ldr	r3, [pc, #244]	; (8002574 <HAL_RCC_GetSysClockFreq+0x458>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	2200      	movs	r2, #0
 8002484:	4618      	mov	r0, r3
 8002486:	4611      	mov	r1, r2
 8002488:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800248c:	653b      	str	r3, [r7, #80]	; 0x50
 800248e:	2300      	movs	r3, #0
 8002490:	657b      	str	r3, [r7, #84]	; 0x54
 8002492:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002496:	4642      	mov	r2, r8
 8002498:	464b      	mov	r3, r9
 800249a:	f04f 0000 	mov.w	r0, #0
 800249e:	f04f 0100 	mov.w	r1, #0
 80024a2:	0159      	lsls	r1, r3, #5
 80024a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024a8:	0150      	lsls	r0, r2, #5
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4641      	mov	r1, r8
 80024b0:	1a51      	subs	r1, r2, r1
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	4649      	mov	r1, r9
 80024b6:	eb63 0301 	sbc.w	r3, r3, r1
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80024c8:	4659      	mov	r1, fp
 80024ca:	018b      	lsls	r3, r1, #6
 80024cc:	4651      	mov	r1, sl
 80024ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024d2:	4651      	mov	r1, sl
 80024d4:	018a      	lsls	r2, r1, #6
 80024d6:	4651      	mov	r1, sl
 80024d8:	1a54      	subs	r4, r2, r1
 80024da:	4659      	mov	r1, fp
 80024dc:	eb63 0501 	sbc.w	r5, r3, r1
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	00eb      	lsls	r3, r5, #3
 80024ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024ee:	00e2      	lsls	r2, r4, #3
 80024f0:	4614      	mov	r4, r2
 80024f2:	461d      	mov	r5, r3
 80024f4:	4643      	mov	r3, r8
 80024f6:	18e3      	adds	r3, r4, r3
 80024f8:	603b      	str	r3, [r7, #0]
 80024fa:	464b      	mov	r3, r9
 80024fc:	eb45 0303 	adc.w	r3, r5, r3
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800250e:	4629      	mov	r1, r5
 8002510:	028b      	lsls	r3, r1, #10
 8002512:	4621      	mov	r1, r4
 8002514:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002518:	4621      	mov	r1, r4
 800251a:	028a      	lsls	r2, r1, #10
 800251c:	4610      	mov	r0, r2
 800251e:	4619      	mov	r1, r3
 8002520:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002524:	2200      	movs	r2, #0
 8002526:	64bb      	str	r3, [r7, #72]	; 0x48
 8002528:	64fa      	str	r2, [r7, #76]	; 0x4c
 800252a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800252e:	f7fd fe69 	bl	8000204 <__aeabi_uldivmod>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4613      	mov	r3, r2
 8002538:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800253c:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <HAL_RCC_GetSysClockFreq+0x458>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	0f1b      	lsrs	r3, r3, #28
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800254a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800254e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002552:	fbb2 f3f3 	udiv	r3, r2, r3
 8002556:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800255a:	e003      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_RCC_GetSysClockFreq+0x45c>)
 800255e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002562:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002564:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002568:	4618      	mov	r0, r3
 800256a:	37b8      	adds	r7, #184	; 0xb8
 800256c:	46bd      	mov	sp, r7
 800256e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800
 8002578:	00f42400 	.word	0x00f42400

0800257c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e28d      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 8083 	beq.w	80026a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800259c:	4b94      	ldr	r3, [pc, #592]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 030c 	and.w	r3, r3, #12
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d019      	beq.n	80025dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80025a8:	4b91      	ldr	r3, [pc, #580]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d106      	bne.n	80025c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80025b4:	4b8e      	ldr	r3, [pc, #568]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025c0:	d00c      	beq.n	80025dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c2:	4b8b      	ldr	r3, [pc, #556]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80025ca:	2b0c      	cmp	r3, #12
 80025cc:	d112      	bne.n	80025f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ce:	4b88      	ldr	r3, [pc, #544]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025da:	d10b      	bne.n	80025f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	4b84      	ldr	r3, [pc, #528]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d05b      	beq.n	80026a0 <HAL_RCC_OscConfig+0x124>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d157      	bne.n	80026a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e25a      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fc:	d106      	bne.n	800260c <HAL_RCC_OscConfig+0x90>
 80025fe:	4b7c      	ldr	r3, [pc, #496]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a7b      	ldr	r2, [pc, #492]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	e01d      	b.n	8002648 <HAL_RCC_OscConfig+0xcc>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002614:	d10c      	bne.n	8002630 <HAL_RCC_OscConfig+0xb4>
 8002616:	4b76      	ldr	r3, [pc, #472]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a75      	ldr	r2, [pc, #468]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 800261c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	4b73      	ldr	r3, [pc, #460]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a72      	ldr	r2, [pc, #456]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	e00b      	b.n	8002648 <HAL_RCC_OscConfig+0xcc>
 8002630:	4b6f      	ldr	r3, [pc, #444]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a6e      	ldr	r2, [pc, #440]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	4b6c      	ldr	r3, [pc, #432]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a6b      	ldr	r2, [pc, #428]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d013      	beq.n	8002678 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7fe fd3a 	bl	80010c8 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002658:	f7fe fd36 	bl	80010c8 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b64      	cmp	r3, #100	; 0x64
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e21f      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266a:	4b61      	ldr	r3, [pc, #388]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0xdc>
 8002676:	e014      	b.n	80026a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002678:	f7fe fd26 	bl	80010c8 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002680:	f7fe fd22 	bl	80010c8 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	; 0x64
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e20b      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002692:	4b57      	ldr	r3, [pc, #348]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x104>
 800269e:	e000      	b.n	80026a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d06f      	beq.n	800278e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80026ae:	4b50      	ldr	r3, [pc, #320]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d017      	beq.n	80026ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026ba:	4b4d      	ldr	r3, [pc, #308]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026c6:	4b4a      	ldr	r3, [pc, #296]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00b      	beq.n	80026ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026d2:	4b47      	ldr	r3, [pc, #284]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026da:	2b0c      	cmp	r3, #12
 80026dc:	d11c      	bne.n	8002718 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026de:	4b44      	ldr	r3, [pc, #272]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d116      	bne.n	8002718 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ea:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d005      	beq.n	8002702 <HAL_RCC_OscConfig+0x186>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d001      	beq.n	8002702 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e1d3      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002702:	4b3b      	ldr	r3, [pc, #236]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4937      	ldr	r1, [pc, #220]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002712:	4313      	orrs	r3, r2
 8002714:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002716:	e03a      	b.n	800278e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d020      	beq.n	8002762 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002720:	4b34      	ldr	r3, [pc, #208]	; (80027f4 <HAL_RCC_OscConfig+0x278>)
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7fe fccf 	bl	80010c8 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800272e:	f7fe fccb 	bl	80010c8 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e1b4      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002740:	4b2b      	ldr	r3, [pc, #172]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0f0      	beq.n	800272e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274c:	4b28      	ldr	r3, [pc, #160]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4925      	ldr	r1, [pc, #148]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 800275c:	4313      	orrs	r3, r2
 800275e:	600b      	str	r3, [r1, #0]
 8002760:	e015      	b.n	800278e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002762:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <HAL_RCC_OscConfig+0x278>)
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7fe fcae 	bl	80010c8 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002770:	f7fe fcaa 	bl	80010c8 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e193      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002782:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d036      	beq.n	8002808 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d016      	beq.n	80027d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <HAL_RCC_OscConfig+0x27c>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7fe fc8e 	bl	80010c8 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027b0:	f7fe fc8a 	bl	80010c8 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e173      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c2:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 80027c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x234>
 80027ce:	e01b      	b.n	8002808 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d0:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_RCC_OscConfig+0x27c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d6:	f7fe fc77 	bl	80010c8 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027dc:	e00e      	b.n	80027fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027de:	f7fe fc73 	bl	80010c8 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d907      	bls.n	80027fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e15c      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
 80027f0:	40023800 	.word	0x40023800
 80027f4:	42470000 	.word	0x42470000
 80027f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fc:	4b8a      	ldr	r3, [pc, #552]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80027fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1ea      	bne.n	80027de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 8097 	beq.w	8002944 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281a:	4b83      	ldr	r3, [pc, #524]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10f      	bne.n	8002846 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	4b7f      	ldr	r3, [pc, #508]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	4a7e      	ldr	r2, [pc, #504]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 8002830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002834:	6413      	str	r3, [r2, #64]	; 0x40
 8002836:	4b7c      	ldr	r3, [pc, #496]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002842:	2301      	movs	r3, #1
 8002844:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002846:	4b79      	ldr	r3, [pc, #484]	; (8002a2c <HAL_RCC_OscConfig+0x4b0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d118      	bne.n	8002884 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002852:	4b76      	ldr	r3, [pc, #472]	; (8002a2c <HAL_RCC_OscConfig+0x4b0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a75      	ldr	r2, [pc, #468]	; (8002a2c <HAL_RCC_OscConfig+0x4b0>)
 8002858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800285e:	f7fe fc33 	bl	80010c8 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002866:	f7fe fc2f 	bl	80010c8 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e118      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002878:	4b6c      	ldr	r3, [pc, #432]	; (8002a2c <HAL_RCC_OscConfig+0x4b0>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d106      	bne.n	800289a <HAL_RCC_OscConfig+0x31e>
 800288c:	4b66      	ldr	r3, [pc, #408]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	4a65      	ldr	r2, [pc, #404]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	6713      	str	r3, [r2, #112]	; 0x70
 8002898:	e01c      	b.n	80028d4 <HAL_RCC_OscConfig+0x358>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b05      	cmp	r3, #5
 80028a0:	d10c      	bne.n	80028bc <HAL_RCC_OscConfig+0x340>
 80028a2:	4b61      	ldr	r3, [pc, #388]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a6:	4a60      	ldr	r2, [pc, #384]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	6713      	str	r3, [r2, #112]	; 0x70
 80028ae:	4b5e      	ldr	r3, [pc, #376]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b2:	4a5d      	ldr	r2, [pc, #372]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ba:	e00b      	b.n	80028d4 <HAL_RCC_OscConfig+0x358>
 80028bc:	4b5a      	ldr	r3, [pc, #360]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c0:	4a59      	ldr	r2, [pc, #356]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80028c2:	f023 0301 	bic.w	r3, r3, #1
 80028c6:	6713      	str	r3, [r2, #112]	; 0x70
 80028c8:	4b57      	ldr	r3, [pc, #348]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028cc:	4a56      	ldr	r2, [pc, #344]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80028ce:	f023 0304 	bic.w	r3, r3, #4
 80028d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d015      	beq.n	8002908 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028dc:	f7fe fbf4 	bl	80010c8 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e4:	f7fe fbf0 	bl	80010c8 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e0d7      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fa:	4b4b      	ldr	r3, [pc, #300]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0ee      	beq.n	80028e4 <HAL_RCC_OscConfig+0x368>
 8002906:	e014      	b.n	8002932 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002908:	f7fe fbde 	bl	80010c8 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800290e:	e00a      	b.n	8002926 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002910:	f7fe fbda 	bl	80010c8 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	; 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e0c1      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002926:	4b40      	ldr	r3, [pc, #256]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1ee      	bne.n	8002910 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002932:	7dfb      	ldrb	r3, [r7, #23]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d105      	bne.n	8002944 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002938:	4b3b      	ldr	r3, [pc, #236]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	4a3a      	ldr	r2, [pc, #232]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 800293e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002942:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80ad 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800294e:	4b36      	ldr	r3, [pc, #216]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b08      	cmp	r3, #8
 8002958:	d060      	beq.n	8002a1c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d145      	bne.n	80029ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002962:	4b33      	ldr	r3, [pc, #204]	; (8002a30 <HAL_RCC_OscConfig+0x4b4>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002968:	f7fe fbae 	bl	80010c8 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002970:	f7fe fbaa 	bl	80010c8 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e093      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002982:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69da      	ldr	r2, [r3, #28]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	019b      	lsls	r3, r3, #6
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	085b      	lsrs	r3, r3, #1
 80029a6:	3b01      	subs	r3, #1
 80029a8:	041b      	lsls	r3, r3, #16
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	061b      	lsls	r3, r3, #24
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	071b      	lsls	r3, r3, #28
 80029ba:	491b      	ldr	r1, [pc, #108]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029c0:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <HAL_RCC_OscConfig+0x4b4>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c6:	f7fe fb7f 	bl	80010c8 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ce:	f7fe fb7b 	bl	80010c8 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e064      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e0:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x452>
 80029ec:	e05c      	b.n	8002aa8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <HAL_RCC_OscConfig+0x4b4>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe fb68 	bl	80010c8 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fc:	f7fe fb64 	bl	80010c8 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e04d      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x480>
 8002a1a:	e045      	b.n	8002aa8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e040      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40007000 	.word	0x40007000
 8002a30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a34:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <HAL_RCC_OscConfig+0x538>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d030      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d129      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d122      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a64:	4013      	ands	r3, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d119      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	085b      	lsrs	r3, r3, #1
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d10f      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d107      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800

08002ab8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e03f      	b.n	8002b4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7fe f9de 	bl	8000ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2224      	movs	r2, #36	; 0x24
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002afa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f829 	bl	8002b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695a      	ldr	r2, [r3, #20]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b58:	b0c0      	sub	sp, #256	; 0x100
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b70:	68d9      	ldr	r1, [r3, #12]
 8002b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	ea40 0301 	orr.w	r3, r0, r1
 8002b7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002bac:	f021 010c 	bic.w	r1, r1, #12
 8002bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bba:	430b      	orrs	r3, r1
 8002bbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bce:	6999      	ldr	r1, [r3, #24]
 8002bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	ea40 0301 	orr.w	r3, r0, r1
 8002bda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4b8f      	ldr	r3, [pc, #572]	; (8002e20 <UART_SetConfig+0x2cc>)
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d005      	beq.n	8002bf4 <UART_SetConfig+0xa0>
 8002be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	4b8d      	ldr	r3, [pc, #564]	; (8002e24 <UART_SetConfig+0x2d0>)
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d104      	bne.n	8002bfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bf4:	f7ff fa7e 	bl	80020f4 <HAL_RCC_GetPCLK2Freq>
 8002bf8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002bfc:	e003      	b.n	8002c06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bfe:	f7ff fa65 	bl	80020cc <HAL_RCC_GetPCLK1Freq>
 8002c02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c10:	f040 810c 	bne.w	8002e2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c26:	4622      	mov	r2, r4
 8002c28:	462b      	mov	r3, r5
 8002c2a:	1891      	adds	r1, r2, r2
 8002c2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c2e:	415b      	adcs	r3, r3
 8002c30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c36:	4621      	mov	r1, r4
 8002c38:	eb12 0801 	adds.w	r8, r2, r1
 8002c3c:	4629      	mov	r1, r5
 8002c3e:	eb43 0901 	adc.w	r9, r3, r1
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c56:	4690      	mov	r8, r2
 8002c58:	4699      	mov	r9, r3
 8002c5a:	4623      	mov	r3, r4
 8002c5c:	eb18 0303 	adds.w	r3, r8, r3
 8002c60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c64:	462b      	mov	r3, r5
 8002c66:	eb49 0303 	adc.w	r3, r9, r3
 8002c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c82:	460b      	mov	r3, r1
 8002c84:	18db      	adds	r3, r3, r3
 8002c86:	653b      	str	r3, [r7, #80]	; 0x50
 8002c88:	4613      	mov	r3, r2
 8002c8a:	eb42 0303 	adc.w	r3, r2, r3
 8002c8e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c98:	f7fd fab4 	bl	8000204 <__aeabi_uldivmod>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4b61      	ldr	r3, [pc, #388]	; (8002e28 <UART_SetConfig+0x2d4>)
 8002ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	011c      	lsls	r4, r3, #4
 8002caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cb4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002cb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002cbc:	4642      	mov	r2, r8
 8002cbe:	464b      	mov	r3, r9
 8002cc0:	1891      	adds	r1, r2, r2
 8002cc2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002cc4:	415b      	adcs	r3, r3
 8002cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ccc:	4641      	mov	r1, r8
 8002cce:	eb12 0a01 	adds.w	sl, r2, r1
 8002cd2:	4649      	mov	r1, r9
 8002cd4:	eb43 0b01 	adc.w	fp, r3, r1
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ce4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ce8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cec:	4692      	mov	sl, r2
 8002cee:	469b      	mov	fp, r3
 8002cf0:	4643      	mov	r3, r8
 8002cf2:	eb1a 0303 	adds.w	r3, sl, r3
 8002cf6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cfa:	464b      	mov	r3, r9
 8002cfc:	eb4b 0303 	adc.w	r3, fp, r3
 8002d00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	18db      	adds	r3, r3, r3
 8002d1c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d1e:	4613      	mov	r3, r2
 8002d20:	eb42 0303 	adc.w	r3, r2, r3
 8002d24:	647b      	str	r3, [r7, #68]	; 0x44
 8002d26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d2e:	f7fd fa69 	bl	8000204 <__aeabi_uldivmod>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4611      	mov	r1, r2
 8002d38:	4b3b      	ldr	r3, [pc, #236]	; (8002e28 <UART_SetConfig+0x2d4>)
 8002d3a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	2264      	movs	r2, #100	; 0x64
 8002d42:	fb02 f303 	mul.w	r3, r2, r3
 8002d46:	1acb      	subs	r3, r1, r3
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d4e:	4b36      	ldr	r3, [pc, #216]	; (8002e28 <UART_SetConfig+0x2d4>)
 8002d50:	fba3 2302 	umull	r2, r3, r3, r2
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d5c:	441c      	add	r4, r3
 8002d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d62:	2200      	movs	r2, #0
 8002d64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d70:	4642      	mov	r2, r8
 8002d72:	464b      	mov	r3, r9
 8002d74:	1891      	adds	r1, r2, r2
 8002d76:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d78:	415b      	adcs	r3, r3
 8002d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d80:	4641      	mov	r1, r8
 8002d82:	1851      	adds	r1, r2, r1
 8002d84:	6339      	str	r1, [r7, #48]	; 0x30
 8002d86:	4649      	mov	r1, r9
 8002d88:	414b      	adcs	r3, r1
 8002d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d98:	4659      	mov	r1, fp
 8002d9a:	00cb      	lsls	r3, r1, #3
 8002d9c:	4651      	mov	r1, sl
 8002d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002da2:	4651      	mov	r1, sl
 8002da4:	00ca      	lsls	r2, r1, #3
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	4603      	mov	r3, r0
 8002dac:	4642      	mov	r2, r8
 8002dae:	189b      	adds	r3, r3, r2
 8002db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002db4:	464b      	mov	r3, r9
 8002db6:	460a      	mov	r2, r1
 8002db8:	eb42 0303 	adc.w	r3, r2, r3
 8002dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002dcc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002dd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	18db      	adds	r3, r3, r3
 8002dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dda:	4613      	mov	r3, r2
 8002ddc:	eb42 0303 	adc.w	r3, r2, r3
 8002de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002de2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002de6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002dea:	f7fd fa0b 	bl	8000204 <__aeabi_uldivmod>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <UART_SetConfig+0x2d4>)
 8002df4:	fba3 1302 	umull	r1, r3, r3, r2
 8002df8:	095b      	lsrs	r3, r3, #5
 8002dfa:	2164      	movs	r1, #100	; 0x64
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	3332      	adds	r3, #50	; 0x32
 8002e06:	4a08      	ldr	r2, [pc, #32]	; (8002e28 <UART_SetConfig+0x2d4>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	f003 0207 	and.w	r2, r3, #7
 8002e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4422      	add	r2, r4
 8002e1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e1c:	e105      	b.n	800302a <UART_SetConfig+0x4d6>
 8002e1e:	bf00      	nop
 8002e20:	40011000 	.word	0x40011000
 8002e24:	40011400 	.word	0x40011400
 8002e28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e30:	2200      	movs	r2, #0
 8002e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e3e:	4642      	mov	r2, r8
 8002e40:	464b      	mov	r3, r9
 8002e42:	1891      	adds	r1, r2, r2
 8002e44:	6239      	str	r1, [r7, #32]
 8002e46:	415b      	adcs	r3, r3
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e4e:	4641      	mov	r1, r8
 8002e50:	1854      	adds	r4, r2, r1
 8002e52:	4649      	mov	r1, r9
 8002e54:	eb43 0501 	adc.w	r5, r3, r1
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	00eb      	lsls	r3, r5, #3
 8002e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e66:	00e2      	lsls	r2, r4, #3
 8002e68:	4614      	mov	r4, r2
 8002e6a:	461d      	mov	r5, r3
 8002e6c:	4643      	mov	r3, r8
 8002e6e:	18e3      	adds	r3, r4, r3
 8002e70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e74:	464b      	mov	r3, r9
 8002e76:	eb45 0303 	adc.w	r3, r5, r3
 8002e7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	008b      	lsls	r3, r1, #2
 8002e9e:	4621      	mov	r1, r4
 8002ea0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	008a      	lsls	r2, r1, #2
 8002ea8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002eac:	f7fd f9aa 	bl	8000204 <__aeabi_uldivmod>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4b60      	ldr	r3, [pc, #384]	; (8003038 <UART_SetConfig+0x4e4>)
 8002eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eba:	095b      	lsrs	r3, r3, #5
 8002ebc:	011c      	lsls	r4, r3, #4
 8002ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ec8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ecc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ed0:	4642      	mov	r2, r8
 8002ed2:	464b      	mov	r3, r9
 8002ed4:	1891      	adds	r1, r2, r2
 8002ed6:	61b9      	str	r1, [r7, #24]
 8002ed8:	415b      	adcs	r3, r3
 8002eda:	61fb      	str	r3, [r7, #28]
 8002edc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ee0:	4641      	mov	r1, r8
 8002ee2:	1851      	adds	r1, r2, r1
 8002ee4:	6139      	str	r1, [r7, #16]
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	414b      	adcs	r3, r1
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ef8:	4659      	mov	r1, fp
 8002efa:	00cb      	lsls	r3, r1, #3
 8002efc:	4651      	mov	r1, sl
 8002efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f02:	4651      	mov	r1, sl
 8002f04:	00ca      	lsls	r2, r1, #3
 8002f06:	4610      	mov	r0, r2
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4642      	mov	r2, r8
 8002f0e:	189b      	adds	r3, r3, r2
 8002f10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f14:	464b      	mov	r3, r9
 8002f16:	460a      	mov	r2, r1
 8002f18:	eb42 0303 	adc.w	r3, r2, r3
 8002f1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f38:	4649      	mov	r1, r9
 8002f3a:	008b      	lsls	r3, r1, #2
 8002f3c:	4641      	mov	r1, r8
 8002f3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f42:	4641      	mov	r1, r8
 8002f44:	008a      	lsls	r2, r1, #2
 8002f46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f4a:	f7fd f95b 	bl	8000204 <__aeabi_uldivmod>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4b39      	ldr	r3, [pc, #228]	; (8003038 <UART_SetConfig+0x4e4>)
 8002f54:	fba3 1302 	umull	r1, r3, r3, r2
 8002f58:	095b      	lsrs	r3, r3, #5
 8002f5a:	2164      	movs	r1, #100	; 0x64
 8002f5c:	fb01 f303 	mul.w	r3, r1, r3
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	3332      	adds	r3, #50	; 0x32
 8002f66:	4a34      	ldr	r2, [pc, #208]	; (8003038 <UART_SetConfig+0x4e4>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	095b      	lsrs	r3, r3, #5
 8002f6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f72:	441c      	add	r4, r3
 8002f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f78:	2200      	movs	r2, #0
 8002f7a:	673b      	str	r3, [r7, #112]	; 0x70
 8002f7c:	677a      	str	r2, [r7, #116]	; 0x74
 8002f7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f82:	4642      	mov	r2, r8
 8002f84:	464b      	mov	r3, r9
 8002f86:	1891      	adds	r1, r2, r2
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	415b      	adcs	r3, r3
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f92:	4641      	mov	r1, r8
 8002f94:	1851      	adds	r1, r2, r1
 8002f96:	6039      	str	r1, [r7, #0]
 8002f98:	4649      	mov	r1, r9
 8002f9a:	414b      	adcs	r3, r1
 8002f9c:	607b      	str	r3, [r7, #4]
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002faa:	4659      	mov	r1, fp
 8002fac:	00cb      	lsls	r3, r1, #3
 8002fae:	4651      	mov	r1, sl
 8002fb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fb4:	4651      	mov	r1, sl
 8002fb6:	00ca      	lsls	r2, r1, #3
 8002fb8:	4610      	mov	r0, r2
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	4642      	mov	r2, r8
 8002fc0:	189b      	adds	r3, r3, r2
 8002fc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fc4:	464b      	mov	r3, r9
 8002fc6:	460a      	mov	r2, r1
 8002fc8:	eb42 0303 	adc.w	r3, r2, r3
 8002fcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	663b      	str	r3, [r7, #96]	; 0x60
 8002fd8:	667a      	str	r2, [r7, #100]	; 0x64
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002fe6:	4649      	mov	r1, r9
 8002fe8:	008b      	lsls	r3, r1, #2
 8002fea:	4641      	mov	r1, r8
 8002fec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ff0:	4641      	mov	r1, r8
 8002ff2:	008a      	lsls	r2, r1, #2
 8002ff4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ff8:	f7fd f904 	bl	8000204 <__aeabi_uldivmod>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <UART_SetConfig+0x4e4>)
 8003002:	fba3 1302 	umull	r1, r3, r3, r2
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	2164      	movs	r1, #100	; 0x64
 800300a:	fb01 f303 	mul.w	r3, r1, r3
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	3332      	adds	r3, #50	; 0x32
 8003014:	4a08      	ldr	r2, [pc, #32]	; (8003038 <UART_SetConfig+0x4e4>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	f003 020f 	and.w	r2, r3, #15
 8003020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4422      	add	r2, r4
 8003028:	609a      	str	r2, [r3, #8]
}
 800302a:	bf00      	nop
 800302c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003030:	46bd      	mov	sp, r7
 8003032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003036:	bf00      	nop
 8003038:	51eb851f 	.word	0x51eb851f

0800303c <__libc_init_array>:
 800303c:	b570      	push	{r4, r5, r6, lr}
 800303e:	4d0d      	ldr	r5, [pc, #52]	; (8003074 <__libc_init_array+0x38>)
 8003040:	4c0d      	ldr	r4, [pc, #52]	; (8003078 <__libc_init_array+0x3c>)
 8003042:	1b64      	subs	r4, r4, r5
 8003044:	10a4      	asrs	r4, r4, #2
 8003046:	2600      	movs	r6, #0
 8003048:	42a6      	cmp	r6, r4
 800304a:	d109      	bne.n	8003060 <__libc_init_array+0x24>
 800304c:	4d0b      	ldr	r5, [pc, #44]	; (800307c <__libc_init_array+0x40>)
 800304e:	4c0c      	ldr	r4, [pc, #48]	; (8003080 <__libc_init_array+0x44>)
 8003050:	f000 f87c 	bl	800314c <_init>
 8003054:	1b64      	subs	r4, r4, r5
 8003056:	10a4      	asrs	r4, r4, #2
 8003058:	2600      	movs	r6, #0
 800305a:	42a6      	cmp	r6, r4
 800305c:	d105      	bne.n	800306a <__libc_init_array+0x2e>
 800305e:	bd70      	pop	{r4, r5, r6, pc}
 8003060:	f855 3b04 	ldr.w	r3, [r5], #4
 8003064:	4798      	blx	r3
 8003066:	3601      	adds	r6, #1
 8003068:	e7ee      	b.n	8003048 <__libc_init_array+0xc>
 800306a:	f855 3b04 	ldr.w	r3, [r5], #4
 800306e:	4798      	blx	r3
 8003070:	3601      	adds	r6, #1
 8003072:	e7f2      	b.n	800305a <__libc_init_array+0x1e>
 8003074:	080031f0 	.word	0x080031f0
 8003078:	080031f0 	.word	0x080031f0
 800307c:	080031f0 	.word	0x080031f0
 8003080:	080031f4 	.word	0x080031f4

08003084 <__itoa>:
 8003084:	1e93      	subs	r3, r2, #2
 8003086:	2b22      	cmp	r3, #34	; 0x22
 8003088:	b510      	push	{r4, lr}
 800308a:	460c      	mov	r4, r1
 800308c:	d904      	bls.n	8003098 <__itoa+0x14>
 800308e:	2300      	movs	r3, #0
 8003090:	700b      	strb	r3, [r1, #0]
 8003092:	461c      	mov	r4, r3
 8003094:	4620      	mov	r0, r4
 8003096:	bd10      	pop	{r4, pc}
 8003098:	2a0a      	cmp	r2, #10
 800309a:	d109      	bne.n	80030b0 <__itoa+0x2c>
 800309c:	2800      	cmp	r0, #0
 800309e:	da07      	bge.n	80030b0 <__itoa+0x2c>
 80030a0:	232d      	movs	r3, #45	; 0x2d
 80030a2:	700b      	strb	r3, [r1, #0]
 80030a4:	4240      	negs	r0, r0
 80030a6:	2101      	movs	r1, #1
 80030a8:	4421      	add	r1, r4
 80030aa:	f000 f80d 	bl	80030c8 <__utoa>
 80030ae:	e7f1      	b.n	8003094 <__itoa+0x10>
 80030b0:	2100      	movs	r1, #0
 80030b2:	e7f9      	b.n	80030a8 <__itoa+0x24>

080030b4 <itoa>:
 80030b4:	f7ff bfe6 	b.w	8003084 <__itoa>

080030b8 <memset>:
 80030b8:	4402      	add	r2, r0
 80030ba:	4603      	mov	r3, r0
 80030bc:	4293      	cmp	r3, r2
 80030be:	d100      	bne.n	80030c2 <memset+0xa>
 80030c0:	4770      	bx	lr
 80030c2:	f803 1b01 	strb.w	r1, [r3], #1
 80030c6:	e7f9      	b.n	80030bc <memset+0x4>

080030c8 <__utoa>:
 80030c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ca:	4c1f      	ldr	r4, [pc, #124]	; (8003148 <__utoa+0x80>)
 80030cc:	b08b      	sub	sp, #44	; 0x2c
 80030ce:	4605      	mov	r5, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	466e      	mov	r6, sp
 80030d4:	f104 0c20 	add.w	ip, r4, #32
 80030d8:	6820      	ldr	r0, [r4, #0]
 80030da:	6861      	ldr	r1, [r4, #4]
 80030dc:	4637      	mov	r7, r6
 80030de:	c703      	stmia	r7!, {r0, r1}
 80030e0:	3408      	adds	r4, #8
 80030e2:	4564      	cmp	r4, ip
 80030e4:	463e      	mov	r6, r7
 80030e6:	d1f7      	bne.n	80030d8 <__utoa+0x10>
 80030e8:	7921      	ldrb	r1, [r4, #4]
 80030ea:	7139      	strb	r1, [r7, #4]
 80030ec:	1e91      	subs	r1, r2, #2
 80030ee:	6820      	ldr	r0, [r4, #0]
 80030f0:	6038      	str	r0, [r7, #0]
 80030f2:	2922      	cmp	r1, #34	; 0x22
 80030f4:	f04f 0100 	mov.w	r1, #0
 80030f8:	d904      	bls.n	8003104 <__utoa+0x3c>
 80030fa:	7019      	strb	r1, [r3, #0]
 80030fc:	460b      	mov	r3, r1
 80030fe:	4618      	mov	r0, r3
 8003100:	b00b      	add	sp, #44	; 0x2c
 8003102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003104:	1e58      	subs	r0, r3, #1
 8003106:	4684      	mov	ip, r0
 8003108:	fbb5 f7f2 	udiv	r7, r5, r2
 800310c:	fb02 5617 	mls	r6, r2, r7, r5
 8003110:	3628      	adds	r6, #40	; 0x28
 8003112:	446e      	add	r6, sp
 8003114:	460c      	mov	r4, r1
 8003116:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800311a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800311e:	462e      	mov	r6, r5
 8003120:	42b2      	cmp	r2, r6
 8003122:	f101 0101 	add.w	r1, r1, #1
 8003126:	463d      	mov	r5, r7
 8003128:	d9ee      	bls.n	8003108 <__utoa+0x40>
 800312a:	2200      	movs	r2, #0
 800312c:	545a      	strb	r2, [r3, r1]
 800312e:	1919      	adds	r1, r3, r4
 8003130:	1aa5      	subs	r5, r4, r2
 8003132:	42aa      	cmp	r2, r5
 8003134:	dae3      	bge.n	80030fe <__utoa+0x36>
 8003136:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800313a:	780e      	ldrb	r6, [r1, #0]
 800313c:	7006      	strb	r6, [r0, #0]
 800313e:	3201      	adds	r2, #1
 8003140:	f801 5901 	strb.w	r5, [r1], #-1
 8003144:	e7f4      	b.n	8003130 <__utoa+0x68>
 8003146:	bf00      	nop
 8003148:	080031c0 	.word	0x080031c0

0800314c <_init>:
 800314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314e:	bf00      	nop
 8003150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003152:	bc08      	pop	{r3}
 8003154:	469e      	mov	lr, r3
 8003156:	4770      	bx	lr

08003158 <_fini>:
 8003158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315a:	bf00      	nop
 800315c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315e:	bc08      	pop	{r3}
 8003160:	469e      	mov	lr, r3
 8003162:	4770      	bx	lr
